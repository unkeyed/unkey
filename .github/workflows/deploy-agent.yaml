name: Deploy Agent

on:
  release:
    types:
      - published

concurrency: deploy

jobs:

  test:
    name: Test Agent
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: unkey
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.20.0

      - name: Set up gotestfmt
        run: go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest
      - name: Install dependencies
        run: go mod download
        working-directory: apps/agent

      - name: Load Schema into MySQL
        run: mysql -h 127.0.0.1 --port 3306 -uroot unkey < ./apps/agent/pkg/database/schema.sql

      - name: Test
        run: go test -p 4 -v -json -shuffle=on --race ./... | gotestfmt
        working-directory: apps/agent
        env:
          DATABASE_DSN: root@tcp(localhost:3306)/unkey

  build:
    name: Build Agent
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get Version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Get tag
        run: echo "TAG=ghcr.io/${{ github.repository }}:${{env.VERSION}}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to image repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: apps/agent
          platforms: linux/amd64
          push: true
          tags: ${{ env.TAG }}
          build-args: VERSION=${{env.VERSION}}

  deploy_preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        run: echo "TAG=ghcr.io/${{ github.repository }}:$(git describe --tags --always)" > $GITHUB_ENV

      - name: Login to image repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Download image
        run: docker pull ${{env.TAG}}

      - name: Deploy preview
        run: flyctl --app="unkey-api-preview" deploy --image=${{ env.TAG }} --strategy=immediate
        working-directory: apps/agent
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}



  deploy_production:
    name: Deploy Production
    runs-on: ubuntu-latest
    if: "!github.event.release.prerelease"
    needs:
      - build
      - deploy_preview
    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        run: echo "TAG=ghcr.io/${{ github.repository }}:$(git describe --tags --always)" > $GITHUB_ENV

      - name: Login to image repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Download image
        run: docker pull ${{env.TAG}}



      - name: Deploy prod
        run: flyctl -c="./fly.prod.toml" deploy --image=${{ env.TAG }} --strategy=canary
        working-directory: apps/agent
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
