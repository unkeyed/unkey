name: Deploy
on:
  push:
    branches: [main]

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  api_local_test:
    name: Test API
    uses: ./.github/workflows/api_integration_local.yaml

  preview:
    environment: Preview

    runs-on: ubuntu-latest
    
    name: Preview 
    steps:
      - uses: actions/checkout@v4

      - name: Install
        uses: ./.github/actions/install

      - name: Build
        run: pnpm turbo run build --filter='./apps/api'

      - name: Deploy
        run: wrangler deploy --env=preview --var VERSION:$(git rev-parse --short HEAD)
        working-directory: apps/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  vault_local_test:
    runs-on: ubuntu-latest
    name: Test Vault
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21
      - name: Install
        run: go mod download
        working-directory: apps/vault
      - name: Build
        run: go build .
        working-directory: apps/vault
      - name: Test
        run: go test -v ./...
        working-directory: apps/vault


  vault_preview_deployment:
    environment: Preview
    needs:
      - vault_local_test

    runs-on: ubuntu-latest
    name: Deploy Vault Preview
    steps:
      - uses: actions/checkout@v4

      - name: Install and configure the Koyeb CLI
        uses: koyeb-community/install-koyeb-cli@v2
        with:
          api_token: ${{ secrets.KOYEB_TOKEN }}
      - name: Deploy
        uses: koyeb/action-git-deploy@v1
        with:
          app-name: vault-preview
          service-name: vault
          service-instance-type: micro
          service-regions: sfo
          git-builder: docker
          git-workdir: apps/vault
          git-docker-dockerfile: Dockerfile
          git-sha: ${{ github.sha }}
          service-ports: "8080:http"
          service-routes: "/:8080"
          service-checks: "8080:http:/liveness"

  semantic_cache_preview_deployment:
    environment: Preview

    runs-on: ubuntu-latest
    name: Deploy Semantic Cache Preview
    steps:
      - uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/install

      - name: Build
        run: pnpm turbo run build --filter='./apps/semantic-cache'

      - name: Deploy
        run: wrangler deploy --env=preview --var VERSION:$(git rev-parse --short HEAD)
        working-directory: apps/semantic-cache
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  api_preview_test:
    environment: Preview
    needs:
      - preview
      - vault_preview_deployment
      - api_local_test
    name: Preview Integration ${{ matrix.shard}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: ["1/4", "2/4", "3/4", "4/4"]

    steps:
      - uses: actions/checkout@v4

      - name: Install
        uses: ./.github/actions/install
      - name: Build
        run: pnpm turbo run build --filter=./apps/api

      - name: Test
        run: pnpm vitest run -c vitest.integration.ts --bail=1 --shard=${{ matrix.shard }}
        working-directory: apps/api
        env:
          UNKEY_BASE_URL: https://preview-api.unkey.dev
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

  vault_production_deployment:
    environment: Production
    needs:
      - api_preview_test

    runs-on: ubuntu-latest
    name: Deploy Vault Production
    steps:
      - uses: actions/checkout@v4


      - name: Install and configure the Koyeb CLI
        uses: koyeb-community/install-koyeb-cli@v2
        with:
          api_token: ${{ secrets.KOYEB_TOKEN }}
      - name: Deploy
        uses: koyeb/action-git-deploy@v1
        with:
          app-name: vault-production
          service-name: vault
          service-instance-type: small
          service-regions: fra,was,sin,tyo,sfo,par
          git-builder: docker
          git-workdir: apps/vault
          git-docker-dockerfile: Dockerfile
          git-sha: ${{ github.sha }}
          service-ports: "8080:http"
          service-routes: "/:8080"
          service-checks: "8080:http:/liveness"


  event_router_production_deployment:
    environment: Production
    needs:
      - api_preview_test

    runs-on: ubuntu-latest
    name: Deploy Events Production
    steps:
      - uses: actions/checkout@v4


      - name: Install and configure the Koyeb CLI
        uses: koyeb-community/install-koyeb-cli@v2
        with:
          api_token: ${{ secrets.KOYEB_TOKEN }}
      - name: Deploy
        uses: koyeb/action-git-deploy@v1
        with:
          app-name: event-router-production
          service-name: event-router
          service-instance-type: small
          service-regions: fra,sfo
          git-builder: docker
          git-workdir: apps/event-router
          git-docker-dockerfile: Dockerfile
          git-sha: ${{ github.sha }}
          service-ports: "8080:http"
          service-routes: "/:8080"
          service-checks: "8080:http:/v1/liveness"



  api_canary_deployment:
    needs:
      - api_local_test
      - api_preview_test
    environment: Canary
    runs-on: ubuntu-latest

    name: Deploy API Canary
    steps:
      - uses: actions/checkout@v4

      - name: Install
        uses: ./.github/actions/install

      - name: Build
        run: pnpm turbo run build --filter='./apps/api'

      - name: Deploy
        run: wrangler deploy --env=canary --var VERSION:$(git rev-parse --short HEAD)
        working-directory: apps/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  api_canary_test:
    environment: Canary
    needs:
      - api_canary_deployment
      - vault_production_deployment

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: ["1/4", "2/4", "3/4", "4/4"]

    name: Canary Integration ${{ matrix.shard}}

    steps:
      - uses: actions/checkout@v4

      - name: Install
        uses: ./.github/actions/install
      - name: Build
        run: pnpm turbo run build --filter=./apps/api

      - name: Test
        run: pnpm vitest run -c vitest.integration.ts --bail=1 --shard=${{ matrix.shard }}
        working-directory: apps/api
        env:
          UNKEY_BASE_URL: https://canary.unkey.dev
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

  api_canary_benchmark:
    if: ${{false}}
    environment: Canary
    needs:
      - api_canary_deployment
      - vault_production_deployment
    strategy:
      fail-fast: false
      matrix:
        region: [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ap-south-2",
            "ap-southeast-3",
            "ap-southeast-4",
            "ap-south-1",
            "ap-northeast-3",
            "ap-northeast-2",
            "ap-southeast-1",
            "ap-southeast-2", # sydney
            "ca-central-1", # Canada
            "eu-central-1", # Frankfurt
            "eu-west-2", # London
            "sa-east-1", # Sao Paulo,
          ]
    name: Artillery in ${{ matrix.region }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare
        shell: bash
        run: |
          cat <<EOF > .keys.csv
          ${{ secrets.ARTILLERY_KEYS_CSV }}
          EOF
        working-directory: tools/artillery

      - name: Run
        run: npx artillery@latest run-lambda --record --key=${{ secrets.ARTILLERY_CLOUD_KEY }} --region ${{ matrix.region }} --count=5 --target=https://canary.unkey.dev  ./keys.verifyKey.yaml
        working-directory: tools/artillery
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  api_production_deployment:
    needs:
      - api_canary_test
      # - api_canary_benchmark
    environment: Production

    runs-on: ubuntu-latest
    name: Deploy API Production
    steps:
      - uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/install

      - name: Build
        run: pnpm turbo run build --filter='./apps/api'

      - name: Deploy
        run: wrangler deploy --env=production --var VERSION:$(git rev-parse --short HEAD)
        working-directory: apps/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}


  semantic_cache_production_deployment:
    needs:
      - semantic_cache_preview_deployment
    environment: Production

    runs-on: ubuntu-latest
    name: Deploy Semantic Cache Production
    steps:
      - uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/install

      - name: Build
        run: pnpm turbo run build --filter='./apps/semantic-cache'

      - name: Deploy
        run: wrangler deploy --env=production --var VERSION:$(git rev-parse --short HEAD)
        working-directory: apps/semantic-cache
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}



  mintlify_deployment:
    needs:
      - api_production_deployment

    runs-on: ubuntu-latest
    name: Deploy docs
    steps:
      - uses: actions/checkout@v4

      - name: Redeploy
        run: |
          curl --request POST \
          --url https://api.mintlify.com/v1/project/update/648b83e0e20b94f5a3e41a70 \
          --header 'Authorization: Bearer ${{secrets.MINTLIFY_API_KEY}}'


  logdrain_production_deployment:
    needs:
      - api_production_deployment
      - semantic_cache_production_deployment
    environment: Production
    runs-on: ubuntu-latest
    name: Deploy Logdrain Production
    steps:
      - uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/install

      - name: Build
        run: pnpm turbo run build --filter='./apps/logdrain'

      - name: Deploy
        run: wrangler deploy
        working-directory: apps/logdrain
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  trigger_production_deployment:
    uses: ./.github/workflows/deploy_trigger.yaml

  deploy-enterprise-worker:
    needs: api_production_deployment
    uses: ./.github/workflows/deploy_enterprise_workers.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
