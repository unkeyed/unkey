name: CI

on:
  pull_request:
    branches: [main]

concurrency: pr-${{ github.event.number }}

jobs:



  docs:
    name: Check Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check for broken links
        run: npx mintlify@latest broken-links
        working-directory: apps/docs


  test_api_worker:
    name: Unit Test API
    runs-on: ubuntu-latest
    services:
         mysql:
           image: mysql:latest
           env:
             MYSQL_ROOT_PASSWORD: root
             MYSQL_DATABASE: unkey
             MYSQL_USER: unkey
             MYSQL_PASSWORD: password
           ports:
             - 3306:3306
           options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install
          npm i -g bun

      - name: Load Schema into MySQL
        run: pnpm drizzle-kit push:mysql
        working-directory: internal/db
        env:
          DRIZZLE_DATABASE_URL: 'mysql://unkey:password@localhost:3306/unkey'


      - name: Test
        run: bun test src/routes --coverage --timeout 10000 --rerun-each 3
        working-directory: apps/api
        env:
          DATABASE_HOST: localhost
          DATABASE_USERNAME: unkey
          DATABASE_PASSWORD: password



  lint:

    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3


      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Format
        run: pnpm biome ci .

  test_nuxt:

    name: Test Nuxt
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: ðŸ“¦ Install dependencies
        run: pnpm install

      - name: ðŸ§ª Test project
        run: pnpm turbo test --filter=@unkey/nuxt
        env:
          NUXT_TEST_KEY: ${{secrets.NUXT_TEST_KEY}}

  # tinybird:
  #
  #   name: Tinybird CI
  #   concurrency: tinybird
  #   uses: tinybirdco/ci/.github/workflows/ci.yml@v2.4.0
  #   with:
  #     data_project_dir: ./internal/tinybird
  #   secrets:
  #     tb_admin_token: ${{ secrets.TINYBIRD_ADMIN_TOKEN }} # set admin token associated to an account in GitHub secrets
  #     tb_host: https://api.tinybird.co

  build_packages:

    strategy:
      matrix:
        package: ["@unkey/api", "@unkey/nextjs", "@unkey/hono", "@unkey/nuxt"]
    name: Build ${{matrix.package}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3


      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm install

      - name: Build packages
        run: pnpm turbo run build --filter=${{matrix.package}}
