name: CI

on:
  pull_request_target:

concurrency: pr-${{ github.event.number }} # otherwise planetscale will fail, because it can't create a branch with the same name

env:
  DATABASE_BRANCH_NAME: pr-${{ github.event.number }}-${{ github.actorÂ }}
  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}

jobs:

  authorize:
    environment:
      ${{ github.event_name == 'pull_request_target' &&
      github.event.pull_request.head.repo.full_name != github.repository &&
      'external' || 'internal' }}
    runs-on: ubuntu-latest
    steps:
      - run: true

  test_api_worker:
    needs: authorize
    name: Unit Test API
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}


      - name: Setup pscale
        uses: planetscale/setup-pscale-action@v1
        with:
          version: latest

      - name: Create a branch
        run: pscale branch create unkey $DATABASE_BRANCH_NAME --from=main --org=unkey --wait


      - name: Create a password
        id: database_password
        run: |
          res=$(pscale password create unkey $DATABASE_BRANCH_NAME password-name --role=admin --ttl=900 --debug --org=unkey --format=json)

          # Extract secrets
          database_host=$(echo $res | jq -r '.access_host_url')
          database_username=$(echo $res | jq -r '.username')
          database_password=$(echo $res | jq -r '.plain_text')

          # Mask secrets
          echo "::add-mask::$database_host"
          echo "::add-mask::$database_username"
          echo "::add-mask::$database_password"

          # Set outputs
          echo "DATABASE_HOST=$database_host" >> "$GITHUB_ENV"
          echo "DATABASE_USERNAME=$database_username" >> "$GITHUB_ENV"
          echo "DATABASE_PASSWORD=$database_password" >> "$GITHUB_ENV"


      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: |
          pnpm install
          npm i -g bun

      - name: Load Schema into MySQL
        run: pnpm drizzle-kit push:mysql
        working-directory: internal/db
        env:
          DRIZZLE_DATABASE_URL: 'mysql://${{env.DATABASE_USERNAME }}:${{env.DATABASE_PASSWORD }}@${{env.DATABASE_HOST}}/unkey?ssl={"rejectUnauthorized":true}'


      - name: Test
        run: bun test src/routes --coverage --timeout 10000 --rerun-each 3
        working-directory: apps/api
      - name: Delete planetscale branch
        if: always()
        run: |
          pscale branch delete unkey $DATABASE_BRANCH_NAME --force --org=unkey


  lint:
    needs: authorize
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Format
        run: pnpm biome ci .

  test_nuxt:
    needs: authorize
    name: Test Nuxt
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: ðŸ“¦ Install dependencies
        run: pnpm install

      - name: ðŸ§ª Test project
        run: pnpm turbo test --filter=@unkey/nuxt
        env:
          NUXT_TEST_KEY: ${{secrets.NUXT_TEST_KEY}}

  tinybird:
    needs: authorize
    name: Tinybird CI
    concurrency: tinybird
    uses: tinybirdco/ci/.github/workflows/ci.yml@v2.4.0
    with:
      data_project_dir: ./internal/tinybird
    secrets:
      tb_admin_token: ${{ secrets.TINYBIRD_ADMIN_TOKEN }} # set admin token associated to an account in GitHub secrets
      tb_host: https://api.tinybird.co

  build_packages:
    needs: authorize
    strategy:
      matrix:
        package: ["@unkey/api", "@unkey/nextjs", "@unkey/hono", "@unkey/nuxt"]
    name: Build ${{matrix.package}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm install

      - name: Build packages
        run: pnpm turbo run build --filter=${{matrix.package}}
