// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file metald/v1/vm.proto (package metald.v1, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { NetworkStats } from "./network_pb";
import { file_metald_v1_network } from "./network_pb";
import type { StorageDevice, StorageStats } from "./storage_pb";
import { file_metald_v1_storage } from "./storage_pb";

/**
 * Describes the file metald/v1/vm.proto.
 */
export const file_metald_v1_vm: GenFile =
  /*@__PURE__*/
  fileDesc(
    "ChJtZXRhbGQvdjEvdm0ucHJvdG8SCW1ldGFsZC52MSKlAgoIVm1Db25maWcSEgoKdmNwdV9jb3VudBgBIAEoDRIXCg9tZW1vcnlfc2l6ZV9taWIYAiABKAQSDAoEYm9vdBgDIAEoCRIWCg5uZXR3b3JrX2NvbmZpZxgEIAEoCRIpCgdjb25zb2xlGAUgASgLMhgubWV0YWxkLnYxLkNvbnNvbGVDb25maWcSKQoHc3RvcmFnZRgGIAEoCzIYLm1ldGFsZC52MS5TdG9yYWdlRGV2aWNlEgoKAmlkGAcgASgJEjMKCG1ldGFkYXRhGAggAygLMiEubWV0YWxkLnYxLlZtQ29uZmlnLk1ldGFkYXRhRW50cnkaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImEKDkxpc3RWbXNSZXF1ZXN0EigKDHN0YXRlX2ZpbHRlchgBIAMoDjISLm1ldGFsZC52MS5WbVN0YXRlEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJIl8KD0xpc3RWbXNSZXNwb25zZRIeCgN2bXMYASADKAsyES5tZXRhbGQudjEuVm1JbmZvEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCRITCgt0b3RhbF9jb3VudBgDIAEoBCJFCg9DcmVhdGVWbVJlcXVlc3QSDQoFdm1faWQYASABKAkSIwoGY29uZmlnGAIgASgLMhMubWV0YWxkLnYxLlZtQ29uZmlnIiYKCEVuZHBvaW50EgwKBGhvc3QYASABKAkSDAoEcG9ydBgCIAEoDSJcChBDcmVhdGVWbVJlc3BvbnNlEiEKBXN0YXRlGAEgASgOMhIubWV0YWxkLnYxLlZtU3RhdGUSJQoIZW5kcG9pbnQYAiABKAsyEy5tZXRhbGQudjEuRW5kcG9pbnQiLwoPRGVsZXRlVm1SZXF1ZXN0Eg0KBXZtX2lkGAEgASgJEg0KBWZvcmNlGAIgASgIIiMKEERlbGV0ZVZtUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCCIeCg1Cb290Vm1SZXF1ZXN0Eg0KBXZtX2lkGAEgASgJIjMKDkJvb3RWbVJlc3BvbnNlEiEKBXN0YXRlGAIgASgOMhIubWV0YWxkLnYxLlZtU3RhdGUiSgoRU2h1dGRvd25WbVJlcXVlc3QSDQoFdm1faWQYASABKAkSDQoFZm9yY2UYAiABKAgSFwoPdGltZW91dF9zZWNvbmRzGAMgASgFIjcKElNodXRkb3duVm1SZXNwb25zZRIhCgVzdGF0ZRgCIAEoDjISLm1ldGFsZC52MS5WbVN0YXRlIh8KDlBhdXNlVm1SZXF1ZXN0Eg0KBXZtX2lkGAEgASgJIjQKD1BhdXNlVm1SZXNwb25zZRIhCgVzdGF0ZRgCIAEoDjISLm1ldGFsZC52MS5WbVN0YXRlIiAKD1Jlc3VtZVZtUmVxdWVzdBINCgV2bV9pZBgBIAEoCSI1ChBSZXN1bWVWbVJlc3BvbnNlEiEKBXN0YXRlGAIgASgOMhIubWV0YWxkLnYxLlZtU3RhdGUiLwoPUmVib290Vm1SZXF1ZXN0Eg0KBXZtX2lkGAEgASgJEg0KBWZvcmNlGAIgASgIIjUKEFJlYm9vdFZtUmVzcG9uc2USIQoFc3RhdGUYAiABKA4yEi5tZXRhbGQudjEuVm1TdGF0ZSIhChBHZXRWbUluZm9SZXF1ZXN0Eg0KBXZtX2lkGAEgASgJIooCChFHZXRWbUluZm9SZXNwb25zZRINCgV2bV9pZBgBIAEoCRIjCgZjb25maWcYAiABKAsyEy5tZXRhbGQudjEuVm1Db25maWcSIQoFc3RhdGUYAyABKA4yEi5tZXRhbGQudjEuVm1TdGF0ZRIlCgdtZXRyaWNzGAQgASgLMhQubWV0YWxkLnYxLlZtTWV0cmljcxJDCgxiYWNrZW5kX2luZm8YBSADKAsyLS5tZXRhbGQudjEuR2V0Vm1JbmZvUmVzcG9uc2UuQmFja2VuZEluZm9FbnRyeRoyChBCYWNrZW5kSW5mb0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiuAEKCVZtTWV0cmljcxIZChFjcHVfdXNhZ2VfcGVyY2VudBgBIAEoARIYChBtZW1vcnlfdXNhZ2VfbWliGAIgASgEEi4KDW5ldHdvcmtfc3RhdHMYAyABKAsyFy5tZXRhbGQudjEuTmV0d29ya1N0YXRzEi4KDXN0b3JhZ2Vfc3RhdHMYBCABKAsyFy5tZXRhbGQudjEuU3RvcmFnZVN0YXRzEhYKDnVwdGltZV9zZWNvbmRzGAUgASgDItECCgZWbUluZm8SDQoFdm1faWQYASABKAkSIQoFc3RhdGUYAiABKA4yEi5tZXRhbGQudjEuVm1TdGF0ZRISCgp2Y3B1X2NvdW50GAMgASgFEhcKD21lbW9yeV9zaXplX21pYhgEIAEoBBI1ChFjcmVhdGVkX3RpbWVzdGFtcBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASNgoSbW9kaWZpZWRfdGltZXN0YW1wGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCghtZXRhZGF0YRgHIAMoCzIfLm1ldGFsZC52MS5WbUluZm8uTWV0YWRhdGFFbnRyeRIVCg1kZXBsb3ltZW50X2lkGAggASgJGi8KDU1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLIAQoJQ3B1Q29uZmlnEhIKCnZjcHVfY291bnQYASABKAUSFgoObWF4X3ZjcHVfY291bnQYAiABKAUSKAoIdG9wb2xvZ3kYAyABKAsyFi5tZXRhbGQudjEuQ3B1VG9wb2xvZ3kSNAoIZmVhdHVyZXMYBCADKAsyIi5tZXRhbGQudjEuQ3B1Q29uZmlnLkZlYXR1cmVzRW50cnkaLwoNRmVhdHVyZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlIKC0NwdVRvcG9sb2d5Eg8KB3NvY2tldHMYASABKAUSGAoQY29yZXNfcGVyX3NvY2tldBgCIAEoBRIYChB0aHJlYWRzX3Blcl9jb3JlGAMgASgFIo4BCgxNZW1vcnlDb25maWcSFwoPbWVtb3J5X3NpemVfbWliGAEgASgDEjUKB2JhY2tpbmcYAiADKAsyJC5tZXRhbGQudjEuTWVtb3J5Q29uZmlnLkJhY2tpbmdFbnRyeRouCgxCYWNraW5nRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASK9AQoKQm9vdENvbmZpZxITCgtrZXJuZWxfcGF0aBgBIAEoCRITCgtpbml0cmRfcGF0aBgCIAEoCRITCgtrZXJuZWxfYXJncxgDIAEoCRI8Cgxib290X29wdGlvbnMYBCADKAsyJi5tZXRhbGQudjEuQm9vdENvbmZpZy5Cb290T3B0aW9uc0VudHJ5GjIKEEJvb3RPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJVCg1Db25zb2xlQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSDgoGb3V0cHV0GAIgASgJEg0KBWlucHV0GAMgASgJEhQKDGNvbnNvbGVfdHlwZRgEIAEoCSp7CgdWbVN0YXRlEhgKFFZNX1NUQVRFX1VOU1BFQ0lGSUVEEAASFAoQVk1fU1RBVEVfQ1JFQVRFRBABEhQKEFZNX1NUQVRFX1JVTk5JTkcQAhITCg9WTV9TVEFURV9QQVVTRUQQAxIVChFWTV9TVEFURV9TSFVURE9XThAEQjpaOGdpdGh1Yi5jb20vdW5rZXllZC91bmtleS9nby9nZW4vcHJvdG8vbWV0YWxkL3YxO21ldGFsZHYxYgZwcm90bzM",
    [file_google_protobuf_timestamp, file_metald_v1_network, file_metald_v1_storage],
  );

/**
 * Unified VM configuration that works across different hypervisors
 *
 * @generated from message metald.v1.VmConfig
 */
export type VmConfig = Message<"metald.v1.VmConfig"> & {
  /**
   * CPU configuration
   *
   * @generated from field: uint32 vcpu_count = 1;
   */
  vcpuCount: number;

  /**
   * Memory configuration
   *
   * @generated from field: uint64 memory_size_mib = 2;
   */
  memorySizeMib: bigint;

  /**
   * Boot configuration
   *
   * @generated from field: string boot = 3;
   */
  boot: string;

  /**
   * Network configuration
   *
   * @generated from field: string network_config = 4;
   */
  networkConfig: string;

  /**
   * Console configuration
   *
   * @generated from field: metald.v1.ConsoleConfig console = 5;
   */
  console?: ConsoleConfig;

  /**
   * Storage configuration
   *
   * @generated from field: metald.v1.StorageDevice storage = 6;
   */
  storage?: StorageDevice;

  /**
   * VM Identifier
   *
   * @generated from field: string id = 7;
   */
  id: string;

  /**
   * Metadata and labels
   *
   * @generated from field: map<string, string> metadata = 8;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message metald.v1.VmConfig.
 * Use `create(VmConfigSchema)` to create a new message.
 */
export const VmConfigSchema: GenMessage<VmConfig> = /*@__PURE__*/ messageDesc(file_metald_v1_vm, 0);

/**
 * @generated from message metald.v1.ListVmsRequest
 */
export type ListVmsRequest = Message<"metald.v1.ListVmsRequest"> & {
  /**
   * Optional filter by state
   *
   * @generated from field: repeated metald.v1.VmState state_filter = 1;
   */
  stateFilter: VmState[];

  /**
   * Pagination
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message metald.v1.ListVmsRequest.
 * Use `create(ListVmsRequestSchema)` to create a new message.
 */
export const ListVmsRequestSchema: GenMessage<ListVmsRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 1);

/**
 * @generated from message metald.v1.ListVmsResponse
 */
export type ListVmsResponse = Message<"metald.v1.ListVmsResponse"> & {
  /**
   * @generated from field: repeated metald.v1.VmInfo vms = 1;
   */
  vms: VmInfo[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * @generated from field: uint64 total_count = 3;
   */
  totalCount: bigint;
};

/**
 * Describes the message metald.v1.ListVmsResponse.
 * Use `create(ListVmsResponseSchema)` to create a new message.
 */
export const ListVmsResponseSchema: GenMessage<ListVmsResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 2);

/**
 * Request/Response messages
 *
 * @generated from message metald.v1.CreateVmRequest
 */
export type CreateVmRequest = Message<"metald.v1.CreateVmRequest"> & {
  /**
   * Generated unique identifier for the VM
   *
   * @generated from field: string vm_id = 1;
   */
  vmId: string;

  /**
   * VM configuration
   *
   * @generated from field: metald.v1.VmConfig config = 2;
   */
  config?: VmConfig;
};

/**
 * Describes the message metald.v1.CreateVmRequest.
 * Use `create(CreateVmRequestSchema)` to create a new message.
 */
export const CreateVmRequestSchema: GenMessage<CreateVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 3);

/**
 * @generated from message metald.v1.Endpoint
 */
export type Endpoint = Message<"metald.v1.Endpoint"> & {
  /**
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * @generated from field: uint32 port = 2;
   */
  port: number;
};

/**
 * Describes the message metald.v1.Endpoint.
 * Use `create(EndpointSchema)` to create a new message.
 */
export const EndpointSchema: GenMessage<Endpoint> = /*@__PURE__*/ messageDesc(file_metald_v1_vm, 4);

/**
 * @generated from message metald.v1.CreateVmResponse
 */
export type CreateVmResponse = Message<"metald.v1.CreateVmResponse"> & {
  /**
   * Current VM state after creation
   *
   * @generated from field: metald.v1.VmState state = 1;
   */
  state: VmState;

  /**
   * Endpoint is the host:port pair
   *
   * @generated from field: metald.v1.Endpoint endpoint = 2;
   */
  endpoint?: Endpoint;
};

/**
 * Describes the message metald.v1.CreateVmResponse.
 * Use `create(CreateVmResponseSchema)` to create a new message.
 */
export const CreateVmResponseSchema: GenMessage<CreateVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 5);

/**
 * @generated from message metald.v1.DeleteVmRequest
 */
export type DeleteVmRequest = Message<"metald.v1.DeleteVmRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;

  /**
   * Whether to force deletion even if VM is running
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message metald.v1.DeleteVmRequest.
 * Use `create(DeleteVmRequestSchema)` to create a new message.
 */
export const DeleteVmRequestSchema: GenMessage<DeleteVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 6);

/**
 * @generated from message metald.v1.DeleteVmResponse
 */
export type DeleteVmResponse = Message<"metald.v1.DeleteVmResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message metald.v1.DeleteVmResponse.
 * Use `create(DeleteVmResponseSchema)` to create a new message.
 */
export const DeleteVmResponseSchema: GenMessage<DeleteVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 7);

/**
 * @generated from message metald.v1.BootVmRequest
 */
export type BootVmRequest = Message<"metald.v1.BootVmRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;
};

/**
 * Describes the message metald.v1.BootVmRequest.
 * Use `create(BootVmRequestSchema)` to create a new message.
 */
export const BootVmRequestSchema: GenMessage<BootVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 8);

/**
 * @generated from message metald.v1.BootVmResponse
 */
export type BootVmResponse = Message<"metald.v1.BootVmResponse"> & {
  /**
   * @generated from field: metald.v1.VmState state = 2;
   */
  state: VmState;
};

/**
 * Describes the message metald.v1.BootVmResponse.
 * Use `create(BootVmResponseSchema)` to create a new message.
 */
export const BootVmResponseSchema: GenMessage<BootVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 9);

/**
 * @generated from message metald.v1.ShutdownVmRequest
 */
export type ShutdownVmRequest = Message<"metald.v1.ShutdownVmRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;

  /**
   * Whether to force shutdown (vs graceful)
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;

  /**
   * Timeout for graceful shutdown (seconds)
   *
   * @generated from field: int32 timeout_seconds = 3;
   */
  timeoutSeconds: number;
};

/**
 * Describes the message metald.v1.ShutdownVmRequest.
 * Use `create(ShutdownVmRequestSchema)` to create a new message.
 */
export const ShutdownVmRequestSchema: GenMessage<ShutdownVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 10);

/**
 * @generated from message metald.v1.ShutdownVmResponse
 */
export type ShutdownVmResponse = Message<"metald.v1.ShutdownVmResponse"> & {
  /**
   * @generated from field: metald.v1.VmState state = 2;
   */
  state: VmState;
};

/**
 * Describes the message metald.v1.ShutdownVmResponse.
 * Use `create(ShutdownVmResponseSchema)` to create a new message.
 */
export const ShutdownVmResponseSchema: GenMessage<ShutdownVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 11);

/**
 * @generated from message metald.v1.PauseVmRequest
 */
export type PauseVmRequest = Message<"metald.v1.PauseVmRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;
};

/**
 * Describes the message metald.v1.PauseVmRequest.
 * Use `create(PauseVmRequestSchema)` to create a new message.
 */
export const PauseVmRequestSchema: GenMessage<PauseVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 12);

/**
 * @generated from message metald.v1.PauseVmResponse
 */
export type PauseVmResponse = Message<"metald.v1.PauseVmResponse"> & {
  /**
   * @generated from field: metald.v1.VmState state = 2;
   */
  state: VmState;
};

/**
 * Describes the message metald.v1.PauseVmResponse.
 * Use `create(PauseVmResponseSchema)` to create a new message.
 */
export const PauseVmResponseSchema: GenMessage<PauseVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 13);

/**
 * @generated from message metald.v1.ResumeVmRequest
 */
export type ResumeVmRequest = Message<"metald.v1.ResumeVmRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;
};

/**
 * Describes the message metald.v1.ResumeVmRequest.
 * Use `create(ResumeVmRequestSchema)` to create a new message.
 */
export const ResumeVmRequestSchema: GenMessage<ResumeVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 14);

/**
 * @generated from message metald.v1.ResumeVmResponse
 */
export type ResumeVmResponse = Message<"metald.v1.ResumeVmResponse"> & {
  /**
   * @generated from field: metald.v1.VmState state = 2;
   */
  state: VmState;
};

/**
 * Describes the message metald.v1.ResumeVmResponse.
 * Use `create(ResumeVmResponseSchema)` to create a new message.
 */
export const ResumeVmResponseSchema: GenMessage<ResumeVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 15);

/**
 * @generated from message metald.v1.RebootVmRequest
 */
export type RebootVmRequest = Message<"metald.v1.RebootVmRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;

  /**
   * Whether to force reboot (vs graceful)
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message metald.v1.RebootVmRequest.
 * Use `create(RebootVmRequestSchema)` to create a new message.
 */
export const RebootVmRequestSchema: GenMessage<RebootVmRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 16);

/**
 * @generated from message metald.v1.RebootVmResponse
 */
export type RebootVmResponse = Message<"metald.v1.RebootVmResponse"> & {
  /**
   * @generated from field: metald.v1.VmState state = 2;
   */
  state: VmState;
};

/**
 * Describes the message metald.v1.RebootVmResponse.
 * Use `create(RebootVmResponseSchema)` to create a new message.
 */
export const RebootVmResponseSchema: GenMessage<RebootVmResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 17);

/**
 * @generated from message metald.v1.GetVmInfoRequest
 */
export type GetVmInfoRequest = Message<"metald.v1.GetVmInfoRequest"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;
};

/**
 * Describes the message metald.v1.GetVmInfoRequest.
 * Use `create(GetVmInfoRequestSchema)` to create a new message.
 */
export const GetVmInfoRequestSchema: GenMessage<GetVmInfoRequest> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 18);

/**
 * @generated from message metald.v1.GetVmInfoResponse
 */
export type GetVmInfoResponse = Message<"metald.v1.GetVmInfoResponse"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;

  /**
   * @generated from field: metald.v1.VmConfig config = 2;
   */
  config?: VmConfig;

  /**
   * @generated from field: metald.v1.VmState state = 3;
   */
  state: VmState;

  /**
   * @generated from field: metald.v1.VmMetrics metrics = 4;
   */
  metrics?: VmMetrics;

  /**
   * Backend-specific information
   *
   * @generated from field: map<string, string> backend_info = 5;
   */
  backendInfo: { [key: string]: string };
};

/**
 * Describes the message metald.v1.GetVmInfoResponse.
 * Use `create(GetVmInfoResponseSchema)` to create a new message.
 */
export const GetVmInfoResponseSchema: GenMessage<GetVmInfoResponse> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 19);

/**
 * @generated from message metald.v1.VmMetrics
 */
export type VmMetrics = Message<"metald.v1.VmMetrics"> & {
  /**
   * CPU usage percentage (0-100)
   *
   * @generated from field: double cpu_usage_percent = 1;
   */
  cpuUsagePercent: number;

  /**
   * Memory usage in MiB
   *
   * @generated from field: uint64 memory_usage_mib = 2;
   */
  memoryUsageMib: bigint;

  /**
   * Network I/O statistics
   *
   * @generated from field: metald.v1.NetworkStats network_stats = 3;
   */
  networkStats?: NetworkStats;

  /**
   * Storage I/O statistics
   *
   * @generated from field: metald.v1.StorageStats storage_stats = 4;
   */
  storageStats?: StorageStats;

  /**
   * VM uptime in seconds
   *
   * @generated from field: int64 uptime_seconds = 5;
   */
  uptimeSeconds: bigint;
};

/**
 * Describes the message metald.v1.VmMetrics.
 * Use `create(VmMetricsSchema)` to create a new message.
 */
export const VmMetricsSchema: GenMessage<VmMetrics> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 20);

/**
 * @generated from message metald.v1.VmInfo
 */
export type VmInfo = Message<"metald.v1.VmInfo"> & {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId: string;

  /**
   * @generated from field: metald.v1.VmState state = 2;
   */
  state: VmState;

  /**
   * Basic config info (subset of full config)
   *
   * @generated from field: int32 vcpu_count = 3;
   */
  vcpuCount: number;

  /**
   * @generated from field: uint64 memory_size_mib = 4;
   */
  memorySizeMib: bigint;

  /**
   * Creation and modification timestamps
   *
   * @generated from field: google.protobuf.Timestamp created_timestamp = 5;
   */
  createdTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp modified_timestamp = 6;
   */
  modifiedTimestamp?: Timestamp;

  /**
   * Metadata
   *
   * @generated from field: map<string, string> metadata = 7;
   */
  metadata: { [key: string]: string };

  /**
   * deployment_id vm is attached to
   *
   * @generated from field: string deployment_id = 8;
   */
  deploymentId: string;
};

/**
 * Describes the message metald.v1.VmInfo.
 * Use `create(VmInfoSchema)` to create a new message.
 */
export const VmInfoSchema: GenMessage<VmInfo> = /*@__PURE__*/ messageDesc(file_metald_v1_vm, 21);

/**
 * @generated from message metald.v1.CpuConfig
 */
export type CpuConfig = Message<"metald.v1.CpuConfig"> & {
  /**
   * Number of virtual CPUs to allocate at boot
   *
   * @generated from field: int32 vcpu_count = 1;
   */
  vcpuCount: number;

  /**
   * Maximum number of virtual CPUs (for hotplug)
   *
   * @generated from field: int32 max_vcpu_count = 2;
   */
  maxVcpuCount: number;

  /**
   * CPU topology (optional)
   *
   * @generated from field: metald.v1.CpuTopology topology = 3;
   */
  topology?: CpuTopology;

  /**
   * CPU features and model (backend-specific)
   *
   * @generated from field: map<string, string> features = 4;
   */
  features: { [key: string]: string };
};

/**
 * Describes the message metald.v1.CpuConfig.
 * Use `create(CpuConfigSchema)` to create a new message.
 */
export const CpuConfigSchema: GenMessage<CpuConfig> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 22);

/**
 * @generated from message metald.v1.CpuTopology
 */
export type CpuTopology = Message<"metald.v1.CpuTopology"> & {
  /**
   * @generated from field: int32 sockets = 1;
   */
  sockets: number;

  /**
   * @generated from field: int32 cores_per_socket = 2;
   */
  coresPerSocket: number;

  /**
   * @generated from field: int32 threads_per_core = 3;
   */
  threadsPerCore: number;
};

/**
 * Describes the message metald.v1.CpuTopology.
 * Use `create(CpuTopologySchema)` to create a new message.
 */
export const CpuTopologySchema: GenMessage<CpuTopology> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 23);

/**
 * @generated from message metald.v1.MemoryConfig
 */
export type MemoryConfig = Message<"metald.v1.MemoryConfig"> & {
  /**
   * Memory size in MiB
   *
   * @generated from field: int64 memory_size_mib = 1;
   */
  memorySizeMib: bigint;

  /**
   * Memory backing options (hugepages, etc.)
   *
   * @generated from field: map<string, string> backing = 2;
   */
  backing: { [key: string]: string };
};

/**
 * Describes the message metald.v1.MemoryConfig.
 * Use `create(MemoryConfigSchema)` to create a new message.
 */
export const MemoryConfigSchema: GenMessage<MemoryConfig> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 24);

/**
 * @generated from message metald.v1.BootConfig
 */
export type BootConfig = Message<"metald.v1.BootConfig"> & {
  /**
   * Path to kernel image
   *
   * @generated from field: string kernel_path = 1;
   */
  kernelPath: string;

  /**
   * Path to initial ramdisk (optional)
   *
   * @generated from field: string initrd_path = 2;
   */
  initrdPath: string;

  /**
   * Kernel command line arguments
   *
   * @generated from field: string kernel_args = 3;
   */
  kernelArgs: string;

  /**
   * Boot order and options
   *
   * @generated from field: map<string, string> boot_options = 4;
   */
  bootOptions: { [key: string]: string };
};

/**
 * Describes the message metald.v1.BootConfig.
 * Use `create(BootConfigSchema)` to create a new message.
 */
export const BootConfigSchema: GenMessage<BootConfig> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 25);

/**
 * @generated from message metald.v1.ConsoleConfig
 */
export type ConsoleConfig = Message<"metald.v1.ConsoleConfig"> & {
  /**
   * Whether console is enabled
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Console output destination (file path, pty, etc.)
   *
   * @generated from field: string output = 2;
   */
  output: string;

  /**
   * Console input source (optional)
   *
   * @generated from field: string input = 3;
   */
  input: string;

  /**
   * Console type (serial, virtio-console, etc.)
   *
   * @generated from field: string console_type = 4;
   */
  consoleType: string;
};

/**
 * Describes the message metald.v1.ConsoleConfig.
 * Use `create(ConsoleConfigSchema)` to create a new message.
 */
export const ConsoleConfigSchema: GenMessage<ConsoleConfig> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_vm, 26);

/**
 * VM lifecycle states
 *
 * @generated from enum metald.v1.VmState
 */
export enum VmState {
  /**
   * @generated from enum value: VM_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VM_STATE_CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: VM_STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: VM_STATE_PAUSED = 3;
   */
  PAUSED = 3,

  /**
   * @generated from enum value: VM_STATE_SHUTDOWN = 4;
   */
  SHUTDOWN = 4,
}

/**
 * Describes the enum metald.v1.VmState.
 */
export const VmStateSchema: GenEnum<VmState> = /*@__PURE__*/ enumDesc(file_metald_v1_vm, 0);
