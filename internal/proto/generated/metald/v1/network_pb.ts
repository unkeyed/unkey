// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file metald/v1/network.proto (package metald.v1, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";

/**
 * Describes the file metald/v1/network.proto.
 */
export const file_metald_v1_network: GenFile =
  /*@__PURE__*/
  fileDesc(
    "ChdtZXRhbGQvdjEvbmV0d29yay5wcm90bxIJbWV0YWxkLnYxIngKDE5ldHdvcmtTdGF0cxIWCg5ieXRlc19yZWNlaXZlZBgBIAEoAxIZChFieXRlc190cmFuc21pdHRlZBgCIAEoAxIYChBwYWNrZXRzX3JlY2VpdmVkGAMgASgDEhsKE3BhY2tldHNfdHJhbnNtaXR0ZWQYBCABKAMiogMKEE5ldHdvcmtJbnRlcmZhY2USCgoCaWQYASABKAkSEwoLbWFjX2FkZHJlc3MYAiABKAkSEgoKdGFwX2RldmljZRgDIAEoCRIWCg5pbnRlcmZhY2VfdHlwZRgEIAEoCRI5CgdvcHRpb25zGAUgAygLMigubWV0YWxkLnYxLk5ldHdvcmtJbnRlcmZhY2UuT3B0aW9uc0VudHJ5EioKC2lwdjRfY29uZmlnGAYgASgLMhUubWV0YWxkLnYxLklQdjRDb25maWcSKgoLaXB2Nl9jb25maWcYByABKAsyFS5tZXRhbGQudjEuSVB2NkNvbmZpZxIkCgRtb2RlGAggASgOMhYubWV0YWxkLnYxLk5ldHdvcmtNb2RlEisKDXJ4X3JhdGVfbGltaXQYCiABKAsyFC5tZXRhbGQudjEuUmF0ZUxpbWl0EisKDXR4X3JhdGVfbGltaXQYCyABKAsyFC5tZXRhbGQudjEuUmF0ZUxpbWl0Gi4KDE9wdGlvbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImIKCklQdjRDb25maWcSDwoHYWRkcmVzcxgBIAEoCRIPCgduZXRtYXNrGAIgASgJEg8KB2dhdGV3YXkYAyABKAkSEwoLZG5zX3NlcnZlcnMYBCADKAkSDAoEZGhjcBgFIAEoCCKZAQoKSVB2NkNvbmZpZxIPCgdhZGRyZXNzGAEgASgJEhUKDXByZWZpeF9sZW5ndGgYAiABKAUSDwoHZ2F0ZXdheRgDIAEoCRITCgtkbnNfc2VydmVycxgEIAMoCRINCgVzbGFhYxgFIAEoCBIaChJwcml2YWN5X2V4dGVuc2lvbnMYBiABKAgSEgoKbGlua19sb2NhbBgHIAEoCSJCCglSYXRlTGltaXQSEQoJYmFuZHdpZHRoGAEgASgDEhMKC3JlZmlsbF90aW1lGAIgASgDEg0KBWJ1cnN0GAMgASgDKoABCgtOZXR3b3JrTW9kZRIcChhORVRXT1JLX01PREVfVU5TUEVDSUZJRUQQABIbChdORVRXT1JLX01PREVfRFVBTF9TVEFDSxABEhoKFk5FVFdPUktfTU9ERV9JUFY0X09OTFkQAhIaChZORVRXT1JLX01PREVfSVBWNl9PTkxZEANCOlo4Z2l0aHViLmNvbS91bmtleWVkL3Vua2V5L2dvL2dlbi9wcm90by9tZXRhbGQvdjE7bWV0YWxkdjFiBnByb3RvMw",
  );

/**
 * @generated from message metald.v1.NetworkStats
 */
export type NetworkStats = Message<"metald.v1.NetworkStats"> & {
  /**
   * @generated from field: int64 bytes_received = 1;
   */
  bytesReceived: bigint;

  /**
   * @generated from field: int64 bytes_transmitted = 2;
   */
  bytesTransmitted: bigint;

  /**
   * @generated from field: int64 packets_received = 3;
   */
  packetsReceived: bigint;

  /**
   * @generated from field: int64 packets_transmitted = 4;
   */
  packetsTransmitted: bigint;
};

/**
 * Describes the message metald.v1.NetworkStats.
 * Use `create(NetworkStatsSchema)` to create a new message.
 */
export const NetworkStatsSchema: GenMessage<NetworkStats> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_network, 0);

/**
 * @generated from message metald.v1.NetworkInterface
 */
export type NetworkInterface = Message<"metald.v1.NetworkInterface"> & {
  /**
   * Unique identifier for this network interface
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * MAC address (optional, will be generated if not provided)
   *
   * @generated from field: string mac_address = 2;
   */
  macAddress: string;

  /**
   * Host-side TAP device name
   *
   * @generated from field: string tap_device = 3;
   */
  tapDevice: string;

  /**
   * Network interface type (virtio-net, e1000, etc.)
   *
   * @generated from field: string interface_type = 4;
   */
  interfaceType: string;

  /**
   * Additional network options
   *
   * @generated from field: map<string, string> options = 5;
   */
  options: { [key: string]: string };

  /**
   * IPv4 configuration (optional)
   *
   * @generated from field: metald.v1.IPv4Config ipv4_config = 6;
   */
  ipv4Config?: IPv4Config;

  /**
   * IPv6 configuration (optional)
   *
   * @generated from field: metald.v1.IPv6Config ipv6_config = 7;
   */
  ipv6Config?: IPv6Config;

  /**
   * Network mode
   *
   * @generated from field: metald.v1.NetworkMode mode = 8;
   */
  mode: NetworkMode;

  /**
   * Rate limiting
   *
   * Receive rate limit
   *
   * @generated from field: metald.v1.RateLimit rx_rate_limit = 10;
   */
  rxRateLimit?: RateLimit;

  /**
   * Transmit rate limit
   *
   * @generated from field: metald.v1.RateLimit tx_rate_limit = 11;
   */
  txRateLimit?: RateLimit;
};

/**
 * Describes the message metald.v1.NetworkInterface.
 * Use `create(NetworkInterfaceSchema)` to create a new message.
 */
export const NetworkInterfaceSchema: GenMessage<NetworkInterface> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_network, 1);

/**
 * IPv4 network configuration
 *
 * @generated from message metald.v1.IPv4Config
 */
export type IPv4Config = Message<"metald.v1.IPv4Config"> & {
  /**
   * IPv4 address (e.g., "10.100.1.2")
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * Network mask (e.g., "255.255.255.0")
   *
   * @generated from field: string netmask = 2;
   */
  netmask: string;

  /**
   * Default gateway
   *
   * @generated from field: string gateway = 3;
   */
  gateway: string;

  /**
   * DNS servers
   *
   * @generated from field: repeated string dns_servers = 4;
   */
  dnsServers: string[];

  /**
   * Use DHCP instead of static config
   *
   * @generated from field: bool dhcp = 5;
   */
  dhcp: boolean;
};

/**
 * Describes the message metald.v1.IPv4Config.
 * Use `create(IPv4ConfigSchema)` to create a new message.
 */
export const IPv4ConfigSchema: GenMessage<IPv4Config> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_network, 2);

/**
 * IPv6 network configuration
 *
 * @generated from message metald.v1.IPv6Config
 */
export type IPv6Config = Message<"metald.v1.IPv6Config"> & {
  /**
   * IPv6 address (e.g., "fd00::1:2")
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * Prefix length (e.g., 64)
   *
   * @generated from field: int32 prefix_length = 2;
   */
  prefixLength: number;

  /**
   * Default gateway
   *
   * @generated from field: string gateway = 3;
   */
  gateway: string;

  /**
   * DNS servers (IPv6 addresses)
   *
   * @generated from field: repeated string dns_servers = 4;
   */
  dnsServers: string[];

  /**
   * Use SLAAC (Stateless Address Autoconfiguration)
   *
   * @generated from field: bool slaac = 5;
   */
  slaac: boolean;

  /**
   * Enable privacy extensions
   *
   * @generated from field: bool privacy_extensions = 6;
   */
  privacyExtensions: boolean;

  /**
   * Link-local address (auto-generated if empty)
   *
   * @generated from field: string link_local = 7;
   */
  linkLocal: string;
};

/**
 * Describes the message metald.v1.IPv6Config.
 * Use `create(IPv6ConfigSchema)` to create a new message.
 */
export const IPv6ConfigSchema: GenMessage<IPv6Config> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_network, 3);

/**
 * Rate limiting configuration
 *
 * @generated from message metald.v1.RateLimit
 */
export type RateLimit = Message<"metald.v1.RateLimit"> & {
  /**
   * Bandwidth in bytes/second
   *
   * @generated from field: int64 bandwidth = 1;
   */
  bandwidth: bigint;

  /**
   * Token bucket refill time in milliseconds
   *
   * @generated from field: int64 refill_time = 2;
   */
  refillTime: bigint;

  /**
   * Burst size in bytes
   *
   * @generated from field: int64 burst = 3;
   */
  burst: bigint;
};

/**
 * Describes the message metald.v1.RateLimit.
 * Use `create(RateLimitSchema)` to create a new message.
 */
export const RateLimitSchema: GenMessage<RateLimit> =
  /*@__PURE__*/
  messageDesc(file_metald_v1_network, 4);

/**
 * Network mode for the interface
 *
 * @generated from enum metald.v1.NetworkMode
 */
export enum NetworkMode {
  /**
   * @generated from enum value: NETWORK_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Both IPv4 and IPv6
   *
   * @generated from enum value: NETWORK_MODE_DUAL_STACK = 1;
   */
  DUAL_STACK = 1,

  /**
   * IPv4 only
   *
   * @generated from enum value: NETWORK_MODE_IPV4_ONLY = 2;
   */
  IPV4_ONLY = 2,

  /**
   * IPv6 only
   *
   * @generated from enum value: NETWORK_MODE_IPV6_ONLY = 3;
   */
  IPV6_ONLY = 3,
}

/**
 * Describes the enum metald.v1.NetworkMode.
 */
export const NetworkModeSchema: GenEnum<NetworkMode> =
  /*@__PURE__*/
  enumDesc(file_metald_v1_network, 0);
