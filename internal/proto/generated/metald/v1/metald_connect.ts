// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file metald/v1/metald.proto (package metald.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import {
  CreateDeploymentRequest,
  CreateDeploymentResponse,
  DeleteDeploymentRequest,
  DeleteDeploymentResponse,
  GetDeploymentRequest,
  GetDeploymentResponse,
  UpdateDeploymentRequest,
  UpdateDeploymentResponse,
} from "./deployment_pb.js";
import {
  BootVmRequest,
  BootVmResponse,
  CreateVmRequest,
  CreateVmResponse,
  DeleteVmRequest,
  DeleteVmResponse,
  GetVmInfoRequest,
  GetVmInfoResponse,
  ListVmsRequest,
  ListVmsResponse,
  PauseVmRequest,
  PauseVmResponse,
  RebootVmRequest,
  RebootVmResponse,
  ResumeVmRequest,
  ResumeVmResponse,
  ShutdownVmRequest,
  ShutdownVmResponse,
} from "./vm_pb.js";

/**
 * VmService provides unified VM management across different hypervisor backends
 *
 *
 * Deployment related RPCs
 * These endpoints are most used by the control-plane side of things
 *
 *
 * @generated from service metald.v1.VmService
 */
export const VmService = {
  typeName: "metald.v1.VmService",
  methods: {
    /**
     * CreateDeployment
     *
     * @generated from rpc metald.v1.VmService.CreateDeployment
     */
    createDeployment: {
      name: "CreateDeployment",
      I: CreateDeploymentRequest,
      O: CreateDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateDeployment
     *
     * @generated from rpc metald.v1.VmService.UpdateDeployment
     */
    updateDeployment: {
      name: "UpdateDeployment",
      I: UpdateDeploymentRequest,
      O: UpdateDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteDeployment
     *
     * @generated from rpc metald.v1.VmService.DeleteDeployment
     */
    deleteDeployment: {
      name: "DeleteDeployment",
      I: DeleteDeploymentRequest,
      O: DeleteDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDeployment
     *
     * @generated from rpc metald.v1.VmService.GetDeployment
     */
    getDeployment: {
      name: "GetDeployment",
      I: GetDeploymentRequest,
      O: GetDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateVm creates a new virtual machine
     *
     * @generated from rpc metald.v1.VmService.CreateVm
     */
    createVm: {
      name: "CreateVm",
      I: CreateVmRequest,
      O: CreateVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteVm removes a virtual machine
     *
     * @generated from rpc metald.v1.VmService.DeleteVm
     */
    deleteVm: {
      name: "DeleteVm",
      I: DeleteVmRequest,
      O: DeleteVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * BootVm starts a created virtual machine
     *
     * @generated from rpc metald.v1.VmService.BootVm
     */
    bootVm: {
      name: "BootVm",
      I: BootVmRequest,
      O: BootVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ShutdownVm gracefully stops a running virtual machine
     *
     * @generated from rpc metald.v1.VmService.ShutdownVm
     */
    shutdownVm: {
      name: "ShutdownVm",
      I: ShutdownVmRequest,
      O: ShutdownVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PauseVm pauses a running virtual machine
     *
     * @generated from rpc metald.v1.VmService.PauseVm
     */
    pauseVm: {
      name: "PauseVm",
      I: PauseVmRequest,
      O: PauseVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ResumeVm resumes a paused virtual machine
     *
     * @generated from rpc metald.v1.VmService.ResumeVm
     */
    resumeVm: {
      name: "ResumeVm",
      I: ResumeVmRequest,
      O: ResumeVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RebootVm restarts a running virtual machine
     *
     * @generated from rpc metald.v1.VmService.RebootVm
     */
    rebootVm: {
      name: "RebootVm",
      I: RebootVmRequest,
      O: RebootVmResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetVmInfo retrieves virtual machine status and configuration
     *
     * @generated from rpc metald.v1.VmService.GetVmInfo
     */
    getVmInfo: {
      name: "GetVmInfo",
      I: GetVmInfoRequest,
      O: GetVmInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListVms lists all virtual machines managed by this service
     *
     * @generated from rpc metald.v1.VmService.ListVms
     */
    listVms: {
      name: "ListVms",
      I: ListVmsRequest,
      O: ListVmsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
