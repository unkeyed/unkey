// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/partition/v1/gateway.proto (package partition.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GatewayConfig contains all configuration needed for a hostname
 * including deployment metadata and middleware configurations
 *
 * @generated from message partition.v1.GatewayConfig
 */
export class GatewayConfig extends Message<GatewayConfig> {
  /**
   * @generated from field: partition.v1.Project project = 1;
   */
  project?: Project;

  /**
   * Deployment information
   *
   * @generated from field: partition.v1.Deployment deployment = 2;
   */
  deployment?: Deployment;

  /**
   * @generated from field: repeated partition.v1.VM vms = 3;
   */
  vms: VM[] = [];

  /**
   * Middleware configurations
   *
   * @generated from field: optional partition.v1.AuthConfig auth_config = 4;
   */
  authConfig?: AuthConfig;

  /**
   * @generated from field: optional partition.v1.ValidationConfig validation_config = 5;
   */
  validationConfig?: ValidationConfig;

  constructor(data?: PartialMessage<GatewayConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "partition.v1.GatewayConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
    { no: 2, name: "deployment", kind: "message", T: Deployment },
    { no: 3, name: "vms", kind: "message", T: VM, repeated: true },
    { no: 4, name: "auth_config", kind: "message", T: AuthConfig, opt: true },
    { no: 5, name: "validation_config", kind: "message", T: ValidationConfig, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GatewayConfig {
    return new GatewayConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GatewayConfig {
    return new GatewayConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GatewayConfig {
    return new GatewayConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: GatewayConfig | PlainMessage<GatewayConfig> | undefined,
    b: GatewayConfig | PlainMessage<GatewayConfig> | undefined,
  ): boolean {
    return proto3.util.equals(GatewayConfig, a, b);
  }
}

/**
 * @generated from message partition.v1.Deployment
 */
export class Deployment extends Message<Deployment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bool is_enabled = 2;
   */
  isEnabled = false;

  constructor(data?: PartialMessage<Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "partition.v1.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deployment {
    return new Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJsonString(jsonString, options);
  }

  static equals(
    a: Deployment | PlainMessage<Deployment> | undefined,
    b: Deployment | PlainMessage<Deployment> | undefined,
  ): boolean {
    return proto3.util.equals(Deployment, a, b);
  }
}

/**
 * @generated from message partition.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bool is_enabled = 2;
   */
  isEnabled = false;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "partition.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(
    a: Project | PlainMessage<Project> | undefined,
    b: Project | PlainMessage<Project> | undefined,
  ): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message partition.v1.VM
 */
export class VM extends Message<VM> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<VM>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "partition.v1.VM";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VM {
    return new VM().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VM {
    return new VM().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VM {
    return new VM().fromJsonString(jsonString, options);
  }

  static equals(
    a: VM | PlainMessage<VM> | undefined,
    b: VM | PlainMessage<VM> | undefined,
  ): boolean {
    return proto3.util.equals(VM, a, b);
  }
}

/**
 * Authentication middleware configuration
 *
 * @generated from message partition.v1.AuthConfig
 */
export class AuthConfig extends Message<AuthConfig> {
  /**
   * @generated from field: string key_auth_id = 1;
   */
  keyAuthId = "";

  constructor(data?: PartialMessage<AuthConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "partition.v1.AuthConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_auth_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthConfig {
    return new AuthConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthConfig {
    return new AuthConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthConfig {
    return new AuthConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: AuthConfig | PlainMessage<AuthConfig> | undefined,
    b: AuthConfig | PlainMessage<AuthConfig> | undefined,
  ): boolean {
    return proto3.util.equals(AuthConfig, a, b);
  }
}

/**
 * Request validation middleware configuration
 *
 * @generated from message partition.v1.ValidationConfig
 */
export class ValidationConfig extends Message<ValidationConfig> {
  /**
   * @generated from field: string openapi_spec = 1;
   */
  openapiSpec = "";

  constructor(data?: PartialMessage<ValidationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "partition.v1.ValidationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "openapi_spec", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationConfig {
    return new ValidationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationConfig {
    return new ValidationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationConfig {
    return new ValidationConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: ValidationConfig | PlainMessage<ValidationConfig> | undefined,
    b: ValidationConfig | PlainMessage<ValidationConfig> | undefined,
  ): boolean {
    return proto3.util.equals(ValidationConfig, a, b);
  }
}
