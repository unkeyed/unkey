// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/metal/vmprovisioner/v1/wip.proto (package metal.vmprovisioner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum metal.vmprovisioner.v1.NetworkSize
 */
export enum NetworkSize {
  /**
   * These are made up
   *
   * @generated from enum value: NETWORK_SIZE_SMALL = 0;
   */
  SMALL = 0,

  /**
   * @generated from enum value: NETWORK_SIZE_MEDIUM = 1;
   */
  MEDIUM = 1,

  /**
   * @generated from enum value: NETWORK_SIZE_LARGE = 2;
   */
  LARGE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NetworkSize)
proto3.util.setEnumType(NetworkSize, "metal.vmprovisioner.v1.NetworkSize", [
  { no: 0, name: "NETWORK_SIZE_SMALL" },
  { no: 1, name: "NETWORK_SIZE_MEDIUM" },
  { no: 2, name: "NETWORK_SIZE_LARGE" },
]);

/**
 * from our call, ian
 * lmk what you think, it's not hooked up yet and we can change it as you wish.
 *
 * @generated from message metal.vmprovisioner.v1.CreateVmRequestV2
 */
export class CreateVmRequestV2 extends Message<CreateVmRequestV2> {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId = "";

  /**
   * I know you want this elsewhere but I really don't understand what you want me to do.
   * cause just defining it as `message DeploymentId string` doesn't make anything better.
   * please send help
   *
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";

  /**
   * 1024 = 1 vcpu
   *
   * millicores, e.g., 1024 = 1 vCPU
   *
   * @generated from field: uint32 cpu_millicores = 3;
   */
  cpuMillicores = 0;

  /**
   * bytes
   *
   * @generated from field: uint64 memory_bytes = 4;
   */
  memoryBytes = protoInt64.zero;

  /**
   * full image ref: registry/repo:tag or digest
   *
   * @generated from field: string docker_image = 5;
   */
  dockerImage = "";

  /**
   * default: NETWORK_SIZE_UNSPECIFIED
   *
   * @generated from field: metal.vmprovisioner.v1.NetworkSize network_size = 6;
   */
  networkSize = NetworkSize.SMALL;

  constructor(data?: PartialMessage<CreateVmRequestV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "metal.vmprovisioner.v1.CreateVmRequestV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cpu_millicores", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "memory_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "docker_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "network_size", kind: "enum", T: proto3.getEnumType(NetworkSize) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVmRequestV2 {
    return new CreateVmRequestV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVmRequestV2 {
    return new CreateVmRequestV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVmRequestV2 {
    return new CreateVmRequestV2().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateVmRequestV2 | PlainMessage<CreateVmRequestV2> | undefined,
    b: CreateVmRequestV2 | PlainMessage<CreateVmRequestV2> | undefined,
  ): boolean {
    return proto3.util.equals(CreateVmRequestV2, a, b);
  }
}

/**
 * @generated from message metal.vmprovisioner.v1.CreateVmRespomseV2
 */
export class CreateVmRespomseV2 extends Message<CreateVmRespomseV2> {
  /**
   * metalhost_ip:port
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<CreateVmRespomseV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "metal.vmprovisioner.v1.CreateVmRespomseV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVmRespomseV2 {
    return new CreateVmRespomseV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVmRespomseV2 {
    return new CreateVmRespomseV2().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateVmRespomseV2 {
    return new CreateVmRespomseV2().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateVmRespomseV2 | PlainMessage<CreateVmRespomseV2> | undefined,
    b: CreateVmRespomseV2 | PlainMessage<CreateVmRespomseV2> | undefined,
  ): boolean {
    return proto3.util.equals(CreateVmRespomseV2, a, b);
  }
}
