// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/deploy/builderd/v1/builder.proto (package deploy.builderd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, Timestamp, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Build job lifecycle states
 *
 * @generated from enum deploy.builderd.v1.BuildState
 */
export enum BuildState {
  /**
   * @generated from enum value: BUILD_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Job queued
   *
   * @generated from enum value: BUILD_STATE_PENDING = 1;
   */
  PENDING = 1,

  /**
   * Pulling Docker image or source
   *
   * @generated from enum value: BUILD_STATE_PULLING = 2;
   */
  PULLING = 2,

  /**
   * Extracting/preparing source
   *
   * @generated from enum value: BUILD_STATE_EXTRACTING = 3;
   */
  EXTRACTING = 3,

  /**
   * Building rootfs
   *
   * @generated from enum value: BUILD_STATE_BUILDING = 4;
   */
  BUILDING = 4,

  /**
   * Applying optimizations
   *
   * @generated from enum value: BUILD_STATE_OPTIMIZING = 5;
   */
  OPTIMIZING = 5,

  /**
   * Build successful
   *
   * @generated from enum value: BUILD_STATE_COMPLETED = 6;
   */
  COMPLETED = 6,

  /**
   * Build failed
   *
   * @generated from enum value: BUILD_STATE_FAILED = 7;
   */
  FAILED = 7,

  /**
   * Build cancelled
   *
   * @generated from enum value: BUILD_STATE_CANCELLED = 8;
   */
  CANCELLED = 8,

  /**
   * Cleaning up resources
   *
   * @generated from enum value: BUILD_STATE_CLEANING = 9;
   */
  CLEANING = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(BuildState)
proto3.util.setEnumType(BuildState, "deploy.builderd.v1.BuildState", [
  { no: 0, name: "BUILD_STATE_UNSPECIFIED" },
  { no: 1, name: "BUILD_STATE_PENDING" },
  { no: 2, name: "BUILD_STATE_PULLING" },
  { no: 3, name: "BUILD_STATE_EXTRACTING" },
  { no: 4, name: "BUILD_STATE_BUILDING" },
  { no: 5, name: "BUILD_STATE_OPTIMIZING" },
  { no: 6, name: "BUILD_STATE_COMPLETED" },
  { no: 7, name: "BUILD_STATE_FAILED" },
  { no: 8, name: "BUILD_STATE_CANCELLED" },
  { no: 9, name: "BUILD_STATE_CLEANING" },
]);

/**
 * Tenant service tiers
 *
 * @generated from enum deploy.builderd.v1.TenantTier
 */
export enum TenantTier {
  /**
   * @generated from enum value: TENANT_TIER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Limited resources
   *
   * @generated from enum value: TENANT_TIER_FREE = 1;
   */
  FREE = 1,

  /**
   * Standard resources
   *
   * @generated from enum value: TENANT_TIER_PRO = 2;
   */
  PRO = 2,

  /**
   * Higher limits + isolation
   *
   * @generated from enum value: TENANT_TIER_ENTERPRISE = 3;
   */
  ENTERPRISE = 3,

  /**
   * Dedicated infrastructure
   *
   * @generated from enum value: TENANT_TIER_DEDICATED = 4;
   */
  DEDICATED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(TenantTier)
proto3.util.setEnumType(TenantTier, "deploy.builderd.v1.TenantTier", [
  { no: 0, name: "TENANT_TIER_UNSPECIFIED" },
  { no: 1, name: "TENANT_TIER_FREE" },
  { no: 2, name: "TENANT_TIER_PRO" },
  { no: 3, name: "TENANT_TIER_ENTERPRISE" },
  { no: 4, name: "TENANT_TIER_DEDICATED" },
]);

/**
 * Init process strategies for microVMs
 *
 * @generated from enum deploy.builderd.v1.InitStrategy
 */
export enum InitStrategy {
  /**
   * @generated from enum value: INIT_STRATEGY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Use tini as init (recommended)
   *
   * @generated from enum value: INIT_STRATEGY_TINI = 1;
   */
  TINI = 1,

  /**
   * Direct exec (risky)
   *
   * @generated from enum value: INIT_STRATEGY_DIRECT = 2;
   */
  DIRECT = 2,

  /**
   * Custom init script
   *
   * @generated from enum value: INIT_STRATEGY_CUSTOM = 3;
   */
  CUSTOM = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(InitStrategy)
proto3.util.setEnumType(InitStrategy, "deploy.builderd.v1.InitStrategy", [
  { no: 0, name: "INIT_STRATEGY_UNSPECIFIED" },
  { no: 1, name: "INIT_STRATEGY_TINI" },
  { no: 2, name: "INIT_STRATEGY_DIRECT" },
  { no: 3, name: "INIT_STRATEGY_CUSTOM" },
]);

/**
 * Multi-tenant context
 *
 * @generated from message deploy.builderd.v1.TenantContext
 */
export class TenantContext extends Message<TenantContext> {
  /**
   * Primary tenant identifier
   *
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * Customer within tenant (for billing)
   *
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * Organization (for enterprise)
   *
   * @generated from field: string organization_id = 3;
   */
  organizationId = "";

  /**
   * Service tier
   *
   * @generated from field: deploy.builderd.v1.TenantTier tier = 4;
   */
  tier = TenantTier.UNSPECIFIED;

  /**
   * Build permissions
   *
   * @generated from field: repeated string permissions = 5;
   */
  permissions: string[] = [];

  /**
   * Tenant metadata
   *
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<TenantContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.TenantContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tier", kind: "enum", T: proto3.getEnumType(TenantTier) },
    { no: 5, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    {
      no: 6,
      name: "metadata",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantContext {
    return new TenantContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantContext {
    return new TenantContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantContext {
    return new TenantContext().fromJsonString(jsonString, options);
  }

  static equals(
    a: TenantContext | PlainMessage<TenantContext> | undefined,
    b: TenantContext | PlainMessage<TenantContext> | undefined,
  ): boolean {
    return proto3.util.equals(TenantContext, a, b);
  }
}

/**
 * Build source types - extensible for future build types
 *
 * @generated from message deploy.builderd.v1.BuildSource
 */
export class BuildSource extends Message<BuildSource> {
  /**
   * @generated from oneof deploy.builderd.v1.BuildSource.source_type
   */
  sourceType:
    | {
        /**
         * @generated from field: deploy.builderd.v1.DockerImageSource docker_image = 1;
         */
        value: DockerImageSource;
        case: "dockerImage";
      }
    | {
        /**
         * @generated from field: deploy.builderd.v1.GitRepositorySource git_repository = 2;
         */
        value: GitRepositorySource;
        case: "gitRepository";
      }
    | {
        /**
         * Future: nix_flake = 4, buildpack = 5, etc.
         *
         * @generated from field: deploy.builderd.v1.ArchiveSource archive = 3;
         */
        value: ArchiveSource;
        case: "archive";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BuildSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "docker_image", kind: "message", T: DockerImageSource, oneof: "source_type" },
    {
      no: 2,
      name: "git_repository",
      kind: "message",
      T: GitRepositorySource,
      oneof: "source_type",
    },
    { no: 3, name: "archive", kind: "message", T: ArchiveSource, oneof: "source_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildSource {
    return new BuildSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildSource {
    return new BuildSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildSource {
    return new BuildSource().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildSource | PlainMessage<BuildSource> | undefined,
    b: BuildSource | PlainMessage<BuildSource> | undefined,
  ): boolean {
    return proto3.util.equals(BuildSource, a, b);
  }
}

/**
 * Docker image extraction (first implementation)
 *
 * @generated from message deploy.builderd.v1.DockerImageSource
 */
export class DockerImageSource extends Message<DockerImageSource> {
  /**
   * "ghcr.io/unkeyed/unkey:f4cfee5"
   *
   * @generated from field: string image_uri = 1;
   */
  imageUri = "";

  /**
   * Registry authentication
   *
   * @generated from field: deploy.builderd.v1.DockerAuth auth = 2;
   */
  auth?: DockerAuth;

  /**
   * Additional tags to consider
   *
   * @generated from field: repeated string pull_tags = 3;
   */
  pullTags: string[] = [];

  constructor(data?: PartialMessage<DockerImageSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.DockerImageSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth", kind: "message", T: DockerAuth },
    { no: 3, name: "pull_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DockerImageSource {
    return new DockerImageSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DockerImageSource {
    return new DockerImageSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DockerImageSource {
    return new DockerImageSource().fromJsonString(jsonString, options);
  }

  static equals(
    a: DockerImageSource | PlainMessage<DockerImageSource> | undefined,
    b: DockerImageSource | PlainMessage<DockerImageSource> | undefined,
  ): boolean {
    return proto3.util.equals(DockerImageSource, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.DockerAuth
 */
export class DockerAuth extends Message<DockerAuth> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string token = 3;
   */
  token = "";

  /**
   * @generated from field: string registry = 4;
   */
  registry = "";

  constructor(data?: PartialMessage<DockerAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.DockerAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "registry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DockerAuth {
    return new DockerAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DockerAuth {
    return new DockerAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DockerAuth {
    return new DockerAuth().fromJsonString(jsonString, options);
  }

  static equals(
    a: DockerAuth | PlainMessage<DockerAuth> | undefined,
    b: DockerAuth | PlainMessage<DockerAuth> | undefined,
  ): boolean {
    return proto3.util.equals(DockerAuth, a, b);
  }
}

/**
 * Git repository builds (future)
 *
 * @generated from message deploy.builderd.v1.GitRepositorySource
 */
export class GitRepositorySource extends Message<GitRepositorySource> {
  /**
   * "https://github.com/unkeyed/unkey"
   *
   * @generated from field: string repository_url = 1;
   */
  repositoryUrl = "";

  /**
   * branch/tag/commit
   *
   * @generated from field: string ref = 2;
   */
  ref = "";

  /**
   * subdirectory if needed
   *
   * @generated from field: string build_context = 3;
   */
  buildContext = "";

  /**
   * @generated from field: deploy.builderd.v1.GitAuth auth = 4;
   */
  auth?: GitAuth;

  constructor(data?: PartialMessage<GitRepositorySource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GitRepositorySource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth", kind: "message", T: GitAuth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitRepositorySource {
    return new GitRepositorySource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitRepositorySource {
    return new GitRepositorySource().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GitRepositorySource {
    return new GitRepositorySource().fromJsonString(jsonString, options);
  }

  static equals(
    a: GitRepositorySource | PlainMessage<GitRepositorySource> | undefined,
    b: GitRepositorySource | PlainMessage<GitRepositorySource> | undefined,
  ): boolean {
    return proto3.util.equals(GitRepositorySource, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GitAuth
 */
export class GitAuth extends Message<GitAuth> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string ssh_key = 3;
   */
  sshKey = "";

  /**
   * @generated from field: string token = 4;
   */
  token = "";

  constructor(data?: PartialMessage<GitAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GitAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ssh_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitAuth {
    return new GitAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitAuth {
    return new GitAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitAuth {
    return new GitAuth().fromJsonString(jsonString, options);
  }

  static equals(
    a: GitAuth | PlainMessage<GitAuth> | undefined,
    b: GitAuth | PlainMessage<GitAuth> | undefined,
  ): boolean {
    return proto3.util.equals(GitAuth, a, b);
  }
}

/**
 * Archive builds (future)
 *
 * @generated from message deploy.builderd.v1.ArchiveSource
 */
export class ArchiveSource extends Message<ArchiveSource> {
  /**
   * URL to tar.gz, zip, etc.
   *
   * @generated from field: string archive_url = 1;
   */
  archiveUrl = "";

  /**
   * "tar.gz", "zip"
   *
   * @generated from field: string archive_type = 2;
   */
  archiveType = "";

  /**
   * subdirectory in archive
   *
   * @generated from field: string build_context = 3;
   */
  buildContext = "";

  constructor(data?: PartialMessage<ArchiveSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.ArchiveSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "archive_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "archive_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchiveSource {
    return new ArchiveSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchiveSource {
    return new ArchiveSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchiveSource {
    return new ArchiveSource().fromJsonString(jsonString, options);
  }

  static equals(
    a: ArchiveSource | PlainMessage<ArchiveSource> | undefined,
    b: ArchiveSource | PlainMessage<ArchiveSource> | undefined,
  ): boolean {
    return proto3.util.equals(ArchiveSource, a, b);
  }
}

/**
 * Build target types - extensible
 *
 * @generated from message deploy.builderd.v1.BuildTarget
 */
export class BuildTarget extends Message<BuildTarget> {
  /**
   * @generated from oneof deploy.builderd.v1.BuildTarget.target_type
   */
  targetType:
    | {
        /**
         * @generated from field: deploy.builderd.v1.MicroVMRootfs microvm_rootfs = 1;
         */
        value: MicroVMRootfs;
        case: "microvmRootfs";
      }
    | {
        /**
         * Future: wasm_module = 3, lambda_layer = 4, etc.
         *
         * @generated from field: deploy.builderd.v1.ContainerImage container_image = 2;
         */
        value: ContainerImage;
        case: "containerImage";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BuildTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "microvm_rootfs", kind: "message", T: MicroVMRootfs, oneof: "target_type" },
    { no: 2, name: "container_image", kind: "message", T: ContainerImage, oneof: "target_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildTarget {
    return new BuildTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildTarget {
    return new BuildTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildTarget {
    return new BuildTarget().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildTarget | PlainMessage<BuildTarget> | undefined,
    b: BuildTarget | PlainMessage<BuildTarget> | undefined,
  ): boolean {
    return proto3.util.equals(BuildTarget, a, b);
  }
}

/**
 * MicroVM rootfs (our focus)
 *
 * @generated from message deploy.builderd.v1.MicroVMRootfs
 */
export class MicroVMRootfs extends Message<MicroVMRootfs> {
  /**
   * @generated from field: deploy.builderd.v1.InitStrategy init_strategy = 1;
   */
  initStrategy = InitStrategy.UNSPECIFIED;

  /**
   * @generated from field: deploy.builderd.v1.RuntimeConfig runtime_config = 2;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: deploy.builderd.v1.OptimizationSettings optimization = 3;
   */
  optimization?: OptimizationSettings;

  /**
   * @generated from field: repeated string preserve_paths = 4;
   */
  preservePaths: string[] = [];

  constructor(data?: PartialMessage<MicroVMRootfs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.MicroVMRootfs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "init_strategy", kind: "enum", T: proto3.getEnumType(InitStrategy) },
    { no: 2, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 3, name: "optimization", kind: "message", T: OptimizationSettings },
    { no: 4, name: "preserve_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MicroVMRootfs {
    return new MicroVMRootfs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MicroVMRootfs {
    return new MicroVMRootfs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MicroVMRootfs {
    return new MicroVMRootfs().fromJsonString(jsonString, options);
  }

  static equals(
    a: MicroVMRootfs | PlainMessage<MicroVMRootfs> | undefined,
    b: MicroVMRootfs | PlainMessage<MicroVMRootfs> | undefined,
  ): boolean {
    return proto3.util.equals(MicroVMRootfs, a, b);
  }
}

/**
 * Container image (future)
 *
 * @generated from message deploy.builderd.v1.ContainerImage
 */
export class ContainerImage extends Message<ContainerImage> {
  /**
   * @generated from field: string base_image = 1;
   */
  baseImage = "";

  /**
   * @generated from field: repeated string layers = 2;
   */
  layers: string[] = [];

  constructor(data?: PartialMessage<ContainerImage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.ContainerImage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "layers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerImage {
    return new ContainerImage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerImage {
    return new ContainerImage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerImage {
    return new ContainerImage().fromJsonString(jsonString, options);
  }

  static equals(
    a: ContainerImage | PlainMessage<ContainerImage> | undefined,
    b: ContainerImage | PlainMessage<ContainerImage> | undefined,
  ): boolean {
    return proto3.util.equals(ContainerImage, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.RuntimeConfig
 */
export class RuntimeConfig extends Message<RuntimeConfig> {
  /**
   * Override CMD
   *
   * @generated from field: repeated string command = 1;
   */
  command: string[] = [];

  /**
   * Override ENTRYPOINT
   *
   * @generated from field: repeated string entrypoint = 2;
   */
  entrypoint: string[] = [];

  /**
   * Override WORKDIR
   *
   * @generated from field: string working_dir = 3;
   */
  workingDir = "";

  /**
   * Environment variables
   *
   * @generated from field: map<string, string> environment = 4;
   */
  environment: { [key: string]: string } = {};

  /**
   * Ports to expose
   *
   * @generated from field: repeated string exposed_ports = 5;
   */
  exposedPorts: string[] = [];

  constructor(data?: PartialMessage<RuntimeConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.RuntimeConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "entrypoint", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "working_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: "environment",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 5, name: "exposed_ports", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: RuntimeConfig | PlainMessage<RuntimeConfig> | undefined,
    b: RuntimeConfig | PlainMessage<RuntimeConfig> | undefined,
  ): boolean {
    return proto3.util.equals(RuntimeConfig, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.OptimizationSettings
 */
export class OptimizationSettings extends Message<OptimizationSettings> {
  /**
   * Strip debug info
   *
   * @generated from field: bool strip_debug_symbols = 1;
   */
  stripDebugSymbols = false;

  /**
   * Compress with UPX
   *
   * @generated from field: bool compress_binaries = 2;
   */
  compressBinaries = false;

  /**
   * Remove documentation
   *
   * @generated from field: bool remove_docs = 3;
   */
  removeDocs = false;

  /**
   * Remove package caches
   *
   * @generated from field: bool remove_cache = 4;
   */
  removeCache = false;

  /**
   * Paths to always keep
   *
   * @generated from field: repeated string preserve_paths = 5;
   */
  preservePaths: string[] = [];

  /**
   * Files to exclude
   *
   * @generated from field: repeated string exclude_patterns = 6;
   */
  excludePatterns: string[] = [];

  constructor(data?: PartialMessage<OptimizationSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.OptimizationSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strip_debug_symbols", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "compress_binaries", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "remove_docs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "remove_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "preserve_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    {
      no: 6,
      name: "exclude_patterns",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptimizationSettings {
    return new OptimizationSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptimizationSettings {
    return new OptimizationSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): OptimizationSettings {
    return new OptimizationSettings().fromJsonString(jsonString, options);
  }

  static equals(
    a: OptimizationSettings | PlainMessage<OptimizationSettings> | undefined,
    b: OptimizationSettings | PlainMessage<OptimizationSettings> | undefined,
  ): boolean {
    return proto3.util.equals(OptimizationSettings, a, b);
  }
}

/**
 * Build strategies - how to build from source to target
 *
 * @generated from message deploy.builderd.v1.BuildStrategy
 */
export class BuildStrategy extends Message<BuildStrategy> {
  /**
   * @generated from oneof deploy.builderd.v1.BuildStrategy.strategy_type
   */
  strategyType:
    | {
        /**
         * @generated from field: deploy.builderd.v1.DockerExtractStrategy docker_extract = 1;
         */
        value: DockerExtractStrategy;
        case: "dockerExtract";
      }
    | {
        /**
         * @generated from field: deploy.builderd.v1.GoApiStrategy go_api = 2;
         */
        value: GoApiStrategy;
        case: "goApi";
      }
    | {
        /**
         * @generated from field: deploy.builderd.v1.SinatraStrategy sinatra = 3;
         */
        value: SinatraStrategy;
        case: "sinatra";
      }
    | {
        /**
         * Future: python_wsgi = 5, rust_binary = 6, etc.
         *
         * @generated from field: deploy.builderd.v1.NodejsStrategy nodejs = 4;
         */
        value: NodejsStrategy;
        case: "nodejs";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BuildStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "docker_extract",
      kind: "message",
      T: DockerExtractStrategy,
      oneof: "strategy_type",
    },
    { no: 2, name: "go_api", kind: "message", T: GoApiStrategy, oneof: "strategy_type" },
    { no: 3, name: "sinatra", kind: "message", T: SinatraStrategy, oneof: "strategy_type" },
    { no: 4, name: "nodejs", kind: "message", T: NodejsStrategy, oneof: "strategy_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildStrategy {
    return new BuildStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildStrategy {
    return new BuildStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildStrategy {
    return new BuildStrategy().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildStrategy | PlainMessage<BuildStrategy> | undefined,
    b: BuildStrategy | PlainMessage<BuildStrategy> | undefined,
  ): boolean {
    return proto3.util.equals(BuildStrategy, a, b);
  }
}

/**
 * Docker extraction strategy (first implementation)
 *
 * @generated from message deploy.builderd.v1.DockerExtractStrategy
 */
export class DockerExtractStrategy extends Message<DockerExtractStrategy> {
  /**
   * Keep layer structure
   *
   * @generated from field: bool preserve_layers = 1;
   */
  preserveLayers = false;

  /**
   * Merge all layers
   *
   * @generated from field: bool flatten_filesystem = 2;
   */
  flattenFilesystem = false;

  /**
   * Files to exclude
   *
   * @generated from field: repeated string exclude_patterns = 3;
   */
  excludePatterns: string[] = [];

  constructor(data?: PartialMessage<DockerExtractStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.DockerExtractStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_layers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "flatten_filesystem", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    {
      no: 3,
      name: "exclude_patterns",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DockerExtractStrategy {
    return new DockerExtractStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DockerExtractStrategy {
    return new DockerExtractStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DockerExtractStrategy {
    return new DockerExtractStrategy().fromJsonString(jsonString, options);
  }

  static equals(
    a: DockerExtractStrategy | PlainMessage<DockerExtractStrategy> | undefined,
    b: DockerExtractStrategy | PlainMessage<DockerExtractStrategy> | undefined,
  ): boolean {
    return proto3.util.equals(DockerExtractStrategy, a, b);
  }
}

/**
 * Go API strategy (future)
 *
 * @generated from message deploy.builderd.v1.GoApiStrategy
 */
export class GoApiStrategy extends Message<GoApiStrategy> {
  /**
   * "1.21", "latest"
   *
   * @generated from field: string go_version = 1;
   */
  goVersion = "";

  /**
   * "-ldflags", "-tags"
   *
   * @generated from field: repeated string build_flags = 2;
   */
  buildFlags: string[] = [];

  /**
   * "./cmd/api"
   *
   * @generated from field: string main_package = 3;
   */
  mainPackage = "";

  /**
   * @generated from field: bool enable_cgo = 4;
   */
  enableCgo = false;

  constructor(data?: PartialMessage<GoApiStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GoApiStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "go_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_flags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "main_package", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enable_cgo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoApiStrategy {
    return new GoApiStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoApiStrategy {
    return new GoApiStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoApiStrategy {
    return new GoApiStrategy().fromJsonString(jsonString, options);
  }

  static equals(
    a: GoApiStrategy | PlainMessage<GoApiStrategy> | undefined,
    b: GoApiStrategy | PlainMessage<GoApiStrategy> | undefined,
  ): boolean {
    return proto3.util.equals(GoApiStrategy, a, b);
  }
}

/**
 * Sinatra strategy (future)
 *
 * @generated from message deploy.builderd.v1.SinatraStrategy
 */
export class SinatraStrategy extends Message<SinatraStrategy> {
  /**
   * "3.2", "latest"
   *
   * @generated from field: string ruby_version = 1;
   */
  rubyVersion = "";

  /**
   * "Gemfile"
   *
   * @generated from field: string gemfile_path = 2;
   */
  gemfilePath = "";

  /**
   * "puma", "unicorn"
   *
   * @generated from field: string rack_server = 3;
   */
  rackServer = "";

  /**
   * Server-specific config
   *
   * @generated from field: map<string, string> rack_config = 4;
   */
  rackConfig: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SinatraStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.SinatraStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ruby_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gemfile_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rack_server", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: "rack_config",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SinatraStrategy {
    return new SinatraStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SinatraStrategy {
    return new SinatraStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SinatraStrategy {
    return new SinatraStrategy().fromJsonString(jsonString, options);
  }

  static equals(
    a: SinatraStrategy | PlainMessage<SinatraStrategy> | undefined,
    b: SinatraStrategy | PlainMessage<SinatraStrategy> | undefined,
  ): boolean {
    return proto3.util.equals(SinatraStrategy, a, b);
  }
}

/**
 * Node.js strategy (future)
 *
 * @generated from message deploy.builderd.v1.NodejsStrategy
 */
export class NodejsStrategy extends Message<NodejsStrategy> {
  /**
   * "18", "20", "latest"
   *
   * @generated from field: string node_version = 1;
   */
  nodeVersion = "";

  /**
   * "npm", "yarn", "pnpm"
   *
   * @generated from field: string package_manager = 2;
   */
  packageManager = "";

  /**
   * "start", "server"
   *
   * @generated from field: string start_script = 3;
   */
  startScript = "";

  /**
   * NODE_ENV=production
   *
   * @generated from field: bool enable_production = 4;
   */
  enableProduction = false;

  constructor(data?: PartialMessage<NodejsStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.NodejsStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "package_manager", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_script", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enable_production", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodejsStrategy {
    return new NodejsStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodejsStrategy {
    return new NodejsStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodejsStrategy {
    return new NodejsStrategy().fromJsonString(jsonString, options);
  }

  static equals(
    a: NodejsStrategy | PlainMessage<NodejsStrategy> | undefined,
    b: NodejsStrategy | PlainMessage<NodejsStrategy> | undefined,
  ): boolean {
    return proto3.util.equals(NodejsStrategy, a, b);
  }
}

/**
 * Tenant-aware resource limits
 *
 * @generated from message deploy.builderd.v1.TenantResourceLimits
 */
export class TenantResourceLimits extends Message<TenantResourceLimits> {
  /**
   * Per-build limits
   *
   * @generated from field: int64 max_memory_bytes = 1;
   */
  maxMemoryBytes = protoInt64.zero;

  /**
   * @generated from field: int32 max_cpu_cores = 2;
   */
  maxCpuCores = 0;

  /**
   * @generated from field: int64 max_disk_bytes = 3;
   */
  maxDiskBytes = protoInt64.zero;

  /**
   * @generated from field: int32 timeout_seconds = 4;
   */
  timeoutSeconds = 0;

  /**
   * Tenant-wide quotas
   *
   * Concurrent builds per tenant
   *
   * @generated from field: int32 max_concurrent_builds = 5;
   */
  maxConcurrentBuilds = 0;

  /**
   * Daily build quota
   *
   * @generated from field: int32 max_daily_builds = 6;
   */
  maxDailyBuilds = 0;

  /**
   * Total storage quota
   *
   * @generated from field: int64 max_storage_bytes = 7;
   */
  maxStorageBytes = protoInt64.zero;

  /**
   * Max time per build
   *
   * @generated from field: int32 max_build_time_minutes = 8;
   */
  maxBuildTimeMinutes = 0;

  /**
   * Network restrictions
   *
   * Docker registries
   *
   * @generated from field: repeated string allowed_registries = 9;
   */
  allowedRegistries: string[] = [];

  /**
   * Git hosts
   *
   * @generated from field: repeated string allowed_git_hosts = 10;
   */
  allowedGitHosts: string[] = [];

  /**
   * External network access
   *
   * @generated from field: bool allow_external_network = 11;
   */
  allowExternalNetwork = false;

  /**
   * Security restrictions
   *
   * Privileged containers
   *
   * @generated from field: bool allow_privileged_builds = 12;
   */
  allowPrivilegedBuilds = false;

  /**
   * Forbidden commands
   *
   * @generated from field: repeated string blocked_commands = 13;
   */
  blockedCommands: string[] = [];

  /**
   * Isolation level (0-3)
   *
   * @generated from field: int32 sandbox_level = 14;
   */
  sandboxLevel = 0;

  constructor(data?: PartialMessage<TenantResourceLimits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.TenantResourceLimits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_memory_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "max_cpu_cores", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "max_disk_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "timeout_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "max_concurrent_builds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "max_daily_builds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "max_storage_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "max_build_time_minutes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    {
      no: 9,
      name: "allowed_registries",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 10,
      name: "allowed_git_hosts",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 11, name: "allow_external_network", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "allow_privileged_builds", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    {
      no: 13,
      name: "blocked_commands",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 14, name: "sandbox_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantResourceLimits {
    return new TenantResourceLimits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantResourceLimits {
    return new TenantResourceLimits().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): TenantResourceLimits {
    return new TenantResourceLimits().fromJsonString(jsonString, options);
  }

  static equals(
    a: TenantResourceLimits | PlainMessage<TenantResourceLimits> | undefined,
    b: TenantResourceLimits | PlainMessage<TenantResourceLimits> | undefined,
  ): boolean {
    return proto3.util.equals(TenantResourceLimits, a, b);
  }
}

/**
 * Main build configuration
 *
 * @generated from message deploy.builderd.v1.BuildConfig
 */
export class BuildConfig extends Message<BuildConfig> {
  /**
   * Tenant identification
   *
   * @generated from field: deploy.builderd.v1.TenantContext tenant = 1;
   */
  tenant?: TenantContext;

  /**
   * What we're building from
   *
   * @generated from field: deploy.builderd.v1.BuildSource source = 2;
   */
  source?: BuildSource;

  /**
   * What we're building to
   *
   * @generated from field: deploy.builderd.v1.BuildTarget target = 3;
   */
  target?: BuildTarget;

  /**
   * How to build it
   *
   * @generated from field: deploy.builderd.v1.BuildStrategy strategy = 4;
   */
  strategy?: BuildStrategy;

  /**
   * Build constraints (tenant-aware)
   *
   * @generated from field: deploy.builderd.v1.TenantResourceLimits limits = 5;
   */
  limits?: TenantResourceLimits;

  /**
   * Build metadata
   *
   * Human-readable name
   *
   * @generated from field: string build_name = 6;
   */
  buildName = "";

  /**
   * Custom labels
   *
   * @generated from field: map<string, string> labels = 7;
   */
  labels: { [key: string]: string } = {};

  /**
   * Suggested asset ID to use when registering the built artifact
   * This allows the caller to pre-generate the asset ID
   *
   * @generated from field: string suggested_asset_id = 8;
   */
  suggestedAssetId = "";

  constructor(data?: PartialMessage<BuildConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: TenantContext },
    { no: 2, name: "source", kind: "message", T: BuildSource },
    { no: 3, name: "target", kind: "message", T: BuildTarget },
    { no: 4, name: "strategy", kind: "message", T: BuildStrategy },
    { no: 5, name: "limits", kind: "message", T: TenantResourceLimits },
    { no: 6, name: "build_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 7,
      name: "labels",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 8, name: "suggested_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfig {
    return new BuildConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfig {
    return new BuildConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfig {
    return new BuildConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildConfig | PlainMessage<BuildConfig> | undefined,
    b: BuildConfig | PlainMessage<BuildConfig> | undefined,
  ): boolean {
    return proto3.util.equals(BuildConfig, a, b);
  }
}

/**
 * Build isolation metadata
 *
 * @generated from message deploy.builderd.v1.BuildIsolation
 */
export class BuildIsolation extends Message<BuildIsolation> {
  /**
   * Unique sandbox identifier
   *
   * @generated from field: string sandbox_id = 1;
   */
  sandboxId = "";

  /**
   * Network isolation
   *
   * @generated from field: string network_namespace = 2;
   */
  networkNamespace = "";

  /**
   * Filesystem isolation
   *
   * @generated from field: string filesystem_namespace = 3;
   */
  filesystemNamespace = "";

  /**
   * SELinux/AppArmor contexts
   *
   * @generated from field: repeated string security_contexts = 4;
   */
  securityContexts: string[] = [];

  /**
   * Resource cgroup
   *
   * @generated from field: string cgroup_path = 5;
   */
  cgroupPath = "";

  constructor(data?: PartialMessage<BuildIsolation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildIsolation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sandbox_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "network_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filesystem_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: "security_contexts",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 5, name: "cgroup_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildIsolation {
    return new BuildIsolation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildIsolation {
    return new BuildIsolation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildIsolation {
    return new BuildIsolation().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildIsolation | PlainMessage<BuildIsolation> | undefined,
    b: BuildIsolation | PlainMessage<BuildIsolation> | undefined,
  ): boolean {
    return proto3.util.equals(BuildIsolation, a, b);
  }
}

/**
 * Image metadata extracted from Docker images
 *
 * @generated from message deploy.builderd.v1.ImageMetadata
 */
export class ImageMetadata extends Message<ImageMetadata> {
  /**
   * Original Docker image
   *
   * @generated from field: string original_image = 1;
   */
  originalImage = "";

  /**
   * Docker image SHA256
   *
   * @generated from field: string image_digest = 2;
   */
  imageDigest = "";

  /**
   * Layer digests
   *
   * @generated from field: repeated string layers = 3;
   */
  layers: string[] = [];

  /**
   * Docker labels
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string } = {};

  /**
   * Original CMD
   *
   * @generated from field: repeated string command = 5;
   */
  command: string[] = [];

  /**
   * Original ENTRYPOINT
   *
   * @generated from field: repeated string entrypoint = 6;
   */
  entrypoint: string[] = [];

  /**
   * WORKDIR
   *
   * @generated from field: string working_dir = 7;
   */
  workingDir = "";

  /**
   * Environment variables
   *
   * @generated from field: map<string, string> env = 8;
   */
  env: { [key: string]: string } = {};

  /**
   * EXPOSE ports
   *
   * @generated from field: repeated string exposed_ports = 9;
   */
  exposedPorts: string[] = [];

  /**
   * USER directive
   *
   * @generated from field: string user = 10;
   */
  user = "";

  /**
   * VOLUME directives
   *
   * @generated from field: repeated string volumes = 11;
   */
  volumes: string[] = [];

  constructor(data?: PartialMessage<ImageMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.ImageMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "image_digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "layers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    {
      no: 4,
      name: "labels",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 5, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "entrypoint", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "working_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 8,
      name: "env",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 9, name: "exposed_ports", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "volumes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageMetadata {
    return new ImageMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageMetadata {
    return new ImageMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageMetadata {
    return new ImageMetadata().fromJsonString(jsonString, options);
  }

  static equals(
    a: ImageMetadata | PlainMessage<ImageMetadata> | undefined,
    b: ImageMetadata | PlainMessage<ImageMetadata> | undefined,
  ): boolean {
    return proto3.util.equals(ImageMetadata, a, b);
  }
}

/**
 * Build performance metrics
 *
 * @generated from message deploy.builderd.v1.BuildMetrics
 */
export class BuildMetrics extends Message<BuildMetrics> {
  /**
   * Time to pull image/source
   *
   * @generated from field: int64 pull_duration_ms = 1;
   */
  pullDurationMs = protoInt64.zero;

  /**
   * Time to extract layers
   *
   * @generated from field: int64 extract_duration_ms = 2;
   */
  extractDurationMs = protoInt64.zero;

  /**
   * Time to build rootfs
   *
   * @generated from field: int64 build_duration_ms = 3;
   */
  buildDurationMs = protoInt64.zero;

  /**
   * Time for optimizations
   *
   * @generated from field: int64 optimize_duration_ms = 4;
   */
  optimizeDurationMs = protoInt64.zero;

  /**
   * Total build time
   *
   * @generated from field: int64 total_duration_ms = 5;
   */
  totalDurationMs = protoInt64.zero;

  /**
   * Original image/source size
   *
   * @generated from field: int64 original_size_bytes = 6;
   */
  originalSizeBytes = protoInt64.zero;

  /**
   * Final rootfs size
   *
   * @generated from field: int64 rootfs_size_bytes = 7;
   */
  rootfsSizeBytes = protoInt64.zero;

  /**
   * Size reduction percentage
   *
   * @generated from field: int64 compression_ratio = 8;
   */
  compressionRatio = protoInt64.zero;

  /**
   * Peak memory usage
   *
   * @generated from field: int64 memory_peak_bytes = 9;
   */
  memoryPeakBytes = protoInt64.zero;

  /**
   * Temporary disk usage
   *
   * @generated from field: int64 disk_usage_bytes = 10;
   */
  diskUsageBytes = protoInt64.zero;

  /**
   * CPU cores utilized
   *
   * @generated from field: int32 cpu_cores_used = 11;
   */
  cpuCoresUsed = 0;

  constructor(data?: PartialMessage<BuildMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pull_duration_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "extract_duration_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "build_duration_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "optimize_duration_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "total_duration_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "original_size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "rootfs_size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "compression_ratio", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "memory_peak_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "disk_usage_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "cpu_cores_used", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildMetrics {
    return new BuildMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildMetrics {
    return new BuildMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildMetrics {
    return new BuildMetrics().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildMetrics | PlainMessage<BuildMetrics> | undefined,
    b: BuildMetrics | PlainMessage<BuildMetrics> | undefined,
  ): boolean {
    return proto3.util.equals(BuildMetrics, a, b);
  }
}

/**
 * Complete build job information
 *
 * @generated from message deploy.builderd.v1.BuildJob
 */
export class BuildJob extends Message<BuildJob> {
  /**
   * Unique build identifier
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * Build configuration
   *
   * @generated from field: deploy.builderd.v1.BuildConfig config = 2;
   */
  config?: BuildConfig;

  /**
   * Current build state
   *
   * @generated from field: deploy.builderd.v1.BuildState state = 3;
   */
  state = BuildState.UNSPECIFIED;

  /**
   * Timestamps
   *
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp completed_at = 6;
   */
  completedAt?: Timestamp;

  /**
   * Results
   *
   * Path to built rootfs
   *
   * @generated from field: string rootfs_path = 7;
   */
  rootfsPath = "";

  /**
   * Size of rootfs
   *
   * @generated from field: int64 rootfs_size_bytes = 8;
   */
  rootfsSizeBytes = protoInt64.zero;

  /**
   * SHA256 of rootfs
   *
   * @generated from field: string rootfs_checksum = 9;
   */
  rootfsChecksum = "";

  /**
   * Build metadata
   *
   * @generated from field: deploy.builderd.v1.ImageMetadata image_metadata = 10;
   */
  imageMetadata?: ImageMetadata;

  /**
   * @generated from field: deploy.builderd.v1.BuildMetrics metrics = 11;
   */
  metrics?: BuildMetrics;

  /**
   * @generated from field: deploy.builderd.v1.BuildIsolation isolation = 12;
   */
  isolation?: BuildIsolation;

  /**
   * Error information
   *
   * @generated from field: string error_message = 13;
   */
  errorMessage = "";

  /**
   * @generated from field: repeated string build_logs = 14;
   */
  buildLogs: string[] = [];

  /**
   * Progress information
   *
   * 0-100
   *
   * @generated from field: int32 progress_percent = 15;
   */
  progressPercent = 0;

  /**
   * Current build step
   *
   * @generated from field: string current_step = 16;
   */
  currentStep = "";

  constructor(data?: PartialMessage<BuildJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.BuildJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: BuildConfig },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(BuildState) },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "started_at", kind: "message", T: Timestamp },
    { no: 6, name: "completed_at", kind: "message", T: Timestamp },
    { no: 7, name: "rootfs_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "rootfs_size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "rootfs_checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "image_metadata", kind: "message", T: ImageMetadata },
    { no: 11, name: "metrics", kind: "message", T: BuildMetrics },
    { no: 12, name: "isolation", kind: "message", T: BuildIsolation },
    { no: 13, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "build_logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "progress_percent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "current_step", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildJob {
    return new BuildJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildJob {
    return new BuildJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildJob {
    return new BuildJob().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildJob | PlainMessage<BuildJob> | undefined,
    b: BuildJob | PlainMessage<BuildJob> | undefined,
  ): boolean {
    return proto3.util.equals(BuildJob, a, b);
  }
}

/**
 * Build log entry for streaming
 *
 * @generated from message deploy.builderd.v1.StreamBuildLogsResponse
 */
export class StreamBuildLogsResponse extends Message<StreamBuildLogsResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * "info", "warn", "error", "debug"
   *
   * @generated from field: string level = 2;
   */
  level = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * "puller", "extractor", "builder"
   *
   * @generated from field: string component = 4;
   */
  component = "";

  /**
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<StreamBuildLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.StreamBuildLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "component", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: "metadata",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): StreamBuildLogsResponse {
    return new StreamBuildLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): StreamBuildLogsResponse {
    return new StreamBuildLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): StreamBuildLogsResponse {
    return new StreamBuildLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: StreamBuildLogsResponse | PlainMessage<StreamBuildLogsResponse> | undefined,
    b: StreamBuildLogsResponse | PlainMessage<StreamBuildLogsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(StreamBuildLogsResponse, a, b);
  }
}

/**
 * Tenant usage statistics
 *
 * @generated from message deploy.builderd.v1.TenantUsageStats
 */
export class TenantUsageStats extends Message<TenantUsageStats> {
  /**
   * @generated from field: int32 active_builds = 1;
   */
  activeBuilds = 0;

  /**
   * @generated from field: int32 daily_builds_used = 2;
   */
  dailyBuildsUsed = 0;

  /**
   * @generated from field: int64 storage_bytes_used = 3;
   */
  storageBytesUsed = protoInt64.zero;

  /**
   * @generated from field: int64 compute_minutes_used = 4;
   */
  computeMinutesUsed = protoInt64.zero;

  /**
   * @generated from field: int32 builds_queued = 5;
   */
  buildsQueued = 0;

  /**
   * @generated from field: int32 builds_completed_today = 6;
   */
  buildsCompletedToday = 0;

  /**
   * @generated from field: int32 builds_failed_today = 7;
   */
  buildsFailedToday = 0;

  constructor(data?: PartialMessage<TenantUsageStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.TenantUsageStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active_builds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "daily_builds_used", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "storage_bytes_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "compute_minutes_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "builds_queued", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "builds_completed_today", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "builds_failed_today", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantUsageStats {
    return new TenantUsageStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantUsageStats {
    return new TenantUsageStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantUsageStats {
    return new TenantUsageStats().fromJsonString(jsonString, options);
  }

  static equals(
    a: TenantUsageStats | PlainMessage<TenantUsageStats> | undefined,
    b: TenantUsageStats | PlainMessage<TenantUsageStats> | undefined,
  ): boolean {
    return proto3.util.equals(TenantUsageStats, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.QuotaViolation
 */
export class QuotaViolation extends Message<QuotaViolation> {
  /**
   * "concurrent_builds", "daily_builds", etc.
   *
   * @generated from field: string quota_type = 1;
   */
  quotaType = "";

  /**
   * @generated from field: int64 current_value = 2;
   */
  currentValue = protoInt64.zero;

  /**
   * @generated from field: int64 limit_value = 3;
   */
  limitValue = protoInt64.zero;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<QuotaViolation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.QuotaViolation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quota_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "limit_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuotaViolation {
    return new QuotaViolation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuotaViolation {
    return new QuotaViolation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuotaViolation {
    return new QuotaViolation().fromJsonString(jsonString, options);
  }

  static equals(
    a: QuotaViolation | PlainMessage<QuotaViolation> | undefined,
    b: QuotaViolation | PlainMessage<QuotaViolation> | undefined,
  ): boolean {
    return proto3.util.equals(QuotaViolation, a, b);
  }
}

/**
 * Request/Response messages
 *
 * @generated from message deploy.builderd.v1.CreateBuildRequest
 */
export class CreateBuildRequest extends Message<CreateBuildRequest> {
  /**
   * @generated from field: deploy.builderd.v1.BuildConfig config = 1;
   */
  config?: BuildConfig;

  constructor(data?: PartialMessage<CreateBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.CreateBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: BuildConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateBuildRequest {
    return new CreateBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined,
    b: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateBuildRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.CreateBuildResponse
 */
export class CreateBuildResponse extends Message<CreateBuildResponse> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * @generated from field: deploy.builderd.v1.BuildState state = 2;
   */
  state = BuildState.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * Path to the generated rootfs for VM creation
   *
   * @generated from field: string rootfs_path = 4;
   */
  rootfsPath = "";

  constructor(data?: PartialMessage<CreateBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.CreateBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(BuildState) },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "rootfs_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateBuildResponse {
    return new CreateBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateBuildResponse | PlainMessage<CreateBuildResponse> | undefined,
    b: CreateBuildResponse | PlainMessage<CreateBuildResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateBuildResponse, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GetBuildRequest
 */
export class GetBuildRequest extends Message<GetBuildRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * For authorization
   *
   * @generated from field: string tenant_id = 2;
   */
  tenantId = "";

  constructor(data?: PartialMessage<GetBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GetBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetBuildRequest | PlainMessage<GetBuildRequest> | undefined,
    b: GetBuildRequest | PlainMessage<GetBuildRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetBuildRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GetBuildResponse
 */
export class GetBuildResponse extends Message<GetBuildResponse> {
  /**
   * @generated from field: deploy.builderd.v1.BuildJob build = 1;
   */
  build?: BuildJob;

  constructor(data?: PartialMessage<GetBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GetBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build", kind: "message", T: BuildJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildResponse {
    return new GetBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildResponse {
    return new GetBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildResponse {
    return new GetBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetBuildResponse | PlainMessage<GetBuildResponse> | undefined,
    b: GetBuildResponse | PlainMessage<GetBuildResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetBuildResponse, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.ListBuildsRequest
 */
export class ListBuildsRequest extends Message<ListBuildsRequest> {
  /**
   * Required for filtering
   *
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: repeated deploy.builderd.v1.BuildState state_filter = 2;
   */
  stateFilter: BuildState[] = [];

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListBuildsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.ListBuildsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: "state_filter",
      kind: "enum",
      T: proto3.getEnumType(BuildState),
      repeated: true,
    },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListBuildsRequest | PlainMessage<ListBuildsRequest> | undefined,
    b: ListBuildsRequest | PlainMessage<ListBuildsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListBuildsRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.ListBuildsResponse
 */
export class ListBuildsResponse extends Message<ListBuildsResponse> {
  /**
   * @generated from field: repeated deploy.builderd.v1.BuildJob builds = 1;
   */
  builds: BuildJob[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  /**
   * @generated from field: int32 total_count = 3;
   */
  totalCount = 0;

  constructor(data?: PartialMessage<ListBuildsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.ListBuildsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: BuildJob, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ListBuildsResponse {
    return new ListBuildsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListBuildsResponse | PlainMessage<ListBuildsResponse> | undefined,
    b: ListBuildsResponse | PlainMessage<ListBuildsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListBuildsResponse, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.CancelBuildRequest
 */
export class CancelBuildRequest extends Message<CancelBuildRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * For authorization
   *
   * @generated from field: string tenant_id = 2;
   */
  tenantId = "";

  constructor(data?: PartialMessage<CancelBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.CancelBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CancelBuildRequest {
    return new CancelBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CancelBuildRequest | PlainMessage<CancelBuildRequest> | undefined,
    b: CancelBuildRequest | PlainMessage<CancelBuildRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CancelBuildRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.CancelBuildResponse
 */
export class CancelBuildResponse extends Message<CancelBuildResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: deploy.builderd.v1.BuildState state = 2;
   */
  state = BuildState.UNSPECIFIED;

  constructor(data?: PartialMessage<CancelBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.CancelBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(BuildState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildResponse {
    return new CancelBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildResponse {
    return new CancelBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CancelBuildResponse {
    return new CancelBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CancelBuildResponse | PlainMessage<CancelBuildResponse> | undefined,
    b: CancelBuildResponse | PlainMessage<CancelBuildResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CancelBuildResponse, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.DeleteBuildRequest
 */
export class DeleteBuildRequest extends Message<DeleteBuildRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * For authorization
   *
   * @generated from field: string tenant_id = 2;
   */
  tenantId = "";

  /**
   * Delete even if running
   *
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<DeleteBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.DeleteBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBuildRequest {
    return new DeleteBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBuildRequest {
    return new DeleteBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteBuildRequest {
    return new DeleteBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteBuildRequest | PlainMessage<DeleteBuildRequest> | undefined,
    b: DeleteBuildRequest | PlainMessage<DeleteBuildRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteBuildRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.DeleteBuildResponse
 */
export class DeleteBuildResponse extends Message<DeleteBuildResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.DeleteBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBuildResponse {
    return new DeleteBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBuildResponse {
    return new DeleteBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteBuildResponse {
    return new DeleteBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteBuildResponse | PlainMessage<DeleteBuildResponse> | undefined,
    b: DeleteBuildResponse | PlainMessage<DeleteBuildResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteBuildResponse, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.StreamBuildLogsRequest
 */
export class StreamBuildLogsRequest extends Message<StreamBuildLogsRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * For authorization
   *
   * @generated from field: string tenant_id = 2;
   */
  tenantId = "";

  /**
   * Continue streaming new logs
   *
   * @generated from field: bool follow = 3;
   */
  follow = false;

  constructor(data?: PartialMessage<StreamBuildLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.StreamBuildLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): StreamBuildLogsRequest {
    return new StreamBuildLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): StreamBuildLogsRequest {
    return new StreamBuildLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): StreamBuildLogsRequest {
    return new StreamBuildLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: StreamBuildLogsRequest | PlainMessage<StreamBuildLogsRequest> | undefined,
    b: StreamBuildLogsRequest | PlainMessage<StreamBuildLogsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(StreamBuildLogsRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GetTenantQuotasRequest
 */
export class GetTenantQuotasRequest extends Message<GetTenantQuotasRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  constructor(data?: PartialMessage<GetTenantQuotasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GetTenantQuotasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetTenantQuotasRequest {
    return new GetTenantQuotasRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetTenantQuotasRequest {
    return new GetTenantQuotasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetTenantQuotasRequest {
    return new GetTenantQuotasRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetTenantQuotasRequest | PlainMessage<GetTenantQuotasRequest> | undefined,
    b: GetTenantQuotasRequest | PlainMessage<GetTenantQuotasRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetTenantQuotasRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GetTenantQuotasResponse
 */
export class GetTenantQuotasResponse extends Message<GetTenantQuotasResponse> {
  /**
   * @generated from field: deploy.builderd.v1.TenantResourceLimits current_limits = 1;
   */
  currentLimits?: TenantResourceLimits;

  /**
   * @generated from field: deploy.builderd.v1.TenantUsageStats current_usage = 2;
   */
  currentUsage?: TenantUsageStats;

  /**
   * @generated from field: repeated deploy.builderd.v1.QuotaViolation violations = 3;
   */
  violations: QuotaViolation[] = [];

  constructor(data?: PartialMessage<GetTenantQuotasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GetTenantQuotasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_limits", kind: "message", T: TenantResourceLimits },
    { no: 2, name: "current_usage", kind: "message", T: TenantUsageStats },
    { no: 3, name: "violations", kind: "message", T: QuotaViolation, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetTenantQuotasResponse {
    return new GetTenantQuotasResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetTenantQuotasResponse {
    return new GetTenantQuotasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetTenantQuotasResponse {
    return new GetTenantQuotasResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetTenantQuotasResponse | PlainMessage<GetTenantQuotasResponse> | undefined,
    b: GetTenantQuotasResponse | PlainMessage<GetTenantQuotasResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetTenantQuotasResponse, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GetBuildStatsRequest
 */
export class GetBuildStatsRequest extends Message<GetBuildStatsRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<GetBuildStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GetBuildStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildStatsRequest {
    return new GetBuildStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildStatsRequest {
    return new GetBuildStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBuildStatsRequest {
    return new GetBuildStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetBuildStatsRequest | PlainMessage<GetBuildStatsRequest> | undefined,
    b: GetBuildStatsRequest | PlainMessage<GetBuildStatsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetBuildStatsRequest, a, b);
  }
}

/**
 * @generated from message deploy.builderd.v1.GetBuildStatsResponse
 */
export class GetBuildStatsResponse extends Message<GetBuildStatsResponse> {
  /**
   * @generated from field: int32 total_builds = 1;
   */
  totalBuilds = 0;

  /**
   * @generated from field: int32 successful_builds = 2;
   */
  successfulBuilds = 0;

  /**
   * @generated from field: int32 failed_builds = 3;
   */
  failedBuilds = 0;

  /**
   * @generated from field: int64 avg_build_time_ms = 4;
   */
  avgBuildTimeMs = protoInt64.zero;

  /**
   * @generated from field: int64 total_storage_bytes = 5;
   */
  totalStorageBytes = protoInt64.zero;

  /**
   * @generated from field: int64 total_compute_minutes = 6;
   */
  totalComputeMinutes = protoInt64.zero;

  /**
   * @generated from field: repeated deploy.builderd.v1.BuildJob recent_builds = 7;
   */
  recentBuilds: BuildJob[] = [];

  constructor(data?: PartialMessage<GetBuildStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.builderd.v1.GetBuildStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_builds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "successful_builds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "failed_builds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "avg_build_time_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "total_storage_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "total_compute_minutes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "recent_builds", kind: "message", T: BuildJob, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetBuildStatsResponse {
    return new GetBuildStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildStatsResponse {
    return new GetBuildStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetBuildStatsResponse {
    return new GetBuildStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetBuildStatsResponse | PlainMessage<GetBuildStatsResponse> | undefined,
    b: GetBuildStatsResponse | PlainMessage<GetBuildStatsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetBuildStatsResponse, a, b);
  }
}
