// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/deploy/billaged/v1/billing.proto (package deploy.billaged.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, Timestamp, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message deploy.billaged.v1.VMMetrics
 */
export class VMMetrics extends Message<VMMetrics> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: int64 cpu_time_nanos = 2;
   */
  cpuTimeNanos = protoInt64.zero;

  /**
   * @generated from field: int64 memory_usage_bytes = 3;
   */
  memoryUsageBytes = protoInt64.zero;

  /**
   * @generated from field: int64 disk_read_bytes = 4;
   */
  diskReadBytes = protoInt64.zero;

  /**
   * @generated from field: int64 disk_write_bytes = 5;
   */
  diskWriteBytes = protoInt64.zero;

  /**
   * @generated from field: int64 network_rx_bytes = 6;
   */
  networkRxBytes = protoInt64.zero;

  /**
   * @generated from field: int64 network_tx_bytes = 7;
   */
  networkTxBytes = protoInt64.zero;

  constructor(data?: PartialMessage<VMMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.VMMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "cpu_time_nanos", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "memory_usage_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "disk_read_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "disk_write_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "network_rx_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "network_tx_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VMMetrics {
    return new VMMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VMMetrics {
    return new VMMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VMMetrics {
    return new VMMetrics().fromJsonString(jsonString, options);
  }

  static equals(
    a: VMMetrics | PlainMessage<VMMetrics> | undefined,
    b: VMMetrics | PlainMessage<VMMetrics> | undefined,
  ): boolean {
    return proto3.util.equals(VMMetrics, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.SendMetricsBatchRequest
 */
export class SendMetricsBatchRequest extends Message<SendMetricsBatchRequest> {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: repeated deploy.billaged.v1.VMMetrics metrics = 3;
   */
  metrics: VMMetrics[] = [];

  constructor(data?: PartialMessage<SendMetricsBatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.SendMetricsBatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metrics", kind: "message", T: VMMetrics, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendMetricsBatchRequest {
    return new SendMetricsBatchRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SendMetricsBatchRequest {
    return new SendMetricsBatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendMetricsBatchRequest {
    return new SendMetricsBatchRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendMetricsBatchRequest | PlainMessage<SendMetricsBatchRequest> | undefined,
    b: SendMetricsBatchRequest | PlainMessage<SendMetricsBatchRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SendMetricsBatchRequest, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.SendMetricsBatchResponse
 */
export class SendMetricsBatchResponse extends Message<SendMetricsBatchResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<SendMetricsBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.SendMetricsBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendMetricsBatchResponse {
    return new SendMetricsBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SendMetricsBatchResponse {
    return new SendMetricsBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendMetricsBatchResponse {
    return new SendMetricsBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendMetricsBatchResponse | PlainMessage<SendMetricsBatchResponse> | undefined,
    b: SendMetricsBatchResponse | PlainMessage<SendMetricsBatchResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SendMetricsBatchResponse, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.SendHeartbeatRequest
 */
export class SendHeartbeatRequest extends Message<SendHeartbeatRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: repeated string active_vms = 2;
   */
  activeVms: string[] = [];

  constructor(data?: PartialMessage<SendHeartbeatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.SendHeartbeatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_vms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendHeartbeatRequest {
    return new SendHeartbeatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendHeartbeatRequest {
    return new SendHeartbeatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendHeartbeatRequest {
    return new SendHeartbeatRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendHeartbeatRequest | PlainMessage<SendHeartbeatRequest> | undefined,
    b: SendHeartbeatRequest | PlainMessage<SendHeartbeatRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SendHeartbeatRequest, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.SendHeartbeatResponse
 */
export class SendHeartbeatResponse extends Message<SendHeartbeatResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<SendHeartbeatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.SendHeartbeatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendHeartbeatResponse {
    return new SendHeartbeatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendHeartbeatResponse {
    return new SendHeartbeatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendHeartbeatResponse {
    return new SendHeartbeatResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendHeartbeatResponse | PlainMessage<SendHeartbeatResponse> | undefined,
    b: SendHeartbeatResponse | PlainMessage<SendHeartbeatResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SendHeartbeatResponse, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.NotifyVmStartedRequest
 */
export class NotifyVmStartedRequest extends Message<NotifyVmStartedRequest> {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: int64 start_time = 3;
   */
  startTime = protoInt64.zero;

  constructor(data?: PartialMessage<NotifyVmStartedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.NotifyVmStartedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): NotifyVmStartedRequest {
    return new NotifyVmStartedRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStartedRequest {
    return new NotifyVmStartedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStartedRequest {
    return new NotifyVmStartedRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: NotifyVmStartedRequest | PlainMessage<NotifyVmStartedRequest> | undefined,
    b: NotifyVmStartedRequest | PlainMessage<NotifyVmStartedRequest> | undefined,
  ): boolean {
    return proto3.util.equals(NotifyVmStartedRequest, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.NotifyVmStartedResponse
 */
export class NotifyVmStartedResponse extends Message<NotifyVmStartedResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<NotifyVmStartedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.NotifyVmStartedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): NotifyVmStartedResponse {
    return new NotifyVmStartedResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStartedResponse {
    return new NotifyVmStartedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStartedResponse {
    return new NotifyVmStartedResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: NotifyVmStartedResponse | PlainMessage<NotifyVmStartedResponse> | undefined,
    b: NotifyVmStartedResponse | PlainMessage<NotifyVmStartedResponse> | undefined,
  ): boolean {
    return proto3.util.equals(NotifyVmStartedResponse, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.NotifyVmStoppedRequest
 */
export class NotifyVmStoppedRequest extends Message<NotifyVmStoppedRequest> {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId = "";

  /**
   * @generated from field: int64 stop_time = 2;
   */
  stopTime = protoInt64.zero;

  constructor(data?: PartialMessage<NotifyVmStoppedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.NotifyVmStoppedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stop_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): NotifyVmStoppedRequest {
    return new NotifyVmStoppedRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStoppedRequest {
    return new NotifyVmStoppedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStoppedRequest {
    return new NotifyVmStoppedRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: NotifyVmStoppedRequest | PlainMessage<NotifyVmStoppedRequest> | undefined,
    b: NotifyVmStoppedRequest | PlainMessage<NotifyVmStoppedRequest> | undefined,
  ): boolean {
    return proto3.util.equals(NotifyVmStoppedRequest, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.NotifyVmStoppedResponse
 */
export class NotifyVmStoppedResponse extends Message<NotifyVmStoppedResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<NotifyVmStoppedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.NotifyVmStoppedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): NotifyVmStoppedResponse {
    return new NotifyVmStoppedResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStoppedResponse {
    return new NotifyVmStoppedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): NotifyVmStoppedResponse {
    return new NotifyVmStoppedResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: NotifyVmStoppedResponse | PlainMessage<NotifyVmStoppedResponse> | undefined,
    b: NotifyVmStoppedResponse | PlainMessage<NotifyVmStoppedResponse> | undefined,
  ): boolean {
    return proto3.util.equals(NotifyVmStoppedResponse, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.NotifyPossibleGapRequest
 */
export class NotifyPossibleGapRequest extends Message<NotifyPossibleGapRequest> {
  /**
   * @generated from field: string vm_id = 1;
   */
  vmId = "";

  /**
   * @generated from field: int64 last_sent = 2;
   */
  lastSent = protoInt64.zero;

  /**
   * @generated from field: int64 resume_time = 3;
   */
  resumeTime = protoInt64.zero;

  constructor(data?: PartialMessage<NotifyPossibleGapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.NotifyPossibleGapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vm_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_sent", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "resume_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): NotifyPossibleGapRequest {
    return new NotifyPossibleGapRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): NotifyPossibleGapRequest {
    return new NotifyPossibleGapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): NotifyPossibleGapRequest {
    return new NotifyPossibleGapRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: NotifyPossibleGapRequest | PlainMessage<NotifyPossibleGapRequest> | undefined,
    b: NotifyPossibleGapRequest | PlainMessage<NotifyPossibleGapRequest> | undefined,
  ): boolean {
    return proto3.util.equals(NotifyPossibleGapRequest, a, b);
  }
}

/**
 * @generated from message deploy.billaged.v1.NotifyPossibleGapResponse
 */
export class NotifyPossibleGapResponse extends Message<NotifyPossibleGapResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<NotifyPossibleGapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.billaged.v1.NotifyPossibleGapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): NotifyPossibleGapResponse {
    return new NotifyPossibleGapResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): NotifyPossibleGapResponse {
    return new NotifyPossibleGapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): NotifyPossibleGapResponse {
    return new NotifyPossibleGapResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: NotifyPossibleGapResponse | PlainMessage<NotifyPossibleGapResponse> | undefined,
    b: NotifyPossibleGapResponse | PlainMessage<NotifyPossibleGapResponse> | undefined,
  ): boolean {
    return proto3.util.equals(NotifyPossibleGapResponse, a, b);
  }
}
