// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/deploy/assetmanagerd/v1/asset.proto (package deploy.assetmanagerd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum deploy.assetmanagerd.v1.AssetType
 */
export enum AssetType {
  /**
   * @generated from enum value: ASSET_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSET_TYPE_KERNEL = 1;
   */
  KERNEL = 1,

  /**
   * @generated from enum value: ASSET_TYPE_ROOTFS = 2;
   */
  ROOTFS = 2,

  /**
   * @generated from enum value: ASSET_TYPE_INITRD = 3;
   */
  INITRD = 3,

  /**
   * @generated from enum value: ASSET_TYPE_DISK_IMAGE = 4;
   */
  DISK_IMAGE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AssetType)
proto3.util.setEnumType(AssetType, "deploy.assetmanagerd.v1.AssetType", [
  { no: 0, name: "ASSET_TYPE_UNSPECIFIED" },
  { no: 1, name: "ASSET_TYPE_KERNEL" },
  { no: 2, name: "ASSET_TYPE_ROOTFS" },
  { no: 3, name: "ASSET_TYPE_INITRD" },
  { no: 4, name: "ASSET_TYPE_DISK_IMAGE" },
]);

/**
 * @generated from enum deploy.assetmanagerd.v1.AssetStatus
 */
export enum AssetStatus {
  /**
   * @generated from enum value: ASSET_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSET_STATUS_UPLOADING = 1;
   */
  UPLOADING = 1,

  /**
   * @generated from enum value: ASSET_STATUS_AVAILABLE = 2;
   */
  AVAILABLE = 2,

  /**
   * @generated from enum value: ASSET_STATUS_DELETING = 3;
   */
  DELETING = 3,

  /**
   * @generated from enum value: ASSET_STATUS_ERROR = 4;
   */
  ERROR = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AssetStatus)
proto3.util.setEnumType(AssetStatus, "deploy.assetmanagerd.v1.AssetStatus", [
  { no: 0, name: "ASSET_STATUS_UNSPECIFIED" },
  { no: 1, name: "ASSET_STATUS_UPLOADING" },
  { no: 2, name: "ASSET_STATUS_AVAILABLE" },
  { no: 3, name: "ASSET_STATUS_DELETING" },
  { no: 4, name: "ASSET_STATUS_ERROR" },
]);

/**
 * @generated from enum deploy.assetmanagerd.v1.StorageBackend
 */
export enum StorageBackend {
  /**
   * @generated from enum value: STORAGE_BACKEND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STORAGE_BACKEND_LOCAL = 1;
   */
  LOCAL = 1,

  /**
   * @generated from enum value: STORAGE_BACKEND_S3 = 2;
   */
  S3 = 2,

  /**
   * @generated from enum value: STORAGE_BACKEND_HTTP = 3;
   */
  HTTP = 3,

  /**
   * @generated from enum value: STORAGE_BACKEND_NFS = 4;
   */
  NFS = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(StorageBackend)
proto3.util.setEnumType(StorageBackend, "deploy.assetmanagerd.v1.StorageBackend", [
  { no: 0, name: "STORAGE_BACKEND_UNSPECIFIED" },
  { no: 1, name: "STORAGE_BACKEND_LOCAL" },
  { no: 2, name: "STORAGE_BACKEND_S3" },
  { no: 3, name: "STORAGE_BACKEND_HTTP" },
  { no: 4, name: "STORAGE_BACKEND_NFS" },
]);

/**
 * @generated from message deploy.assetmanagerd.v1.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: deploy.assetmanagerd.v1.AssetType type = 3;
   */
  type = AssetType.UNSPECIFIED;

  /**
   * @generated from field: deploy.assetmanagerd.v1.AssetStatus status = 4;
   */
  status = AssetStatus.UNSPECIFIED;

  /**
   * Storage information
   *
   * @generated from field: deploy.assetmanagerd.v1.StorageBackend backend = 5;
   */
  backend = StorageBackend.UNSPECIFIED;

  /**
   * Path or URL depending on backend
   *
   * @generated from field: string location = 6;
   */
  location = "";

  /**
   * @generated from field: int64 size_bytes = 7;
   */
  sizeBytes = protoInt64.zero;

  /**
   * SHA256
   *
   * @generated from field: string checksum = 8;
   */
  checksum = "";

  /**
   * Metadata
   *
   * @generated from field: map<string, string> labels = 9;
   */
  labels: { [key: string]: string } = {};

  /**
   * e.g., "builderd", "manual"
   *
   * @generated from field: string created_by = 10;
   */
  createdBy = "";

  /**
   * Unix timestamp
   *
   * @generated from field: int64 created_at = 11;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: int64 last_accessed_at = 12;
   */
  lastAccessedAt = protoInt64.zero;

  /**
   * Reference counting for GC
   *
   * @generated from field: int32 reference_count = 13;
   */
  referenceCount = 0;

  /**
   * Build information (if created by builderd)
   *
   * @generated from field: string build_id = 14;
   */
  buildId = "";

  /**
   * @generated from field: string source_image = 15;
   */
  sourceImage = "";

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(AssetType) },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(AssetStatus) },
    { no: 5, name: "backend", kind: "enum", T: proto3.getEnumType(StorageBackend) },
    { no: 6, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 9,
      name: "labels",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 10, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "last_accessed_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "reference_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "source_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(
    a: Asset | PlainMessage<Asset> | undefined,
    b: Asset | PlainMessage<Asset> | undefined,
  ): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.UploadAssetRequest
 */
export class UploadAssetRequest extends Message<UploadAssetRequest> {
  /**
   * @generated from oneof deploy.assetmanagerd.v1.UploadAssetRequest.data
   */
  data:
    | {
        /**
         * @generated from field: deploy.assetmanagerd.v1.UploadAssetMetadata metadata = 1;
         */
        value: UploadAssetMetadata;
        case: "metadata";
      }
    | {
        /**
         * @generated from field: bytes chunk = 2;
         */
        value: Uint8Array;
        case: "chunk";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.UploadAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: UploadAssetMetadata, oneof: "data" },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadAssetRequest {
    return new UploadAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadAssetRequest {
    return new UploadAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UploadAssetRequest {
    return new UploadAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UploadAssetRequest | PlainMessage<UploadAssetRequest> | undefined,
    b: UploadAssetRequest | PlainMessage<UploadAssetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UploadAssetRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.UploadAssetMetadata
 */
export class UploadAssetMetadata extends Message<UploadAssetMetadata> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: deploy.assetmanagerd.v1.AssetType type = 2;
   */
  type = AssetType.UNSPECIFIED;

  /**
   * @generated from field: int64 size_bytes = 3;
   */
  sizeBytes = protoInt64.zero;

  /**
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: string created_by = 5;
   */
  createdBy = "";

  /**
   * @generated from field: string build_id = 6;
   */
  buildId = "";

  /**
   * @generated from field: string source_image = 7;
   */
  sourceImage = "";

  /**
   * Optional: specific asset ID to use
   *
   * @generated from field: string id = 8;
   */
  id = "";

  constructor(data?: PartialMessage<UploadAssetMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.UploadAssetMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AssetType) },
    { no: 3, name: "size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    {
      no: 4,
      name: "labels",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 5, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "source_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadAssetMetadata {
    return new UploadAssetMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadAssetMetadata {
    return new UploadAssetMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UploadAssetMetadata {
    return new UploadAssetMetadata().fromJsonString(jsonString, options);
  }

  static equals(
    a: UploadAssetMetadata | PlainMessage<UploadAssetMetadata> | undefined,
    b: UploadAssetMetadata | PlainMessage<UploadAssetMetadata> | undefined,
  ): boolean {
    return proto3.util.equals(UploadAssetMetadata, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.UploadAssetResponse
 */
export class UploadAssetResponse extends Message<UploadAssetResponse> {
  /**
   * @generated from field: deploy.assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  constructor(data?: PartialMessage<UploadAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.UploadAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset", kind: "message", T: Asset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadAssetResponse {
    return new UploadAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadAssetResponse {
    return new UploadAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): UploadAssetResponse {
    return new UploadAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UploadAssetResponse | PlainMessage<UploadAssetResponse> | undefined,
    b: UploadAssetResponse | PlainMessage<UploadAssetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UploadAssetResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.RegisterAssetRequest
 */
export class RegisterAssetRequest extends Message<RegisterAssetRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: deploy.assetmanagerd.v1.AssetType type = 2;
   */
  type = AssetType.UNSPECIFIED;

  /**
   * @generated from field: deploy.assetmanagerd.v1.StorageBackend backend = 3;
   */
  backend = StorageBackend.UNSPECIFIED;

  /**
   * @generated from field: string location = 4;
   */
  location = "";

  /**
   * @generated from field: int64 size_bytes = 5;
   */
  sizeBytes = protoInt64.zero;

  /**
   * @generated from field: string checksum = 6;
   */
  checksum = "";

  /**
   * @generated from field: map<string, string> labels = 7;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: string created_by = 8;
   */
  createdBy = "";

  /**
   * Optional build information
   *
   * @generated from field: string build_id = 9;
   */
  buildId = "";

  /**
   * @generated from field: string source_image = 10;
   */
  sourceImage = "";

  /**
   * Optional: specific asset ID to use (if not provided, one will be generated)
   *
   * @generated from field: string id = 11;
   */
  id = "";

  constructor(data?: PartialMessage<RegisterAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.RegisterAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AssetType) },
    { no: 3, name: "backend", kind: "enum", T: proto3.getEnumType(StorageBackend) },
    { no: 4, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 7,
      name: "labels",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 8, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "source_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAssetRequest {
    return new RegisterAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAssetRequest {
    return new RegisterAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterAssetRequest {
    return new RegisterAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: RegisterAssetRequest | PlainMessage<RegisterAssetRequest> | undefined,
    b: RegisterAssetRequest | PlainMessage<RegisterAssetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterAssetRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.RegisterAssetResponse
 */
export class RegisterAssetResponse extends Message<RegisterAssetResponse> {
  /**
   * @generated from field: deploy.assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  constructor(data?: PartialMessage<RegisterAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.RegisterAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset", kind: "message", T: Asset },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RegisterAssetResponse {
    return new RegisterAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAssetResponse {
    return new RegisterAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterAssetResponse {
    return new RegisterAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: RegisterAssetResponse | PlainMessage<RegisterAssetResponse> | undefined,
    b: RegisterAssetResponse | PlainMessage<RegisterAssetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterAssetResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.GetAssetRequest
 */
export class GetAssetRequest extends Message<GetAssetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * If true, ensures asset is available locally (downloads if needed)
   *
   * @generated from field: bool ensure_local = 2;
   */
  ensureLocal = false;

  constructor(data?: PartialMessage<GetAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.GetAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ensure_local", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAssetRequest {
    return new GetAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAssetRequest {
    return new GetAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAssetRequest {
    return new GetAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetAssetRequest | PlainMessage<GetAssetRequest> | undefined,
    b: GetAssetRequest | PlainMessage<GetAssetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetAssetRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.GetAssetResponse
 */
export class GetAssetResponse extends Message<GetAssetResponse> {
  /**
   * @generated from field: deploy.assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  /**
   * Local path if ensure_local was true
   *
   * @generated from field: string local_path = 2;
   */
  localPath = "";

  constructor(data?: PartialMessage<GetAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.GetAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset", kind: "message", T: Asset },
    { no: 2, name: "local_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAssetResponse {
    return new GetAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAssetResponse {
    return new GetAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAssetResponse {
    return new GetAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetAssetResponse | PlainMessage<GetAssetResponse> | undefined,
    b: GetAssetResponse | PlainMessage<GetAssetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetAssetResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.ListAssetsRequest
 */
export class ListAssetsRequest extends Message<ListAssetsRequest> {
  /**
   * Filter by type
   *
   * @generated from field: deploy.assetmanagerd.v1.AssetType type = 1;
   */
  type = AssetType.UNSPECIFIED;

  /**
   * Filter by status
   *
   * @generated from field: deploy.assetmanagerd.v1.AssetStatus status = 2;
   */
  status = AssetStatus.UNSPECIFIED;

  /**
   * Filter by labels (all must match)
   *
   * @generated from field: map<string, string> label_selector = 3;
   */
  labelSelector: { [key: string]: string } = {};

  /**
   * Pagination
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.ListAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AssetType) },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(AssetStatus) },
    {
      no: 3,
      name: "label_selector",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssetsRequest {
    return new ListAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssetsRequest {
    return new ListAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAssetsRequest {
    return new ListAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListAssetsRequest | PlainMessage<ListAssetsRequest> | undefined,
    b: ListAssetsRequest | PlainMessage<ListAssetsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListAssetsRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.ListAssetsResponse
 */
export class ListAssetsResponse extends Message<ListAssetsResponse> {
  /**
   * @generated from field: repeated deploy.assetmanagerd.v1.Asset assets = 1;
   */
  assets: Asset[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.ListAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssetsResponse {
    return new ListAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssetsResponse {
    return new ListAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ListAssetsResponse {
    return new ListAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListAssetsResponse | PlainMessage<ListAssetsResponse> | undefined,
    b: ListAssetsResponse | PlainMessage<ListAssetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListAssetsResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.AcquireAssetRequest
 */
export class AcquireAssetRequest extends Message<AcquireAssetRequest> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * e.g., "vm-123"
   *
   * @generated from field: string acquired_by = 2;
   */
  acquiredBy = "";

  /**
   * Optional auto-release after TTL
   *
   * @generated from field: int64 ttl_seconds = 3;
   */
  ttlSeconds = protoInt64.zero;

  constructor(data?: PartialMessage<AcquireAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.AcquireAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "acquired_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ttl_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireAssetRequest {
    return new AcquireAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireAssetRequest {
    return new AcquireAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AcquireAssetRequest {
    return new AcquireAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: AcquireAssetRequest | PlainMessage<AcquireAssetRequest> | undefined,
    b: AcquireAssetRequest | PlainMessage<AcquireAssetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(AcquireAssetRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.AcquireAssetResponse
 */
export class AcquireAssetResponse extends Message<AcquireAssetResponse> {
  /**
   * @generated from field: deploy.assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  /**
   * Use this for release
   *
   * @generated from field: string lease_id = 2;
   */
  leaseId = "";

  constructor(data?: PartialMessage<AcquireAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.AcquireAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset", kind: "message", T: Asset },
    { no: 2, name: "lease_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireAssetResponse {
    return new AcquireAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireAssetResponse {
    return new AcquireAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AcquireAssetResponse {
    return new AcquireAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: AcquireAssetResponse | PlainMessage<AcquireAssetResponse> | undefined,
    b: AcquireAssetResponse | PlainMessage<AcquireAssetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(AcquireAssetResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.ReleaseAssetRequest
 */
export class ReleaseAssetRequest extends Message<ReleaseAssetRequest> {
  /**
   * @generated from field: string lease_id = 1;
   */
  leaseId = "";

  constructor(data?: PartialMessage<ReleaseAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.ReleaseAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lease_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseAssetRequest {
    return new ReleaseAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseAssetRequest {
    return new ReleaseAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ReleaseAssetRequest {
    return new ReleaseAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReleaseAssetRequest | PlainMessage<ReleaseAssetRequest> | undefined,
    b: ReleaseAssetRequest | PlainMessage<ReleaseAssetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ReleaseAssetRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.ReleaseAssetResponse
 */
export class ReleaseAssetResponse extends Message<ReleaseAssetResponse> {
  /**
   * @generated from field: deploy.assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  constructor(data?: PartialMessage<ReleaseAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.ReleaseAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset", kind: "message", T: Asset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseAssetResponse {
    return new ReleaseAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseAssetResponse {
    return new ReleaseAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ReleaseAssetResponse {
    return new ReleaseAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReleaseAssetResponse | PlainMessage<ReleaseAssetResponse> | undefined,
    b: ReleaseAssetResponse | PlainMessage<ReleaseAssetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ReleaseAssetResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.DeleteAssetRequest
 */
export class DeleteAssetRequest extends Message<DeleteAssetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Delete even if ref count > 0
   *
   * @generated from field: bool force = 2;
   */
  force = false;

  constructor(data?: PartialMessage<DeleteAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.DeleteAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAssetRequest {
    return new DeleteAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAssetRequest {
    return new DeleteAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteAssetRequest {
    return new DeleteAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteAssetRequest | PlainMessage<DeleteAssetRequest> | undefined,
    b: DeleteAssetRequest | PlainMessage<DeleteAssetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteAssetRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.DeleteAssetResponse
 */
export class DeleteAssetResponse extends Message<DeleteAssetResponse> {
  /**
   * @generated from field: bool deleted = 1;
   */
  deleted = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<DeleteAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.DeleteAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAssetResponse {
    return new DeleteAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAssetResponse {
    return new DeleteAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeleteAssetResponse {
    return new DeleteAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteAssetResponse | PlainMessage<DeleteAssetResponse> | undefined,
    b: DeleteAssetResponse | PlainMessage<DeleteAssetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteAssetResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.GarbageCollectRequest
 */
export class GarbageCollectRequest extends Message<GarbageCollectRequest> {
  /**
   * Delete assets not accessed in this many seconds
   *
   * @generated from field: int64 max_age_seconds = 1;
   */
  maxAgeSeconds = protoInt64.zero;

  /**
   * Delete assets with 0 references
   *
   * @generated from field: bool delete_unreferenced = 2;
   */
  deleteUnreferenced = false;

  /**
   * Dry run - just return what would be deleted
   *
   * @generated from field: bool dry_run = 3;
   */
  dryRun = false;

  constructor(data?: PartialMessage<GarbageCollectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.GarbageCollectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_age_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "delete_unreferenced", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GarbageCollectRequest {
    return new GarbageCollectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GarbageCollectRequest {
    return new GarbageCollectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GarbageCollectRequest {
    return new GarbageCollectRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GarbageCollectRequest | PlainMessage<GarbageCollectRequest> | undefined,
    b: GarbageCollectRequest | PlainMessage<GarbageCollectRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GarbageCollectRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.GarbageCollectResponse
 */
export class GarbageCollectResponse extends Message<GarbageCollectResponse> {
  /**
   * @generated from field: repeated deploy.assetmanagerd.v1.Asset deleted_assets = 1;
   */
  deletedAssets: Asset[] = [];

  /**
   * @generated from field: int64 bytes_freed = 2;
   */
  bytesFreed = protoInt64.zero;

  constructor(data?: PartialMessage<GarbageCollectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.GarbageCollectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleted_assets", kind: "message", T: Asset, repeated: true },
    { no: 2, name: "bytes_freed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GarbageCollectResponse {
    return new GarbageCollectResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GarbageCollectResponse {
    return new GarbageCollectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GarbageCollectResponse {
    return new GarbageCollectResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GarbageCollectResponse | PlainMessage<GarbageCollectResponse> | undefined,
    b: GarbageCollectResponse | PlainMessage<GarbageCollectResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GarbageCollectResponse, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.PrepareAssetsRequest
 */
export class PrepareAssetsRequest extends Message<PrepareAssetsRequest> {
  /**
   * @generated from field: repeated string asset_ids = 1;
   */
  assetIds: string[] = [];

  /**
   * e.g., jailer chroot path
   *
   * @generated from field: string target_path = 2;
   */
  targetPath = "";

  /**
   * e.g., "vm-123"
   *
   * @generated from field: string prepared_for = 3;
   */
  preparedFor = "";

  constructor(data?: PartialMessage<PrepareAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.PrepareAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "target_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prepared_for", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareAssetsRequest {
    return new PrepareAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareAssetsRequest {
    return new PrepareAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PrepareAssetsRequest {
    return new PrepareAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: PrepareAssetsRequest | PlainMessage<PrepareAssetsRequest> | undefined,
    b: PrepareAssetsRequest | PlainMessage<PrepareAssetsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PrepareAssetsRequest, a, b);
  }
}

/**
 * @generated from message deploy.assetmanagerd.v1.PrepareAssetsResponse
 */
export class PrepareAssetsResponse extends Message<PrepareAssetsResponse> {
  /**
   * asset_id -> local path
   *
   * @generated from field: map<string, string> asset_paths = 1;
   */
  assetPaths: { [key: string]: string } = {};

  constructor(data?: PartialMessage<PrepareAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.PrepareAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "asset_paths",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PrepareAssetsResponse {
    return new PrepareAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareAssetsResponse {
    return new PrepareAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PrepareAssetsResponse {
    return new PrepareAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PrepareAssetsResponse | PlainMessage<PrepareAssetsResponse> | undefined,
    b: PrepareAssetsResponse | PlainMessage<PrepareAssetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(PrepareAssetsResponse, a, b);
  }
}

/**
 * QueryAssetsRequest is similar to ListAssetsRequest but with build options
 *
 * @generated from message deploy.assetmanagerd.v1.QueryAssetsRequest
 */
export class QueryAssetsRequest extends Message<QueryAssetsRequest> {
  /**
   * Filter by type
   *
   * @generated from field: deploy.assetmanagerd.v1.AssetType type = 1;
   */
  type = AssetType.UNSPECIFIED;

  /**
   * Filter by status
   *
   * @generated from field: deploy.assetmanagerd.v1.AssetStatus status = 2;
   */
  status = AssetStatus.UNSPECIFIED;

  /**
   * Filter by labels (all must match)
   *
   * @generated from field: map<string, string> label_selector = 3;
   */
  labelSelector: { [key: string]: string } = {};

  /**
   * Pagination
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  /**
   * Build options - if asset not found and these are set, trigger build
   *
   * @generated from field: deploy.assetmanagerd.v1.BuildOptions build_options = 6;
   */
  buildOptions?: BuildOptions;

  constructor(data?: PartialMessage<QueryAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.QueryAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AssetType) },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(AssetStatus) },
    {
      no: 3,
      name: "label_selector",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "build_options", kind: "message", T: BuildOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAssetsRequest {
    return new QueryAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAssetsRequest {
    return new QueryAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAssetsRequest {
    return new QueryAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryAssetsRequest | PlainMessage<QueryAssetsRequest> | undefined,
    b: QueryAssetsRequest | PlainMessage<QueryAssetsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryAssetsRequest, a, b);
  }
}

/**
 * BuildOptions controls automatic asset creation
 *
 * @generated from message deploy.assetmanagerd.v1.BuildOptions
 */
export class BuildOptions extends Message<BuildOptions> {
  /**
   * Enable automatic building if assets don't exist
   *
   * @generated from field: bool enable_auto_build = 1;
   */
  enableAutoBuild = false;

  /**
   * Wait for build completion before returning
   *
   * @generated from field: bool wait_for_completion = 2;
   */
  waitForCompletion = false;

  /**
   * Timeout for build operation (seconds)
   *
   * @generated from field: int32 build_timeout_seconds = 3;
   */
  buildTimeoutSeconds = 0;

  /**
   * Additional labels to add to the built asset
   *
   * @generated from field: map<string, string> build_labels = 4;
   */
  buildLabels: { [key: string]: string } = {};

  /**
   * Tenant context for build authorization
   *
   * @generated from field: string tenant_id = 5;
   */
  tenantId = "";

  /**
   * Suggested asset ID to use when registering the built asset
   * This allows the caller to know the asset ID before it's built
   *
   * @generated from field: string suggested_asset_id = 6;
   */
  suggestedAssetId = "";

  constructor(data?: PartialMessage<BuildOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.BuildOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable_auto_build", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "wait_for_completion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "build_timeout_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    {
      no: 4,
      name: "build_labels",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 5, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "suggested_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildOptions {
    return new BuildOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildOptions {
    return new BuildOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildOptions {
    return new BuildOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildOptions | PlainMessage<BuildOptions> | undefined,
    b: BuildOptions | PlainMessage<BuildOptions> | undefined,
  ): boolean {
    return proto3.util.equals(BuildOptions, a, b);
  }
}

/**
 * QueryAssetsResponse includes build information if builds were triggered
 *
 * @generated from message deploy.assetmanagerd.v1.QueryAssetsResponse
 */
export class QueryAssetsResponse extends Message<QueryAssetsResponse> {
  /**
   * @generated from field: repeated deploy.assetmanagerd.v1.Asset assets = 1;
   */
  assets: Asset[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  /**
   * Information about any builds that were triggered
   *
   * @generated from field: repeated deploy.assetmanagerd.v1.BuildInfo triggered_builds = 3;
   */
  triggeredBuilds: BuildInfo[] = [];

  constructor(data?: PartialMessage<QueryAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.QueryAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "triggered_builds", kind: "message", T: BuildInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAssetsResponse {
    return new QueryAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAssetsResponse {
    return new QueryAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAssetsResponse {
    return new QueryAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryAssetsResponse | PlainMessage<QueryAssetsResponse> | undefined,
    b: QueryAssetsResponse | PlainMessage<QueryAssetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryAssetsResponse, a, b);
  }
}

/**
 * BuildInfo provides information about triggered builds
 *
 * @generated from message deploy.assetmanagerd.v1.BuildInfo
 */
export class BuildInfo extends Message<BuildInfo> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * @generated from field: string docker_image = 2;
   */
  dockerImage = "";

  /**
   * "pending", "building", "completed", "failed"
   *
   * @generated from field: string status = 3;
   */
  status = "";

  /**
   * @generated from field: string error_message = 4;
   */
  errorMessage = "";

  /**
   * Asset ID if build completed and asset was registered
   *
   * @generated from field: string asset_id = 5;
   */
  assetId = "";

  constructor(data?: PartialMessage<BuildInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "deploy.assetmanagerd.v1.BuildInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "docker_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildInfo {
    return new BuildInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildInfo {
    return new BuildInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildInfo {
    return new BuildInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: BuildInfo | PlainMessage<BuildInfo> | undefined,
    b: BuildInfo | PlainMessage<BuildInfo> | undefined,
  ): boolean {
    return proto3.util.equals(BuildInfo, a, b);
  }
}
