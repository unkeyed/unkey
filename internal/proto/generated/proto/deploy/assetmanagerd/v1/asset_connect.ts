// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file proto/deploy/assetmanagerd/v1/asset.proto (package deploy.assetmanagerd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import {
  AcquireAssetRequest,
  AcquireAssetResponse,
  DeleteAssetRequest,
  DeleteAssetResponse,
  GarbageCollectRequest,
  GarbageCollectResponse,
  GetAssetRequest,
  GetAssetResponse,
  ListAssetsRequest,
  ListAssetsResponse,
  PrepareAssetsRequest,
  PrepareAssetsResponse,
  QueryAssetsRequest,
  QueryAssetsResponse,
  RegisterAssetRequest,
  RegisterAssetResponse,
  ReleaseAssetRequest,
  ReleaseAssetResponse,
  UploadAssetRequest,
  UploadAssetResponse,
} from "./asset_pb.js";

/**
 * AssetManagerService manages VM assets (kernels, rootfs images) across the
 * infrastructure
 *
 * @generated from service deploy.assetmanagerd.v1.AssetManagerService
 */
export const AssetManagerService = {
  typeName: "deploy.assetmanagerd.v1.AssetManagerService",
  methods: {
    /**
     * Upload and register an asset in one operation
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.UploadAsset
     */
    uploadAsset: {
      name: "UploadAsset",
      I: UploadAssetRequest,
      O: UploadAssetResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Register a new asset (called by builderd after creating images)
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.RegisterAsset
     */
    registerAsset: {
      name: "RegisterAsset",
      I: RegisterAssetRequest,
      O: RegisterAssetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get asset location and metadata
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.GetAsset
     */
    getAsset: {
      name: "GetAsset",
      I: GetAssetRequest,
      O: GetAssetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List available assets with filtering
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.ListAssets
     */
    listAssets: {
      name: "ListAssets",
      I: ListAssetsRequest,
      O: ListAssetsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Mark asset as in-use (reference counting for GC)
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.AcquireAsset
     */
    acquireAsset: {
      name: "AcquireAsset",
      I: AcquireAssetRequest,
      O: AcquireAssetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Release asset reference (decrements ref count)
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.ReleaseAsset
     */
    releaseAsset: {
      name: "ReleaseAsset",
      I: ReleaseAssetRequest,
      O: ReleaseAssetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an asset (only if ref count is 0)
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.DeleteAsset
     */
    deleteAsset: {
      name: "DeleteAsset",
      I: DeleteAssetRequest,
      O: DeleteAssetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Trigger garbage collection of unused assets
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.GarbageCollect
     */
    garbageCollect: {
      name: "GarbageCollect",
      I: GarbageCollectRequest,
      O: GarbageCollectResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Pre-stage assets for a specific host/jailer
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.PrepareAssets
     */
    prepareAssets: {
      name: "PrepareAssets",
      I: PrepareAssetsRequest,
      O: PrepareAssetsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Query assets with automatic build triggering if not found
     * This is the enhanced version of ListAssets that supports automatic asset creation
     *
     * @generated from rpc deploy.assetmanagerd.v1.AssetManagerService.QueryAssets
     */
    queryAssets: {
      name: "QueryAssets",
      I: QueryAssetsRequest,
      O: QueryAssetsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
