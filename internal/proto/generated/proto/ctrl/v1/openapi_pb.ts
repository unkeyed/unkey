// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/ctrl/v1/openapi.proto (package ctrl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ctrl.v1.GetOpenApiDiffRequest
 */
export class GetOpenApiDiffRequest extends Message<GetOpenApiDiffRequest> {
  /**
   * @generated from field: string old_version_id = 1;
   */
  oldVersionId = "";

  /**
   * @generated from field: string new_version_id = 2;
   */
  newVersionId = "";

  constructor(data?: PartialMessage<GetOpenApiDiffRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetOpenApiDiffRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetOpenApiDiffRequest {
    return new GetOpenApiDiffRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOpenApiDiffRequest {
    return new GetOpenApiDiffRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetOpenApiDiffRequest {
    return new GetOpenApiDiffRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetOpenApiDiffRequest | PlainMessage<GetOpenApiDiffRequest> | undefined,
    b: GetOpenApiDiffRequest | PlainMessage<GetOpenApiDiffRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetOpenApiDiffRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.ChangelogEntry
 */
export class ChangelogEntry extends Message<ChangelogEntry> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: int32 level = 3;
   */
  level = 0;

  /**
   * @generated from field: string operation = 4;
   */
  operation = "";

  /**
   * @generated from field: optional string operation_id = 5;
   */
  operationId?: string;

  /**
   * @generated from field: string path = 6;
   */
  path = "";

  constructor(data?: PartialMessage<ChangelogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.ChangelogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangelogEntry {
    return new ChangelogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangelogEntry {
    return new ChangelogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangelogEntry {
    return new ChangelogEntry().fromJsonString(jsonString, options);
  }

  static equals(
    a: ChangelogEntry | PlainMessage<ChangelogEntry> | undefined,
    b: ChangelogEntry | PlainMessage<ChangelogEntry> | undefined,
  ): boolean {
    return proto3.util.equals(ChangelogEntry, a, b);
  }
}

/**
 * @generated from message ctrl.v1.DiffSummary
 */
export class DiffSummary extends Message<DiffSummary> {
  /**
   * @generated from field: bool diff = 1;
   */
  diff = false;

  /**
   * @generated from field: ctrl.v1.DiffDetails details = 2;
   */
  details?: DiffDetails;

  constructor(data?: PartialMessage<DiffSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.DiffSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diff", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "details", kind: "message", T: DiffDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffSummary {
    return new DiffSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffSummary {
    return new DiffSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffSummary {
    return new DiffSummary().fromJsonString(jsonString, options);
  }

  static equals(
    a: DiffSummary | PlainMessage<DiffSummary> | undefined,
    b: DiffSummary | PlainMessage<DiffSummary> | undefined,
  ): boolean {
    return proto3.util.equals(DiffSummary, a, b);
  }
}

/**
 * @generated from message ctrl.v1.DiffDetails
 */
export class DiffDetails extends Message<DiffDetails> {
  /**
   * @generated from field: ctrl.v1.DiffCounts endpoints = 1;
   */
  endpoints?: DiffCounts;

  /**
   * @generated from field: ctrl.v1.DiffCounts paths = 2;
   */
  paths?: DiffCounts;

  /**
   * @generated from field: ctrl.v1.DiffCounts schemas = 3;
   */
  schemas?: DiffCounts;

  constructor(data?: PartialMessage<DiffDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.DiffDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoints", kind: "message", T: DiffCounts },
    { no: 2, name: "paths", kind: "message", T: DiffCounts },
    { no: 3, name: "schemas", kind: "message", T: DiffCounts },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffDetails {
    return new DiffDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffDetails {
    return new DiffDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffDetails {
    return new DiffDetails().fromJsonString(jsonString, options);
  }

  static equals(
    a: DiffDetails | PlainMessage<DiffDetails> | undefined,
    b: DiffDetails | PlainMessage<DiffDetails> | undefined,
  ): boolean {
    return proto3.util.equals(DiffDetails, a, b);
  }
}

/**
 * @generated from message ctrl.v1.DiffCounts
 */
export class DiffCounts extends Message<DiffCounts> {
  /**
   * @generated from field: int32 added = 1;
   */
  added = 0;

  /**
   * @generated from field: int32 deleted = 2;
   */
  deleted = 0;

  /**
   * @generated from field: int32 modified = 3;
   */
  modified = 0;

  constructor(data?: PartialMessage<DiffCounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.DiffCounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "added", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "deleted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "modified", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffCounts {
    return new DiffCounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffCounts {
    return new DiffCounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffCounts {
    return new DiffCounts().fromJsonString(jsonString, options);
  }

  static equals(
    a: DiffCounts | PlainMessage<DiffCounts> | undefined,
    b: DiffCounts | PlainMessage<DiffCounts> | undefined,
  ): boolean {
    return proto3.util.equals(DiffCounts, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetOpenApiDiffResponse
 */
export class GetOpenApiDiffResponse extends Message<GetOpenApiDiffResponse> {
  /**
   * @generated from field: ctrl.v1.DiffSummary summary = 1;
   */
  summary?: DiffSummary;

  /**
   * @generated from field: bool has_breaking_changes = 2;
   */
  hasBreakingChanges = false;

  /**
   * @generated from field: repeated ctrl.v1.ChangelogEntry changes = 3;
   */
  changes: ChangelogEntry[] = [];

  constructor(data?: PartialMessage<GetOpenApiDiffResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetOpenApiDiffResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "message", T: DiffSummary },
    { no: 2, name: "has_breaking_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "changes", kind: "message", T: ChangelogEntry, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetOpenApiDiffResponse {
    return new GetOpenApiDiffResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetOpenApiDiffResponse {
    return new GetOpenApiDiffResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetOpenApiDiffResponse {
    return new GetOpenApiDiffResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetOpenApiDiffResponse | PlainMessage<GetOpenApiDiffResponse> | undefined,
    b: GetOpenApiDiffResponse | PlainMessage<GetOpenApiDiffResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetOpenApiDiffResponse, a, b);
  }
}
