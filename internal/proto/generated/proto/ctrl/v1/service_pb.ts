// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/ctrl/v1/service.proto (package ctrl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ctrl.v1.LivenessRequest
 */
export class LivenessRequest extends Message<LivenessRequest> {
  constructor(data?: PartialMessage<LivenessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.LivenessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LivenessRequest {
    return new LivenessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LivenessRequest {
    return new LivenessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LivenessRequest {
    return new LivenessRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: LivenessRequest | PlainMessage<LivenessRequest> | undefined,
    b: LivenessRequest | PlainMessage<LivenessRequest> | undefined,
  ): boolean {
    return proto3.util.equals(LivenessRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.LivenessResponse
 */
export class LivenessResponse extends Message<LivenessResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string instance_id = 3;
   */
  instanceId = "";

  constructor(data?: PartialMessage<LivenessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.LivenessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LivenessResponse {
    return new LivenessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LivenessResponse {
    return new LivenessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LivenessResponse {
    return new LivenessResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: LivenessResponse | PlainMessage<LivenessResponse> | undefined,
    b: LivenessResponse | PlainMessage<LivenessResponse> | undefined,
  ): boolean {
    return proto3.util.equals(LivenessResponse, a, b);
  }
}
