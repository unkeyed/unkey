// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/ctrl/v1/deployment.proto (package ctrl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Deployment status enum
 *
 * @generated from enum ctrl.v1.DeploymentStatus
 */
export enum DeploymentStatus {
  /**
   * @generated from enum value: DEPLOYMENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_BUILDING = 2;
   */
  BUILDING = 2,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_DEPLOYING = 3;
   */
  DEPLOYING = 3,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_NETWORK = 4;
   */
  NETWORK = 4,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_READY = 5;
   */
  READY = 5,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_FAILED = 6;
   */
  FAILED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentStatus)
proto3.util.setEnumType(DeploymentStatus, "ctrl.v1.DeploymentStatus", [
  { no: 0, name: "DEPLOYMENT_STATUS_UNSPECIFIED" },
  { no: 1, name: "DEPLOYMENT_STATUS_PENDING" },
  { no: 2, name: "DEPLOYMENT_STATUS_BUILDING" },
  { no: 3, name: "DEPLOYMENT_STATUS_DEPLOYING" },
  { no: 4, name: "DEPLOYMENT_STATUS_NETWORK" },
  { no: 5, name: "DEPLOYMENT_STATUS_READY" },
  { no: 6, name: "DEPLOYMENT_STATUS_FAILED" },
]);

/**
 * Source type for deployment creation
 *
 * @generated from enum ctrl.v1.SourceType
 */
export enum SourceType {
  /**
   * @generated from enum value: SOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SOURCE_TYPE_GIT = 1;
   */
  GIT = 1,

  /**
   * @generated from enum value: SOURCE_TYPE_CLI_UPLOAD = 2;
   */
  CLI_UPLOAD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SourceType)
proto3.util.setEnumType(SourceType, "ctrl.v1.SourceType", [
  { no: 0, name: "SOURCE_TYPE_UNSPECIFIED" },
  { no: 1, name: "SOURCE_TYPE_GIT" },
  { no: 2, name: "SOURCE_TYPE_CLI_UPLOAD" },
]);

/**
 * @generated from message ctrl.v1.CreateDeploymentRequest
 */
export class CreateDeploymentRequest extends Message<CreateDeploymentRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string branch = 3;
   */
  branch = "";

  /**
   * Source information
   *
   * @generated from field: ctrl.v1.SourceType source_type = 4;
   */
  sourceType = SourceType.UNSPECIFIED;

  /**
   * For git sources
   *
   * @generated from field: string git_commit_sha = 5;
   */
  gitCommitSha = "";

  /**
   * Optional environment override (defaults based on branch)
   *
   * @generated from field: string environment_id = 7;
   */
  environmentId = "";

  /**
   * Docker image support
   *
   * e.g. "ghcr.io/user/app:sha256..."
   *
   * @generated from field: string docker_image_tag = 8;
   */
  dockerImageTag = "";

  /**
   * Gateway hostname for routing
   *
   * @generated from field: string hostname = 9;
   */
  hostname = "";

  /**
   * Keyspace ID for authentication
   *
   * @generated from field: string keyspace_id = 10;
   */
  keyspaceId = "";

  /**
   * Extended git information
   *
   * @generated from field: string git_commit_message = 6;
   */
  gitCommitMessage = "";

  /**
   * @generated from field: string git_commit_author_name = 11;
   */
  gitCommitAuthorName = "";

  /**
   * TODO: Add GitHub API integration to lookup username/avatar from email
   *
   * @generated from field: string git_commit_author_username = 12;
   */
  gitCommitAuthorUsername = "";

  /**
   * @generated from field: string git_commit_author_avatar_url = 13;
   */
  gitCommitAuthorAvatarUrl = "";

  /**
   * Unix epoch milliseconds
   *
   * @generated from field: int64 git_commit_timestamp = 14;
   */
  gitCommitTimestamp = protoInt64.zero;

  constructor(data?: PartialMessage<CreateDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.CreateDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source_type", kind: "enum", T: proto3.getEnumType(SourceType) },
    { no: 5, name: "git_commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "docker_image_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "keyspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "git_commit_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "git_commit_author_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "git_commit_author_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "git_commit_author_avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "git_commit_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateDeploymentRequest {
    return new CreateDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined,
    b: CreateDeploymentRequest | PlainMessage<CreateDeploymentRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateDeploymentRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.CreateDeploymentResponse
 */
export class CreateDeploymentResponse extends Message<CreateDeploymentResponse> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * Will be PENDING or BUILDING
   *
   * @generated from field: ctrl.v1.DeploymentStatus status = 2;
   */
  status = DeploymentStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<CreateDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.CreateDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateDeploymentResponse {
    return new CreateDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined,
    b: CreateDeploymentResponse | PlainMessage<CreateDeploymentResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateDeploymentResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetDeploymentRequest
 */
export class GetDeploymentRequest extends Message<GetDeploymentRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<GetDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined,
    b: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetDeploymentRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetDeploymentResponse
 */
export class GetDeploymentResponse extends Message<GetDeploymentResponse> {
  /**
   * @generated from field: ctrl.v1.Deployment deployment = 1;
   */
  deployment?: Deployment;

  constructor(data?: PartialMessage<GetDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "message", T: Deployment },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDeploymentResponse {
    return new GetDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined,
    b: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetDeploymentResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.Deployment
 */
export class Deployment extends Message<Deployment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 4;
   */
  environmentId = "";

  /**
   * Source information
   *
   * @generated from field: string git_commit_sha = 5;
   */
  gitCommitSha = "";

  /**
   * @generated from field: string git_branch = 6;
   */
  gitBranch = "";

  /**
   * Status and lifecycle
   *
   * @generated from field: ctrl.v1.DeploymentStatus status = 7;
   */
  status = DeploymentStatus.UNSPECIFIED;

  /**
   * For failed deployments
   *
   * @generated from field: string error_message = 8;
   */
  errorMessage = "";

  /**
   * Configuration snapshot (resolved at creation time)
   *
   * @generated from field: map<string, string> environment_variables = 9;
   */
  environmentVariables: { [key: string]: string } = {};

  /**
   * Topology configuration
   *
   * @generated from field: ctrl.v1.Topology topology = 10;
   */
  topology?: Topology;

  /**
   * Timestamps
   *
   * @generated from field: int64 created_at = 11;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: int64 updated_at = 12;
   */
  updatedAt = protoInt64.zero;

  /**
   * Associated hostnames for this deployment
   *
   * @generated from field: repeated string hostnames = 13;
   */
  hostnames: string[] = [];

  /**
   * Build information
   *
   * @generated from field: string rootfs_image_id = 14;
   */
  rootfsImageId = "";

  /**
   * @generated from field: string build_id = 15;
   */
  buildId = "";

  /**
   * Deployment steps
   *
   * @generated from field: repeated ctrl.v1.DeploymentStep steps = 16;
   */
  steps: DeploymentStep[] = [];

  /**
   * Extended git information
   *
   * @generated from field: string git_commit_message = 17;
   */
  gitCommitMessage = "";

  /**
   * @generated from field: string git_commit_author_name = 18;
   */
  gitCommitAuthorName = "";

  /**
   * Removed: email is PII and not stored
   *
   * @generated from field: string git_commit_author_username = 20;
   */
  gitCommitAuthorUsername = "";

  /**
   * @generated from field: string git_commit_author_avatar_url = 21;
   */
  gitCommitAuthorAvatarUrl = "";

  /**
   * Unix epoch milliseconds
   *
   * @generated from field: int64 git_commit_timestamp = 22;
   */
  gitCommitTimestamp = protoInt64.zero;

  constructor(data?: PartialMessage<Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "git_commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "git_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 8, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 9,
      name: "environment_variables",
      kind: "map",
      K: 9 /* ScalarType.STRING */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 10, name: "topology", kind: "message", T: Topology },
    { no: 11, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "hostnames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "rootfs_image_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "steps", kind: "message", T: DeploymentStep, repeated: true },
    { no: 17, name: "git_commit_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "git_commit_author_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "git_commit_author_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "git_commit_author_avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "git_commit_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deployment {
    return new Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJsonString(jsonString, options);
  }

  static equals(
    a: Deployment | PlainMessage<Deployment> | undefined,
    b: Deployment | PlainMessage<Deployment> | undefined,
  ): boolean {
    return proto3.util.equals(Deployment, a, b);
  }
}

/**
 * @generated from message ctrl.v1.DeploymentStep
 */
export class DeploymentStep extends Message<DeploymentStep> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: string error_message = 3;
   */
  errorMessage = "";

  /**
   * @generated from field: int64 created_at = 4;
   */
  createdAt = protoInt64.zero;

  constructor(data?: PartialMessage<DeploymentStep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.DeploymentStep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentStep {
    return new DeploymentStep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentStep {
    return new DeploymentStep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentStep {
    return new DeploymentStep().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeploymentStep | PlainMessage<DeploymentStep> | undefined,
    b: DeploymentStep | PlainMessage<DeploymentStep> | undefined,
  ): boolean {
    return proto3.util.equals(DeploymentStep, a, b);
  }
}

/**
 * @generated from message ctrl.v1.Topology
 */
export class Topology extends Message<Topology> {
  /**
   * @generated from field: int32 cpu_millicores = 1;
   */
  cpuMillicores = 0;

  /**
   * @generated from field: int32 memory_mb = 2;
   */
  memoryMb = 0;

  /**
   * Regional configuration
   *
   * @generated from field: repeated ctrl.v1.RegionalConfig regions = 3;
   */
  regions: RegionalConfig[] = [];

  /**
   * Runtime settings
   *
   * 0 means no timeout
   *
   * @generated from field: int32 idle_timeout_seconds = 4;
   */
  idleTimeoutSeconds = 0;

  /**
   * @generated from field: string health_check_path = 5;
   */
  healthCheckPath = "";

  /**
   * @generated from field: int32 port = 6;
   */
  port = 0;

  constructor(data?: PartialMessage<Topology>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.Topology";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu_millicores", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "memory_mb", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "regions", kind: "message", T: RegionalConfig, repeated: true },
    { no: 4, name: "idle_timeout_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "health_check_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topology {
    return new Topology().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topology {
    return new Topology().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topology {
    return new Topology().fromJsonString(jsonString, options);
  }

  static equals(
    a: Topology | PlainMessage<Topology> | undefined,
    b: Topology | PlainMessage<Topology> | undefined,
  ): boolean {
    return proto3.util.equals(Topology, a, b);
  }
}

/**
 * @generated from message ctrl.v1.RegionalConfig
 */
export class RegionalConfig extends Message<RegionalConfig> {
  /**
   * @generated from field: string region = 1;
   */
  region = "";

  /**
   * @generated from field: int32 min_instances = 2;
   */
  minInstances = 0;

  /**
   * @generated from field: int32 max_instances = 3;
   */
  maxInstances = 0;

  constructor(data?: PartialMessage<RegionalConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.RegionalConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_instances", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "max_instances", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegionalConfig {
    return new RegionalConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegionalConfig {
    return new RegionalConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegionalConfig {
    return new RegionalConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: RegionalConfig | PlainMessage<RegionalConfig> | undefined,
    b: RegionalConfig | PlainMessage<RegionalConfig> | undefined,
  ): boolean {
    return proto3.util.equals(RegionalConfig, a, b);
  }
}
