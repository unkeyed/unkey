// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/ctrl/v1/routing.proto (package ctrl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, Timestamp, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ctrl.v1.SetRouteRequest
 */
export class SetRouteRequest extends Message<SetRouteRequest> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  /**
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  /**
   * Optional: for blue-green deployments
   *
   * 0-100, defaults to 100 for full cutover
   *
   * @generated from field: int32 weight = 3;
   */
  weight = 0;

  constructor(data?: PartialMessage<SetRouteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.SetRouteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "weight", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRouteRequest {
    return new SetRouteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRouteRequest {
    return new SetRouteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRouteRequest {
    return new SetRouteRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SetRouteRequest | PlainMessage<SetRouteRequest> | undefined,
    b: SetRouteRequest | PlainMessage<SetRouteRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SetRouteRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.SetRouteResponse
 */
export class SetRouteResponse extends Message<SetRouteResponse> {
  /**
   * What was previously active
   *
   * @generated from field: string previous_version_id = 1;
   */
  previousVersionId = "";

  /**
   * @generated from field: google.protobuf.Timestamp effective_at = 2;
   */
  effectiveAt?: Timestamp;

  constructor(data?: PartialMessage<SetRouteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.SetRouteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "effective_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRouteResponse {
    return new SetRouteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRouteResponse {
    return new SetRouteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRouteResponse {
    return new SetRouteResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SetRouteResponse | PlainMessage<SetRouteResponse> | undefined,
    b: SetRouteResponse | PlainMessage<SetRouteResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SetRouteResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetRouteRequest
 */
export class GetRouteRequest extends Message<GetRouteRequest> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  constructor(data?: PartialMessage<GetRouteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetRouteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRouteRequest {
    return new GetRouteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRouteRequest {
    return new GetRouteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRouteRequest {
    return new GetRouteRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetRouteRequest | PlainMessage<GetRouteRequest> | undefined,
    b: GetRouteRequest | PlainMessage<GetRouteRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetRouteRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetRouteResponse
 */
export class GetRouteResponse extends Message<GetRouteResponse> {
  /**
   * @generated from field: ctrl.v1.Route route = 1;
   */
  route?: Route;

  constructor(data?: PartialMessage<GetRouteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetRouteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "route", kind: "message", T: Route },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRouteResponse {
    return new GetRouteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRouteResponse {
    return new GetRouteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRouteResponse {
    return new GetRouteResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetRouteResponse | PlainMessage<GetRouteResponse> | undefined,
    b: GetRouteResponse | PlainMessage<GetRouteResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetRouteResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.ListRoutesRequest
 */
export class ListRoutesRequest extends Message<ListRoutesRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * Optional filters
   *
   * @generated from field: string environment_id = 3;
   */
  environmentId = "";

  /**
   * Include preview/branch routes
   *
   * @generated from field: bool include_preview = 4;
   */
  includePreview = false;

  /**
   * Pagination
   *
   * @generated from field: int32 page_size = 10;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 11;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListRoutesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.ListRoutesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "include_preview", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoutesRequest {
    return new ListRoutesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoutesRequest {
    return new ListRoutesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoutesRequest {
    return new ListRoutesRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListRoutesRequest | PlainMessage<ListRoutesRequest> | undefined,
    b: ListRoutesRequest | PlainMessage<ListRoutesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ListRoutesRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.ListRoutesResponse
 */
export class ListRoutesResponse extends Message<ListRoutesResponse> {
  /**
   * @generated from field: repeated ctrl.v1.Route routes = 1;
   */
  routes: Route[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRoutesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.ListRoutesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routes", kind: "message", T: Route, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoutesResponse {
    return new ListRoutesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoutesResponse {
    return new ListRoutesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ListRoutesResponse {
    return new ListRoutesResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListRoutesResponse | PlainMessage<ListRoutesResponse> | undefined,
    b: ListRoutesResponse | PlainMessage<ListRoutesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ListRoutesResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.Route
 */
export class Route extends Message<Route> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  /**
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  /**
   * @generated from field: string workspace_id = 3;
   */
  workspaceId = "";

  /**
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * @generated from field: string environment_id = 5;
   */
  environmentId = "";

  /**
   * Traffic configuration
   *
   * For blue-green deployments
   *
   * @generated from field: int32 weight = 6;
   */
  weight = 0;

  /**
   * Metadata
   *
   * @generated from field: bool is_custom_domain = 7;
   */
  isCustomDomain = false;

  /**
   * @generated from field: bool is_enabled = 8;
   */
  isEnabled = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  /**
   * TLS info
   *
   * @generated from field: bool has_certificate = 11;
   */
  hasCertificate = false;

  /**
   * @generated from field: google.protobuf.Timestamp certificate_expires_at = 12;
   */
  certificateExpiresAt?: Timestamp;

  constructor(data?: PartialMessage<Route>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.Route";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "weight", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "is_custom_domain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "is_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "created_at", kind: "message", T: Timestamp },
    { no: 10, name: "updated_at", kind: "message", T: Timestamp },
    { no: 11, name: "has_certificate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "certificate_expires_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Route {
    return new Route().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Route {
    return new Route().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Route {
    return new Route().fromJsonString(jsonString, options);
  }

  static equals(
    a: Route | PlainMessage<Route> | undefined,
    b: Route | PlainMessage<Route> | undefined,
  ): boolean {
    return proto3.util.equals(Route, a, b);
  }
}

/**
 * Convenience messages for common operations
 *
 * @generated from message ctrl.v1.RollbackRequest
 */
export class RollbackRequest extends Message<RollbackRequest> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  /**
   * @generated from field: string target_version_id = 2;
   */
  targetVersionId = "";

  constructor(data?: PartialMessage<RollbackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.RollbackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollbackRequest {
    return new RollbackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollbackRequest {
    return new RollbackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollbackRequest {
    return new RollbackRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: RollbackRequest | PlainMessage<RollbackRequest> | undefined,
    b: RollbackRequest | PlainMessage<RollbackRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RollbackRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.RollbackResponse
 */
export class RollbackResponse extends Message<RollbackResponse> {
  /**
   * @generated from field: string previous_version_id = 1;
   */
  previousVersionId = "";

  /**
   * @generated from field: string new_version_id = 2;
   */
  newVersionId = "";

  /**
   * @generated from field: google.protobuf.Timestamp effective_at = 3;
   */
  effectiveAt?: Timestamp;

  constructor(data?: PartialMessage<RollbackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.RollbackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "effective_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollbackResponse {
    return new RollbackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollbackResponse {
    return new RollbackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollbackResponse {
    return new RollbackResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: RollbackResponse | PlainMessage<RollbackResponse> | undefined,
    b: RollbackResponse | PlainMessage<RollbackResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RollbackResponse, a, b);
  }
}
