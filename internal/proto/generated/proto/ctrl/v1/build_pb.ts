// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/ctrl/v1/build.proto (package ctrl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, Timestamp, proto3 } from "@bufbuild/protobuf";

/**
 * Build status enum
 *
 * @generated from enum ctrl.v1.BuildStatus
 */
export enum BuildStatus {
  /**
   * @generated from enum value: BUILD_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BUILD_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: BUILD_STATUS_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: BUILD_STATUS_SUCCEEDED = 3;
   */
  SUCCEEDED = 3,

  /**
   * @generated from enum value: BUILD_STATUS_FAILED = 4;
   */
  FAILED = 4,

  /**
   * @generated from enum value: BUILD_STATUS_CANCELLED = 5;
   */
  CANCELLED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(BuildStatus)
proto3.util.setEnumType(BuildStatus, "ctrl.v1.BuildStatus", [
  { no: 0, name: "BUILD_STATUS_UNSPECIFIED" },
  { no: 1, name: "BUILD_STATUS_PENDING" },
  { no: 2, name: "BUILD_STATUS_RUNNING" },
  { no: 3, name: "BUILD_STATUS_SUCCEEDED" },
  { no: 4, name: "BUILD_STATUS_FAILED" },
  { no: 5, name: "BUILD_STATUS_CANCELLED" },
]);

/**
 * @generated from message ctrl.v1.CreateBuildRequest
 */
export class CreateBuildRequest extends Message<CreateBuildRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: string version_id = 3;
   */
  versionId = "";

  /**
   * @generated from field: string docker_image = 4;
   */
  dockerImage = "";

  constructor(data?: PartialMessage<CreateBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.CreateBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "docker_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateBuildRequest {
    return new CreateBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined,
    b: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateBuildRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.CreateBuildResponse
 */
export class CreateBuildResponse extends Message<CreateBuildResponse> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<CreateBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.CreateBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildResponse {
    return new CreateBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CreateBuildResponse {
    return new CreateBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateBuildResponse | PlainMessage<CreateBuildResponse> | undefined,
    b: CreateBuildResponse | PlainMessage<CreateBuildResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateBuildResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetBuildRequest
 */
export class GetBuildRequest extends Message<GetBuildRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<GetBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetBuildRequest | PlainMessage<GetBuildRequest> | undefined,
    b: GetBuildRequest | PlainMessage<GetBuildRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetBuildRequest, a, b);
  }
}

/**
 * @generated from message ctrl.v1.GetBuildResponse
 */
export class GetBuildResponse extends Message<GetBuildResponse> {
  /**
   * @generated from field: ctrl.v1.Build build = 1;
   */
  build?: Build;

  constructor(data?: PartialMessage<GetBuildResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.GetBuildResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build", kind: "message", T: Build },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildResponse {
    return new GetBuildResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildResponse {
    return new GetBuildResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildResponse {
    return new GetBuildResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetBuildResponse | PlainMessage<GetBuildResponse> | undefined,
    b: GetBuildResponse | PlainMessage<GetBuildResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetBuildResponse, a, b);
  }
}

/**
 * @generated from message ctrl.v1.Build
 */
export class Build extends Message<Build> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * @generated from field: string version_id = 4;
   */
  versionId = "";

  /**
   * Build details
   *
   * @generated from field: ctrl.v1.BuildStatus status = 5;
   */
  status = BuildStatus.UNSPECIFIED;

  /**
   * For failed builds
   *
   * @generated from field: string error_message = 6;
   */
  errorMessage = "";

  /**
   * Timestamps
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 8;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp completed_at = 9;
   */
  completedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  /**
   * Build metadata
   *
   * Output rootfs image
   *
   * @generated from field: string rootfs_image_id = 11;
   */
  rootfsImageId = "";

  constructor(data?: PartialMessage<Build>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ctrl.v1.Build";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(BuildStatus) },
    { no: 6, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "started_at", kind: "message", T: Timestamp },
    { no: 9, name: "completed_at", kind: "message", T: Timestamp },
    { no: 10, name: "updated_at", kind: "message", T: Timestamp },
    { no: 11, name: "rootfs_image_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Build {
    return new Build().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJsonString(jsonString, options);
  }

  static equals(
    a: Build | PlainMessage<Build> | undefined,
    b: Build | PlainMessage<Build> | undefined,
  ): boolean {
    return proto3.util.equals(Build, a, b);
  }
}
