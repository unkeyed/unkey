// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file assetmanagerd/v1/asset.proto (package assetmanagerd.v1, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";

/**
 * Describes the file assetmanagerd/v1/asset.proto.
 */
export const file_assetmanagerd_v1_asset: GenFile =
  /*@__PURE__*/
  fileDesc(
    "Chxhc3NldG1hbmFnZXJkL3YxL2Fzc2V0LnByb3RvEhBhc3NldG1hbmFnZXJkLnYxIs0DCgVBc3NldBIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEikKBHR5cGUYAyABKA4yGy5hc3NldG1hbmFnZXJkLnYxLkFzc2V0VHlwZRItCgZzdGF0dXMYBCABKA4yHS5hc3NldG1hbmFnZXJkLnYxLkFzc2V0U3RhdHVzEjEKB2JhY2tlbmQYBSABKA4yIC5hc3NldG1hbmFnZXJkLnYxLlN0b3JhZ2VCYWNrZW5kEhAKCGxvY2F0aW9uGAYgASgJEhIKCnNpemVfYnl0ZXMYByABKAMSEAoIY2hlY2tzdW0YCCABKAkSMwoGbGFiZWxzGAkgAygLMiMuYXNzZXRtYW5hZ2VyZC52MS5Bc3NldC5MYWJlbHNFbnRyeRISCgpjcmVhdGVkX2J5GAogASgJEhIKCmNyZWF0ZWRfYXQYCyABKAMSGAoQbGFzdF9hY2Nlc3NlZF9hdBgMIAEoAxIXCg9yZWZlcmVuY2VfY291bnQYDSABKAUSEAoIYnVpbGRfaWQYDiABKAkSFAoMc291cmNlX2ltYWdlGA8gASgJGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiaAoSVXBsb2FkQXNzZXRSZXF1ZXN0EjkKCG1ldGFkYXRhGAEgASgLMiUuYXNzZXRtYW5hZ2VyZC52MS5VcGxvYWRBc3NldE1ldGFkYXRhSAASDwoFY2h1bmsYAiABKAxIAEIGCgRkYXRhIpwCChNVcGxvYWRBc3NldE1ldGFkYXRhEgwKBG5hbWUYASABKAkSKQoEdHlwZRgCIAEoDjIbLmFzc2V0bWFuYWdlcmQudjEuQXNzZXRUeXBlEhIKCnNpemVfYnl0ZXMYAyABKAMSQQoGbGFiZWxzGAQgAygLMjEuYXNzZXRtYW5hZ2VyZC52MS5VcGxvYWRBc3NldE1ldGFkYXRhLkxhYmVsc0VudHJ5EhIKCmNyZWF0ZWRfYnkYBSABKAkSEAoIYnVpbGRfaWQYBiABKAkSFAoMc291cmNlX2ltYWdlGAcgASgJEgoKAmlkGAggASgJGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiPQoTVXBsb2FkQXNzZXRSZXNwb25zZRImCgVhc3NldBgBIAEoCzIXLmFzc2V0bWFuYWdlcmQudjEuQXNzZXQi9QIKFFJlZ2lzdGVyQXNzZXRSZXF1ZXN0EgwKBG5hbWUYASABKAkSKQoEdHlwZRgCIAEoDjIbLmFzc2V0bWFuYWdlcmQudjEuQXNzZXRUeXBlEjEKB2JhY2tlbmQYAyABKA4yIC5hc3NldG1hbmFnZXJkLnYxLlN0b3JhZ2VCYWNrZW5kEhAKCGxvY2F0aW9uGAQgASgJEhIKCnNpemVfYnl0ZXMYBSABKAMSEAoIY2hlY2tzdW0YBiABKAkSQgoGbGFiZWxzGAcgAygLMjIuYXNzZXRtYW5hZ2VyZC52MS5SZWdpc3RlckFzc2V0UmVxdWVzdC5MYWJlbHNFbnRyeRISCgpjcmVhdGVkX2J5GAggASgJEhAKCGJ1aWxkX2lkGAkgASgJEhQKDHNvdXJjZV9pbWFnZRgKIAEoCRIKCgJpZBgLIAEoCRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIj8KFVJlZ2lzdGVyQXNzZXRSZXNwb25zZRImCgVhc3NldBgBIAEoCzIXLmFzc2V0bWFuYWdlcmQudjEuQXNzZXQiMwoPR2V0QXNzZXRSZXF1ZXN0EgoKAmlkGAEgASgJEhQKDGVuc3VyZV9sb2NhbBgCIAEoCCJOChBHZXRBc3NldFJlc3BvbnNlEiYKBWFzc2V0GAEgASgLMhcuYXNzZXRtYW5hZ2VyZC52MS5Bc3NldBISCgpsb2NhbF9wYXRoGAIgASgJIpoCChFMaXN0QXNzZXRzUmVxdWVzdBIpCgR0eXBlGAEgASgOMhsuYXNzZXRtYW5hZ2VyZC52MS5Bc3NldFR5cGUSLQoGc3RhdHVzGAIgASgOMh0uYXNzZXRtYW5hZ2VyZC52MS5Bc3NldFN0YXR1cxJOCg5sYWJlbF9zZWxlY3RvchgDIAMoCzI2LmFzc2V0bWFuYWdlcmQudjEuTGlzdEFzc2V0c1JlcXVlc3QuTGFiZWxTZWxlY3RvckVudHJ5EhEKCXBhZ2Vfc2l6ZRgEIAEoBRISCgpwYWdlX3Rva2VuGAUgASgJGjQKEkxhYmVsU2VsZWN0b3JFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlYKEkxpc3RBc3NldHNSZXNwb25zZRInCgZhc3NldHMYASADKAsyFy5hc3NldG1hbmFnZXJkLnYxLkFzc2V0EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJRChNBY3F1aXJlQXNzZXRSZXF1ZXN0EhAKCGFzc2V0X2lkGAEgASgJEhMKC2FjcXVpcmVkX2J5GAIgASgJEhMKC3R0bF9zZWNvbmRzGAMgASgDIlAKFEFjcXVpcmVBc3NldFJlc3BvbnNlEiYKBWFzc2V0GAEgASgLMhcuYXNzZXRtYW5hZ2VyZC52MS5Bc3NldBIQCghsZWFzZV9pZBgCIAEoCSInChNSZWxlYXNlQXNzZXRSZXF1ZXN0EhAKCGxlYXNlX2lkGAEgASgJIj4KFFJlbGVhc2VBc3NldFJlc3BvbnNlEiYKBWFzc2V0GAEgASgLMhcuYXNzZXRtYW5hZ2VyZC52MS5Bc3NldCIvChJEZWxldGVBc3NldFJlcXVlc3QSCgoCaWQYASABKAkSDQoFZm9yY2UYAiABKAgiNwoTRGVsZXRlQXNzZXRSZXNwb25zZRIPCgdkZWxldGVkGAEgASgIEg8KB21lc3NhZ2UYAiABKAkiXgoVR2FyYmFnZUNvbGxlY3RSZXF1ZXN0EhcKD21heF9hZ2Vfc2Vjb25kcxgBIAEoAxIbChNkZWxldGVfdW5yZWZlcmVuY2VkGAIgASgIEg8KB2RyeV9ydW4YAyABKAgiXgoWR2FyYmFnZUNvbGxlY3RSZXNwb25zZRIvCg5kZWxldGVkX2Fzc2V0cxgBIAMoCzIXLmFzc2V0bWFuYWdlcmQudjEuQXNzZXQSEwoLYnl0ZXNfZnJlZWQYAiABKAMiVAoUUHJlcGFyZUFzc2V0c1JlcXVlc3QSEQoJYXNzZXRfaWRzGAEgAygJEhMKC3RhcmdldF9wYXRoGAIgASgJEhQKDHByZXBhcmVkX2ZvchgDIAEoCSKYAQoVUHJlcGFyZUFzc2V0c1Jlc3BvbnNlEkwKC2Fzc2V0X3BhdGhzGAEgAygLMjcuYXNzZXRtYW5hZ2VyZC52MS5QcmVwYXJlQXNzZXRzUmVzcG9uc2UuQXNzZXRQYXRoc0VudHJ5GjEKD0Fzc2V0UGF0aHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBItMCChJRdWVyeUFzc2V0c1JlcXVlc3QSKQoEdHlwZRgBIAEoDjIbLmFzc2V0bWFuYWdlcmQudjEuQXNzZXRUeXBlEi0KBnN0YXR1cxgCIAEoDjIdLmFzc2V0bWFuYWdlcmQudjEuQXNzZXRTdGF0dXMSTwoObGFiZWxfc2VsZWN0b3IYAyADKAsyNy5hc3NldG1hbmFnZXJkLnYxLlF1ZXJ5QXNzZXRzUmVxdWVzdC5MYWJlbFNlbGVjdG9yRW50cnkSEQoJcGFnZV9zaXplGAQgASgFEhIKCnBhZ2VfdG9rZW4YBSABKAkSNQoNYnVpbGRfb3B0aW9ucxgGIAEoCzIeLmFzc2V0bWFuYWdlcmQudjEuQnVpbGRPcHRpb25zGjQKEkxhYmVsU2VsZWN0b3JFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIvwBCgxCdWlsZE9wdGlvbnMSGQoRZW5hYmxlX2F1dG9fYnVpbGQYASABKAgSGwoTd2FpdF9mb3JfY29tcGxldGlvbhgCIAEoCBIdChVidWlsZF90aW1lb3V0X3NlY29uZHMYAyABKAUSRQoMYnVpbGRfbGFiZWxzGAQgAygLMi8uYXNzZXRtYW5hZ2VyZC52MS5CdWlsZE9wdGlvbnMuQnVpbGRMYWJlbHNFbnRyeRIaChJzdWdnZXN0ZWRfYXNzZXRfaWQYBSABKAkaMgoQQnVpbGRMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIo4BChNRdWVyeUFzc2V0c1Jlc3BvbnNlEicKBmFzc2V0cxgBIAMoCzIXLmFzc2V0bWFuYWdlcmQudjEuQXNzZXQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJEjUKEHRyaWdnZXJlZF9idWlsZHMYAyADKAsyGy5hc3NldG1hbmFnZXJkLnYxLkJ1aWxkSW5mbyJsCglCdWlsZEluZm8SEAoIYnVpbGRfaWQYASABKAkSFAoMZG9ja2VyX2ltYWdlGAIgASgJEg4KBnN0YXR1cxgDIAEoCRIVCg1lcnJvcl9tZXNzYWdlGAQgASgJEhAKCGFzc2V0X2lkGAUgASgJKocBCglBc3NldFR5cGUSGgoWQVNTRVRfVFlQRV9VTlNQRUNJRklFRBAAEhUKEUFTU0VUX1RZUEVfS0VSTkVMEAESFQoRQVNTRVRfVFlQRV9ST09URlMQAhIVChFBU1NFVF9UWVBFX0lOSVRSRBADEhkKFUFTU0VUX1RZUEVfRElTS19JTUFHRRAEKpYBCgtBc3NldFN0YXR1cxIcChhBU1NFVF9TVEFUVVNfVU5TUEVDSUZJRUQQABIaChZBU1NFVF9TVEFUVVNfVVBMT0FESU5HEAESGgoWQVNTRVRfU1RBVFVTX0FWQUlMQUJMRRACEhkKFUFTU0VUX1NUQVRVU19ERUxFVElORxADEhYKEkFTU0VUX1NUQVRVU19FUlJPUhAEKpcBCg5TdG9yYWdlQmFja2VuZBIfChtTVE9SQUdFX0JBQ0tFTkRfVU5TUEVDSUZJRUQQABIZChVTVE9SQUdFX0JBQ0tFTkRfTE9DQUwQARIWChJTVE9SQUdFX0JBQ0tFTkRfUzMQAhIYChRTVE9SQUdFX0JBQ0tFTkRfSFRUUBADEhcKE1NUT1JBR0VfQkFDS0VORF9ORlMQBDK+BwoTQXNzZXRNYW5hZ2VyU2VydmljZRJcCgtVcGxvYWRBc3NldBIkLmFzc2V0bWFuYWdlcmQudjEuVXBsb2FkQXNzZXRSZXF1ZXN0GiUuYXNzZXRtYW5hZ2VyZC52MS5VcGxvYWRBc3NldFJlc3BvbnNlKAESYAoNUmVnaXN0ZXJBc3NldBImLmFzc2V0bWFuYWdlcmQudjEuUmVnaXN0ZXJBc3NldFJlcXVlc3QaJy5hc3NldG1hbmFnZXJkLnYxLlJlZ2lzdGVyQXNzZXRSZXNwb25zZRJRCghHZXRBc3NldBIhLmFzc2V0bWFuYWdlcmQudjEuR2V0QXNzZXRSZXF1ZXN0GiIuYXNzZXRtYW5hZ2VyZC52MS5HZXRBc3NldFJlc3BvbnNlElcKCkxpc3RBc3NldHMSIy5hc3NldG1hbmFnZXJkLnYxLkxpc3RBc3NldHNSZXF1ZXN0GiQuYXNzZXRtYW5hZ2VyZC52MS5MaXN0QXNzZXRzUmVzcG9uc2USXQoMQWNxdWlyZUFzc2V0EiUuYXNzZXRtYW5hZ2VyZC52MS5BY3F1aXJlQXNzZXRSZXF1ZXN0GiYuYXNzZXRtYW5hZ2VyZC52MS5BY3F1aXJlQXNzZXRSZXNwb25zZRJdCgxSZWxlYXNlQXNzZXQSJS5hc3NldG1hbmFnZXJkLnYxLlJlbGVhc2VBc3NldFJlcXVlc3QaJi5hc3NldG1hbmFnZXJkLnYxLlJlbGVhc2VBc3NldFJlc3BvbnNlEloKC0RlbGV0ZUFzc2V0EiQuYXNzZXRtYW5hZ2VyZC52MS5EZWxldGVBc3NldFJlcXVlc3QaJS5hc3NldG1hbmFnZXJkLnYxLkRlbGV0ZUFzc2V0UmVzcG9uc2USYwoOR2FyYmFnZUNvbGxlY3QSJy5hc3NldG1hbmFnZXJkLnYxLkdhcmJhZ2VDb2xsZWN0UmVxdWVzdBooLmFzc2V0bWFuYWdlcmQudjEuR2FyYmFnZUNvbGxlY3RSZXNwb25zZRJgCg1QcmVwYXJlQXNzZXRzEiYuYXNzZXRtYW5hZ2VyZC52MS5QcmVwYXJlQXNzZXRzUmVxdWVzdBonLmFzc2V0bWFuYWdlcmQudjEuUHJlcGFyZUFzc2V0c1Jlc3BvbnNlEloKC1F1ZXJ5QXNzZXRzEiQuYXNzZXRtYW5hZ2VyZC52MS5RdWVyeUFzc2V0c1JlcXVlc3QaJS5hc3NldG1hbmFnZXJkLnYxLlF1ZXJ5QXNzZXRzUmVzcG9uc2VCSFpGZ2l0aHViLmNvbS91bmtleWVkL3Vua2V5L2dvL2dlbi9wcm90by9hc3NldG1hbmFnZXJkL3YxO2Fzc2V0bWFuYWdlcmR2MWIGcHJvdG8z",
  );

/**
 * @generated from message assetmanagerd.v1.Asset
 */
export type Asset = Message<"assetmanagerd.v1.Asset"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: assetmanagerd.v1.AssetType type = 3;
   */
  type: AssetType;

  /**
   * @generated from field: assetmanagerd.v1.AssetStatus status = 4;
   */
  status: AssetStatus;

  /**
   * Storage information
   *
   * @generated from field: assetmanagerd.v1.StorageBackend backend = 5;
   */
  backend: StorageBackend;

  /**
   * Path or URL depending on backend
   *
   * @generated from field: string location = 6;
   */
  location: string;

  /**
   * @generated from field: int64 size_bytes = 7;
   */
  sizeBytes: bigint;

  /**
   * SHA256
   *
   * @generated from field: string checksum = 8;
   */
  checksum: string;

  /**
   * Metadata
   *
   * @generated from field: map<string, string> labels = 9;
   */
  labels: { [key: string]: string };

  /**
   * e.g., "builderd", "manual"
   *
   * @generated from field: string created_by = 10;
   */
  createdBy: string;

  /**
   * Unix timestamp
   *
   * @generated from field: int64 created_at = 11;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 last_accessed_at = 12;
   */
  lastAccessedAt: bigint;

  /**
   * Reference counting for GC
   *
   * @generated from field: int32 reference_count = 13;
   */
  referenceCount: number;

  /**
   * Build information (if created by builderd)
   *
   * @generated from field: string build_id = 14;
   */
  buildId: string;

  /**
   * @generated from field: string source_image = 15;
   */
  sourceImage: string;
};

/**
 * Describes the message assetmanagerd.v1.Asset.
 * Use `create(AssetSchema)` to create a new message.
 */
export const AssetSchema: GenMessage<Asset> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 0);

/**
 * @generated from message assetmanagerd.v1.UploadAssetRequest
 */
export type UploadAssetRequest = Message<"assetmanagerd.v1.UploadAssetRequest"> & {
  /**
   * @generated from oneof assetmanagerd.v1.UploadAssetRequest.data
   */
  data:
    | {
        /**
         * @generated from field: assetmanagerd.v1.UploadAssetMetadata metadata = 1;
         */
        value: UploadAssetMetadata;
        case: "metadata";
      }
    | {
        /**
         * @generated from field: bytes chunk = 2;
         */
        value: Uint8Array;
        case: "chunk";
      }
    | { case: undefined; value?: undefined };
};

/**
 * Describes the message assetmanagerd.v1.UploadAssetRequest.
 * Use `create(UploadAssetRequestSchema)` to create a new message.
 */
export const UploadAssetRequestSchema: GenMessage<UploadAssetRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 1);

/**
 * @generated from message assetmanagerd.v1.UploadAssetMetadata
 */
export type UploadAssetMetadata = Message<"assetmanagerd.v1.UploadAssetMetadata"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: assetmanagerd.v1.AssetType type = 2;
   */
  type: AssetType;

  /**
   * @generated from field: int64 size_bytes = 3;
   */
  sizeBytes: bigint;

  /**
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * @generated from field: string created_by = 5;
   */
  createdBy: string;

  /**
   * @generated from field: string build_id = 6;
   */
  buildId: string;

  /**
   * @generated from field: string source_image = 7;
   */
  sourceImage: string;

  /**
   * Optional: specific asset ID to use
   *
   * @generated from field: string id = 8;
   */
  id: string;
};

/**
 * Describes the message assetmanagerd.v1.UploadAssetMetadata.
 * Use `create(UploadAssetMetadataSchema)` to create a new message.
 */
export const UploadAssetMetadataSchema: GenMessage<UploadAssetMetadata> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 2);

/**
 * @generated from message assetmanagerd.v1.UploadAssetResponse
 */
export type UploadAssetResponse = Message<"assetmanagerd.v1.UploadAssetResponse"> & {
  /**
   * @generated from field: assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;
};

/**
 * Describes the message assetmanagerd.v1.UploadAssetResponse.
 * Use `create(UploadAssetResponseSchema)` to create a new message.
 */
export const UploadAssetResponseSchema: GenMessage<UploadAssetResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 3);

/**
 * @generated from message assetmanagerd.v1.RegisterAssetRequest
 */
export type RegisterAssetRequest = Message<"assetmanagerd.v1.RegisterAssetRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: assetmanagerd.v1.AssetType type = 2;
   */
  type: AssetType;

  /**
   * @generated from field: assetmanagerd.v1.StorageBackend backend = 3;
   */
  backend: StorageBackend;

  /**
   * @generated from field: string location = 4;
   */
  location: string;

  /**
   * @generated from field: int64 size_bytes = 5;
   */
  sizeBytes: bigint;

  /**
   * @generated from field: string checksum = 6;
   */
  checksum: string;

  /**
   * @generated from field: map<string, string> labels = 7;
   */
  labels: { [key: string]: string };

  /**
   * @generated from field: string created_by = 8;
   */
  createdBy: string;

  /**
   * Optional build information
   *
   * @generated from field: string build_id = 9;
   */
  buildId: string;

  /**
   * @generated from field: string source_image = 10;
   */
  sourceImage: string;

  /**
   * Optional: specific asset ID to use (if not provided, one will be generated)
   *
   * @generated from field: string id = 11;
   */
  id: string;
};

/**
 * Describes the message assetmanagerd.v1.RegisterAssetRequest.
 * Use `create(RegisterAssetRequestSchema)` to create a new message.
 */
export const RegisterAssetRequestSchema: GenMessage<RegisterAssetRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 4);

/**
 * @generated from message assetmanagerd.v1.RegisterAssetResponse
 */
export type RegisterAssetResponse = Message<"assetmanagerd.v1.RegisterAssetResponse"> & {
  /**
   * @generated from field: assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;
};

/**
 * Describes the message assetmanagerd.v1.RegisterAssetResponse.
 * Use `create(RegisterAssetResponseSchema)` to create a new message.
 */
export const RegisterAssetResponseSchema: GenMessage<RegisterAssetResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 5);

/**
 * @generated from message assetmanagerd.v1.GetAssetRequest
 */
export type GetAssetRequest = Message<"assetmanagerd.v1.GetAssetRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * If true, ensures asset is available locally (downloads if needed)
   *
   * @generated from field: bool ensure_local = 2;
   */
  ensureLocal: boolean;
};

/**
 * Describes the message assetmanagerd.v1.GetAssetRequest.
 * Use `create(GetAssetRequestSchema)` to create a new message.
 */
export const GetAssetRequestSchema: GenMessage<GetAssetRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 6);

/**
 * @generated from message assetmanagerd.v1.GetAssetResponse
 */
export type GetAssetResponse = Message<"assetmanagerd.v1.GetAssetResponse"> & {
  /**
   * @generated from field: assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  /**
   * Local path if ensure_local was true
   *
   * @generated from field: string local_path = 2;
   */
  localPath: string;
};

/**
 * Describes the message assetmanagerd.v1.GetAssetResponse.
 * Use `create(GetAssetResponseSchema)` to create a new message.
 */
export const GetAssetResponseSchema: GenMessage<GetAssetResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 7);

/**
 * @generated from message assetmanagerd.v1.ListAssetsRequest
 */
export type ListAssetsRequest = Message<"assetmanagerd.v1.ListAssetsRequest"> & {
  /**
   * Filter by type
   *
   * @generated from field: assetmanagerd.v1.AssetType type = 1;
   */
  type: AssetType;

  /**
   * Filter by status
   *
   * @generated from field: assetmanagerd.v1.AssetStatus status = 2;
   */
  status: AssetStatus;

  /**
   * Filter by labels (all must match)
   *
   * @generated from field: map<string, string> label_selector = 3;
   */
  labelSelector: { [key: string]: string };

  /**
   * Pagination
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message assetmanagerd.v1.ListAssetsRequest.
 * Use `create(ListAssetsRequestSchema)` to create a new message.
 */
export const ListAssetsRequestSchema: GenMessage<ListAssetsRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 8);

/**
 * @generated from message assetmanagerd.v1.ListAssetsResponse
 */
export type ListAssetsResponse = Message<"assetmanagerd.v1.ListAssetsResponse"> & {
  /**
   * @generated from field: repeated assetmanagerd.v1.Asset assets = 1;
   */
  assets: Asset[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message assetmanagerd.v1.ListAssetsResponse.
 * Use `create(ListAssetsResponseSchema)` to create a new message.
 */
export const ListAssetsResponseSchema: GenMessage<ListAssetsResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 9);

/**
 * @generated from message assetmanagerd.v1.AcquireAssetRequest
 */
export type AcquireAssetRequest = Message<"assetmanagerd.v1.AcquireAssetRequest"> & {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId: string;

  /**
   * e.g., "vm-123"
   *
   * @generated from field: string acquired_by = 2;
   */
  acquiredBy: string;

  /**
   * Optional auto-release after TTL
   *
   * @generated from field: int64 ttl_seconds = 3;
   */
  ttlSeconds: bigint;
};

/**
 * Describes the message assetmanagerd.v1.AcquireAssetRequest.
 * Use `create(AcquireAssetRequestSchema)` to create a new message.
 */
export const AcquireAssetRequestSchema: GenMessage<AcquireAssetRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 10);

/**
 * @generated from message assetmanagerd.v1.AcquireAssetResponse
 */
export type AcquireAssetResponse = Message<"assetmanagerd.v1.AcquireAssetResponse"> & {
  /**
   * @generated from field: assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;

  /**
   * Use this for release
   *
   * @generated from field: string lease_id = 2;
   */
  leaseId: string;
};

/**
 * Describes the message assetmanagerd.v1.AcquireAssetResponse.
 * Use `create(AcquireAssetResponseSchema)` to create a new message.
 */
export const AcquireAssetResponseSchema: GenMessage<AcquireAssetResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 11);

/**
 * @generated from message assetmanagerd.v1.ReleaseAssetRequest
 */
export type ReleaseAssetRequest = Message<"assetmanagerd.v1.ReleaseAssetRequest"> & {
  /**
   * @generated from field: string lease_id = 1;
   */
  leaseId: string;
};

/**
 * Describes the message assetmanagerd.v1.ReleaseAssetRequest.
 * Use `create(ReleaseAssetRequestSchema)` to create a new message.
 */
export const ReleaseAssetRequestSchema: GenMessage<ReleaseAssetRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 12);

/**
 * @generated from message assetmanagerd.v1.ReleaseAssetResponse
 */
export type ReleaseAssetResponse = Message<"assetmanagerd.v1.ReleaseAssetResponse"> & {
  /**
   * @generated from field: assetmanagerd.v1.Asset asset = 1;
   */
  asset?: Asset;
};

/**
 * Describes the message assetmanagerd.v1.ReleaseAssetResponse.
 * Use `create(ReleaseAssetResponseSchema)` to create a new message.
 */
export const ReleaseAssetResponseSchema: GenMessage<ReleaseAssetResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 13);

/**
 * @generated from message assetmanagerd.v1.DeleteAssetRequest
 */
export type DeleteAssetRequest = Message<"assetmanagerd.v1.DeleteAssetRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Delete even if ref count > 0
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message assetmanagerd.v1.DeleteAssetRequest.
 * Use `create(DeleteAssetRequestSchema)` to create a new message.
 */
export const DeleteAssetRequestSchema: GenMessage<DeleteAssetRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 14);

/**
 * @generated from message assetmanagerd.v1.DeleteAssetResponse
 */
export type DeleteAssetResponse = Message<"assetmanagerd.v1.DeleteAssetResponse"> & {
  /**
   * @generated from field: bool deleted = 1;
   */
  deleted: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message assetmanagerd.v1.DeleteAssetResponse.
 * Use `create(DeleteAssetResponseSchema)` to create a new message.
 */
export const DeleteAssetResponseSchema: GenMessage<DeleteAssetResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 15);

/**
 * @generated from message assetmanagerd.v1.GarbageCollectRequest
 */
export type GarbageCollectRequest = Message<"assetmanagerd.v1.GarbageCollectRequest"> & {
  /**
   * Delete assets not accessed in this many seconds
   *
   * @generated from field: int64 max_age_seconds = 1;
   */
  maxAgeSeconds: bigint;

  /**
   * Delete assets with 0 references
   *
   * @generated from field: bool delete_unreferenced = 2;
   */
  deleteUnreferenced: boolean;

  /**
   * Dry run - just return what would be deleted
   *
   * @generated from field: bool dry_run = 3;
   */
  dryRun: boolean;
};

/**
 * Describes the message assetmanagerd.v1.GarbageCollectRequest.
 * Use `create(GarbageCollectRequestSchema)` to create a new message.
 */
export const GarbageCollectRequestSchema: GenMessage<GarbageCollectRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 16);

/**
 * @generated from message assetmanagerd.v1.GarbageCollectResponse
 */
export type GarbageCollectResponse = Message<"assetmanagerd.v1.GarbageCollectResponse"> & {
  /**
   * @generated from field: repeated assetmanagerd.v1.Asset deleted_assets = 1;
   */
  deletedAssets: Asset[];

  /**
   * @generated from field: int64 bytes_freed = 2;
   */
  bytesFreed: bigint;
};

/**
 * Describes the message assetmanagerd.v1.GarbageCollectResponse.
 * Use `create(GarbageCollectResponseSchema)` to create a new message.
 */
export const GarbageCollectResponseSchema: GenMessage<GarbageCollectResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 17);

/**
 * @generated from message assetmanagerd.v1.PrepareAssetsRequest
 */
export type PrepareAssetsRequest = Message<"assetmanagerd.v1.PrepareAssetsRequest"> & {
  /**
   * @generated from field: repeated string asset_ids = 1;
   */
  assetIds: string[];

  /**
   * e.g., jailer chroot path
   *
   * @generated from field: string target_path = 2;
   */
  targetPath: string;

  /**
   * e.g., "vm-123"
   *
   * @generated from field: string prepared_for = 3;
   */
  preparedFor: string;
};

/**
 * Describes the message assetmanagerd.v1.PrepareAssetsRequest.
 * Use `create(PrepareAssetsRequestSchema)` to create a new message.
 */
export const PrepareAssetsRequestSchema: GenMessage<PrepareAssetsRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 18);

/**
 * @generated from message assetmanagerd.v1.PrepareAssetsResponse
 */
export type PrepareAssetsResponse = Message<"assetmanagerd.v1.PrepareAssetsResponse"> & {
  /**
   * asset_id -> local path
   *
   * @generated from field: map<string, string> asset_paths = 1;
   */
  assetPaths: { [key: string]: string };
};

/**
 * Describes the message assetmanagerd.v1.PrepareAssetsResponse.
 * Use `create(PrepareAssetsResponseSchema)` to create a new message.
 */
export const PrepareAssetsResponseSchema: GenMessage<PrepareAssetsResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 19);

/**
 * QueryAssetsRequest is similar to ListAssetsRequest but with build options
 *
 * @generated from message assetmanagerd.v1.QueryAssetsRequest
 */
export type QueryAssetsRequest = Message<"assetmanagerd.v1.QueryAssetsRequest"> & {
  /**
   * Filter by type
   *
   * @generated from field: assetmanagerd.v1.AssetType type = 1;
   */
  type: AssetType;

  /**
   * Filter by status
   *
   * @generated from field: assetmanagerd.v1.AssetStatus status = 2;
   */
  status: AssetStatus;

  /**
   * Filter by labels (all must match)
   *
   * @generated from field: map<string, string> label_selector = 3;
   */
  labelSelector: { [key: string]: string };

  /**
   * Pagination
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 5;
   */
  pageToken: string;

  /**
   * Build options - if asset not found and these are set, trigger build
   *
   * @generated from field: assetmanagerd.v1.BuildOptions build_options = 6;
   */
  buildOptions?: BuildOptions;
};

/**
 * Describes the message assetmanagerd.v1.QueryAssetsRequest.
 * Use `create(QueryAssetsRequestSchema)` to create a new message.
 */
export const QueryAssetsRequestSchema: GenMessage<QueryAssetsRequest> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 20);

/**
 * BuildOptions controls automatic asset creation
 *
 * @generated from message assetmanagerd.v1.BuildOptions
 */
export type BuildOptions = Message<"assetmanagerd.v1.BuildOptions"> & {
  /**
   * Enable automatic building if assets don't exist
   *
   * @generated from field: bool enable_auto_build = 1;
   */
  enableAutoBuild: boolean;

  /**
   * Wait for build completion before returning
   *
   * @generated from field: bool wait_for_completion = 2;
   */
  waitForCompletion: boolean;

  /**
   * Timeout for build operation (seconds)
   *
   * @generated from field: int32 build_timeout_seconds = 3;
   */
  buildTimeoutSeconds: number;

  /**
   * Additional labels to add to the built asset
   *
   * @generated from field: map<string, string> build_labels = 4;
   */
  buildLabels: { [key: string]: string };

  /**
   * Suggested asset ID to use when registering the built asset
   * This allows the caller to know the asset ID before it's built
   *
   * @generated from field: string suggested_asset_id = 5;
   */
  suggestedAssetId: string;
};

/**
 * Describes the message assetmanagerd.v1.BuildOptions.
 * Use `create(BuildOptionsSchema)` to create a new message.
 */
export const BuildOptionsSchema: GenMessage<BuildOptions> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 21);

/**
 * QueryAssetsResponse includes build information if builds were triggered
 *
 * @generated from message assetmanagerd.v1.QueryAssetsResponse
 */
export type QueryAssetsResponse = Message<"assetmanagerd.v1.QueryAssetsResponse"> & {
  /**
   * @generated from field: repeated assetmanagerd.v1.Asset assets = 1;
   */
  assets: Asset[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Information about any builds that were triggered
   *
   * @generated from field: repeated assetmanagerd.v1.BuildInfo triggered_builds = 3;
   */
  triggeredBuilds: BuildInfo[];
};

/**
 * Describes the message assetmanagerd.v1.QueryAssetsResponse.
 * Use `create(QueryAssetsResponseSchema)` to create a new message.
 */
export const QueryAssetsResponseSchema: GenMessage<QueryAssetsResponse> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 22);

/**
 * BuildInfo provides information about triggered builds
 *
 * @generated from message assetmanagerd.v1.BuildInfo
 */
export type BuildInfo = Message<"assetmanagerd.v1.BuildInfo"> & {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId: string;

  /**
   * @generated from field: string docker_image = 2;
   */
  dockerImage: string;

  /**
   * "pending", "building", "completed", "failed"
   *
   * @generated from field: string status = 3;
   */
  status: string;

  /**
   * @generated from field: string error_message = 4;
   */
  errorMessage: string;

  /**
   * Asset ID if build completed and asset was registered
   *
   * @generated from field: string asset_id = 5;
   */
  assetId: string;
};

/**
 * Describes the message assetmanagerd.v1.BuildInfo.
 * Use `create(BuildInfoSchema)` to create a new message.
 */
export const BuildInfoSchema: GenMessage<BuildInfo> =
  /*@__PURE__*/
  messageDesc(file_assetmanagerd_v1_asset, 23);

/**
 * @generated from enum assetmanagerd.v1.AssetType
 */
export enum AssetType {
  /**
   * @generated from enum value: ASSET_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSET_TYPE_KERNEL = 1;
   */
  KERNEL = 1,

  /**
   * @generated from enum value: ASSET_TYPE_ROOTFS = 2;
   */
  ROOTFS = 2,

  /**
   * @generated from enum value: ASSET_TYPE_INITRD = 3;
   */
  INITRD = 3,

  /**
   * @generated from enum value: ASSET_TYPE_DISK_IMAGE = 4;
   */
  DISK_IMAGE = 4,
}

/**
 * Describes the enum assetmanagerd.v1.AssetType.
 */
export const AssetTypeSchema: GenEnum<AssetType> =
  /*@__PURE__*/
  enumDesc(file_assetmanagerd_v1_asset, 0);

/**
 * @generated from enum assetmanagerd.v1.AssetStatus
 */
export enum AssetStatus {
  /**
   * @generated from enum value: ASSET_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSET_STATUS_UPLOADING = 1;
   */
  UPLOADING = 1,

  /**
   * @generated from enum value: ASSET_STATUS_AVAILABLE = 2;
   */
  AVAILABLE = 2,

  /**
   * @generated from enum value: ASSET_STATUS_DELETING = 3;
   */
  DELETING = 3,

  /**
   * @generated from enum value: ASSET_STATUS_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum assetmanagerd.v1.AssetStatus.
 */
export const AssetStatusSchema: GenEnum<AssetStatus> =
  /*@__PURE__*/
  enumDesc(file_assetmanagerd_v1_asset, 1);

/**
 * @generated from enum assetmanagerd.v1.StorageBackend
 */
export enum StorageBackend {
  /**
   * @generated from enum value: STORAGE_BACKEND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STORAGE_BACKEND_LOCAL = 1;
   */
  LOCAL = 1,

  /**
   * @generated from enum value: STORAGE_BACKEND_S3 = 2;
   */
  S3 = 2,

  /**
   * @generated from enum value: STORAGE_BACKEND_HTTP = 3;
   */
  HTTP = 3,

  /**
   * @generated from enum value: STORAGE_BACKEND_NFS = 4;
   */
  NFS = 4,
}

/**
 * Describes the enum assetmanagerd.v1.StorageBackend.
 */
export const StorageBackendSchema: GenEnum<StorageBackend> =
  /*@__PURE__*/
  enumDesc(file_assetmanagerd_v1_asset, 2);

/**
 * AssetManagerService manages VM assets (kernels, rootfs images) across the
 * infrastructure
 *
 * @generated from service assetmanagerd.v1.AssetManagerService
 */
export const AssetManagerService: GenService<{
  /**
   * Upload and register an asset in one operation
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.UploadAsset
   */
  uploadAsset: {
    methodKind: "client_streaming";
    input: typeof UploadAssetRequestSchema;
    output: typeof UploadAssetResponseSchema;
  };
  /**
   * Register a new asset (called by builderd after creating images)
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.RegisterAsset
   */
  registerAsset: {
    methodKind: "unary";
    input: typeof RegisterAssetRequestSchema;
    output: typeof RegisterAssetResponseSchema;
  };
  /**
   * Get asset location and metadata
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.GetAsset
   */
  getAsset: {
    methodKind: "unary";
    input: typeof GetAssetRequestSchema;
    output: typeof GetAssetResponseSchema;
  };
  /**
   * List available assets with filtering
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.ListAssets
   */
  listAssets: {
    methodKind: "unary";
    input: typeof ListAssetsRequestSchema;
    output: typeof ListAssetsResponseSchema;
  };
  /**
   * Mark asset as in-use (reference counting for GC)
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.AcquireAsset
   */
  acquireAsset: {
    methodKind: "unary";
    input: typeof AcquireAssetRequestSchema;
    output: typeof AcquireAssetResponseSchema;
  };
  /**
   * Release asset reference (decrements ref count)
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.ReleaseAsset
   */
  releaseAsset: {
    methodKind: "unary";
    input: typeof ReleaseAssetRequestSchema;
    output: typeof ReleaseAssetResponseSchema;
  };
  /**
   * Delete an asset (only if ref count is 0)
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.DeleteAsset
   */
  deleteAsset: {
    methodKind: "unary";
    input: typeof DeleteAssetRequestSchema;
    output: typeof DeleteAssetResponseSchema;
  };
  /**
   * Trigger garbage collection of unused assets
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.GarbageCollect
   */
  garbageCollect: {
    methodKind: "unary";
    input: typeof GarbageCollectRequestSchema;
    output: typeof GarbageCollectResponseSchema;
  };
  /**
   * Pre-stage assets for a specific host/jailer
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.PrepareAssets
   */
  prepareAssets: {
    methodKind: "unary";
    input: typeof PrepareAssetsRequestSchema;
    output: typeof PrepareAssetsResponseSchema;
  };
  /**
   * Query assets with automatic build triggering if not found
   * This is the enhanced version of ListAssets that supports automatic asset creation
   *
   * @generated from rpc assetmanagerd.v1.AssetManagerService.QueryAssets
   */
  queryAssets: {
    methodKind: "unary";
    input: typeof QueryAssetsRequestSchema;
    output: typeof QueryAssetsResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_assetmanagerd_v1_asset, 0);
