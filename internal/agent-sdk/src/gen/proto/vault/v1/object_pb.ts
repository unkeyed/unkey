// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file proto/vault/v1/object.proto (package vault.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum vault.v1.Algorithm
 */
export enum Algorithm {
  /**
   * @generated from enum value: AES_256_GCM = 0;
   */
  AES_256_GCM = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(Algorithm)
proto3.util.setEnumType(Algorithm, "vault.v1.Algorithm", [{ no: 0, name: "AES_256_GCM" }]);

/**
 * @generated from message vault.v1.DataEncryptionKey
 */
export class DataEncryptionKey extends Message<DataEncryptionKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Linux milliseconds since epoch
   *
   * @generated from field: int64 created_at = 2;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: bytes key = 3;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<DataEncryptionKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.DataEncryptionKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataEncryptionKey {
    return new DataEncryptionKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataEncryptionKey {
    return new DataEncryptionKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataEncryptionKey {
    return new DataEncryptionKey().fromJsonString(jsonString, options);
  }

  static equals(
    a: DataEncryptionKey | PlainMessage<DataEncryptionKey> | undefined,
    b: DataEncryptionKey | PlainMessage<DataEncryptionKey> | undefined,
  ): boolean {
    return proto3.util.equals(DataEncryptionKey, a, b);
  }
}

/**
 * This is stored in the database in whatever format the database uses
 *
 * @generated from message vault.v1.EncryptedDataEncryptionKey
 */
export class EncryptedDataEncryptionKey extends Message<EncryptedDataEncryptionKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Linux milliseconds since epoch
   *
   * @generated from field: int64 created_at = 2;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: vault.v1.Encrypted encrypted = 3;
   */
  encrypted?: Encrypted;

  constructor(data?: PartialMessage<EncryptedDataEncryptionKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.EncryptedDataEncryptionKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "encrypted", kind: "message", T: Encrypted },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EncryptedDataEncryptionKey {
    return new EncryptedDataEncryptionKey().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EncryptedDataEncryptionKey {
    return new EncryptedDataEncryptionKey().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EncryptedDataEncryptionKey {
    return new EncryptedDataEncryptionKey().fromJsonString(jsonString, options);
  }

  static equals(
    a: EncryptedDataEncryptionKey | PlainMessage<EncryptedDataEncryptionKey> | undefined,
    b: EncryptedDataEncryptionKey | PlainMessage<EncryptedDataEncryptionKey> | undefined,
  ): boolean {
    return proto3.util.equals(EncryptedDataEncryptionKey, a, b);
  }
}

/**
 * KeyEncryptionKey is a key used to encrypt data encryption keys
 *
 * @generated from message vault.v1.KeyEncryptionKey
 */
export class KeyEncryptionKey extends Message<KeyEncryptionKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 created_at = 2;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: bytes key = 3;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<KeyEncryptionKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.KeyEncryptionKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyEncryptionKey {
    return new KeyEncryptionKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyEncryptionKey {
    return new KeyEncryptionKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyEncryptionKey {
    return new KeyEncryptionKey().fromJsonString(jsonString, options);
  }

  static equals(
    a: KeyEncryptionKey | PlainMessage<KeyEncryptionKey> | undefined,
    b: KeyEncryptionKey | PlainMessage<KeyEncryptionKey> | undefined,
  ): boolean {
    return proto3.util.equals(KeyEncryptionKey, a, b);
  }
}

/**
 * Encrypted contains the output of the encryption and all of the metadata required to decrypt it
 *
 * @generated from message vault.v1.Encrypted
 */
export class Encrypted extends Message<Encrypted> {
  /**
   * @generated from field: vault.v1.Algorithm algorithm = 1;
   */
  algorithm = Algorithm.AES_256_GCM;

  /**
   * @generated from field: bytes nonce = 2;
   */
  nonce = new Uint8Array(0);

  /**
   * @generated from field: bytes ciphertext = 3;
   */
  ciphertext = new Uint8Array(0);

  /**
   * key id of the key that encrypted this data
   *
   * @generated from field: string encryption_key_id = 4;
   */
  encryptionKeyId = "";

  /**
   * time of encryption
   * we can use this later to figure out if a piece of data should be re-encrypted
   *
   * @generated from field: int64 time = 5;
   */
  time = protoInt64.zero;

  constructor(data?: PartialMessage<Encrypted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.Encrypted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "algorithm", kind: "enum", T: proto3.getEnumType(Algorithm) },
    { no: 2, name: "nonce", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "ciphertext", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "encryption_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encrypted {
    return new Encrypted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encrypted {
    return new Encrypted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encrypted {
    return new Encrypted().fromJsonString(jsonString, options);
  }

  static equals(
    a: Encrypted | PlainMessage<Encrypted> | undefined,
    b: Encrypted | PlainMessage<Encrypted> | undefined,
  ): boolean {
    return proto3.util.equals(Encrypted, a, b);
  }
}
