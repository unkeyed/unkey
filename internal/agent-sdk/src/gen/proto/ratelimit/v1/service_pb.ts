// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file proto/ratelimit/v1/service.proto (package ratelimit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message ratelimit.v1.LivenessRequest
 */
export class LivenessRequest extends Message<LivenessRequest> {
  constructor(data?: PartialMessage<LivenessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.LivenessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LivenessRequest {
    return new LivenessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LivenessRequest {
    return new LivenessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LivenessRequest {
    return new LivenessRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: LivenessRequest | PlainMessage<LivenessRequest> | undefined,
    b: LivenessRequest | PlainMessage<LivenessRequest> | undefined,
  ): boolean {
    return proto3.util.equals(LivenessRequest, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.LivenessResponse
 */
export class LivenessResponse extends Message<LivenessResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<LivenessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.LivenessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LivenessResponse {
    return new LivenessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LivenessResponse {
    return new LivenessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LivenessResponse {
    return new LivenessResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: LivenessResponse | PlainMessage<LivenessResponse> | undefined,
    b: LivenessResponse | PlainMessage<LivenessResponse> | undefined,
  ): boolean {
    return proto3.util.equals(LivenessResponse, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.RatelimitRequest
 */
export class RatelimitRequest extends Message<RatelimitRequest> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = "";

  /**
   * @generated from field: int64 limit = 2;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 duration = 3;
   */
  duration = protoInt64.zero;

  /**
   * @generated from field: int64 cost = 4;
   */
  cost = protoInt64.zero;

  constructor(data?: PartialMessage<RatelimitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.RatelimitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "cost", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RatelimitRequest {
    return new RatelimitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatelimitRequest {
    return new RatelimitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RatelimitRequest {
    return new RatelimitRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: RatelimitRequest | PlainMessage<RatelimitRequest> | undefined,
    b: RatelimitRequest | PlainMessage<RatelimitRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RatelimitRequest, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.RatelimitResponse
 */
export class RatelimitResponse extends Message<RatelimitResponse> {
  /**
   * @generated from field: int64 limit = 1;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 remaining = 2;
   */
  remaining = protoInt64.zero;

  /**
   * @generated from field: int64 reset = 3;
   */
  reset = protoInt64.zero;

  /**
   * @generated from field: bool success = 4;
   */
  success = false;

  /**
   * @generated from field: int64 current = 5;
   */
  current = protoInt64.zero;

  constructor(data?: PartialMessage<RatelimitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.RatelimitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "remaining", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "reset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "current", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RatelimitResponse {
    return new RatelimitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatelimitResponse {
    return new RatelimitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RatelimitResponse {
    return new RatelimitResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: RatelimitResponse | PlainMessage<RatelimitResponse> | undefined,
    b: RatelimitResponse | PlainMessage<RatelimitResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RatelimitResponse, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.RatelimitMultiRequest
 */
export class RatelimitMultiRequest extends Message<RatelimitMultiRequest> {
  /**
   * @generated from field: repeated ratelimit.v1.RatelimitRequest ratelimits = 1;
   */
  ratelimits: RatelimitRequest[] = [];

  constructor(data?: PartialMessage<RatelimitMultiRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.RatelimitMultiRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ratelimits", kind: "message", T: RatelimitRequest, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RatelimitMultiRequest {
    return new RatelimitMultiRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatelimitMultiRequest {
    return new RatelimitMultiRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RatelimitMultiRequest {
    return new RatelimitMultiRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: RatelimitMultiRequest | PlainMessage<RatelimitMultiRequest> | undefined,
    b: RatelimitMultiRequest | PlainMessage<RatelimitMultiRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RatelimitMultiRequest, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.RatelimitMultiResponse
 */
export class RatelimitMultiResponse extends Message<RatelimitMultiResponse> {
  /**
   * @generated from field: repeated ratelimit.v1.RatelimitResponse ratelimits = 1;
   */
  ratelimits: RatelimitResponse[] = [];

  constructor(data?: PartialMessage<RatelimitMultiResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.RatelimitMultiResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ratelimits", kind: "message", T: RatelimitResponse, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RatelimitMultiResponse {
    return new RatelimitMultiResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RatelimitMultiResponse {
    return new RatelimitMultiResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RatelimitMultiResponse {
    return new RatelimitMultiResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: RatelimitMultiResponse | PlainMessage<RatelimitMultiResponse> | undefined,
    b: RatelimitMultiResponse | PlainMessage<RatelimitMultiResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RatelimitMultiResponse, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.PushPullEvent
 */
export class PushPullEvent extends Message<PushPullEvent> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = "";

  /**
   * @generated from field: int64 limit = 2;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 duration = 3;
   */
  duration = protoInt64.zero;

  /**
   * @generated from field: int64 cost = 4;
   */
  cost = protoInt64.zero;

  constructor(data?: PartialMessage<PushPullEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.PushPullEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "cost", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushPullEvent {
    return new PushPullEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushPullEvent {
    return new PushPullEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushPullEvent {
    return new PushPullEvent().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushPullEvent | PlainMessage<PushPullEvent> | undefined,
    b: PushPullEvent | PlainMessage<PushPullEvent> | undefined,
  ): boolean {
    return proto3.util.equals(PushPullEvent, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.PushPullRequest
 */
export class PushPullRequest extends Message<PushPullRequest> {
  /**
   * @generated from field: repeated ratelimit.v1.PushPullEvent events = 1;
   */
  events: PushPullEvent[] = [];

  constructor(data?: PartialMessage<PushPullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.PushPullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: PushPullEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushPullRequest {
    return new PushPullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushPullRequest {
    return new PushPullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushPullRequest {
    return new PushPullRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushPullRequest | PlainMessage<PushPullRequest> | undefined,
    b: PushPullRequest | PlainMessage<PushPullRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PushPullRequest, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.PushPullUpdate
 */
export class PushPullUpdate extends Message<PushPullUpdate> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = "";

  /**
   * @generated from field: int64 current = 2;
   */
  current = protoInt64.zero;

  constructor(data?: PartialMessage<PushPullUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.PushPullUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushPullUpdate {
    return new PushPullUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushPullUpdate {
    return new PushPullUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushPullUpdate {
    return new PushPullUpdate().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushPullUpdate | PlainMessage<PushPullUpdate> | undefined,
    b: PushPullUpdate | PlainMessage<PushPullUpdate> | undefined,
  ): boolean {
    return proto3.util.equals(PushPullUpdate, a, b);
  }
}

/**
 * @generated from message ratelimit.v1.PushPullResponse
 */
export class PushPullResponse extends Message<PushPullResponse> {
  /**
   * @generated from field: repeated ratelimit.v1.PushPullUpdate updates = 1;
   */
  updates: PushPullUpdate[] = [];

  constructor(data?: PartialMessage<PushPullResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ratelimit.v1.PushPullResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: PushPullUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushPullResponse {
    return new PushPullResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushPullResponse {
    return new PushPullResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushPullResponse {
    return new PushPullResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushPullResponse | PlainMessage<PushPullResponse> | undefined,
    b: PushPullResponse | PlainMessage<PushPullResponse> | undefined,
  ): boolean {
    return proto3.util.equals(PushPullResponse, a, b);
  }
}
