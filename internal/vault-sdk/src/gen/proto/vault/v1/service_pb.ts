// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file proto/vault/v1/service.proto (package vault.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message vault.v1.LivenessRequest
 */
export class LivenessRequest extends Message<LivenessRequest> {
  constructor(data?: PartialMessage<LivenessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.LivenessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LivenessRequest {
    return new LivenessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LivenessRequest {
    return new LivenessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LivenessRequest {
    return new LivenessRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: LivenessRequest | PlainMessage<LivenessRequest> | undefined,
    b: LivenessRequest | PlainMessage<LivenessRequest> | undefined,
  ): boolean {
    return proto3.util.equals(LivenessRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.LivenessResponse
 */
export class LivenessResponse extends Message<LivenessResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<LivenessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.LivenessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LivenessResponse {
    return new LivenessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LivenessResponse {
    return new LivenessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LivenessResponse {
    return new LivenessResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: LivenessResponse | PlainMessage<LivenessResponse> | undefined,
    b: LivenessResponse | PlainMessage<LivenessResponse> | undefined,
  ): boolean {
    return proto3.util.equals(LivenessResponse, a, b);
  }
}

/**
 * @generated from message vault.v1.EncryptRequest
 */
export class EncryptRequest extends Message<EncryptRequest> {
  /**
   * @generated from field: string keyring = 1;
   */
  keyring = "";

  /**
   * @generated from field: string data = 2;
   */
  data = "";

  constructor(data?: PartialMessage<EncryptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.EncryptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyring", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptRequest {
    return new EncryptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptRequest {
    return new EncryptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncryptRequest {
    return new EncryptRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: EncryptRequest | PlainMessage<EncryptRequest> | undefined,
    b: EncryptRequest | PlainMessage<EncryptRequest> | undefined,
  ): boolean {
    return proto3.util.equals(EncryptRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.EncryptResponse
 */
export class EncryptResponse extends Message<EncryptResponse> {
  /**
   * @generated from field: string encrypted = 1;
   */
  encrypted = "";

  /**
   * @generated from field: string key_id = 2;
   */
  keyId = "";

  constructor(data?: PartialMessage<EncryptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.EncryptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encrypted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptResponse {
    return new EncryptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptResponse {
    return new EncryptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncryptResponse {
    return new EncryptResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: EncryptResponse | PlainMessage<EncryptResponse> | undefined,
    b: EncryptResponse | PlainMessage<EncryptResponse> | undefined,
  ): boolean {
    return proto3.util.equals(EncryptResponse, a, b);
  }
}

/**
 * @generated from message vault.v1.EncryptBulkRequest
 */
export class EncryptBulkRequest extends Message<EncryptBulkRequest> {
  /**
   * @generated from field: string keyring = 1;
   */
  keyring = "";

  /**
   * @generated from field: repeated string data = 2;
   */
  data: string[] = [];

  constructor(data?: PartialMessage<EncryptBulkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.EncryptBulkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyring", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptBulkRequest {
    return new EncryptBulkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptBulkRequest {
    return new EncryptBulkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EncryptBulkRequest {
    return new EncryptBulkRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: EncryptBulkRequest | PlainMessage<EncryptBulkRequest> | undefined,
    b: EncryptBulkRequest | PlainMessage<EncryptBulkRequest> | undefined,
  ): boolean {
    return proto3.util.equals(EncryptBulkRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.EncryptBulkResponse
 */
export class EncryptBulkResponse extends Message<EncryptBulkResponse> {
  /**
   * @generated from field: repeated vault.v1.EncryptResponse encrypted = 1;
   */
  encrypted: EncryptResponse[] = [];

  constructor(data?: PartialMessage<EncryptBulkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.EncryptBulkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encrypted", kind: "message", T: EncryptResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptBulkResponse {
    return new EncryptBulkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptBulkResponse {
    return new EncryptBulkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EncryptBulkResponse {
    return new EncryptBulkResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: EncryptBulkResponse | PlainMessage<EncryptBulkResponse> | undefined,
    b: EncryptBulkResponse | PlainMessage<EncryptBulkResponse> | undefined,
  ): boolean {
    return proto3.util.equals(EncryptBulkResponse, a, b);
  }
}

/**
 * @generated from message vault.v1.DecryptRequest
 */
export class DecryptRequest extends Message<DecryptRequest> {
  /**
   * @generated from field: string keyring = 1;
   */
  keyring = "";

  /**
   * @generated from field: string encrypted = 2;
   */
  encrypted = "";

  constructor(data?: PartialMessage<DecryptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.DecryptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyring", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encrypted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecryptRequest {
    return new DecryptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecryptRequest {
    return new DecryptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecryptRequest {
    return new DecryptRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DecryptRequest | PlainMessage<DecryptRequest> | undefined,
    b: DecryptRequest | PlainMessage<DecryptRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DecryptRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.DecryptResponse
 */
export class DecryptResponse extends Message<DecryptResponse> {
  /**
   * @generated from field: string plaintext = 1;
   */
  plaintext = "";

  constructor(data?: PartialMessage<DecryptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.DecryptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plaintext", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecryptResponse {
    return new DecryptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecryptResponse {
    return new DecryptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecryptResponse {
    return new DecryptResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DecryptResponse | PlainMessage<DecryptResponse> | undefined,
    b: DecryptResponse | PlainMessage<DecryptResponse> | undefined,
  ): boolean {
    return proto3.util.equals(DecryptResponse, a, b);
  }
}

/**
 * @generated from message vault.v1.CreateDEKRequest
 */
export class CreateDEKRequest extends Message<CreateDEKRequest> {
  /**
   * @generated from field: string keyring = 1;
   */
  keyring = "";

  constructor(data?: PartialMessage<CreateDEKRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.CreateDEKRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyring", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDEKRequest {
    return new CreateDEKRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDEKRequest {
    return new CreateDEKRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDEKRequest {
    return new CreateDEKRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateDEKRequest | PlainMessage<CreateDEKRequest> | undefined,
    b: CreateDEKRequest | PlainMessage<CreateDEKRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateDEKRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.CreateDEKResponse
 */
export class CreateDEKResponse extends Message<CreateDEKResponse> {
  /**
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  constructor(data?: PartialMessage<CreateDEKResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.CreateDEKResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDEKResponse {
    return new CreateDEKResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDEKResponse {
    return new CreateDEKResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDEKResponse {
    return new CreateDEKResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateDEKResponse | PlainMessage<CreateDEKResponse> | undefined,
    b: CreateDEKResponse | PlainMessage<CreateDEKResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateDEKResponse, a, b);
  }
}

/**
 * @generated from message vault.v1.ReEncryptRequest
 */
export class ReEncryptRequest extends Message<ReEncryptRequest> {
  /**
   * @generated from field: string keyring = 1;
   */
  keyring = "";

  /**
   * @generated from field: string encrypted = 2;
   */
  encrypted = "";

  /**
   * Specify the key_id to use for re-encryption. If not provided, the latest will be used
   *
   * @generated from field: optional string key_id = 3;
   */
  keyId?: string;

  constructor(data?: PartialMessage<ReEncryptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.ReEncryptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keyring", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encrypted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReEncryptRequest {
    return new ReEncryptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReEncryptRequest {
    return new ReEncryptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReEncryptRequest {
    return new ReEncryptRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReEncryptRequest | PlainMessage<ReEncryptRequest> | undefined,
    b: ReEncryptRequest | PlainMessage<ReEncryptRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ReEncryptRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.ReEncryptResponse
 */
export class ReEncryptResponse extends Message<ReEncryptResponse> {
  /**
   * @generated from field: string encrypted = 1;
   */
  encrypted = "";

  /**
   * @generated from field: string key_id = 2;
   */
  keyId = "";

  constructor(data?: PartialMessage<ReEncryptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.ReEncryptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encrypted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReEncryptResponse {
    return new ReEncryptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReEncryptResponse {
    return new ReEncryptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReEncryptResponse {
    return new ReEncryptResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReEncryptResponse | PlainMessage<ReEncryptResponse> | undefined,
    b: ReEncryptResponse | PlainMessage<ReEncryptResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ReEncryptResponse, a, b);
  }
}

/**
 * @generated from message vault.v1.ReEncryptDEKsRequest
 */
export class ReEncryptDEKsRequest extends Message<ReEncryptDEKsRequest> {
  constructor(data?: PartialMessage<ReEncryptDEKsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.ReEncryptDEKsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReEncryptDEKsRequest {
    return new ReEncryptDEKsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReEncryptDEKsRequest {
    return new ReEncryptDEKsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ReEncryptDEKsRequest {
    return new ReEncryptDEKsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReEncryptDEKsRequest | PlainMessage<ReEncryptDEKsRequest> | undefined,
    b: ReEncryptDEKsRequest | PlainMessage<ReEncryptDEKsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ReEncryptDEKsRequest, a, b);
  }
}

/**
 * @generated from message vault.v1.ReEncryptDEKsResponse
 */
export class ReEncryptDEKsResponse extends Message<ReEncryptDEKsResponse> {
  constructor(data?: PartialMessage<ReEncryptDEKsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.ReEncryptDEKsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ReEncryptDEKsResponse {
    return new ReEncryptDEKsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReEncryptDEKsResponse {
    return new ReEncryptDEKsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ReEncryptDEKsResponse {
    return new ReEncryptDEKsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ReEncryptDEKsResponse | PlainMessage<ReEncryptDEKsResponse> | undefined,
    b: ReEncryptDEKsResponse | PlainMessage<ReEncryptDEKsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ReEncryptDEKsResponse, a, b);
  }
}
