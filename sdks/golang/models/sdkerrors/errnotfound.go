// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// ErrNotFoundCode - A machine readable error code.
type ErrNotFoundCode string

const (
	ErrNotFoundCodeNotFound ErrNotFoundCode = "NOT_FOUND"
)

func (e ErrNotFoundCode) ToPointer() *ErrNotFoundCode {
	return &e
}

func (e *ErrNotFoundCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_FOUND":
		*e = ErrNotFoundCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrNotFoundCode: %v", v)
	}
}

type ErrNotFoundError struct {
	// A machine readable error code.
	Code ErrNotFoundCode `json:"code"`
	// A link to our documentation with more details about this error code
	Docs string `json:"docs"`
	// A human readable explanation of what went wrong
	Message string `json:"message"`
	// Please always include the requestId in your error report
	RequestID string `json:"requestId"`
}

func (o *ErrNotFoundError) GetCode() ErrNotFoundCode {
	if o == nil {
		return ErrNotFoundCode("")
	}
	return o.Code
}

func (o *ErrNotFoundError) GetDocs() string {
	if o == nil {
		return ""
	}
	return o.Docs
}

func (o *ErrNotFoundError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *ErrNotFoundError) GetRequestID() string {
	if o == nil {
		return ""
	}
	return o.RequestID
}

// ErrNotFound - The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
type ErrNotFound struct {
	Error_ ErrNotFoundError `json:"error"`
}

var _ error = &ErrNotFound{}

func (e *ErrNotFound) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
