// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

type PostV1KeysVerifyRequestBody struct {
	// The id of the api where the key belongs to. This is optional for now but will be required soon.
	// The key will be verified against the api's configuration. If the key does not belong to the api, the verification will fail.
	APIID *string `json:"apiId,omitempty"`
	// The key to verify
	Key string `json:"key"`
}

func (o *PostV1KeysVerifyRequestBody) GetAPIID() *string {
	if o == nil {
		return nil
	}
	return o.APIID
}

func (o *PostV1KeysVerifyRequestBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

// PostV1KeysVerifyRatelimit - The ratelimit configuration for this key. If this field is null or undefined, the key has no ratelimit.
type PostV1KeysVerifyRatelimit struct {
	// Maximum number of requests that can be made inside a window
	Limit float64 `json:"limit"`
	// Remaining requests after this verification
	Remaining float64 `json:"remaining"`
	// Unix timestamp in milliseconds when the ratelimit will reset
	Reset float64 `json:"reset"`
}

func (o *PostV1KeysVerifyRatelimit) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *PostV1KeysVerifyRatelimit) GetRemaining() float64 {
	if o == nil {
		return 0.0
	}
	return o.Remaining
}

func (o *PostV1KeysVerifyRatelimit) GetReset() float64 {
	if o == nil {
		return 0.0
	}
	return o.Reset
}

// Code - If the key is invalid this field will be set to the reason why it is invalid.
// Possible values are:
// - NOT_FOUND: the key does not exist or has expired
// - FORBIDDEN: the key is not allowed to access the api
// - USAGE_EXCEEDED: the key has exceeded its request limit
// - RATE_LIMITED: the key has been ratelimited,
// - INSUFFICIENT_PERMISSIONS: you do not have the required permissions to perform this action
type Code string

const (
	CodeNotFound                Code = "NOT_FOUND"
	CodeForbidden               Code = "FORBIDDEN"
	CodeUsageExceeded           Code = "USAGE_EXCEEDED"
	CodeRateLimited             Code = "RATE_LIMITED"
	CodeUnauthorized            Code = "UNAUTHORIZED"
	CodeDisabled                Code = "DISABLED"
	CodeInsufficientPermissions Code = "INSUFFICIENT_PERMISSIONS"
)

func (e Code) ToPointer() *Code {
	return &e
}

func (e *Code) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_FOUND":
		fallthrough
	case "FORBIDDEN":
		fallthrough
	case "USAGE_EXCEEDED":
		fallthrough
	case "RATE_LIMITED":
		fallthrough
	case "UNAUTHORIZED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "INSUFFICIENT_PERMISSIONS":
		*e = Code(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Code: %v", v)
	}
}

// PostV1KeysVerifyResponseBody - The verification result
type PostV1KeysVerifyResponseBody struct {
	// The id of the key
	KeyID *string `json:"keyId,omitempty"`
	// Whether the key is valid or not.
	// A key could be invalid for a number of reasons, for example if it has expired, has no more verifications left or if it has been deleted.
	Valid bool `json:"valid"`
	// The name of the key, give keys a name to easily identifiy their purpose
	Name *string `json:"name,omitempty"`
	// The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.
	OwnerID *string `json:"ownerId,omitempty"`
	// Any additional metadata you want to store with the key
	Meta map[string]interface{} `json:"meta,omitempty"`
	// The unix timestamp in milliseconds when the key was created
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// The unix timestamp in milliseconds when the key was deleted. We don't delete the key outright, you can restore it later.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.
	Expires *float64 `json:"expires,omitempty"`
	// The ratelimit configuration for this key. If this field is null or undefined, the key has no ratelimit.
	Ratelimit *PostV1KeysVerifyRatelimit `json:"ratelimit,omitempty"`
	// The number of requests that can be made with this key before it becomes invalid. If this field is null or undefined, the key has no request limit.
	Remaining *float64 `json:"remaining,omitempty"`
	// If the key is invalid this field will be set to the reason why it is invalid.
	// Possible values are:
	// - NOT_FOUND: the key does not exist or has expired
	// - FORBIDDEN: the key is not allowed to access the api
	// - USAGE_EXCEEDED: the key has exceeded its request limit
	// - RATE_LIMITED: the key has been ratelimited,
	// - INSUFFICIENT_PERMISSIONS: you do not have the required permissions to perform this action
	//
	Code *Code `json:"code,omitempty"`
}

func (o *PostV1KeysVerifyResponseBody) GetKeyID() *string {
	if o == nil {
		return nil
	}
	return o.KeyID
}

func (o *PostV1KeysVerifyResponseBody) GetValid() bool {
	if o == nil {
		return false
	}
	return o.Valid
}

func (o *PostV1KeysVerifyResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostV1KeysVerifyResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *PostV1KeysVerifyResponseBody) GetMeta() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *PostV1KeysVerifyResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PostV1KeysVerifyResponseBody) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *PostV1KeysVerifyResponseBody) GetExpires() *float64 {
	if o == nil {
		return nil
	}
	return o.Expires
}

func (o *PostV1KeysVerifyResponseBody) GetRatelimit() *PostV1KeysVerifyRatelimit {
	if o == nil {
		return nil
	}
	return o.Ratelimit
}

func (o *PostV1KeysVerifyResponseBody) GetRemaining() *float64 {
	if o == nil {
		return nil
	}
	return o.Remaining
}

func (o *PostV1KeysVerifyResponseBody) GetCode() *Code {
	if o == nil {
		return nil
	}
	return o.Code
}
