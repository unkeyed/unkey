// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: metald/v1/vm.proto

package metaldv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VM lifecycle states
type VmState int32

const (
	VmState_VM_STATE_UNSPECIFIED VmState = 0
	VmState_VM_STATE_CREATED     VmState = 1
	VmState_VM_STATE_RUNNING     VmState = 2
	VmState_VM_STATE_PAUSED      VmState = 3
	VmState_VM_STATE_SHUTDOWN    VmState = 4
)

// Enum value maps for VmState.
var (
	VmState_name = map[int32]string{
		0: "VM_STATE_UNSPECIFIED",
		1: "VM_STATE_CREATED",
		2: "VM_STATE_RUNNING",
		3: "VM_STATE_PAUSED",
		4: "VM_STATE_SHUTDOWN",
	}
	VmState_value = map[string]int32{
		"VM_STATE_UNSPECIFIED": 0,
		"VM_STATE_CREATED":     1,
		"VM_STATE_RUNNING":     2,
		"VM_STATE_PAUSED":      3,
		"VM_STATE_SHUTDOWN":    4,
	}
)

func (x VmState) Enum() *VmState {
	p := new(VmState)
	*p = x
	return p
}

func (x VmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmState) Descriptor() protoreflect.EnumDescriptor {
	return file_metald_v1_vm_proto_enumTypes[0].Descriptor()
}

func (VmState) Type() protoreflect.EnumType {
	return &file_metald_v1_vm_proto_enumTypes[0]
}

func (x VmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmState.Descriptor instead.
func (VmState) EnumDescriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{0}
}

// Unified VM configuration that works across different hypervisors
type VmConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU configuration
	VcpuCount uint32 `protobuf:"varint,1,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
	// Memory configuration
	MemorySizeMib uint64 `protobuf:"varint,2,opt,name=memory_size_mib,json=memorySizeMib,proto3" json:"memory_size_mib,omitempty"`
	// Boot configuration
	Boot string `protobuf:"bytes,3,opt,name=boot,proto3" json:"boot,omitempty"`
	// Network configuration
	NetworkConfig string `protobuf:"bytes,4,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`
	// Console configuration
	Console *ConsoleConfig `protobuf:"bytes,5,opt,name=console,proto3" json:"console,omitempty"`
	// Storage configuration
	Storage *StorageDevice `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
	// VM Identifier
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata and labels
	Metadata      map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VmConfig) Reset() {
	*x = VmConfig{}
	mi := &file_metald_v1_vm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmConfig) ProtoMessage() {}

func (x *VmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmConfig.ProtoReflect.Descriptor instead.
func (*VmConfig) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{0}
}

func (x *VmConfig) GetVcpuCount() uint32 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

func (x *VmConfig) GetMemorySizeMib() uint64 {
	if x != nil {
		return x.MemorySizeMib
	}
	return 0
}

func (x *VmConfig) GetBoot() string {
	if x != nil {
		return x.Boot
	}
	return ""
}

func (x *VmConfig) GetNetworkConfig() string {
	if x != nil {
		return x.NetworkConfig
	}
	return ""
}

func (x *VmConfig) GetConsole() *ConsoleConfig {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *VmConfig) GetStorage() *StorageDevice {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *VmConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VmConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ListVmsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional filter by state
	StateFilter []VmState `protobuf:"varint,1,rep,packed,name=state_filter,json=stateFilter,proto3,enum=metald.v1.VmState" json:"state_filter,omitempty"`
	// Pagination
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVmsRequest) Reset() {
	*x = ListVmsRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVmsRequest) ProtoMessage() {}

func (x *ListVmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVmsRequest.ProtoReflect.Descriptor instead.
func (*ListVmsRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{1}
}

func (x *ListVmsRequest) GetStateFilter() []VmState {
	if x != nil {
		return x.StateFilter
	}
	return nil
}

func (x *ListVmsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVmsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListVmsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vms           []*VmInfo              `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCount    uint64                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVmsResponse) Reset() {
	*x = ListVmsResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVmsResponse) ProtoMessage() {}

func (x *ListVmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVmsResponse.ProtoReflect.Descriptor instead.
func (*ListVmsResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{2}
}

func (x *ListVmsResponse) GetVms() []*VmInfo {
	if x != nil {
		return x.Vms
	}
	return nil
}

func (x *ListVmsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListVmsResponse) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Request/Response messages
type CreateVmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Generated unique identifier for the VM
	VmId string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// VM configuration
	Config        *VmConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVmRequest) Reset() {
	*x = CreateVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmRequest) ProtoMessage() {}

func (x *CreateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmRequest.ProtoReflect.Descriptor instead.
func (*CreateVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *CreateVmRequest) GetConfig() *VmConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type Endpoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	mi := &file_metald_v1_vm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{4}
}

func (x *Endpoint) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Endpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CreateVmResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current VM state after creation
	State VmState `protobuf:"varint,1,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	// Endpoint is the host:port pair
	Endpoint      *Endpoint `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVmResponse) Reset() {
	*x = CreateVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmResponse) ProtoMessage() {}

func (x *CreateVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmResponse.ProtoReflect.Descriptor instead.
func (*CreateVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVmResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

func (x *CreateVmResponse) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type DeleteVmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	VmId  string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// Whether to force deletion even if VM is running
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVmRequest) Reset() {
	*x = DeleteVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVmRequest) ProtoMessage() {}

func (x *DeleteVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVmRequest.ProtoReflect.Descriptor instead.
func (*DeleteVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *DeleteVmRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteVmResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVmResponse) Reset() {
	*x = DeleteVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVmResponse) ProtoMessage() {}

func (x *DeleteVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVmResponse.ProtoReflect.Descriptor instead.
func (*DeleteVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteVmResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type BootVmRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootVmRequest) Reset() {
	*x = BootVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootVmRequest) ProtoMessage() {}

func (x *BootVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootVmRequest.ProtoReflect.Descriptor instead.
func (*BootVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{8}
}

func (x *BootVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type BootVmResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VmState                `protobuf:"varint,2,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootVmResponse) Reset() {
	*x = BootVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootVmResponse) ProtoMessage() {}

func (x *BootVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootVmResponse.ProtoReflect.Descriptor instead.
func (*BootVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{9}
}

func (x *BootVmResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

type ShutdownVmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	VmId  string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// Whether to force shutdown (vs graceful)
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	// Timeout for graceful shutdown (seconds)
	TimeoutSeconds int32 `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShutdownVmRequest) Reset() {
	*x = ShutdownVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownVmRequest) ProtoMessage() {}

func (x *ShutdownVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownVmRequest.ProtoReflect.Descriptor instead.
func (*ShutdownVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{10}
}

func (x *ShutdownVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *ShutdownVmRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ShutdownVmRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type ShutdownVmResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VmState                `protobuf:"varint,2,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownVmResponse) Reset() {
	*x = ShutdownVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownVmResponse) ProtoMessage() {}

func (x *ShutdownVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownVmResponse.ProtoReflect.Descriptor instead.
func (*ShutdownVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{11}
}

func (x *ShutdownVmResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

type PauseVmRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseVmRequest) Reset() {
	*x = PauseVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVmRequest) ProtoMessage() {}

func (x *PauseVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVmRequest.ProtoReflect.Descriptor instead.
func (*PauseVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{12}
}

func (x *PauseVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type PauseVmResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VmState                `protobuf:"varint,2,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseVmResponse) Reset() {
	*x = PauseVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseVmResponse) ProtoMessage() {}

func (x *PauseVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseVmResponse.ProtoReflect.Descriptor instead.
func (*PauseVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{13}
}

func (x *PauseVmResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

type ResumeVmRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeVmRequest) Reset() {
	*x = ResumeVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVmRequest) ProtoMessage() {}

func (x *ResumeVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVmRequest.ProtoReflect.Descriptor instead.
func (*ResumeVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{14}
}

func (x *ResumeVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type ResumeVmResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VmState                `protobuf:"varint,2,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeVmResponse) Reset() {
	*x = ResumeVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeVmResponse) ProtoMessage() {}

func (x *ResumeVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeVmResponse.ProtoReflect.Descriptor instead.
func (*ResumeVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{15}
}

func (x *ResumeVmResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

type RebootVmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	VmId  string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// Whether to force reboot (vs graceful)
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebootVmRequest) Reset() {
	*x = RebootVmRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVmRequest) ProtoMessage() {}

func (x *RebootVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVmRequest.ProtoReflect.Descriptor instead.
func (*RebootVmRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{16}
}

func (x *RebootVmRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *RebootVmRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RebootVmResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         VmState                `protobuf:"varint,2,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebootVmResponse) Reset() {
	*x = RebootVmResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVmResponse) ProtoMessage() {}

func (x *RebootVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVmResponse.ProtoReflect.Descriptor instead.
func (*RebootVmResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{17}
}

func (x *RebootVmResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

type GetVmInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmId          string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVmInfoRequest) Reset() {
	*x = GetVmInfoRequest{}
	mi := &file_metald_v1_vm_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVmInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVmInfoRequest) ProtoMessage() {}

func (x *GetVmInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVmInfoRequest.ProtoReflect.Descriptor instead.
func (*GetVmInfoRequest) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{18}
}

func (x *GetVmInfoRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type GetVmInfoResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	VmId    string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	Config  *VmConfig              `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	State   VmState                `protobuf:"varint,3,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	Metrics *VmMetrics             `protobuf:"bytes,4,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Backend-specific information
	BackendInfo   map[string]string `protobuf:"bytes,5,rep,name=backend_info,json=backendInfo,proto3" json:"backend_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVmInfoResponse) Reset() {
	*x = GetVmInfoResponse{}
	mi := &file_metald_v1_vm_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVmInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVmInfoResponse) ProtoMessage() {}

func (x *GetVmInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVmInfoResponse.ProtoReflect.Descriptor instead.
func (*GetVmInfoResponse) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{19}
}

func (x *GetVmInfoResponse) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *GetVmInfoResponse) GetConfig() *VmConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetVmInfoResponse) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

func (x *GetVmInfoResponse) GetMetrics() *VmMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GetVmInfoResponse) GetBackendInfo() map[string]string {
	if x != nil {
		return x.BackendInfo
	}
	return nil
}

type VmMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU usage percentage (0-100)
	CpuUsagePercent float64 `protobuf:"fixed64,1,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"`
	// Memory usage in MiB
	MemoryUsageMib uint64 `protobuf:"varint,2,opt,name=memory_usage_mib,json=memoryUsageMib,proto3" json:"memory_usage_mib,omitempty"`
	// Network I/O statistics
	NetworkStats *NetworkStats `protobuf:"bytes,3,opt,name=network_stats,json=networkStats,proto3" json:"network_stats,omitempty"`
	// Storage I/O statistics
	StorageStats *StorageStats `protobuf:"bytes,4,opt,name=storage_stats,json=storageStats,proto3" json:"storage_stats,omitempty"`
	// VM uptime in seconds
	UptimeSeconds int64 `protobuf:"varint,5,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VmMetrics) Reset() {
	*x = VmMetrics{}
	mi := &file_metald_v1_vm_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmMetrics) ProtoMessage() {}

func (x *VmMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmMetrics.ProtoReflect.Descriptor instead.
func (*VmMetrics) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{20}
}

func (x *VmMetrics) GetCpuUsagePercent() float64 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *VmMetrics) GetMemoryUsageMib() uint64 {
	if x != nil {
		return x.MemoryUsageMib
	}
	return 0
}

func (x *VmMetrics) GetNetworkStats() *NetworkStats {
	if x != nil {
		return x.NetworkStats
	}
	return nil
}

func (x *VmMetrics) GetStorageStats() *StorageStats {
	if x != nil {
		return x.StorageStats
	}
	return nil
}

func (x *VmMetrics) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

type VmInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	VmId  string                 `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	State VmState                `protobuf:"varint,2,opt,name=state,proto3,enum=metald.v1.VmState" json:"state,omitempty"`
	// Basic config info (subset of full config)
	VcpuCount     int32  `protobuf:"varint,3,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
	MemorySizeMib uint64 `protobuf:"varint,4,opt,name=memory_size_mib,json=memorySizeMib,proto3" json:"memory_size_mib,omitempty"`
	// Creation and modification timestamps
	CreatedTimestamp  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	ModifiedTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modified_timestamp,json=modifiedTimestamp,proto3" json:"modified_timestamp,omitempty"`
	// Metadata
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// deployment_id vm is attached to
	DeploymentId  string `protobuf:"bytes,8,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VmInfo) Reset() {
	*x = VmInfo{}
	mi := &file_metald_v1_vm_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmInfo) ProtoMessage() {}

func (x *VmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmInfo.ProtoReflect.Descriptor instead.
func (*VmInfo) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{21}
}

func (x *VmInfo) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *VmInfo) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_VM_STATE_UNSPECIFIED
}

func (x *VmInfo) GetVcpuCount() int32 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

func (x *VmInfo) GetMemorySizeMib() uint64 {
	if x != nil {
		return x.MemorySizeMib
	}
	return 0
}

func (x *VmInfo) GetCreatedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *VmInfo) GetModifiedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedTimestamp
	}
	return nil
}

func (x *VmInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VmInfo) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type CpuConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of virtual CPUs to allocate at boot
	VcpuCount int32 `protobuf:"varint,1,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
	// Maximum number of virtual CPUs (for hotplug)
	MaxVcpuCount int32 `protobuf:"varint,2,opt,name=max_vcpu_count,json=maxVcpuCount,proto3" json:"max_vcpu_count,omitempty"`
	// CPU topology (optional)
	Topology *CpuTopology `protobuf:"bytes,3,opt,name=topology,proto3" json:"topology,omitempty"`
	// CPU features and model (backend-specific)
	Features      map[string]string `protobuf:"bytes,4,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpuConfig) Reset() {
	*x = CpuConfig{}
	mi := &file_metald_v1_vm_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuConfig) ProtoMessage() {}

func (x *CpuConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuConfig.ProtoReflect.Descriptor instead.
func (*CpuConfig) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{22}
}

func (x *CpuConfig) GetVcpuCount() int32 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

func (x *CpuConfig) GetMaxVcpuCount() int32 {
	if x != nil {
		return x.MaxVcpuCount
	}
	return 0
}

func (x *CpuConfig) GetTopology() *CpuTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *CpuConfig) GetFeatures() map[string]string {
	if x != nil {
		return x.Features
	}
	return nil
}

type CpuTopology struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Sockets        int32                  `protobuf:"varint,1,opt,name=sockets,proto3" json:"sockets,omitempty"`
	CoresPerSocket int32                  `protobuf:"varint,2,opt,name=cores_per_socket,json=coresPerSocket,proto3" json:"cores_per_socket,omitempty"`
	ThreadsPerCore int32                  `protobuf:"varint,3,opt,name=threads_per_core,json=threadsPerCore,proto3" json:"threads_per_core,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CpuTopology) Reset() {
	*x = CpuTopology{}
	mi := &file_metald_v1_vm_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuTopology) ProtoMessage() {}

func (x *CpuTopology) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuTopology.ProtoReflect.Descriptor instead.
func (*CpuTopology) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{23}
}

func (x *CpuTopology) GetSockets() int32 {
	if x != nil {
		return x.Sockets
	}
	return 0
}

func (x *CpuTopology) GetCoresPerSocket() int32 {
	if x != nil {
		return x.CoresPerSocket
	}
	return 0
}

func (x *CpuTopology) GetThreadsPerCore() int32 {
	if x != nil {
		return x.ThreadsPerCore
	}
	return 0
}

type MemoryConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Memory size in MiB
	MemorySizeMib int64 `protobuf:"varint,1,opt,name=memory_size_mib,json=memorySizeMib,proto3" json:"memory_size_mib,omitempty"`
	// Memory backing options (hugepages, etc.)
	Backing       map[string]string `protobuf:"bytes,2,rep,name=backing,proto3" json:"backing,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryConfig) Reset() {
	*x = MemoryConfig{}
	mi := &file_metald_v1_vm_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryConfig) ProtoMessage() {}

func (x *MemoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryConfig.ProtoReflect.Descriptor instead.
func (*MemoryConfig) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{24}
}

func (x *MemoryConfig) GetMemorySizeMib() int64 {
	if x != nil {
		return x.MemorySizeMib
	}
	return 0
}

func (x *MemoryConfig) GetBacking() map[string]string {
	if x != nil {
		return x.Backing
	}
	return nil
}

type BootConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to kernel image
	KernelPath string `protobuf:"bytes,1,opt,name=kernel_path,json=kernelPath,proto3" json:"kernel_path,omitempty"`
	// Path to initial ramdisk (optional)
	InitrdPath string `protobuf:"bytes,2,opt,name=initrd_path,json=initrdPath,proto3" json:"initrd_path,omitempty"`
	// Kernel command line arguments
	KernelArgs string `protobuf:"bytes,3,opt,name=kernel_args,json=kernelArgs,proto3" json:"kernel_args,omitempty"`
	// Boot order and options
	BootOptions   map[string]string `protobuf:"bytes,4,rep,name=boot_options,json=bootOptions,proto3" json:"boot_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootConfig) Reset() {
	*x = BootConfig{}
	mi := &file_metald_v1_vm_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootConfig) ProtoMessage() {}

func (x *BootConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootConfig.ProtoReflect.Descriptor instead.
func (*BootConfig) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{25}
}

func (x *BootConfig) GetKernelPath() string {
	if x != nil {
		return x.KernelPath
	}
	return ""
}

func (x *BootConfig) GetInitrdPath() string {
	if x != nil {
		return x.InitrdPath
	}
	return ""
}

func (x *BootConfig) GetKernelArgs() string {
	if x != nil {
		return x.KernelArgs
	}
	return ""
}

func (x *BootConfig) GetBootOptions() map[string]string {
	if x != nil {
		return x.BootOptions
	}
	return nil
}

type ConsoleConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether console is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Console output destination (file path, pty, etc.)
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	// Console input source (optional)
	Input string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// Console type (serial, virtio-console, etc.)
	ConsoleType   string `protobuf:"bytes,4,opt,name=console_type,json=consoleType,proto3" json:"console_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsoleConfig) Reset() {
	*x = ConsoleConfig{}
	mi := &file_metald_v1_vm_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsoleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleConfig) ProtoMessage() {}

func (x *ConsoleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metald_v1_vm_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleConfig.ProtoReflect.Descriptor instead.
func (*ConsoleConfig) Descriptor() ([]byte, []int) {
	return file_metald_v1_vm_proto_rawDescGZIP(), []int{26}
}

func (x *ConsoleConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConsoleConfig) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ConsoleConfig) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *ConsoleConfig) GetConsoleType() string {
	if x != nil {
		return x.ConsoleType
	}
	return ""
}

var File_metald_v1_vm_proto protoreflect.FileDescriptor

const file_metald_v1_vm_proto_rawDesc = "" +
	"\n" +
	"\x12metald/v1/vm.proto\x12\tmetald.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17metald/v1/network.proto\x1a\x17metald/v1/storage.proto\"\x80\x03\n" +
	"\bVmConfig\x12\x1d\n" +
	"\n" +
	"vcpu_count\x18\x01 \x01(\rR\tvcpuCount\x12&\n" +
	"\x0fmemory_size_mib\x18\x02 \x01(\x04R\rmemorySizeMib\x12\x12\n" +
	"\x04boot\x18\x03 \x01(\tR\x04boot\x12%\n" +
	"\x0enetwork_config\x18\x04 \x01(\tR\rnetworkConfig\x122\n" +
	"\aconsole\x18\x05 \x01(\v2\x18.metald.v1.ConsoleConfigR\aconsole\x122\n" +
	"\astorage\x18\x06 \x01(\v2\x18.metald.v1.StorageDeviceR\astorage\x12\x0e\n" +
	"\x02id\x18\a \x01(\tR\x02id\x12=\n" +
	"\bmetadata\x18\b \x03(\v2!.metald.v1.VmConfig.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x83\x01\n" +
	"\x0eListVmsRequest\x125\n" +
	"\fstate_filter\x18\x01 \x03(\x0e2\x12.metald.v1.VmStateR\vstateFilter\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\x7f\n" +
	"\x0fListVmsResponse\x12#\n" +
	"\x03vms\x18\x01 \x03(\v2\x11.metald.v1.VmInfoR\x03vms\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x04R\n" +
	"totalCount\"S\n" +
	"\x0fCreateVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12+\n" +
	"\x06config\x18\x02 \x01(\v2\x13.metald.v1.VmConfigR\x06config\"2\n" +
	"\bEndpoint\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\"m\n" +
	"\x10CreateVmResponse\x12(\n" +
	"\x05state\x18\x01 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\x12/\n" +
	"\bendpoint\x18\x02 \x01(\v2\x13.metald.v1.EndpointR\bendpoint\"<\n" +
	"\x0fDeleteVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\",\n" +
	"\x10DeleteVmResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"$\n" +
	"\rBootVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\":\n" +
	"\x0eBootVmResponse\x12(\n" +
	"\x05state\x18\x02 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\"g\n" +
	"\x11ShutdownVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\x12'\n" +
	"\x0ftimeout_seconds\x18\x03 \x01(\x05R\x0etimeoutSeconds\">\n" +
	"\x12ShutdownVmResponse\x12(\n" +
	"\x05state\x18\x02 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\"%\n" +
	"\x0ePauseVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\";\n" +
	"\x0fPauseVmResponse\x12(\n" +
	"\x05state\x18\x02 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\"&\n" +
	"\x0fResumeVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\"<\n" +
	"\x10ResumeVmResponse\x12(\n" +
	"\x05state\x18\x02 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\"<\n" +
	"\x0fRebootVmRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"<\n" +
	"\x10RebootVmResponse\x12(\n" +
	"\x05state\x18\x02 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\"'\n" +
	"\x10GetVmInfoRequest\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\"\xc1\x02\n" +
	"\x11GetVmInfoResponse\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12+\n" +
	"\x06config\x18\x02 \x01(\v2\x13.metald.v1.VmConfigR\x06config\x12(\n" +
	"\x05state\x18\x03 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\x12.\n" +
	"\ametrics\x18\x04 \x01(\v2\x14.metald.v1.VmMetricsR\ametrics\x12P\n" +
	"\fbackend_info\x18\x05 \x03(\v2-.metald.v1.GetVmInfoResponse.BackendInfoEntryR\vbackendInfo\x1a>\n" +
	"\x10BackendInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x84\x02\n" +
	"\tVmMetrics\x12*\n" +
	"\x11cpu_usage_percent\x18\x01 \x01(\x01R\x0fcpuUsagePercent\x12(\n" +
	"\x10memory_usage_mib\x18\x02 \x01(\x04R\x0ememoryUsageMib\x12<\n" +
	"\rnetwork_stats\x18\x03 \x01(\v2\x17.metald.v1.NetworkStatsR\fnetworkStats\x12<\n" +
	"\rstorage_stats\x18\x04 \x01(\v2\x17.metald.v1.StorageStatsR\fstorageStats\x12%\n" +
	"\x0euptime_seconds\x18\x05 \x01(\x03R\ruptimeSeconds\"\xc1\x03\n" +
	"\x06VmInfo\x12\x13\n" +
	"\x05vm_id\x18\x01 \x01(\tR\x04vmId\x12(\n" +
	"\x05state\x18\x02 \x01(\x0e2\x12.metald.v1.VmStateR\x05state\x12\x1d\n" +
	"\n" +
	"vcpu_count\x18\x03 \x01(\x05R\tvcpuCount\x12&\n" +
	"\x0fmemory_size_mib\x18\x04 \x01(\x04R\rmemorySizeMib\x12G\n" +
	"\x11created_timestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x10createdTimestamp\x12I\n" +
	"\x12modified_timestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x11modifiedTimestamp\x12;\n" +
	"\bmetadata\x18\a \x03(\v2\x1f.metald.v1.VmInfo.MetadataEntryR\bmetadata\x12#\n" +
	"\rdeployment_id\x18\b \x01(\tR\fdeploymentId\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x81\x02\n" +
	"\tCpuConfig\x12\x1d\n" +
	"\n" +
	"vcpu_count\x18\x01 \x01(\x05R\tvcpuCount\x12$\n" +
	"\x0emax_vcpu_count\x18\x02 \x01(\x05R\fmaxVcpuCount\x122\n" +
	"\btopology\x18\x03 \x01(\v2\x16.metald.v1.CpuTopologyR\btopology\x12>\n" +
	"\bfeatures\x18\x04 \x03(\v2\".metald.v1.CpuConfig.FeaturesEntryR\bfeatures\x1a;\n" +
	"\rFeaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"{\n" +
	"\vCpuTopology\x12\x18\n" +
	"\asockets\x18\x01 \x01(\x05R\asockets\x12(\n" +
	"\x10cores_per_socket\x18\x02 \x01(\x05R\x0ecoresPerSocket\x12(\n" +
	"\x10threads_per_core\x18\x03 \x01(\x05R\x0ethreadsPerCore\"\xb2\x01\n" +
	"\fMemoryConfig\x12&\n" +
	"\x0fmemory_size_mib\x18\x01 \x01(\x03R\rmemorySizeMib\x12>\n" +
	"\abacking\x18\x02 \x03(\v2$.metald.v1.MemoryConfig.BackingEntryR\abacking\x1a:\n" +
	"\fBackingEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfa\x01\n" +
	"\n" +
	"BootConfig\x12\x1f\n" +
	"\vkernel_path\x18\x01 \x01(\tR\n" +
	"kernelPath\x12\x1f\n" +
	"\vinitrd_path\x18\x02 \x01(\tR\n" +
	"initrdPath\x12\x1f\n" +
	"\vkernel_args\x18\x03 \x01(\tR\n" +
	"kernelArgs\x12I\n" +
	"\fboot_options\x18\x04 \x03(\v2&.metald.v1.BootConfig.BootOptionsEntryR\vbootOptions\x1a>\n" +
	"\x10BootOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"z\n" +
	"\rConsoleConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x16\n" +
	"\x06output\x18\x02 \x01(\tR\x06output\x12\x14\n" +
	"\x05input\x18\x03 \x01(\tR\x05input\x12!\n" +
	"\fconsole_type\x18\x04 \x01(\tR\vconsoleType*{\n" +
	"\aVmState\x12\x18\n" +
	"\x14VM_STATE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10VM_STATE_CREATED\x10\x01\x12\x14\n" +
	"\x10VM_STATE_RUNNING\x10\x02\x12\x13\n" +
	"\x0fVM_STATE_PAUSED\x10\x03\x12\x15\n" +
	"\x11VM_STATE_SHUTDOWN\x10\x04B:Z8github.com/unkeyed/unkey/go/gen/proto/metald/v1;metaldv1b\x06proto3"

var (
	file_metald_v1_vm_proto_rawDescOnce sync.Once
	file_metald_v1_vm_proto_rawDescData []byte
)

func file_metald_v1_vm_proto_rawDescGZIP() []byte {
	file_metald_v1_vm_proto_rawDescOnce.Do(func() {
		file_metald_v1_vm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metald_v1_vm_proto_rawDesc), len(file_metald_v1_vm_proto_rawDesc)))
	})
	return file_metald_v1_vm_proto_rawDescData
}

var file_metald_v1_vm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metald_v1_vm_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_metald_v1_vm_proto_goTypes = []any{
	(VmState)(0),                  // 0: metald.v1.VmState
	(*VmConfig)(nil),              // 1: metald.v1.VmConfig
	(*ListVmsRequest)(nil),        // 2: metald.v1.ListVmsRequest
	(*ListVmsResponse)(nil),       // 3: metald.v1.ListVmsResponse
	(*CreateVmRequest)(nil),       // 4: metald.v1.CreateVmRequest
	(*Endpoint)(nil),              // 5: metald.v1.Endpoint
	(*CreateVmResponse)(nil),      // 6: metald.v1.CreateVmResponse
	(*DeleteVmRequest)(nil),       // 7: metald.v1.DeleteVmRequest
	(*DeleteVmResponse)(nil),      // 8: metald.v1.DeleteVmResponse
	(*BootVmRequest)(nil),         // 9: metald.v1.BootVmRequest
	(*BootVmResponse)(nil),        // 10: metald.v1.BootVmResponse
	(*ShutdownVmRequest)(nil),     // 11: metald.v1.ShutdownVmRequest
	(*ShutdownVmResponse)(nil),    // 12: metald.v1.ShutdownVmResponse
	(*PauseVmRequest)(nil),        // 13: metald.v1.PauseVmRequest
	(*PauseVmResponse)(nil),       // 14: metald.v1.PauseVmResponse
	(*ResumeVmRequest)(nil),       // 15: metald.v1.ResumeVmRequest
	(*ResumeVmResponse)(nil),      // 16: metald.v1.ResumeVmResponse
	(*RebootVmRequest)(nil),       // 17: metald.v1.RebootVmRequest
	(*RebootVmResponse)(nil),      // 18: metald.v1.RebootVmResponse
	(*GetVmInfoRequest)(nil),      // 19: metald.v1.GetVmInfoRequest
	(*GetVmInfoResponse)(nil),     // 20: metald.v1.GetVmInfoResponse
	(*VmMetrics)(nil),             // 21: metald.v1.VmMetrics
	(*VmInfo)(nil),                // 22: metald.v1.VmInfo
	(*CpuConfig)(nil),             // 23: metald.v1.CpuConfig
	(*CpuTopology)(nil),           // 24: metald.v1.CpuTopology
	(*MemoryConfig)(nil),          // 25: metald.v1.MemoryConfig
	(*BootConfig)(nil),            // 26: metald.v1.BootConfig
	(*ConsoleConfig)(nil),         // 27: metald.v1.ConsoleConfig
	nil,                           // 28: metald.v1.VmConfig.MetadataEntry
	nil,                           // 29: metald.v1.GetVmInfoResponse.BackendInfoEntry
	nil,                           // 30: metald.v1.VmInfo.MetadataEntry
	nil,                           // 31: metald.v1.CpuConfig.FeaturesEntry
	nil,                           // 32: metald.v1.MemoryConfig.BackingEntry
	nil,                           // 33: metald.v1.BootConfig.BootOptionsEntry
	(*StorageDevice)(nil),         // 34: metald.v1.StorageDevice
	(*NetworkStats)(nil),          // 35: metald.v1.NetworkStats
	(*StorageStats)(nil),          // 36: metald.v1.StorageStats
	(*timestamppb.Timestamp)(nil), // 37: google.protobuf.Timestamp
}
var file_metald_v1_vm_proto_depIdxs = []int32{
	27, // 0: metald.v1.VmConfig.console:type_name -> metald.v1.ConsoleConfig
	34, // 1: metald.v1.VmConfig.storage:type_name -> metald.v1.StorageDevice
	28, // 2: metald.v1.VmConfig.metadata:type_name -> metald.v1.VmConfig.MetadataEntry
	0,  // 3: metald.v1.ListVmsRequest.state_filter:type_name -> metald.v1.VmState
	22, // 4: metald.v1.ListVmsResponse.vms:type_name -> metald.v1.VmInfo
	1,  // 5: metald.v1.CreateVmRequest.config:type_name -> metald.v1.VmConfig
	0,  // 6: metald.v1.CreateVmResponse.state:type_name -> metald.v1.VmState
	5,  // 7: metald.v1.CreateVmResponse.endpoint:type_name -> metald.v1.Endpoint
	0,  // 8: metald.v1.BootVmResponse.state:type_name -> metald.v1.VmState
	0,  // 9: metald.v1.ShutdownVmResponse.state:type_name -> metald.v1.VmState
	0,  // 10: metald.v1.PauseVmResponse.state:type_name -> metald.v1.VmState
	0,  // 11: metald.v1.ResumeVmResponse.state:type_name -> metald.v1.VmState
	0,  // 12: metald.v1.RebootVmResponse.state:type_name -> metald.v1.VmState
	1,  // 13: metald.v1.GetVmInfoResponse.config:type_name -> metald.v1.VmConfig
	0,  // 14: metald.v1.GetVmInfoResponse.state:type_name -> metald.v1.VmState
	21, // 15: metald.v1.GetVmInfoResponse.metrics:type_name -> metald.v1.VmMetrics
	29, // 16: metald.v1.GetVmInfoResponse.backend_info:type_name -> metald.v1.GetVmInfoResponse.BackendInfoEntry
	35, // 17: metald.v1.VmMetrics.network_stats:type_name -> metald.v1.NetworkStats
	36, // 18: metald.v1.VmMetrics.storage_stats:type_name -> metald.v1.StorageStats
	0,  // 19: metald.v1.VmInfo.state:type_name -> metald.v1.VmState
	37, // 20: metald.v1.VmInfo.created_timestamp:type_name -> google.protobuf.Timestamp
	37, // 21: metald.v1.VmInfo.modified_timestamp:type_name -> google.protobuf.Timestamp
	30, // 22: metald.v1.VmInfo.metadata:type_name -> metald.v1.VmInfo.MetadataEntry
	24, // 23: metald.v1.CpuConfig.topology:type_name -> metald.v1.CpuTopology
	31, // 24: metald.v1.CpuConfig.features:type_name -> metald.v1.CpuConfig.FeaturesEntry
	32, // 25: metald.v1.MemoryConfig.backing:type_name -> metald.v1.MemoryConfig.BackingEntry
	33, // 26: metald.v1.BootConfig.boot_options:type_name -> metald.v1.BootConfig.BootOptionsEntry
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_metald_v1_vm_proto_init() }
func file_metald_v1_vm_proto_init() {
	if File_metald_v1_vm_proto != nil {
		return
	}
	file_metald_v1_network_proto_init()
	file_metald_v1_storage_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metald_v1_vm_proto_rawDesc), len(file_metald_v1_vm_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metald_v1_vm_proto_goTypes,
		DependencyIndexes: file_metald_v1_vm_proto_depIdxs,
		EnumInfos:         file_metald_v1_vm_proto_enumTypes,
		MessageInfos:      file_metald_v1_vm_proto_msgTypes,
	}.Build()
	File_metald_v1_vm_proto = out.File
	file_metald_v1_vm_proto_goTypes = nil
	file_metald_v1_vm_proto_depIdxs = nil
}
