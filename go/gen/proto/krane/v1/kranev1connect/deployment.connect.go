// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: krane/v1/deployment.proto

package kranev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/krane/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "krane.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServiceCreateDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// CreateDeployment RPC.
	DeploymentServiceCreateDeploymentProcedure = "/krane.v1.DeploymentService/CreateDeployment"
	// DeploymentServiceGetDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// GetDeployment RPC.
	DeploymentServiceGetDeploymentProcedure = "/krane.v1.DeploymentService/GetDeployment"
	// DeploymentServiceDeleteDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// DeleteDeployment RPC.
	DeploymentServiceDeleteDeploymentProcedure = "/krane.v1.DeploymentService/DeleteDeployment"
)

// DeploymentServiceClient is a client for the krane.v1.DeploymentService service.
type DeploymentServiceClient interface {
	// CreateDeployment
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// GetDeployment
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// DeleteDeployment
	DeleteDeployment(context.Context, *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[v1.DeleteDeploymentResponse], error)
}

// NewDeploymentServiceClient constructs a client for the krane.v1.DeploymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deploymentServiceMethods := v1.File_krane_v1_deployment_proto.Services().ByName("DeploymentService").Methods()
	return &deploymentServiceClient{
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceCreateDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("CreateDeployment")),
			connect.WithClientOptions(opts...),
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("GetDeployment")),
			connect.WithClientOptions(opts...),
		),
		deleteDeployment: connect.NewClient[v1.DeleteDeploymentRequest, v1.DeleteDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceDeleteDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("DeleteDeployment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	createDeployment *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment    *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	deleteDeployment *connect.Client[v1.DeleteDeploymentRequest, v1.DeleteDeploymentResponse]
}

// CreateDeployment calls krane.v1.DeploymentService.CreateDeployment.
func (c *deploymentServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls krane.v1.DeploymentService.GetDeployment.
func (c *deploymentServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// DeleteDeployment calls krane.v1.DeploymentService.DeleteDeployment.
func (c *deploymentServiceClient) DeleteDeployment(ctx context.Context, req *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[v1.DeleteDeploymentResponse], error) {
	return c.deleteDeployment.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the krane.v1.DeploymentService service.
type DeploymentServiceHandler interface {
	// CreateDeployment
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// GetDeployment
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// DeleteDeployment
	DeleteDeployment(context.Context, *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[v1.DeleteDeploymentResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceMethods := v1.File_krane_v1_deployment_proto.Services().ByName("DeploymentService").Methods()
	deploymentServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("CreateDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("GetDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceDeleteDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceDeleteDeploymentProcedure,
		svc.DeleteDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("DeleteDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/krane.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceCreateDeploymentProcedure:
			deploymentServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentProcedure:
			deploymentServiceGetDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceDeleteDeploymentProcedure:
			deploymentServiceDeleteDeploymentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("krane.v1.DeploymentService.CreateDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("krane.v1.DeploymentService.GetDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) DeleteDeployment(context.Context, *connect.Request[v1.DeleteDeploymentRequest]) (*connect.Response[v1.DeleteDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("krane.v1.DeploymentService.DeleteDeployment is not implemented"))
}
