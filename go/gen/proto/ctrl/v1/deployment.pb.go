// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: ctrl/v1/deployment.proto

package ctrlv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deployment status enum
type DeploymentStatus int32

const (
	DeploymentStatus_DEPLOYMENT_STATUS_UNSPECIFIED DeploymentStatus = 0
	DeploymentStatus_DEPLOYMENT_STATUS_PENDING     DeploymentStatus = 1
	DeploymentStatus_DEPLOYMENT_STATUS_BUILDING    DeploymentStatus = 2
	DeploymentStatus_DEPLOYMENT_STATUS_DEPLOYING   DeploymentStatus = 3
	DeploymentStatus_DEPLOYMENT_STATUS_NETWORK     DeploymentStatus = 4
	DeploymentStatus_DEPLOYMENT_STATUS_READY       DeploymentStatus = 5
	DeploymentStatus_DEPLOYMENT_STATUS_FAILED      DeploymentStatus = 6
)

// Enum value maps for DeploymentStatus.
var (
	DeploymentStatus_name = map[int32]string{
		0: "DEPLOYMENT_STATUS_UNSPECIFIED",
		1: "DEPLOYMENT_STATUS_PENDING",
		2: "DEPLOYMENT_STATUS_BUILDING",
		3: "DEPLOYMENT_STATUS_DEPLOYING",
		4: "DEPLOYMENT_STATUS_NETWORK",
		5: "DEPLOYMENT_STATUS_READY",
		6: "DEPLOYMENT_STATUS_FAILED",
	}
	DeploymentStatus_value = map[string]int32{
		"DEPLOYMENT_STATUS_UNSPECIFIED": 0,
		"DEPLOYMENT_STATUS_PENDING":     1,
		"DEPLOYMENT_STATUS_BUILDING":    2,
		"DEPLOYMENT_STATUS_DEPLOYING":   3,
		"DEPLOYMENT_STATUS_NETWORK":     4,
		"DEPLOYMENT_STATUS_READY":       5,
		"DEPLOYMENT_STATUS_FAILED":      6,
	}
)

func (x DeploymentStatus) Enum() *DeploymentStatus {
	p := new(DeploymentStatus)
	*p = x
	return p
}

func (x DeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_v1_deployment_proto_enumTypes[0].Descriptor()
}

func (DeploymentStatus) Type() protoreflect.EnumType {
	return &file_ctrl_v1_deployment_proto_enumTypes[0]
}

func (x DeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentStatus.Descriptor instead.
func (DeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{0}
}

// Source type for deployment creation
type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_SOURCE_TYPE_GIT         SourceType = 1
	SourceType_SOURCE_TYPE_CLI_UPLOAD  SourceType = 2
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "SOURCE_TYPE_GIT",
		2: "SOURCE_TYPE_CLI_UPLOAD",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"SOURCE_TYPE_GIT":         1,
		"SOURCE_TYPE_CLI_UPLOAD":  2,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_v1_deployment_proto_enumTypes[1].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_ctrl_v1_deployment_proto_enumTypes[1]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{1}
}

type CreateDeploymentRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	WorkspaceId string                 `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	ProjectId   string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Branch      string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	// Source information
	EnvironmentSlug string     `protobuf:"bytes,4,opt,name=environment_slug,json=environmentSlug,proto3" json:"environment_slug,omitempty"`
	SourceType      SourceType `protobuf:"varint,5,opt,name=source_type,json=sourceType,proto3,enum=ctrl.v1.SourceType" json:"source_type,omitempty"`
	DockerImage     string     `protobuf:"bytes,6,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	// Extended git information
	GitCommitSha     string `protobuf:"bytes,7,opt,name=git_commit_sha,json=gitCommitSha,proto3" json:"git_commit_sha,omitempty"` // For git sources
	GitCommitMessage string `protobuf:"bytes,8,opt,name=git_commit_message,json=gitCommitMessage,proto3" json:"git_commit_message,omitempty"`
	// TODO: Add GitHub API integration to lookup username/avatar from email
	GitCommitAuthorHandle    string `protobuf:"bytes,9,opt,name=git_commit_author_handle,json=gitCommitAuthorHandle,proto3" json:"git_commit_author_handle,omitempty"`
	GitCommitAuthorAvatarUrl string `protobuf:"bytes,10,opt,name=git_commit_author_avatar_url,json=gitCommitAuthorAvatarUrl,proto3" json:"git_commit_author_avatar_url,omitempty"`
	GitCommitTimestamp       int64  `protobuf:"varint,11,opt,name=git_commit_timestamp,json=gitCommitTimestamp,proto3" json:"git_commit_timestamp,omitempty"` // Unix epoch milliseconds
	// Keyspace ID for authentication
	KeyspaceId    *string `protobuf:"bytes,12,opt,name=keyspace_id,json=keyspaceId,proto3,oneof" json:"keyspace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeploymentRequest) Reset() {
	*x = CreateDeploymentRequest{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentRequest) ProtoMessage() {}

func (x *CreateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeploymentRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CreateDeploymentRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateDeploymentRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateDeploymentRequest) GetEnvironmentSlug() string {
	if x != nil {
		return x.EnvironmentSlug
	}
	return ""
}

func (x *CreateDeploymentRequest) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *CreateDeploymentRequest) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *CreateDeploymentRequest) GetGitCommitSha() string {
	if x != nil {
		return x.GitCommitSha
	}
	return ""
}

func (x *CreateDeploymentRequest) GetGitCommitMessage() string {
	if x != nil {
		return x.GitCommitMessage
	}
	return ""
}

func (x *CreateDeploymentRequest) GetGitCommitAuthorHandle() string {
	if x != nil {
		return x.GitCommitAuthorHandle
	}
	return ""
}

func (x *CreateDeploymentRequest) GetGitCommitAuthorAvatarUrl() string {
	if x != nil {
		return x.GitCommitAuthorAvatarUrl
	}
	return ""
}

func (x *CreateDeploymentRequest) GetGitCommitTimestamp() int64 {
	if x != nil {
		return x.GitCommitTimestamp
	}
	return 0
}

func (x *CreateDeploymentRequest) GetKeyspaceId() string {
	if x != nil && x.KeyspaceId != nil {
		return *x.KeyspaceId
	}
	return ""
}

type CreateDeploymentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Status        DeploymentStatus       `protobuf:"varint,2,opt,name=status,proto3,enum=ctrl.v1.DeploymentStatus" json:"status,omitempty"` // Will be PENDING or BUILDING
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeploymentResponse) Reset() {
	*x = CreateDeploymentResponse{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentResponse) ProtoMessage() {}

func (x *CreateDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeploymentResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *CreateDeploymentResponse) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_DEPLOYMENT_STATUS_UNSPECIFIED
}

type GetDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeploymentRequest) Reset() {
	*x = GetDeploymentRequest{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentRequest) ProtoMessage() {}

func (x *GetDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *GetDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployment    *Deployment            `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeploymentResponse) Reset() {
	*x = GetDeploymentResponse{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentResponse) ProtoMessage() {}

func (x *GetDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type Deployment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId   string                 `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	EnvironmentId string                 `protobuf:"bytes,4,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// Source information
	GitCommitSha string `protobuf:"bytes,5,opt,name=git_commit_sha,json=gitCommitSha,proto3" json:"git_commit_sha,omitempty"`
	GitBranch    string `protobuf:"bytes,6,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch,omitempty"`
	// Status and lifecycle
	Status       DeploymentStatus `protobuf:"varint,7,opt,name=status,proto3,enum=ctrl.v1.DeploymentStatus" json:"status,omitempty"`
	ErrorMessage string           `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // For failed deployments
	// Configuration snapshot (resolved at creation time)
	EnvironmentVariables map[string]string `protobuf:"bytes,9,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Topology configuration
	Topology *Topology `protobuf:"bytes,10,opt,name=topology,proto3" json:"topology,omitempty"`
	// Timestamps
	CreatedAt int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Associated hostnames for this deployment
	Hostnames []string `protobuf:"bytes,13,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Build information
	RootfsImageId string `protobuf:"bytes,14,opt,name=rootfs_image_id,json=rootfsImageId,proto3" json:"rootfs_image_id,omitempty"`
	BuildId       string `protobuf:"bytes,15,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Deployment steps
	Steps []*DeploymentStep `protobuf:"bytes,16,rep,name=steps,proto3" json:"steps,omitempty"`
	// Extended git information
	GitCommitMessage string `protobuf:"bytes,17,opt,name=git_commit_message,json=gitCommitMessage,proto3" json:"git_commit_message,omitempty"`
	// Removed: email is PII and not stored
	GitCommitAuthorHandle    string `protobuf:"bytes,18,opt,name=git_commit_author_handle,json=gitCommitAuthorHandle,proto3" json:"git_commit_author_handle,omitempty"`
	GitCommitAuthorAvatarUrl string `protobuf:"bytes,19,opt,name=git_commit_author_avatar_url,json=gitCommitAuthorAvatarUrl,proto3" json:"git_commit_author_avatar_url,omitempty"`
	GitCommitTimestamp       int64  `protobuf:"varint,20,opt,name=git_commit_timestamp,json=gitCommitTimestamp,proto3" json:"git_commit_timestamp,omitempty"` // Unix epoch milliseconds
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{4}
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *Deployment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Deployment) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Deployment) GetGitCommitSha() string {
	if x != nil {
		return x.GitCommitSha
	}
	return ""
}

func (x *Deployment) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *Deployment) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_DEPLOYMENT_STATUS_UNSPECIFIED
}

func (x *Deployment) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Deployment) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *Deployment) GetTopology() *Topology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *Deployment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Deployment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Deployment) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *Deployment) GetRootfsImageId() string {
	if x != nil {
		return x.RootfsImageId
	}
	return ""
}

func (x *Deployment) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *Deployment) GetSteps() []*DeploymentStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Deployment) GetGitCommitMessage() string {
	if x != nil {
		return x.GitCommitMessage
	}
	return ""
}

func (x *Deployment) GetGitCommitAuthorHandle() string {
	if x != nil {
		return x.GitCommitAuthorHandle
	}
	return ""
}

func (x *Deployment) GetGitCommitAuthorAvatarUrl() string {
	if x != nil {
		return x.GitCommitAuthorAvatarUrl
	}
	return ""
}

func (x *Deployment) GetGitCommitTimestamp() int64 {
	if x != nil {
		return x.GitCommitTimestamp
	}
	return 0
}

type DeploymentStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentStep) Reset() {
	*x = DeploymentStep{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentStep) ProtoMessage() {}

func (x *DeploymentStep) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentStep.ProtoReflect.Descriptor instead.
func (*DeploymentStep) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{5}
}

func (x *DeploymentStep) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeploymentStep) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeploymentStep) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DeploymentStep) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type Topology struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuMillicores int32                  `protobuf:"varint,1,opt,name=cpu_millicores,json=cpuMillicores,proto3" json:"cpu_millicores,omitempty"`
	MemoryMb      int32                  `protobuf:"varint,2,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	// Regional configuration
	Regions []*RegionalConfig `protobuf:"bytes,3,rep,name=regions,proto3" json:"regions,omitempty"`
	// Runtime settings
	IdleTimeoutSeconds int32  `protobuf:"varint,4,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds,proto3" json:"idle_timeout_seconds,omitempty"` // 0 means no timeout
	HealthCheckPath    string `protobuf:"bytes,5,opt,name=health_check_path,json=healthCheckPath,proto3" json:"health_check_path,omitempty"`
	Port               int32  `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Topology) Reset() {
	*x = Topology{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{6}
}

func (x *Topology) GetCpuMillicores() int32 {
	if x != nil {
		return x.CpuMillicores
	}
	return 0
}

func (x *Topology) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *Topology) GetRegions() []*RegionalConfig {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Topology) GetIdleTimeoutSeconds() int32 {
	if x != nil {
		return x.IdleTimeoutSeconds
	}
	return 0
}

func (x *Topology) GetHealthCheckPath() string {
	if x != nil {
		return x.HealthCheckPath
	}
	return ""
}

func (x *Topology) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RegionalConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Region        string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	MinInstances  int32                  `protobuf:"varint,2,opt,name=min_instances,json=minInstances,proto3" json:"min_instances,omitempty"`
	MaxInstances  int32                  `protobuf:"varint,3,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegionalConfig) Reset() {
	*x = RegionalConfig{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionalConfig) ProtoMessage() {}

func (x *RegionalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionalConfig.ProtoReflect.Descriptor instead.
func (*RegionalConfig) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{7}
}

func (x *RegionalConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RegionalConfig) GetMinInstances() int32 {
	if x != nil {
		return x.MinInstances
	}
	return 0
}

func (x *RegionalConfig) GetMaxInstances() int32 {
	if x != nil {
		return x.MaxInstances
	}
	return 0
}

type RollbackRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceDeploymentId string                 `protobuf:"bytes,1,opt,name=source_deployment_id,json=sourceDeploymentId,proto3" json:"source_deployment_id,omitempty"`
	TargetDeploymentId string                 `protobuf:"bytes,2,opt,name=target_deployment_id,json=targetDeploymentId,proto3" json:"target_deployment_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RollbackRequest) Reset() {
	*x = RollbackRequest{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRequest) ProtoMessage() {}

func (x *RollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRequest.ProtoReflect.Descriptor instead.
func (*RollbackRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{8}
}

func (x *RollbackRequest) GetSourceDeploymentId() string {
	if x != nil {
		return x.SourceDeploymentId
	}
	return ""
}

func (x *RollbackRequest) GetTargetDeploymentId() string {
	if x != nil {
		return x.TargetDeploymentId
	}
	return ""
}

type RollbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackResponse) Reset() {
	*x = RollbackResponse{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackResponse) ProtoMessage() {}

func (x *RollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackResponse.ProtoReflect.Descriptor instead.
func (*RollbackResponse) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{9}
}

type PromoteRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TargetDeploymentId string                 `protobuf:"bytes,1,opt,name=target_deployment_id,json=targetDeploymentId,proto3" json:"target_deployment_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PromoteRequest) Reset() {
	*x = PromoteRequest{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteRequest) ProtoMessage() {}

func (x *PromoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteRequest.ProtoReflect.Descriptor instead.
func (*PromoteRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{10}
}

func (x *PromoteRequest) GetTargetDeploymentId() string {
	if x != nil {
		return x.TargetDeploymentId
	}
	return ""
}

type PromoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromoteResponse) Reset() {
	*x = PromoteResponse{}
	mi := &file_ctrl_v1_deployment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteResponse) ProtoMessage() {}

func (x *PromoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_v1_deployment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteResponse.ProtoReflect.Descriptor instead.
func (*PromoteResponse) Descriptor() ([]byte, []int) {
	return file_ctrl_v1_deployment_proto_rawDescGZIP(), []int{11}
}

var File_ctrl_v1_deployment_proto protoreflect.FileDescriptor

const file_ctrl_v1_deployment_proto_rawDesc = "" +
	"\n" +
	"\x18ctrl/v1/deployment.proto\x12\actrl.v1\"\xac\x04\n" +
	"\x17CreateDeploymentRequest\x12!\n" +
	"\fworkspace_id\x18\x01 \x01(\tR\vworkspaceId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x16\n" +
	"\x06branch\x18\x03 \x01(\tR\x06branch\x12)\n" +
	"\x10environment_slug\x18\x04 \x01(\tR\x0fenvironmentSlug\x124\n" +
	"\vsource_type\x18\x05 \x01(\x0e2\x13.ctrl.v1.SourceTypeR\n" +
	"sourceType\x12!\n" +
	"\fdocker_image\x18\x06 \x01(\tR\vdockerImage\x12$\n" +
	"\x0egit_commit_sha\x18\a \x01(\tR\fgitCommitSha\x12,\n" +
	"\x12git_commit_message\x18\b \x01(\tR\x10gitCommitMessage\x127\n" +
	"\x18git_commit_author_handle\x18\t \x01(\tR\x15gitCommitAuthorHandle\x12>\n" +
	"\x1cgit_commit_author_avatar_url\x18\n" +
	" \x01(\tR\x18gitCommitAuthorAvatarUrl\x120\n" +
	"\x14git_commit_timestamp\x18\v \x01(\x03R\x12gitCommitTimestamp\x12$\n" +
	"\vkeyspace_id\x18\f \x01(\tH\x00R\n" +
	"keyspaceId\x88\x01\x01B\x0e\n" +
	"\f_keyspace_id\"r\n" +
	"\x18CreateDeploymentResponse\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.ctrl.v1.DeploymentStatusR\x06status\";\n" +
	"\x14GetDeploymentRequest\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\"L\n" +
	"\x15GetDeploymentResponse\x123\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2\x13.ctrl.v1.DeploymentR\n" +
	"deployment\"\xa5\a\n" +
	"\n" +
	"Deployment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fworkspace_id\x18\x02 \x01(\tR\vworkspaceId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12%\n" +
	"\x0eenvironment_id\x18\x04 \x01(\tR\renvironmentId\x12$\n" +
	"\x0egit_commit_sha\x18\x05 \x01(\tR\fgitCommitSha\x12\x1d\n" +
	"\n" +
	"git_branch\x18\x06 \x01(\tR\tgitBranch\x121\n" +
	"\x06status\x18\a \x01(\x0e2\x19.ctrl.v1.DeploymentStatusR\x06status\x12#\n" +
	"\rerror_message\x18\b \x01(\tR\ferrorMessage\x12b\n" +
	"\x15environment_variables\x18\t \x03(\v2-.ctrl.v1.Deployment.EnvironmentVariablesEntryR\x14environmentVariables\x12-\n" +
	"\btopology\x18\n" +
	" \x01(\v2\x11.ctrl.v1.TopologyR\btopology\x12\x1d\n" +
	"\n" +
	"created_at\x18\v \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\f \x01(\x03R\tupdatedAt\x12\x1c\n" +
	"\thostnames\x18\r \x03(\tR\thostnames\x12&\n" +
	"\x0frootfs_image_id\x18\x0e \x01(\tR\rrootfsImageId\x12\x19\n" +
	"\bbuild_id\x18\x0f \x01(\tR\abuildId\x12-\n" +
	"\x05steps\x18\x10 \x03(\v2\x17.ctrl.v1.DeploymentStepR\x05steps\x12,\n" +
	"\x12git_commit_message\x18\x11 \x01(\tR\x10gitCommitMessage\x127\n" +
	"\x18git_commit_author_handle\x18\x12 \x01(\tR\x15gitCommitAuthorHandle\x12>\n" +
	"\x1cgit_commit_author_avatar_url\x18\x13 \x01(\tR\x18gitCommitAuthorAvatarUrl\x120\n" +
	"\x14git_commit_timestamp\x18\x14 \x01(\x03R\x12gitCommitTimestamp\x1aG\n" +
	"\x19EnvironmentVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x86\x01\n" +
	"\x0eDeploymentStep\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\x03R\tcreatedAt\"\xf3\x01\n" +
	"\bTopology\x12%\n" +
	"\x0ecpu_millicores\x18\x01 \x01(\x05R\rcpuMillicores\x12\x1b\n" +
	"\tmemory_mb\x18\x02 \x01(\x05R\bmemoryMb\x121\n" +
	"\aregions\x18\x03 \x03(\v2\x17.ctrl.v1.RegionalConfigR\aregions\x120\n" +
	"\x14idle_timeout_seconds\x18\x04 \x01(\x05R\x12idleTimeoutSeconds\x12*\n" +
	"\x11health_check_path\x18\x05 \x01(\tR\x0fhealthCheckPath\x12\x12\n" +
	"\x04port\x18\x06 \x01(\x05R\x04port\"r\n" +
	"\x0eRegionalConfig\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12#\n" +
	"\rmin_instances\x18\x02 \x01(\x05R\fminInstances\x12#\n" +
	"\rmax_instances\x18\x03 \x01(\x05R\fmaxInstances\"u\n" +
	"\x0fRollbackRequest\x120\n" +
	"\x14source_deployment_id\x18\x01 \x01(\tR\x12sourceDeploymentId\x120\n" +
	"\x14target_deployment_id\x18\x02 \x01(\tR\x12targetDeploymentId\"\x12\n" +
	"\x10RollbackResponse\"B\n" +
	"\x0ePromoteRequest\x120\n" +
	"\x14target_deployment_id\x18\x01 \x01(\tR\x12targetDeploymentId\"\x11\n" +
	"\x0fPromoteResponse*\xef\x01\n" +
	"\x10DeploymentStatus\x12!\n" +
	"\x1dDEPLOYMENT_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19DEPLOYMENT_STATUS_PENDING\x10\x01\x12\x1e\n" +
	"\x1aDEPLOYMENT_STATUS_BUILDING\x10\x02\x12\x1f\n" +
	"\x1bDEPLOYMENT_STATUS_DEPLOYING\x10\x03\x12\x1d\n" +
	"\x19DEPLOYMENT_STATUS_NETWORK\x10\x04\x12\x1b\n" +
	"\x17DEPLOYMENT_STATUS_READY\x10\x05\x12\x1c\n" +
	"\x18DEPLOYMENT_STATUS_FAILED\x10\x06*Z\n" +
	"\n" +
	"SourceType\x12\x1b\n" +
	"\x17SOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fSOURCE_TYPE_GIT\x10\x01\x12\x1a\n" +
	"\x16SOURCE_TYPE_CLI_UPLOAD\x10\x022\xc3\x02\n" +
	"\x11DeploymentService\x12Y\n" +
	"\x10CreateDeployment\x12 .ctrl.v1.CreateDeploymentRequest\x1a!.ctrl.v1.CreateDeploymentResponse\"\x00\x12P\n" +
	"\rGetDeployment\x12\x1d.ctrl.v1.GetDeploymentRequest\x1a\x1e.ctrl.v1.GetDeploymentResponse\"\x00\x12A\n" +
	"\bRollback\x12\x18.ctrl.v1.RollbackRequest\x1a\x19.ctrl.v1.RollbackResponse\"\x00\x12>\n" +
	"\aPromote\x12\x17.ctrl.v1.PromoteRequest\x1a\x18.ctrl.v1.PromoteResponse\"\x00B\x91\x01\n" +
	"\vcom.ctrl.v1B\x0fDeploymentProtoP\x01Z4github.com/unkeyed/unkey/go/gen/proto/ctrl/v1;ctrlv1\xa2\x02\x03CXX\xaa\x02\aCtrl.V1\xca\x02\aCtrl\\V1\xe2\x02\x13Ctrl\\V1\\GPBMetadata\xea\x02\bCtrl::V1b\x06proto3"

var (
	file_ctrl_v1_deployment_proto_rawDescOnce sync.Once
	file_ctrl_v1_deployment_proto_rawDescData []byte
)

func file_ctrl_v1_deployment_proto_rawDescGZIP() []byte {
	file_ctrl_v1_deployment_proto_rawDescOnce.Do(func() {
		file_ctrl_v1_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ctrl_v1_deployment_proto_rawDesc), len(file_ctrl_v1_deployment_proto_rawDesc)))
	})
	return file_ctrl_v1_deployment_proto_rawDescData
}

var file_ctrl_v1_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ctrl_v1_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_ctrl_v1_deployment_proto_goTypes = []any{
	(DeploymentStatus)(0),            // 0: ctrl.v1.DeploymentStatus
	(SourceType)(0),                  // 1: ctrl.v1.SourceType
	(*CreateDeploymentRequest)(nil),  // 2: ctrl.v1.CreateDeploymentRequest
	(*CreateDeploymentResponse)(nil), // 3: ctrl.v1.CreateDeploymentResponse
	(*GetDeploymentRequest)(nil),     // 4: ctrl.v1.GetDeploymentRequest
	(*GetDeploymentResponse)(nil),    // 5: ctrl.v1.GetDeploymentResponse
	(*Deployment)(nil),               // 6: ctrl.v1.Deployment
	(*DeploymentStep)(nil),           // 7: ctrl.v1.DeploymentStep
	(*Topology)(nil),                 // 8: ctrl.v1.Topology
	(*RegionalConfig)(nil),           // 9: ctrl.v1.RegionalConfig
	(*RollbackRequest)(nil),          // 10: ctrl.v1.RollbackRequest
	(*RollbackResponse)(nil),         // 11: ctrl.v1.RollbackResponse
	(*PromoteRequest)(nil),           // 12: ctrl.v1.PromoteRequest
	(*PromoteResponse)(nil),          // 13: ctrl.v1.PromoteResponse
	nil,                              // 14: ctrl.v1.Deployment.EnvironmentVariablesEntry
}
var file_ctrl_v1_deployment_proto_depIdxs = []int32{
	1,  // 0: ctrl.v1.CreateDeploymentRequest.source_type:type_name -> ctrl.v1.SourceType
	0,  // 1: ctrl.v1.CreateDeploymentResponse.status:type_name -> ctrl.v1.DeploymentStatus
	6,  // 2: ctrl.v1.GetDeploymentResponse.deployment:type_name -> ctrl.v1.Deployment
	0,  // 3: ctrl.v1.Deployment.status:type_name -> ctrl.v1.DeploymentStatus
	14, // 4: ctrl.v1.Deployment.environment_variables:type_name -> ctrl.v1.Deployment.EnvironmentVariablesEntry
	8,  // 5: ctrl.v1.Deployment.topology:type_name -> ctrl.v1.Topology
	7,  // 6: ctrl.v1.Deployment.steps:type_name -> ctrl.v1.DeploymentStep
	9,  // 7: ctrl.v1.Topology.regions:type_name -> ctrl.v1.RegionalConfig
	2,  // 8: ctrl.v1.DeploymentService.CreateDeployment:input_type -> ctrl.v1.CreateDeploymentRequest
	4,  // 9: ctrl.v1.DeploymentService.GetDeployment:input_type -> ctrl.v1.GetDeploymentRequest
	10, // 10: ctrl.v1.DeploymentService.Rollback:input_type -> ctrl.v1.RollbackRequest
	12, // 11: ctrl.v1.DeploymentService.Promote:input_type -> ctrl.v1.PromoteRequest
	3,  // 12: ctrl.v1.DeploymentService.CreateDeployment:output_type -> ctrl.v1.CreateDeploymentResponse
	5,  // 13: ctrl.v1.DeploymentService.GetDeployment:output_type -> ctrl.v1.GetDeploymentResponse
	11, // 14: ctrl.v1.DeploymentService.Rollback:output_type -> ctrl.v1.RollbackResponse
	13, // 15: ctrl.v1.DeploymentService.Promote:output_type -> ctrl.v1.PromoteResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ctrl_v1_deployment_proto_init() }
func file_ctrl_v1_deployment_proto_init() {
	if File_ctrl_v1_deployment_proto != nil {
		return
	}
	file_ctrl_v1_deployment_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ctrl_v1_deployment_proto_rawDesc), len(file_ctrl_v1_deployment_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ctrl_v1_deployment_proto_goTypes,
		DependencyIndexes: file_ctrl_v1_deployment_proto_depIdxs,
		EnumInfos:         file_ctrl_v1_deployment_proto_enumTypes,
		MessageInfos:      file_ctrl_v1_deployment_proto_msgTypes,
	}.Build()
	File_ctrl_v1_deployment_proto = out.File
	file_ctrl_v1_deployment_proto_goTypes = nil
	file_ctrl_v1_deployment_proto_depIdxs = nil
}
