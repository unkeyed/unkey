// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ctrl/v1/version.proto

package ctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VersionServiceName is the fully-qualified name of the VersionService service.
	VersionServiceName = "ctrl.v1.VersionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VersionServiceCreateVersionProcedure is the fully-qualified name of the VersionService's
	// CreateVersion RPC.
	VersionServiceCreateVersionProcedure = "/ctrl.v1.VersionService/CreateVersion"
	// VersionServiceGetVersionProcedure is the fully-qualified name of the VersionService's GetVersion
	// RPC.
	VersionServiceGetVersionProcedure = "/ctrl.v1.VersionService/GetVersion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	versionServiceServiceDescriptor             = v1.File_proto_ctrl_v1_version_proto.Services().ByName("VersionService")
	versionServiceCreateVersionMethodDescriptor = versionServiceServiceDescriptor.Methods().ByName("CreateVersion")
	versionServiceGetVersionMethodDescriptor    = versionServiceServiceDescriptor.Methods().ByName("GetVersion")
)

// VersionServiceClient is a client for the ctrl.v1.VersionService service.
type VersionServiceClient interface {
	// Create a new version
	CreateVersion(context.Context, *connect.Request[v1.CreateVersionRequest]) (*connect.Response[v1.CreateVersionResponse], error)
	// Get version details
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
}

// NewVersionServiceClient constructs a client for the ctrl.v1.VersionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVersionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VersionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &versionServiceClient{
		createVersion: connect.NewClient[v1.CreateVersionRequest, v1.CreateVersionResponse](
			httpClient,
			baseURL+VersionServiceCreateVersionProcedure,
			connect.WithSchema(versionServiceCreateVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVersion: connect.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+VersionServiceGetVersionProcedure,
			connect.WithSchema(versionServiceGetVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// versionServiceClient implements VersionServiceClient.
type versionServiceClient struct {
	createVersion *connect.Client[v1.CreateVersionRequest, v1.CreateVersionResponse]
	getVersion    *connect.Client[v1.GetVersionRequest, v1.GetVersionResponse]
}

// CreateVersion calls ctrl.v1.VersionService.CreateVersion.
func (c *versionServiceClient) CreateVersion(ctx context.Context, req *connect.Request[v1.CreateVersionRequest]) (*connect.Response[v1.CreateVersionResponse], error) {
	return c.createVersion.CallUnary(ctx, req)
}

// GetVersion calls ctrl.v1.VersionService.GetVersion.
func (c *versionServiceClient) GetVersion(ctx context.Context, req *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// VersionServiceHandler is an implementation of the ctrl.v1.VersionService service.
type VersionServiceHandler interface {
	// Create a new version
	CreateVersion(context.Context, *connect.Request[v1.CreateVersionRequest]) (*connect.Response[v1.CreateVersionResponse], error)
	// Get version details
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
}

// NewVersionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVersionServiceHandler(svc VersionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	versionServiceCreateVersionHandler := connect.NewUnaryHandler(
		VersionServiceCreateVersionProcedure,
		svc.CreateVersion,
		connect.WithSchema(versionServiceCreateVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	versionServiceGetVersionHandler := connect.NewUnaryHandler(
		VersionServiceGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(versionServiceGetVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrl.v1.VersionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VersionServiceCreateVersionProcedure:
			versionServiceCreateVersionHandler.ServeHTTP(w, r)
		case VersionServiceGetVersionProcedure:
			versionServiceGetVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVersionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVersionServiceHandler struct{}

func (UnimplementedVersionServiceHandler) CreateVersion(context.Context, *connect.Request[v1.CreateVersionRequest]) (*connect.Response[v1.CreateVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.VersionService.CreateVersion is not implemented"))
}

func (UnimplementedVersionServiceHandler) GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.VersionService.GetVersion is not implemented"))
}
