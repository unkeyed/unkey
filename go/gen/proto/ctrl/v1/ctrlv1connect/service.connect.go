// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ctrl/v1/service.proto

package ctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CtrlServiceName is the fully-qualified name of the CtrlService service.
	CtrlServiceName = "ctrl.v1.CtrlService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CtrlServiceLivenessProcedure is the fully-qualified name of the CtrlService's Liveness RPC.
	CtrlServiceLivenessProcedure = "/ctrl.v1.CtrlService/Liveness"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ctrlServiceServiceDescriptor        = v1.File_proto_ctrl_v1_service_proto.Services().ByName("CtrlService")
	ctrlServiceLivenessMethodDescriptor = ctrlServiceServiceDescriptor.Methods().ByName("Liveness")
)

// CtrlServiceClient is a client for the ctrl.v1.CtrlService service.
type CtrlServiceClient interface {
	Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error)
}

// NewCtrlServiceClient constructs a client for the ctrl.v1.CtrlService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCtrlServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CtrlServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ctrlServiceClient{
		liveness: connect.NewClient[v1.LivenessRequest, v1.LivenessResponse](
			httpClient,
			baseURL+CtrlServiceLivenessProcedure,
			connect.WithSchema(ctrlServiceLivenessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ctrlServiceClient implements CtrlServiceClient.
type ctrlServiceClient struct {
	liveness *connect.Client[v1.LivenessRequest, v1.LivenessResponse]
}

// Liveness calls ctrl.v1.CtrlService.Liveness.
func (c *ctrlServiceClient) Liveness(ctx context.Context, req *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error) {
	return c.liveness.CallUnary(ctx, req)
}

// CtrlServiceHandler is an implementation of the ctrl.v1.CtrlService service.
type CtrlServiceHandler interface {
	Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error)
}

// NewCtrlServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCtrlServiceHandler(svc CtrlServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ctrlServiceLivenessHandler := connect.NewUnaryHandler(
		CtrlServiceLivenessProcedure,
		svc.Liveness,
		connect.WithSchema(ctrlServiceLivenessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrl.v1.CtrlService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CtrlServiceLivenessProcedure:
			ctrlServiceLivenessHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCtrlServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCtrlServiceHandler struct{}

func (UnimplementedCtrlServiceHandler) Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.CtrlService.Liveness is not implemented"))
}
