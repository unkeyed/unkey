// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ctrl/v1/routing.proto

package ctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoutingServiceName is the fully-qualified name of the RoutingService service.
	RoutingServiceName = "ctrl.v1.RoutingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoutingServiceSetRouteProcedure is the fully-qualified name of the RoutingService's SetRoute RPC.
	RoutingServiceSetRouteProcedure = "/ctrl.v1.RoutingService/SetRoute"
	// RoutingServiceGetRouteProcedure is the fully-qualified name of the RoutingService's GetRoute RPC.
	RoutingServiceGetRouteProcedure = "/ctrl.v1.RoutingService/GetRoute"
	// RoutingServiceListRoutesProcedure is the fully-qualified name of the RoutingService's ListRoutes
	// RPC.
	RoutingServiceListRoutesProcedure = "/ctrl.v1.RoutingService/ListRoutes"
	// RoutingServiceRollbackProcedure is the fully-qualified name of the RoutingService's Rollback RPC.
	RoutingServiceRollbackProcedure = "/ctrl.v1.RoutingService/Rollback"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	routingServiceServiceDescriptor          = v1.File_proto_ctrl_v1_routing_proto.Services().ByName("RoutingService")
	routingServiceSetRouteMethodDescriptor   = routingServiceServiceDescriptor.Methods().ByName("SetRoute")
	routingServiceGetRouteMethodDescriptor   = routingServiceServiceDescriptor.Methods().ByName("GetRoute")
	routingServiceListRoutesMethodDescriptor = routingServiceServiceDescriptor.Methods().ByName("ListRoutes")
	routingServiceRollbackMethodDescriptor   = routingServiceServiceDescriptor.Methods().ByName("Rollback")
)

// RoutingServiceClient is a client for the ctrl.v1.RoutingService service.
type RoutingServiceClient interface {
	// Update routing for a hostname
	SetRoute(context.Context, *connect.Request[v1.SetRouteRequest]) (*connect.Response[v1.SetRouteResponse], error)
	// Get current routing for a hostname
	GetRoute(context.Context, *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error)
	// List all routes for a workspace/project
	ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error)
	// Convenience method for rollback (just calls SetRoute internally)
	Rollback(context.Context, *connect.Request[v1.RollbackRequest]) (*connect.Response[v1.RollbackResponse], error)
}

// NewRoutingServiceClient constructs a client for the ctrl.v1.RoutingService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoutingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoutingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &routingServiceClient{
		setRoute: connect.NewClient[v1.SetRouteRequest, v1.SetRouteResponse](
			httpClient,
			baseURL+RoutingServiceSetRouteProcedure,
			connect.WithSchema(routingServiceSetRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoute: connect.NewClient[v1.GetRouteRequest, v1.GetRouteResponse](
			httpClient,
			baseURL+RoutingServiceGetRouteProcedure,
			connect.WithSchema(routingServiceGetRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRoutes: connect.NewClient[v1.ListRoutesRequest, v1.ListRoutesResponse](
			httpClient,
			baseURL+RoutingServiceListRoutesProcedure,
			connect.WithSchema(routingServiceListRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rollback: connect.NewClient[v1.RollbackRequest, v1.RollbackResponse](
			httpClient,
			baseURL+RoutingServiceRollbackProcedure,
			connect.WithSchema(routingServiceRollbackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// routingServiceClient implements RoutingServiceClient.
type routingServiceClient struct {
	setRoute   *connect.Client[v1.SetRouteRequest, v1.SetRouteResponse]
	getRoute   *connect.Client[v1.GetRouteRequest, v1.GetRouteResponse]
	listRoutes *connect.Client[v1.ListRoutesRequest, v1.ListRoutesResponse]
	rollback   *connect.Client[v1.RollbackRequest, v1.RollbackResponse]
}

// SetRoute calls ctrl.v1.RoutingService.SetRoute.
func (c *routingServiceClient) SetRoute(ctx context.Context, req *connect.Request[v1.SetRouteRequest]) (*connect.Response[v1.SetRouteResponse], error) {
	return c.setRoute.CallUnary(ctx, req)
}

// GetRoute calls ctrl.v1.RoutingService.GetRoute.
func (c *routingServiceClient) GetRoute(ctx context.Context, req *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error) {
	return c.getRoute.CallUnary(ctx, req)
}

// ListRoutes calls ctrl.v1.RoutingService.ListRoutes.
func (c *routingServiceClient) ListRoutes(ctx context.Context, req *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error) {
	return c.listRoutes.CallUnary(ctx, req)
}

// Rollback calls ctrl.v1.RoutingService.Rollback.
func (c *routingServiceClient) Rollback(ctx context.Context, req *connect.Request[v1.RollbackRequest]) (*connect.Response[v1.RollbackResponse], error) {
	return c.rollback.CallUnary(ctx, req)
}

// RoutingServiceHandler is an implementation of the ctrl.v1.RoutingService service.
type RoutingServiceHandler interface {
	// Update routing for a hostname
	SetRoute(context.Context, *connect.Request[v1.SetRouteRequest]) (*connect.Response[v1.SetRouteResponse], error)
	// Get current routing for a hostname
	GetRoute(context.Context, *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error)
	// List all routes for a workspace/project
	ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error)
	// Convenience method for rollback (just calls SetRoute internally)
	Rollback(context.Context, *connect.Request[v1.RollbackRequest]) (*connect.Response[v1.RollbackResponse], error)
}

// NewRoutingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoutingServiceHandler(svc RoutingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routingServiceSetRouteHandler := connect.NewUnaryHandler(
		RoutingServiceSetRouteProcedure,
		svc.SetRoute,
		connect.WithSchema(routingServiceSetRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceGetRouteHandler := connect.NewUnaryHandler(
		RoutingServiceGetRouteProcedure,
		svc.GetRoute,
		connect.WithSchema(routingServiceGetRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceListRoutesHandler := connect.NewUnaryHandler(
		RoutingServiceListRoutesProcedure,
		svc.ListRoutes,
		connect.WithSchema(routingServiceListRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceRollbackHandler := connect.NewUnaryHandler(
		RoutingServiceRollbackProcedure,
		svc.Rollback,
		connect.WithSchema(routingServiceRollbackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrl.v1.RoutingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoutingServiceSetRouteProcedure:
			routingServiceSetRouteHandler.ServeHTTP(w, r)
		case RoutingServiceGetRouteProcedure:
			routingServiceGetRouteHandler.ServeHTTP(w, r)
		case RoutingServiceListRoutesProcedure:
			routingServiceListRoutesHandler.ServeHTTP(w, r)
		case RoutingServiceRollbackProcedure:
			routingServiceRollbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoutingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoutingServiceHandler struct{}

func (UnimplementedRoutingServiceHandler) SetRoute(context.Context, *connect.Request[v1.SetRouteRequest]) (*connect.Response[v1.SetRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.RoutingService.SetRoute is not implemented"))
}

func (UnimplementedRoutingServiceHandler) GetRoute(context.Context, *connect.Request[v1.GetRouteRequest]) (*connect.Response[v1.GetRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.RoutingService.GetRoute is not implemented"))
}

func (UnimplementedRoutingServiceHandler) ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.RoutingService.ListRoutes is not implemented"))
}

func (UnimplementedRoutingServiceHandler) Rollback(context.Context, *connect.Request[v1.RollbackRequest]) (*connect.Response[v1.RollbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.RoutingService.Rollback is not implemented"))
}
