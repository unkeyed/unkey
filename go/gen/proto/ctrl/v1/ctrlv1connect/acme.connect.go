// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ctrl/v1/acme.proto

package ctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AcmeServiceName is the fully-qualified name of the AcmeService service.
	AcmeServiceName = "ctrl.v1.AcmeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AcmeServiceHandleCertificateVerificationProcedure is the fully-qualified name of the
	// AcmeService's HandleCertificateVerification RPC.
	AcmeServiceHandleCertificateVerificationProcedure = "/ctrl.v1.AcmeService/HandleCertificateVerification"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	acmeServiceServiceDescriptor                             = v1.File_proto_ctrl_v1_acme_proto.Services().ByName("AcmeService")
	acmeServiceHandleCertificateVerificationMethodDescriptor = acmeServiceServiceDescriptor.Methods().ByName("HandleCertificateVerification")
)

// AcmeServiceClient is a client for the ctrl.v1.AcmeService service.
type AcmeServiceClient interface {
	HandleCertificateVerification(context.Context, *connect.Request[v1.HandleCertificateVerificationRequest]) (*connect.Response[v1.HandleCertificateVerificationResponse], error)
}

// NewAcmeServiceClient constructs a client for the ctrl.v1.AcmeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAcmeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AcmeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &acmeServiceClient{
		handleCertificateVerification: connect.NewClient[v1.HandleCertificateVerificationRequest, v1.HandleCertificateVerificationResponse](
			httpClient,
			baseURL+AcmeServiceHandleCertificateVerificationProcedure,
			connect.WithSchema(acmeServiceHandleCertificateVerificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// acmeServiceClient implements AcmeServiceClient.
type acmeServiceClient struct {
	handleCertificateVerification *connect.Client[v1.HandleCertificateVerificationRequest, v1.HandleCertificateVerificationResponse]
}

// HandleCertificateVerification calls ctrl.v1.AcmeService.HandleCertificateVerification.
func (c *acmeServiceClient) HandleCertificateVerification(ctx context.Context, req *connect.Request[v1.HandleCertificateVerificationRequest]) (*connect.Response[v1.HandleCertificateVerificationResponse], error) {
	return c.handleCertificateVerification.CallUnary(ctx, req)
}

// AcmeServiceHandler is an implementation of the ctrl.v1.AcmeService service.
type AcmeServiceHandler interface {
	HandleCertificateVerification(context.Context, *connect.Request[v1.HandleCertificateVerificationRequest]) (*connect.Response[v1.HandleCertificateVerificationResponse], error)
}

// NewAcmeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAcmeServiceHandler(svc AcmeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	acmeServiceHandleCertificateVerificationHandler := connect.NewUnaryHandler(
		AcmeServiceHandleCertificateVerificationProcedure,
		svc.HandleCertificateVerification,
		connect.WithSchema(acmeServiceHandleCertificateVerificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrl.v1.AcmeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AcmeServiceHandleCertificateVerificationProcedure:
			acmeServiceHandleCertificateVerificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAcmeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAcmeServiceHandler struct{}

func (UnimplementedAcmeServiceHandler) HandleCertificateVerification(context.Context, *connect.Request[v1.HandleCertificateVerificationRequest]) (*connect.Response[v1.HandleCertificateVerificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.AcmeService.HandleCertificateVerification is not implemented"))
}
