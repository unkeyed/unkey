// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ctrl/v1/build.proto

package ctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BuildServiceName is the fully-qualified name of the BuildService service.
	BuildServiceName = "ctrl.v1.BuildService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BuildServiceCreateBuildProcedure is the fully-qualified name of the BuildService's CreateBuild
	// RPC.
	BuildServiceCreateBuildProcedure = "/ctrl.v1.BuildService/CreateBuild"
	// BuildServiceGetBuildProcedure is the fully-qualified name of the BuildService's GetBuild RPC.
	BuildServiceGetBuildProcedure = "/ctrl.v1.BuildService/GetBuild"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	buildServiceServiceDescriptor           = v1.File_proto_ctrl_v1_build_proto.Services().ByName("BuildService")
	buildServiceCreateBuildMethodDescriptor = buildServiceServiceDescriptor.Methods().ByName("CreateBuild")
	buildServiceGetBuildMethodDescriptor    = buildServiceServiceDescriptor.Methods().ByName("GetBuild")
)

// BuildServiceClient is a client for the ctrl.v1.BuildService service.
type BuildServiceClient interface {
	// Create a new build
	CreateBuild(context.Context, *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error)
	// Get build details
	GetBuild(context.Context, *connect.Request[v1.GetBuildRequest]) (*connect.Response[v1.GetBuildResponse], error)
}

// NewBuildServiceClient constructs a client for the ctrl.v1.BuildService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BuildServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &buildServiceClient{
		createBuild: connect.NewClient[v1.CreateBuildRequest, v1.CreateBuildResponse](
			httpClient,
			baseURL+BuildServiceCreateBuildProcedure,
			connect.WithSchema(buildServiceCreateBuildMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBuild: connect.NewClient[v1.GetBuildRequest, v1.GetBuildResponse](
			httpClient,
			baseURL+BuildServiceGetBuildProcedure,
			connect.WithSchema(buildServiceGetBuildMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// buildServiceClient implements BuildServiceClient.
type buildServiceClient struct {
	createBuild *connect.Client[v1.CreateBuildRequest, v1.CreateBuildResponse]
	getBuild    *connect.Client[v1.GetBuildRequest, v1.GetBuildResponse]
}

// CreateBuild calls ctrl.v1.BuildService.CreateBuild.
func (c *buildServiceClient) CreateBuild(ctx context.Context, req *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error) {
	return c.createBuild.CallUnary(ctx, req)
}

// GetBuild calls ctrl.v1.BuildService.GetBuild.
func (c *buildServiceClient) GetBuild(ctx context.Context, req *connect.Request[v1.GetBuildRequest]) (*connect.Response[v1.GetBuildResponse], error) {
	return c.getBuild.CallUnary(ctx, req)
}

// BuildServiceHandler is an implementation of the ctrl.v1.BuildService service.
type BuildServiceHandler interface {
	// Create a new build
	CreateBuild(context.Context, *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error)
	// Get build details
	GetBuild(context.Context, *connect.Request[v1.GetBuildRequest]) (*connect.Response[v1.GetBuildResponse], error)
}

// NewBuildServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildServiceHandler(svc BuildServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	buildServiceCreateBuildHandler := connect.NewUnaryHandler(
		BuildServiceCreateBuildProcedure,
		svc.CreateBuild,
		connect.WithSchema(buildServiceCreateBuildMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	buildServiceGetBuildHandler := connect.NewUnaryHandler(
		BuildServiceGetBuildProcedure,
		svc.GetBuild,
		connect.WithSchema(buildServiceGetBuildMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrl.v1.BuildService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BuildServiceCreateBuildProcedure:
			buildServiceCreateBuildHandler.ServeHTTP(w, r)
		case BuildServiceGetBuildProcedure:
			buildServiceGetBuildHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBuildServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildServiceHandler struct{}

func (UnimplementedBuildServiceHandler) CreateBuild(context.Context, *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.BuildService.CreateBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) GetBuild(context.Context, *connect.Request[v1.GetBuildRequest]) (*connect.Response[v1.GetBuildResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.BuildService.GetBuild is not implemented"))
}
