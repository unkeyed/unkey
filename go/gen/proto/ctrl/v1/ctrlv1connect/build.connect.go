// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ctrl/v1/build.proto

package ctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BuildServiceName is the fully-qualified name of the BuildService service.
	BuildServiceName = "ctrl.v1.BuildService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BuildServiceCreateBuildProcedure is the fully-qualified name of the BuildService's CreateBuild
	// RPC.
	BuildServiceCreateBuildProcedure = "/ctrl.v1.BuildService/CreateBuild"
	// BuildServiceCancelBuildProcedure is the fully-qualified name of the BuildService's CancelBuild
	// RPC.
	BuildServiceCancelBuildProcedure = "/ctrl.v1.BuildService/CancelBuild"
	// BuildServiceGetBuildStatusProcedure is the fully-qualified name of the BuildService's
	// GetBuildStatus RPC.
	BuildServiceGetBuildStatusProcedure = "/ctrl.v1.BuildService/GetBuildStatus"
	// BuildServiceGenerateUploadURLProcedure is the fully-qualified name of the BuildService's
	// GenerateUploadURL RPC.
	BuildServiceGenerateUploadURLProcedure = "/ctrl.v1.BuildService/GenerateUploadURL"
)

// BuildServiceClient is a client for the ctrl.v1.BuildService service.
type BuildServiceClient interface {
	CreateBuild(context.Context, *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error)
	CancelBuild(context.Context, *connect.Request[v1.CancelBuildRequest]) (*connect.Response[v1.CancelBuildResponse], error)
	GetBuildStatus(context.Context, *connect.Request[v1.GetBuildStatusRequest]) (*connect.Response[v1.GetBuildStatusResponse], error)
	GenerateUploadURL(context.Context, *connect.Request[v1.GenerateUploadURLRequest]) (*connect.Response[v1.GenerateUploadURLResponse], error)
}

// NewBuildServiceClient constructs a client for the ctrl.v1.BuildService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BuildServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	buildServiceMethods := v1.File_ctrl_v1_build_proto.Services().ByName("BuildService").Methods()
	return &buildServiceClient{
		createBuild: connect.NewClient[v1.CreateBuildRequest, v1.CreateBuildResponse](
			httpClient,
			baseURL+BuildServiceCreateBuildProcedure,
			connect.WithSchema(buildServiceMethods.ByName("CreateBuild")),
			connect.WithClientOptions(opts...),
		),
		cancelBuild: connect.NewClient[v1.CancelBuildRequest, v1.CancelBuildResponse](
			httpClient,
			baseURL+BuildServiceCancelBuildProcedure,
			connect.WithSchema(buildServiceMethods.ByName("CancelBuild")),
			connect.WithClientOptions(opts...),
		),
		getBuildStatus: connect.NewClient[v1.GetBuildStatusRequest, v1.GetBuildStatusResponse](
			httpClient,
			baseURL+BuildServiceGetBuildStatusProcedure,
			connect.WithSchema(buildServiceMethods.ByName("GetBuildStatus")),
			connect.WithClientOptions(opts...),
		),
		generateUploadURL: connect.NewClient[v1.GenerateUploadURLRequest, v1.GenerateUploadURLResponse](
			httpClient,
			baseURL+BuildServiceGenerateUploadURLProcedure,
			connect.WithSchema(buildServiceMethods.ByName("GenerateUploadURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// buildServiceClient implements BuildServiceClient.
type buildServiceClient struct {
	createBuild       *connect.Client[v1.CreateBuildRequest, v1.CreateBuildResponse]
	cancelBuild       *connect.Client[v1.CancelBuildRequest, v1.CancelBuildResponse]
	getBuildStatus    *connect.Client[v1.GetBuildStatusRequest, v1.GetBuildStatusResponse]
	generateUploadURL *connect.Client[v1.GenerateUploadURLRequest, v1.GenerateUploadURLResponse]
}

// CreateBuild calls ctrl.v1.BuildService.CreateBuild.
func (c *buildServiceClient) CreateBuild(ctx context.Context, req *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error) {
	return c.createBuild.CallUnary(ctx, req)
}

// CancelBuild calls ctrl.v1.BuildService.CancelBuild.
func (c *buildServiceClient) CancelBuild(ctx context.Context, req *connect.Request[v1.CancelBuildRequest]) (*connect.Response[v1.CancelBuildResponse], error) {
	return c.cancelBuild.CallUnary(ctx, req)
}

// GetBuildStatus calls ctrl.v1.BuildService.GetBuildStatus.
func (c *buildServiceClient) GetBuildStatus(ctx context.Context, req *connect.Request[v1.GetBuildStatusRequest]) (*connect.Response[v1.GetBuildStatusResponse], error) {
	return c.getBuildStatus.CallUnary(ctx, req)
}

// GenerateUploadURL calls ctrl.v1.BuildService.GenerateUploadURL.
func (c *buildServiceClient) GenerateUploadURL(ctx context.Context, req *connect.Request[v1.GenerateUploadURLRequest]) (*connect.Response[v1.GenerateUploadURLResponse], error) {
	return c.generateUploadURL.CallUnary(ctx, req)
}

// BuildServiceHandler is an implementation of the ctrl.v1.BuildService service.
type BuildServiceHandler interface {
	CreateBuild(context.Context, *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error)
	CancelBuild(context.Context, *connect.Request[v1.CancelBuildRequest]) (*connect.Response[v1.CancelBuildResponse], error)
	GetBuildStatus(context.Context, *connect.Request[v1.GetBuildStatusRequest]) (*connect.Response[v1.GetBuildStatusResponse], error)
	GenerateUploadURL(context.Context, *connect.Request[v1.GenerateUploadURLRequest]) (*connect.Response[v1.GenerateUploadURLResponse], error)
}

// NewBuildServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildServiceHandler(svc BuildServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	buildServiceMethods := v1.File_ctrl_v1_build_proto.Services().ByName("BuildService").Methods()
	buildServiceCreateBuildHandler := connect.NewUnaryHandler(
		BuildServiceCreateBuildProcedure,
		svc.CreateBuild,
		connect.WithSchema(buildServiceMethods.ByName("CreateBuild")),
		connect.WithHandlerOptions(opts...),
	)
	buildServiceCancelBuildHandler := connect.NewUnaryHandler(
		BuildServiceCancelBuildProcedure,
		svc.CancelBuild,
		connect.WithSchema(buildServiceMethods.ByName("CancelBuild")),
		connect.WithHandlerOptions(opts...),
	)
	buildServiceGetBuildStatusHandler := connect.NewUnaryHandler(
		BuildServiceGetBuildStatusProcedure,
		svc.GetBuildStatus,
		connect.WithSchema(buildServiceMethods.ByName("GetBuildStatus")),
		connect.WithHandlerOptions(opts...),
	)
	buildServiceGenerateUploadURLHandler := connect.NewUnaryHandler(
		BuildServiceGenerateUploadURLProcedure,
		svc.GenerateUploadURL,
		connect.WithSchema(buildServiceMethods.ByName("GenerateUploadURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ctrl.v1.BuildService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BuildServiceCreateBuildProcedure:
			buildServiceCreateBuildHandler.ServeHTTP(w, r)
		case BuildServiceCancelBuildProcedure:
			buildServiceCancelBuildHandler.ServeHTTP(w, r)
		case BuildServiceGetBuildStatusProcedure:
			buildServiceGetBuildStatusHandler.ServeHTTP(w, r)
		case BuildServiceGenerateUploadURLProcedure:
			buildServiceGenerateUploadURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBuildServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildServiceHandler struct{}

func (UnimplementedBuildServiceHandler) CreateBuild(context.Context, *connect.Request[v1.CreateBuildRequest]) (*connect.Response[v1.CreateBuildResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.BuildService.CreateBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) CancelBuild(context.Context, *connect.Request[v1.CancelBuildRequest]) (*connect.Response[v1.CancelBuildResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.BuildService.CancelBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) GetBuildStatus(context.Context, *connect.Request[v1.GetBuildStatusRequest]) (*connect.Response[v1.GetBuildStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.BuildService.GetBuildStatus is not implemented"))
}

func (UnimplementedBuildServiceHandler) GenerateUploadURL(context.Context, *connect.Request[v1.GenerateUploadURLRequest]) (*connect.Response[v1.GenerateUploadURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ctrl.v1.BuildService.GenerateUploadURL is not implemented"))
}
