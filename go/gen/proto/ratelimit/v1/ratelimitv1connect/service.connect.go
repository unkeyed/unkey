// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ratelimit/v1/service.proto

package ratelimitv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/ratelimit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RatelimitServiceName is the fully-qualified name of the RatelimitService service.
	RatelimitServiceName = "ratelimit.v1.RatelimitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RatelimitServiceReplayProcedure is the fully-qualified name of the RatelimitService's Replay RPC.
	RatelimitServiceReplayProcedure = "/ratelimit.v1.RatelimitService/Replay"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ratelimitServiceServiceDescriptor      = v1.File_proto_ratelimit_v1_service_proto.Services().ByName("RatelimitService")
	ratelimitServiceReplayMethodDescriptor = ratelimitServiceServiceDescriptor.Methods().ByName("Replay")
)

// RatelimitServiceClient is a client for the ratelimit.v1.RatelimitService service.
type RatelimitServiceClient interface {
	// Replay synchronizes rate limit state between nodes using consistent hashing.
	//
	// Key behaviors:
	// - Each identifier maps to exactly one origin server via consistent hashing
	// - Edge nodes replay their local rate limit decisions to the origin
	// - Origin maintains the source of truth for rate limit state
	// - Edge nodes must update their state based on origin responses
	//
	// Flow:
	// 1. Edge node receives rate limit request
	// 2. Edge makes local decision (may be defensive)
	// 3. Edge replays decision to origin
	// 4. Origin processes and returns authoritative state
	// 5. Edge updates local state and returns result to client
	//
	// This approach ensures eventual consistency while allowing for
	// fast local decisions at the edge.
	Replay(context.Context, *connect.Request[v1.ReplayRequest]) (*connect.Response[v1.ReplayResponse], error)
}

// NewRatelimitServiceClient constructs a client for the ratelimit.v1.RatelimitService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRatelimitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RatelimitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ratelimitServiceClient{
		replay: connect.NewClient[v1.ReplayRequest, v1.ReplayResponse](
			httpClient,
			baseURL+RatelimitServiceReplayProcedure,
			connect.WithSchema(ratelimitServiceReplayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ratelimitServiceClient implements RatelimitServiceClient.
type ratelimitServiceClient struct {
	replay *connect.Client[v1.ReplayRequest, v1.ReplayResponse]
}

// Replay calls ratelimit.v1.RatelimitService.Replay.
func (c *ratelimitServiceClient) Replay(ctx context.Context, req *connect.Request[v1.ReplayRequest]) (*connect.Response[v1.ReplayResponse], error) {
	return c.replay.CallUnary(ctx, req)
}

// RatelimitServiceHandler is an implementation of the ratelimit.v1.RatelimitService service.
type RatelimitServiceHandler interface {
	// Replay synchronizes rate limit state between nodes using consistent hashing.
	//
	// Key behaviors:
	// - Each identifier maps to exactly one origin server via consistent hashing
	// - Edge nodes replay their local rate limit decisions to the origin
	// - Origin maintains the source of truth for rate limit state
	// - Edge nodes must update their state based on origin responses
	//
	// Flow:
	// 1. Edge node receives rate limit request
	// 2. Edge makes local decision (may be defensive)
	// 3. Edge replays decision to origin
	// 4. Origin processes and returns authoritative state
	// 5. Edge updates local state and returns result to client
	//
	// This approach ensures eventual consistency while allowing for
	// fast local decisions at the edge.
	Replay(context.Context, *connect.Request[v1.ReplayRequest]) (*connect.Response[v1.ReplayResponse], error)
}

// NewRatelimitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRatelimitServiceHandler(svc RatelimitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ratelimitServiceReplayHandler := connect.NewUnaryHandler(
		RatelimitServiceReplayProcedure,
		svc.Replay,
		connect.WithSchema(ratelimitServiceReplayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ratelimit.v1.RatelimitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RatelimitServiceReplayProcedure:
			ratelimitServiceReplayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRatelimitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRatelimitServiceHandler struct{}

func (UnimplementedRatelimitServiceHandler) Replay(context.Context, *connect.Request[v1.ReplayRequest]) (*connect.Response[v1.ReplayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.Replay is not implemented"))
}
