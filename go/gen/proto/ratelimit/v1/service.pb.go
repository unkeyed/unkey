// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/ratelimit/v1/service.proto

package ratelimitv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RatelimitRequest represents a request to check or consume rate limit tokens.
// This is typically the first point of contact when a client wants to verify
// if they are allowed to perform an action under the rate limit constraints.
type RatelimitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the rate limit subject.
	// This could be:
	// - A user ID
	// - An API key
	// - An IP address
	// - Any other unique identifier that needs rate limiting
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Maximum number of tokens allowed within the duration.
	// Once this limit is reached, subsequent requests will be denied
	// until there is more capacity.
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Duration of the rate limit window in milliseconds.
	// After this duration, a new window begins.
	// Common values might be:
	// - 1000 (1 second)
	// - 60000 (1 minute)
	// - 3600000 (1 hour)
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Number of tokens to consume in this request.
	// Higher values can be used for operations that should count more heavily
	// against the rate limit (e.g., batch operations).
	Cost          int64 `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RatelimitRequest) Reset() {
	*x = RatelimitRequest{}
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatelimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatelimitRequest) ProtoMessage() {}

func (x *RatelimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatelimitRequest.ProtoReflect.Descriptor instead.
func (*RatelimitRequest) Descriptor() ([]byte, []int) {
	return file_proto_ratelimit_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *RatelimitRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *RatelimitRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RatelimitRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RatelimitRequest) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

// RatelimitResponse contains the result of a rate limit check.
// This response includes all necessary information for clients to understand
// their current rate limit status and when they can retry if limited.
type RatelimitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total limit configured for this window.
	// This matches the limit specified in the request and is included
	// for convenience in client implementations.
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Number of tokens remaining in the current window.
	// Clients can use this to implement progressive backoff or
	// warn users when they're close to their limit.
	Remaining int64 `protobuf:"varint,2,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// Unix timestamp (in milliseconds) when the current window expires.
	// Clients can use this to:
	// - Display time until reset to users
	// - Implement automatic retry after window reset
	// - Schedule future requests optimally
	Reset_ int64 `protobuf:"varint,3,opt,name=reset,proto3" json:"reset,omitempty"`
	// Whether the rate limit check was successful.
	// true = request is allowed
	// false = request is denied due to rate limit exceeded
	Success bool `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	// Current token count in this window.
	// This represents how many tokens have been consumed so far,
	// useful for monitoring and debugging purposes.
	Current       int64 `protobuf:"varint,5,opt,name=current,proto3" json:"current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RatelimitResponse) Reset() {
	*x = RatelimitResponse{}
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatelimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatelimitResponse) ProtoMessage() {}

func (x *RatelimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatelimitResponse.ProtoReflect.Descriptor instead.
func (*RatelimitResponse) Descriptor() ([]byte, []int) {
	return file_proto_ratelimit_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *RatelimitResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RatelimitResponse) GetRemaining() int64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *RatelimitResponse) GetReset_() int64 {
	if x != nil {
		return x.Reset_
	}
	return 0
}

func (x *RatelimitResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RatelimitResponse) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

// Window represents a rate limiting time window with its state.
// The system uses a sliding window approach to provide smooth
// rate limiting behavior across window boundaries.
type Window struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Monotonically increasing sequence number for window ordering.
	// The sequence is calculated as follows:
	// sequence = time.Now().UnixMilli() / duration
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Duration of the window in milliseconds.
	// This matches the duration from the original request and defines
	// how long this window remains active.
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// Current token count in this window.
	// This is the actual count of tokens consumed during this window's
	// lifetime. It must never exceed the configured limit.
	Counter int64 `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
	// Start time of the window (Unix timestamp in milliseconds).
	// Used to:
	// - Calculate window expiration
	// - Determine if a window is still active
	// - Handle sliding window calculations between current and previous windows
	Start         int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Window) Reset() {
	*x = Window{}
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_proto_ratelimit_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *Window) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Window) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Window) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *Window) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

// ReplayRequest is used to synchronize rate limit state between nodes.
// This is a crucial part of maintaining consistency in a distributed
// rate limiting system.
type ReplayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Original rate limit request that triggered the replay.
	// Contains all the parameters needed to evaluate the rate limit
	// on the origin server.
	Request *RatelimitRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Time at which the request was received by the edge node.
	// This is used to calculate the sequence number and determine
	// the window in which the request falls.
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Indicates if the edge node denied the request.
	// When false: The origin must increment the counter regardless of its own evaluation
	// When true: The origin can evaluate the request fresh
	// This field is crucial for maintaining consistency when edge nodes
	// make defensive denials due to network issues or uncertainty.
	Denied        bool `protobuf:"varint,3,opt,name=denied,proto3" json:"denied,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplayRequest) Reset() {
	*x = ReplayRequest{}
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayRequest) ProtoMessage() {}

func (x *ReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayRequest.ProtoReflect.Descriptor instead.
func (*ReplayRequest) Descriptor() ([]byte, []int) {
	return file_proto_ratelimit_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReplayRequest) GetRequest() *RatelimitRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReplayRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ReplayRequest) GetDenied() bool {
	if x != nil {
		return x.Denied
	}
	return false
}

// ReplayResponse contains the synchronized rate limit state that
// should be used to update both the origin and edge nodes.
type ReplayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current active window state.
	// This represents the authoritative state of the current window
	// as determined by the origin server.
	Current *Window `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	// Previous window state for sliding window calculations.
	// Used to smooth out rate limiting across window boundaries and
	// prevent sharp cliffs in availability during window transitions.
	Previous *Window `protobuf:"bytes,2,opt,name=previous,proto3" json:"previous,omitempty"`
	// Rate limit response that should be used by the edge node.
	// This is the authoritative response that should be returned to
	// the client and used to update edge state.
	Response      *RatelimitResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplayResponse) Reset() {
	*x = ReplayResponse{}
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayResponse) ProtoMessage() {}

func (x *ReplayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ratelimit_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayResponse.ProtoReflect.Descriptor instead.
func (*ReplayResponse) Descriptor() ([]byte, []int) {
	return file_proto_ratelimit_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ReplayResponse) GetCurrent() *Window {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ReplayResponse) GetPrevious() *Window {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *ReplayResponse) GetResponse() *RatelimitResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_proto_ratelimit_v1_service_proto protoreflect.FileDescriptor

const file_proto_ratelimit_v1_service_proto_rawDesc = "" +
	"\n" +
	" proto/ratelimit/v1/service.proto\x12\fratelimit.v1\"x\n" +
	"\x10RatelimitRequest\x12\x1e\n" +
	"\n" +
	"identifier\x18\x01 \x01(\tR\n" +
	"identifier\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x03R\bduration\x12\x12\n" +
	"\x04cost\x18\x04 \x01(\x03R\x04cost\"\x91\x01\n" +
	"\x11RatelimitResponse\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x03R\x05limit\x12\x1c\n" +
	"\tremaining\x18\x02 \x01(\x03R\tremaining\x12\x14\n" +
	"\x05reset\x18\x03 \x01(\x03R\x05reset\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\acurrent\x18\x05 \x01(\x03R\acurrent\"p\n" +
	"\x06Window\x12\x1a\n" +
	"\bsequence\x18\x01 \x01(\x03R\bsequence\x12\x1a\n" +
	"\bduration\x18\x02 \x01(\x03R\bduration\x12\x18\n" +
	"\acounter\x18\x03 \x01(\x03R\acounter\x12\x14\n" +
	"\x05start\x18\x04 \x01(\x03R\x05start\"u\n" +
	"\rReplayRequest\x128\n" +
	"\arequest\x18\x01 \x01(\v2\x1e.ratelimit.v1.RatelimitRequestR\arequest\x12\x12\n" +
	"\x04time\x18\x02 \x01(\x03R\x04time\x12\x16\n" +
	"\x06denied\x18\x03 \x01(\bR\x06denied\"\xaf\x01\n" +
	"\x0eReplayResponse\x12.\n" +
	"\acurrent\x18\x01 \x01(\v2\x14.ratelimit.v1.WindowR\acurrent\x120\n" +
	"\bprevious\x18\x02 \x01(\v2\x14.ratelimit.v1.WindowR\bprevious\x12;\n" +
	"\bresponse\x18\x03 \x01(\v2\x1f.ratelimit.v1.RatelimitResponseR\bresponse2Y\n" +
	"\x10RatelimitService\x12E\n" +
	"\x06Replay\x12\x1b.ratelimit.v1.ReplayRequest\x1a\x1c.ratelimit.v1.ReplayResponse\"\x00B@Z>github.com/unkeyed/unkey/go/gen/proto/ratelimit/v1;ratelimitv1b\x06proto3"

var (
	file_proto_ratelimit_v1_service_proto_rawDescOnce sync.Once
	file_proto_ratelimit_v1_service_proto_rawDescData []byte
)

func file_proto_ratelimit_v1_service_proto_rawDescGZIP() []byte {
	file_proto_ratelimit_v1_service_proto_rawDescOnce.Do(func() {
		file_proto_ratelimit_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ratelimit_v1_service_proto_rawDesc), len(file_proto_ratelimit_v1_service_proto_rawDesc)))
	})
	return file_proto_ratelimit_v1_service_proto_rawDescData
}

var file_proto_ratelimit_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_ratelimit_v1_service_proto_goTypes = []any{
	(*RatelimitRequest)(nil),  // 0: ratelimit.v1.RatelimitRequest
	(*RatelimitResponse)(nil), // 1: ratelimit.v1.RatelimitResponse
	(*Window)(nil),            // 2: ratelimit.v1.Window
	(*ReplayRequest)(nil),     // 3: ratelimit.v1.ReplayRequest
	(*ReplayResponse)(nil),    // 4: ratelimit.v1.ReplayResponse
}
var file_proto_ratelimit_v1_service_proto_depIdxs = []int32{
	0, // 0: ratelimit.v1.ReplayRequest.request:type_name -> ratelimit.v1.RatelimitRequest
	2, // 1: ratelimit.v1.ReplayResponse.current:type_name -> ratelimit.v1.Window
	2, // 2: ratelimit.v1.ReplayResponse.previous:type_name -> ratelimit.v1.Window
	1, // 3: ratelimit.v1.ReplayResponse.response:type_name -> ratelimit.v1.RatelimitResponse
	3, // 4: ratelimit.v1.RatelimitService.Replay:input_type -> ratelimit.v1.ReplayRequest
	4, // 5: ratelimit.v1.RatelimitService.Replay:output_type -> ratelimit.v1.ReplayResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_ratelimit_v1_service_proto_init() }
func file_proto_ratelimit_v1_service_proto_init() {
	if File_proto_ratelimit_v1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ratelimit_v1_service_proto_rawDesc), len(file_proto_ratelimit_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ratelimit_v1_service_proto_goTypes,
		DependencyIndexes: file_proto_ratelimit_v1_service_proto_depIdxs,
		MessageInfos:      file_proto_ratelimit_v1_service_proto_msgTypes,
	}.Build()
	File_proto_ratelimit_v1_service_proto = out.File
	file_proto_ratelimit_v1_service_proto_goTypes = nil
	file_proto_ratelimit_v1_service_proto_depIdxs = nil
}
