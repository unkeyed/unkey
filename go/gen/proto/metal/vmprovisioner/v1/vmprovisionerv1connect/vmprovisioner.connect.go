// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/metal/vmprovisioner/v1/vmprovisioner.proto

package vmprovisionerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/metal/vmprovisioner/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VmServiceName is the fully-qualified name of the VmService service.
	VmServiceName = "metal.vmprovisioner.v1.VmService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VmServiceCreateVmProcedure is the fully-qualified name of the VmService's CreateVm RPC.
	VmServiceCreateVmProcedure = "/metal.vmprovisioner.v1.VmService/CreateVm"
	// VmServiceDeleteVmProcedure is the fully-qualified name of the VmService's DeleteVm RPC.
	VmServiceDeleteVmProcedure = "/metal.vmprovisioner.v1.VmService/DeleteVm"
	// VmServiceBootVmProcedure is the fully-qualified name of the VmService's BootVm RPC.
	VmServiceBootVmProcedure = "/metal.vmprovisioner.v1.VmService/BootVm"
	// VmServiceShutdownVmProcedure is the fully-qualified name of the VmService's ShutdownVm RPC.
	VmServiceShutdownVmProcedure = "/metal.vmprovisioner.v1.VmService/ShutdownVm"
	// VmServicePauseVmProcedure is the fully-qualified name of the VmService's PauseVm RPC.
	VmServicePauseVmProcedure = "/metal.vmprovisioner.v1.VmService/PauseVm"
	// VmServiceResumeVmProcedure is the fully-qualified name of the VmService's ResumeVm RPC.
	VmServiceResumeVmProcedure = "/metal.vmprovisioner.v1.VmService/ResumeVm"
	// VmServiceRebootVmProcedure is the fully-qualified name of the VmService's RebootVm RPC.
	VmServiceRebootVmProcedure = "/metal.vmprovisioner.v1.VmService/RebootVm"
	// VmServiceGetVmInfoProcedure is the fully-qualified name of the VmService's GetVmInfo RPC.
	VmServiceGetVmInfoProcedure = "/metal.vmprovisioner.v1.VmService/GetVmInfo"
	// VmServiceListVmsProcedure is the fully-qualified name of the VmService's ListVms RPC.
	VmServiceListVmsProcedure = "/metal.vmprovisioner.v1.VmService/ListVms"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	vmServiceServiceDescriptor          = v1.File_proto_metal_vmprovisioner_v1_vmprovisioner_proto.Services().ByName("VmService")
	vmServiceCreateVmMethodDescriptor   = vmServiceServiceDescriptor.Methods().ByName("CreateVm")
	vmServiceDeleteVmMethodDescriptor   = vmServiceServiceDescriptor.Methods().ByName("DeleteVm")
	vmServiceBootVmMethodDescriptor     = vmServiceServiceDescriptor.Methods().ByName("BootVm")
	vmServiceShutdownVmMethodDescriptor = vmServiceServiceDescriptor.Methods().ByName("ShutdownVm")
	vmServicePauseVmMethodDescriptor    = vmServiceServiceDescriptor.Methods().ByName("PauseVm")
	vmServiceResumeVmMethodDescriptor   = vmServiceServiceDescriptor.Methods().ByName("ResumeVm")
	vmServiceRebootVmMethodDescriptor   = vmServiceServiceDescriptor.Methods().ByName("RebootVm")
	vmServiceGetVmInfoMethodDescriptor  = vmServiceServiceDescriptor.Methods().ByName("GetVmInfo")
	vmServiceListVmsMethodDescriptor    = vmServiceServiceDescriptor.Methods().ByName("ListVms")
)

// VmServiceClient is a client for the metal.vmprovisioner.v1.VmService service.
type VmServiceClient interface {
	// CreateVm creates a new virtual machine instance
	CreateVm(context.Context, *connect.Request[v1.CreateVmRequest]) (*connect.Response[v1.CreateVmResponse], error)
	// DeleteVm removes a virtual machine instance
	DeleteVm(context.Context, *connect.Request[v1.DeleteVmRequest]) (*connect.Response[v1.DeleteVmResponse], error)
	// BootVm starts a created virtual machine
	BootVm(context.Context, *connect.Request[v1.BootVmRequest]) (*connect.Response[v1.BootVmResponse], error)
	// ShutdownVm gracefully stops a running virtual machine
	ShutdownVm(context.Context, *connect.Request[v1.ShutdownVmRequest]) (*connect.Response[v1.ShutdownVmResponse], error)
	// PauseVm pauses a running virtual machine
	PauseVm(context.Context, *connect.Request[v1.PauseVmRequest]) (*connect.Response[v1.PauseVmResponse], error)
	// ResumeVm resumes a paused virtual machine
	ResumeVm(context.Context, *connect.Request[v1.ResumeVmRequest]) (*connect.Response[v1.ResumeVmResponse], error)
	// RebootVm restarts a running virtual machine
	RebootVm(context.Context, *connect.Request[v1.RebootVmRequest]) (*connect.Response[v1.RebootVmResponse], error)
	// GetVmInfo retrieves virtual machine status and configuration
	GetVmInfo(context.Context, *connect.Request[v1.GetVmInfoRequest]) (*connect.Response[v1.GetVmInfoResponse], error)
	// ListVms lists all virtual machines managed by this service
	ListVms(context.Context, *connect.Request[v1.ListVmsRequest]) (*connect.Response[v1.ListVmsResponse], error)
}

// NewVmServiceClient constructs a client for the metal.vmprovisioner.v1.VmService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVmServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VmServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vmServiceClient{
		createVm: connect.NewClient[v1.CreateVmRequest, v1.CreateVmResponse](
			httpClient,
			baseURL+VmServiceCreateVmProcedure,
			connect.WithSchema(vmServiceCreateVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteVm: connect.NewClient[v1.DeleteVmRequest, v1.DeleteVmResponse](
			httpClient,
			baseURL+VmServiceDeleteVmProcedure,
			connect.WithSchema(vmServiceDeleteVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bootVm: connect.NewClient[v1.BootVmRequest, v1.BootVmResponse](
			httpClient,
			baseURL+VmServiceBootVmProcedure,
			connect.WithSchema(vmServiceBootVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		shutdownVm: connect.NewClient[v1.ShutdownVmRequest, v1.ShutdownVmResponse](
			httpClient,
			baseURL+VmServiceShutdownVmProcedure,
			connect.WithSchema(vmServiceShutdownVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseVm: connect.NewClient[v1.PauseVmRequest, v1.PauseVmResponse](
			httpClient,
			baseURL+VmServicePauseVmProcedure,
			connect.WithSchema(vmServicePauseVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resumeVm: connect.NewClient[v1.ResumeVmRequest, v1.ResumeVmResponse](
			httpClient,
			baseURL+VmServiceResumeVmProcedure,
			connect.WithSchema(vmServiceResumeVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rebootVm: connect.NewClient[v1.RebootVmRequest, v1.RebootVmResponse](
			httpClient,
			baseURL+VmServiceRebootVmProcedure,
			connect.WithSchema(vmServiceRebootVmMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVmInfo: connect.NewClient[v1.GetVmInfoRequest, v1.GetVmInfoResponse](
			httpClient,
			baseURL+VmServiceGetVmInfoProcedure,
			connect.WithSchema(vmServiceGetVmInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listVms: connect.NewClient[v1.ListVmsRequest, v1.ListVmsResponse](
			httpClient,
			baseURL+VmServiceListVmsProcedure,
			connect.WithSchema(vmServiceListVmsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// vmServiceClient implements VmServiceClient.
type vmServiceClient struct {
	createVm   *connect.Client[v1.CreateVmRequest, v1.CreateVmResponse]
	deleteVm   *connect.Client[v1.DeleteVmRequest, v1.DeleteVmResponse]
	bootVm     *connect.Client[v1.BootVmRequest, v1.BootVmResponse]
	shutdownVm *connect.Client[v1.ShutdownVmRequest, v1.ShutdownVmResponse]
	pauseVm    *connect.Client[v1.PauseVmRequest, v1.PauseVmResponse]
	resumeVm   *connect.Client[v1.ResumeVmRequest, v1.ResumeVmResponse]
	rebootVm   *connect.Client[v1.RebootVmRequest, v1.RebootVmResponse]
	getVmInfo  *connect.Client[v1.GetVmInfoRequest, v1.GetVmInfoResponse]
	listVms    *connect.Client[v1.ListVmsRequest, v1.ListVmsResponse]
}

// CreateVm calls metal.vmprovisioner.v1.VmService.CreateVm.
func (c *vmServiceClient) CreateVm(ctx context.Context, req *connect.Request[v1.CreateVmRequest]) (*connect.Response[v1.CreateVmResponse], error) {
	return c.createVm.CallUnary(ctx, req)
}

// DeleteVm calls metal.vmprovisioner.v1.VmService.DeleteVm.
func (c *vmServiceClient) DeleteVm(ctx context.Context, req *connect.Request[v1.DeleteVmRequest]) (*connect.Response[v1.DeleteVmResponse], error) {
	return c.deleteVm.CallUnary(ctx, req)
}

// BootVm calls metal.vmprovisioner.v1.VmService.BootVm.
func (c *vmServiceClient) BootVm(ctx context.Context, req *connect.Request[v1.BootVmRequest]) (*connect.Response[v1.BootVmResponse], error) {
	return c.bootVm.CallUnary(ctx, req)
}

// ShutdownVm calls metal.vmprovisioner.v1.VmService.ShutdownVm.
func (c *vmServiceClient) ShutdownVm(ctx context.Context, req *connect.Request[v1.ShutdownVmRequest]) (*connect.Response[v1.ShutdownVmResponse], error) {
	return c.shutdownVm.CallUnary(ctx, req)
}

// PauseVm calls metal.vmprovisioner.v1.VmService.PauseVm.
func (c *vmServiceClient) PauseVm(ctx context.Context, req *connect.Request[v1.PauseVmRequest]) (*connect.Response[v1.PauseVmResponse], error) {
	return c.pauseVm.CallUnary(ctx, req)
}

// ResumeVm calls metal.vmprovisioner.v1.VmService.ResumeVm.
func (c *vmServiceClient) ResumeVm(ctx context.Context, req *connect.Request[v1.ResumeVmRequest]) (*connect.Response[v1.ResumeVmResponse], error) {
	return c.resumeVm.CallUnary(ctx, req)
}

// RebootVm calls metal.vmprovisioner.v1.VmService.RebootVm.
func (c *vmServiceClient) RebootVm(ctx context.Context, req *connect.Request[v1.RebootVmRequest]) (*connect.Response[v1.RebootVmResponse], error) {
	return c.rebootVm.CallUnary(ctx, req)
}

// GetVmInfo calls metal.vmprovisioner.v1.VmService.GetVmInfo.
func (c *vmServiceClient) GetVmInfo(ctx context.Context, req *connect.Request[v1.GetVmInfoRequest]) (*connect.Response[v1.GetVmInfoResponse], error) {
	return c.getVmInfo.CallUnary(ctx, req)
}

// ListVms calls metal.vmprovisioner.v1.VmService.ListVms.
func (c *vmServiceClient) ListVms(ctx context.Context, req *connect.Request[v1.ListVmsRequest]) (*connect.Response[v1.ListVmsResponse], error) {
	return c.listVms.CallUnary(ctx, req)
}

// VmServiceHandler is an implementation of the metal.vmprovisioner.v1.VmService service.
type VmServiceHandler interface {
	// CreateVm creates a new virtual machine instance
	CreateVm(context.Context, *connect.Request[v1.CreateVmRequest]) (*connect.Response[v1.CreateVmResponse], error)
	// DeleteVm removes a virtual machine instance
	DeleteVm(context.Context, *connect.Request[v1.DeleteVmRequest]) (*connect.Response[v1.DeleteVmResponse], error)
	// BootVm starts a created virtual machine
	BootVm(context.Context, *connect.Request[v1.BootVmRequest]) (*connect.Response[v1.BootVmResponse], error)
	// ShutdownVm gracefully stops a running virtual machine
	ShutdownVm(context.Context, *connect.Request[v1.ShutdownVmRequest]) (*connect.Response[v1.ShutdownVmResponse], error)
	// PauseVm pauses a running virtual machine
	PauseVm(context.Context, *connect.Request[v1.PauseVmRequest]) (*connect.Response[v1.PauseVmResponse], error)
	// ResumeVm resumes a paused virtual machine
	ResumeVm(context.Context, *connect.Request[v1.ResumeVmRequest]) (*connect.Response[v1.ResumeVmResponse], error)
	// RebootVm restarts a running virtual machine
	RebootVm(context.Context, *connect.Request[v1.RebootVmRequest]) (*connect.Response[v1.RebootVmResponse], error)
	// GetVmInfo retrieves virtual machine status and configuration
	GetVmInfo(context.Context, *connect.Request[v1.GetVmInfoRequest]) (*connect.Response[v1.GetVmInfoResponse], error)
	// ListVms lists all virtual machines managed by this service
	ListVms(context.Context, *connect.Request[v1.ListVmsRequest]) (*connect.Response[v1.ListVmsResponse], error)
}

// NewVmServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVmServiceHandler(svc VmServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vmServiceCreateVmHandler := connect.NewUnaryHandler(
		VmServiceCreateVmProcedure,
		svc.CreateVm,
		connect.WithSchema(vmServiceCreateVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceDeleteVmHandler := connect.NewUnaryHandler(
		VmServiceDeleteVmProcedure,
		svc.DeleteVm,
		connect.WithSchema(vmServiceDeleteVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceBootVmHandler := connect.NewUnaryHandler(
		VmServiceBootVmProcedure,
		svc.BootVm,
		connect.WithSchema(vmServiceBootVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceShutdownVmHandler := connect.NewUnaryHandler(
		VmServiceShutdownVmProcedure,
		svc.ShutdownVm,
		connect.WithSchema(vmServiceShutdownVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServicePauseVmHandler := connect.NewUnaryHandler(
		VmServicePauseVmProcedure,
		svc.PauseVm,
		connect.WithSchema(vmServicePauseVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceResumeVmHandler := connect.NewUnaryHandler(
		VmServiceResumeVmProcedure,
		svc.ResumeVm,
		connect.WithSchema(vmServiceResumeVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceRebootVmHandler := connect.NewUnaryHandler(
		VmServiceRebootVmProcedure,
		svc.RebootVm,
		connect.WithSchema(vmServiceRebootVmMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceGetVmInfoHandler := connect.NewUnaryHandler(
		VmServiceGetVmInfoProcedure,
		svc.GetVmInfo,
		connect.WithSchema(vmServiceGetVmInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vmServiceListVmsHandler := connect.NewUnaryHandler(
		VmServiceListVmsProcedure,
		svc.ListVms,
		connect.WithSchema(vmServiceListVmsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metal.vmprovisioner.v1.VmService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VmServiceCreateVmProcedure:
			vmServiceCreateVmHandler.ServeHTTP(w, r)
		case VmServiceDeleteVmProcedure:
			vmServiceDeleteVmHandler.ServeHTTP(w, r)
		case VmServiceBootVmProcedure:
			vmServiceBootVmHandler.ServeHTTP(w, r)
		case VmServiceShutdownVmProcedure:
			vmServiceShutdownVmHandler.ServeHTTP(w, r)
		case VmServicePauseVmProcedure:
			vmServicePauseVmHandler.ServeHTTP(w, r)
		case VmServiceResumeVmProcedure:
			vmServiceResumeVmHandler.ServeHTTP(w, r)
		case VmServiceRebootVmProcedure:
			vmServiceRebootVmHandler.ServeHTTP(w, r)
		case VmServiceGetVmInfoProcedure:
			vmServiceGetVmInfoHandler.ServeHTTP(w, r)
		case VmServiceListVmsProcedure:
			vmServiceListVmsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVmServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVmServiceHandler struct{}

func (UnimplementedVmServiceHandler) CreateVm(context.Context, *connect.Request[v1.CreateVmRequest]) (*connect.Response[v1.CreateVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.CreateVm is not implemented"))
}

func (UnimplementedVmServiceHandler) DeleteVm(context.Context, *connect.Request[v1.DeleteVmRequest]) (*connect.Response[v1.DeleteVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.DeleteVm is not implemented"))
}

func (UnimplementedVmServiceHandler) BootVm(context.Context, *connect.Request[v1.BootVmRequest]) (*connect.Response[v1.BootVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.BootVm is not implemented"))
}

func (UnimplementedVmServiceHandler) ShutdownVm(context.Context, *connect.Request[v1.ShutdownVmRequest]) (*connect.Response[v1.ShutdownVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.ShutdownVm is not implemented"))
}

func (UnimplementedVmServiceHandler) PauseVm(context.Context, *connect.Request[v1.PauseVmRequest]) (*connect.Response[v1.PauseVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.PauseVm is not implemented"))
}

func (UnimplementedVmServiceHandler) ResumeVm(context.Context, *connect.Request[v1.ResumeVmRequest]) (*connect.Response[v1.ResumeVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.ResumeVm is not implemented"))
}

func (UnimplementedVmServiceHandler) RebootVm(context.Context, *connect.Request[v1.RebootVmRequest]) (*connect.Response[v1.RebootVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.RebootVm is not implemented"))
}

func (UnimplementedVmServiceHandler) GetVmInfo(context.Context, *connect.Request[v1.GetVmInfoRequest]) (*connect.Response[v1.GetVmInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.GetVmInfo is not implemented"))
}

func (UnimplementedVmServiceHandler) ListVms(context.Context, *connect.Request[v1.ListVmsRequest]) (*connect.Response[v1.ListVmsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metal.vmprovisioner.v1.VmService.ListVms is not implemented"))
}
