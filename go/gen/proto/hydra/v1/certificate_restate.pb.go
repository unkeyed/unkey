// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             (unknown)
// source: hydra/v1/certificate.proto

package hydrav1

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// CertificateServiceClient is the client API for hydra.v1.CertificateService service.
//
// CertificateService manages ACME certificate challenges and issuance
type CertificateServiceClient interface {
	// ProcessChallenge handles the complete ACME certificate challenge flow
	// Key: domain name (ensures only one challenge per domain at a time)
	ProcessChallenge(opts ...sdk_go.ClientOption) sdk_go.Client[*ProcessChallengeRequest, *ProcessChallengeResponse]
}

type certificateServiceClient struct {
	ctx     sdk_go.Context
	key     string
	options []sdk_go.ClientOption
}

func NewCertificateServiceClient(ctx sdk_go.Context, key string, opts ...sdk_go.ClientOption) CertificateServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &certificateServiceClient{
		ctx,
		key,
		cOpts,
	}
}
func (c *certificateServiceClient) ProcessChallenge(opts ...sdk_go.ClientOption) sdk_go.Client[*ProcessChallengeRequest, *ProcessChallengeResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*ProcessChallengeRequest](sdk_go.Object[*ProcessChallengeResponse](c.ctx, "hydra.v1.CertificateService", c.key, "ProcessChallenge", cOpts...))
}

// CertificateServiceServer is the server API for hydra.v1.CertificateService service.
// All implementations should embed UnimplementedCertificateServiceServer
// for forward compatibility.
//
// CertificateService manages ACME certificate challenges and issuance
type CertificateServiceServer interface {
	// ProcessChallenge handles the complete ACME certificate challenge flow
	// Key: domain name (ensures only one challenge per domain at a time)
	ProcessChallenge(ctx sdk_go.ObjectContext, req *ProcessChallengeRequest) (*ProcessChallengeResponse, error)
}

// UnimplementedCertificateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCertificateServiceServer struct{}

func (UnimplementedCertificateServiceServer) ProcessChallenge(ctx sdk_go.ObjectContext, req *ProcessChallengeRequest) (*ProcessChallengeResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method ProcessChallenge not implemented"), 501)
}
func (UnimplementedCertificateServiceServer) testEmbeddedByValue() {}

// UnsafeCertificateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateServiceServer will
// result in compilation errors.
type UnsafeCertificateServiceServer interface {
	mustEmbedUnimplementedCertificateServiceServer()
}

func NewCertificateServiceServer(srv CertificateServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedCertificateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewObject("hydra.v1.CertificateService", sOpts...)
	router = router.Handler("ProcessChallenge", sdk_go.NewObjectHandler(srv.ProcessChallenge))
	return router
}
