// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             (unknown)
// source: hydra/v1/routing.proto

package hydrav1

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
	encoding "github.com/restatedev/sdk-go/encoding"
	ingress "github.com/restatedev/sdk-go/ingress"
)

// RoutingServiceClient is the client API for hydra.v1.RoutingService service.
type RoutingServiceClient interface {
	// AssignDomains creates or reassigns domains to a deployment and creates gateway configs
	// Used during initial deployment
	AssignDomains(opts ...sdk_go.ClientOption) sdk_go.Client[*AssignDomainsRequest, *AssignDomainsResponse]
	// SwitchDomains reassigns existing domains to a different deployment and updates gateway configs
	// Used during rollback/promote operations
	SwitchDomains(opts ...sdk_go.ClientOption) sdk_go.Client[*SwitchDomainsRequest, *SwitchDomainsResponse]
}

type routingServiceClient struct {
	ctx     sdk_go.Context
	key     string
	options []sdk_go.ClientOption
}

func NewRoutingServiceClient(ctx sdk_go.Context, key string, opts ...sdk_go.ClientOption) RoutingServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &routingServiceClient{
		ctx,
		key,
		cOpts,
	}
}
func (c *routingServiceClient) AssignDomains(opts ...sdk_go.ClientOption) sdk_go.Client[*AssignDomainsRequest, *AssignDomainsResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*AssignDomainsRequest](sdk_go.Object[*AssignDomainsResponse](c.ctx, "hydra.v1.RoutingService", c.key, "AssignDomains", cOpts...))
}

func (c *routingServiceClient) SwitchDomains(opts ...sdk_go.ClientOption) sdk_go.Client[*SwitchDomainsRequest, *SwitchDomainsResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*SwitchDomainsRequest](sdk_go.Object[*SwitchDomainsResponse](c.ctx, "hydra.v1.RoutingService", c.key, "SwitchDomains", cOpts...))
}

// RoutingServiceIngressClient is the ingress client API for hydra.v1.RoutingService service.
//
// This client is used to call the service from outside of a Restate context.
type RoutingServiceIngressClient interface {
	// AssignDomains creates or reassigns domains to a deployment and creates gateway configs
	// Used during initial deployment
	AssignDomains() ingress.Requester[*AssignDomainsRequest, *AssignDomainsResponse]
	// SwitchDomains reassigns existing domains to a different deployment and updates gateway configs
	// Used during rollback/promote operations
	SwitchDomains() ingress.Requester[*SwitchDomainsRequest, *SwitchDomainsResponse]
}

type routingServiceIngressClient struct {
	client      *ingress.Client
	serviceName string
	key         string
}

func NewRoutingServiceIngressClient(client *ingress.Client, key string) RoutingServiceIngressClient {
	return &routingServiceIngressClient{
		client,
		"hydra.v1.RoutingService",
		key,
	}
}

func (c *routingServiceIngressClient) AssignDomains() ingress.Requester[*AssignDomainsRequest, *AssignDomainsResponse] {
	codec := encoding.ProtoJSONCodec
	return ingress.NewRequester[*AssignDomainsRequest, *AssignDomainsResponse](c.client, c.serviceName, "AssignDomains", &c.key, &codec)
}

func (c *routingServiceIngressClient) SwitchDomains() ingress.Requester[*SwitchDomainsRequest, *SwitchDomainsResponse] {
	codec := encoding.ProtoJSONCodec
	return ingress.NewRequester[*SwitchDomainsRequest, *SwitchDomainsResponse](c.client, c.serviceName, "SwitchDomains", &c.key, &codec)
}

// RoutingServiceServer is the server API for hydra.v1.RoutingService service.
// All implementations should embed UnimplementedRoutingServiceServer
// for forward compatibility.
type RoutingServiceServer interface {
	// AssignDomains creates or reassigns domains to a deployment and creates gateway configs
	// Used during initial deployment
	AssignDomains(ctx sdk_go.ObjectContext, req *AssignDomainsRequest) (*AssignDomainsResponse, error)
	// SwitchDomains reassigns existing domains to a different deployment and updates gateway configs
	// Used during rollback/promote operations
	SwitchDomains(ctx sdk_go.ObjectContext, req *SwitchDomainsRequest) (*SwitchDomainsResponse, error)
}

// UnimplementedRoutingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutingServiceServer struct{}

func (UnimplementedRoutingServiceServer) AssignDomains(ctx sdk_go.ObjectContext, req *AssignDomainsRequest) (*AssignDomainsResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method AssignDomains not implemented"), 501)
}
func (UnimplementedRoutingServiceServer) SwitchDomains(ctx sdk_go.ObjectContext, req *SwitchDomainsRequest) (*SwitchDomainsResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method SwitchDomains not implemented"), 501)
}
func (UnimplementedRoutingServiceServer) testEmbeddedByValue() {}

// UnsafeRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServiceServer will
// result in compilation errors.
type UnsafeRoutingServiceServer interface {
	mustEmbedUnimplementedRoutingServiceServer()
}

func NewRoutingServiceServer(srv RoutingServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedRoutingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewObject("hydra.v1.RoutingService", sOpts...)
	router = router.Handler("AssignDomains", sdk_go.NewObjectHandler(srv.AssignDomains))
	router = router.Handler("SwitchDomains", sdk_go.NewObjectHandler(srv.SwitchDomains))
	return router
}
