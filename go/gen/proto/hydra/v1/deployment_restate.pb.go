// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             (unknown)
// source: hydra/v1/deployment.proto

package hydrav1

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// DeploymentServiceClient is the client API for hydra.v1.DeploymentService service.
type DeploymentServiceClient interface {
	Deploy(opts ...sdk_go.ClientOption) sdk_go.Client[*DeployRequest, *DeployResponse]
	Rollback(opts ...sdk_go.ClientOption) sdk_go.Client[*RollbackRequest, *RollbackResponse]
	Promote(opts ...sdk_go.ClientOption) sdk_go.Client[*PromoteRequest, *PromoteResponse]
}

type deploymentServiceClient struct {
	ctx     sdk_go.Context
	key     string
	options []sdk_go.ClientOption
}

func NewDeploymentServiceClient(ctx sdk_go.Context, key string, opts ...sdk_go.ClientOption) DeploymentServiceClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &deploymentServiceClient{
		ctx,
		key,
		cOpts,
	}
}
func (c *deploymentServiceClient) Deploy(opts ...sdk_go.ClientOption) sdk_go.Client[*DeployRequest, *DeployResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*DeployRequest](sdk_go.Object[*DeployResponse](c.ctx, "hydra.v1.DeploymentService", c.key, "Deploy", cOpts...))
}

func (c *deploymentServiceClient) Rollback(opts ...sdk_go.ClientOption) sdk_go.Client[*RollbackRequest, *RollbackResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*RollbackRequest](sdk_go.Object[*RollbackResponse](c.ctx, "hydra.v1.DeploymentService", c.key, "Rollback", cOpts...))
}

func (c *deploymentServiceClient) Promote(opts ...sdk_go.ClientOption) sdk_go.Client[*PromoteRequest, *PromoteResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*PromoteRequest](sdk_go.Object[*PromoteResponse](c.ctx, "hydra.v1.DeploymentService", c.key, "Promote", cOpts...))
}

// DeploymentServiceServer is the server API for hydra.v1.DeploymentService service.
// All implementations should embed UnimplementedDeploymentServiceServer
// for forward compatibility.
type DeploymentServiceServer interface {
	Deploy(ctx sdk_go.ObjectContext, req *DeployRequest) (*DeployResponse, error)
	Rollback(ctx sdk_go.ObjectContext, req *RollbackRequest) (*RollbackResponse, error)
	Promote(ctx sdk_go.ObjectContext, req *PromoteRequest) (*PromoteResponse, error)
}

// UnimplementedDeploymentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeploymentServiceServer struct{}

func (UnimplementedDeploymentServiceServer) Deploy(ctx sdk_go.ObjectContext, req *DeployRequest) (*DeployResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method Deploy not implemented"), 501)
}
func (UnimplementedDeploymentServiceServer) Rollback(ctx sdk_go.ObjectContext, req *RollbackRequest) (*RollbackResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method Rollback not implemented"), 501)
}
func (UnimplementedDeploymentServiceServer) Promote(ctx sdk_go.ObjectContext, req *PromoteRequest) (*PromoteResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method Promote not implemented"), 501)
}
func (UnimplementedDeploymentServiceServer) testEmbeddedByValue() {}

// UnsafeDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServiceServer will
// result in compilation errors.
type UnsafeDeploymentServiceServer interface {
	mustEmbedUnimplementedDeploymentServiceServer()
}

func NewDeploymentServiceServer(srv DeploymentServiceServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedDeploymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewObject("hydra.v1.DeploymentService", sOpts...)
	router = router.Handler("Deploy", sdk_go.NewObjectHandler(srv.Deploy))
	router = router.Handler("Rollback", sdk_go.NewObjectHandler(srv.Rollback))
	router = router.Handler("Promote", sdk_go.NewObjectHandler(srv.Promote))
	return router
}
