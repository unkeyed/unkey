// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/deploy/assetmanagerd/v1/asset.proto

package assetmanagerdv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/go/gen/proto/deploy/assetmanagerd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssetManagerServiceName is the fully-qualified name of the AssetManagerService service.
	AssetManagerServiceName = "deploy.assetmanagerd.v1.AssetManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssetManagerServiceUploadAssetProcedure is the fully-qualified name of the AssetManagerService's
	// UploadAsset RPC.
	AssetManagerServiceUploadAssetProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/UploadAsset"
	// AssetManagerServiceRegisterAssetProcedure is the fully-qualified name of the
	// AssetManagerService's RegisterAsset RPC.
	AssetManagerServiceRegisterAssetProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/RegisterAsset"
	// AssetManagerServiceGetAssetProcedure is the fully-qualified name of the AssetManagerService's
	// GetAsset RPC.
	AssetManagerServiceGetAssetProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/GetAsset"
	// AssetManagerServiceListAssetsProcedure is the fully-qualified name of the AssetManagerService's
	// ListAssets RPC.
	AssetManagerServiceListAssetsProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/ListAssets"
	// AssetManagerServiceAcquireAssetProcedure is the fully-qualified name of the AssetManagerService's
	// AcquireAsset RPC.
	AssetManagerServiceAcquireAssetProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/AcquireAsset"
	// AssetManagerServiceReleaseAssetProcedure is the fully-qualified name of the AssetManagerService's
	// ReleaseAsset RPC.
	AssetManagerServiceReleaseAssetProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/ReleaseAsset"
	// AssetManagerServiceDeleteAssetProcedure is the fully-qualified name of the AssetManagerService's
	// DeleteAsset RPC.
	AssetManagerServiceDeleteAssetProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/DeleteAsset"
	// AssetManagerServiceGarbageCollectProcedure is the fully-qualified name of the
	// AssetManagerService's GarbageCollect RPC.
	AssetManagerServiceGarbageCollectProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/GarbageCollect"
	// AssetManagerServicePrepareAssetsProcedure is the fully-qualified name of the
	// AssetManagerService's PrepareAssets RPC.
	AssetManagerServicePrepareAssetsProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/PrepareAssets"
	// AssetManagerServiceQueryAssetsProcedure is the fully-qualified name of the AssetManagerService's
	// QueryAssets RPC.
	AssetManagerServiceQueryAssetsProcedure = "/deploy.assetmanagerd.v1.AssetManagerService/QueryAssets"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	assetManagerServiceServiceDescriptor              = v1.File_proto_deploy_assetmanagerd_v1_asset_proto.Services().ByName("AssetManagerService")
	assetManagerServiceUploadAssetMethodDescriptor    = assetManagerServiceServiceDescriptor.Methods().ByName("UploadAsset")
	assetManagerServiceRegisterAssetMethodDescriptor  = assetManagerServiceServiceDescriptor.Methods().ByName("RegisterAsset")
	assetManagerServiceGetAssetMethodDescriptor       = assetManagerServiceServiceDescriptor.Methods().ByName("GetAsset")
	assetManagerServiceListAssetsMethodDescriptor     = assetManagerServiceServiceDescriptor.Methods().ByName("ListAssets")
	assetManagerServiceAcquireAssetMethodDescriptor   = assetManagerServiceServiceDescriptor.Methods().ByName("AcquireAsset")
	assetManagerServiceReleaseAssetMethodDescriptor   = assetManagerServiceServiceDescriptor.Methods().ByName("ReleaseAsset")
	assetManagerServiceDeleteAssetMethodDescriptor    = assetManagerServiceServiceDescriptor.Methods().ByName("DeleteAsset")
	assetManagerServiceGarbageCollectMethodDescriptor = assetManagerServiceServiceDescriptor.Methods().ByName("GarbageCollect")
	assetManagerServicePrepareAssetsMethodDescriptor  = assetManagerServiceServiceDescriptor.Methods().ByName("PrepareAssets")
	assetManagerServiceQueryAssetsMethodDescriptor    = assetManagerServiceServiceDescriptor.Methods().ByName("QueryAssets")
)

// AssetManagerServiceClient is a client for the deploy.assetmanagerd.v1.AssetManagerService
// service.
type AssetManagerServiceClient interface {
	// Upload and register an asset in one operation
	UploadAsset(context.Context) *connect.ClientStreamForClient[v1.UploadAssetRequest, v1.UploadAssetResponse]
	// Register a new asset (called by builderd after creating images)
	RegisterAsset(context.Context, *connect.Request[v1.RegisterAssetRequest]) (*connect.Response[v1.RegisterAssetResponse], error)
	// Get asset location and metadata
	GetAsset(context.Context, *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error)
	// List available assets with filtering
	ListAssets(context.Context, *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error)
	// Mark asset as in-use (reference counting for GC)
	AcquireAsset(context.Context, *connect.Request[v1.AcquireAssetRequest]) (*connect.Response[v1.AcquireAssetResponse], error)
	// Release asset reference (decrements ref count)
	ReleaseAsset(context.Context, *connect.Request[v1.ReleaseAssetRequest]) (*connect.Response[v1.ReleaseAssetResponse], error)
	// Delete an asset (only if ref count is 0)
	DeleteAsset(context.Context, *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error)
	// Trigger garbage collection of unused assets
	GarbageCollect(context.Context, *connect.Request[v1.GarbageCollectRequest]) (*connect.Response[v1.GarbageCollectResponse], error)
	// Pre-stage assets for a specific host/jailer
	PrepareAssets(context.Context, *connect.Request[v1.PrepareAssetsRequest]) (*connect.Response[v1.PrepareAssetsResponse], error)
	// Query assets with automatic build triggering if not found
	// This is the enhanced version of ListAssets that supports automatic asset creation
	QueryAssets(context.Context, *connect.Request[v1.QueryAssetsRequest]) (*connect.Response[v1.QueryAssetsResponse], error)
}

// NewAssetManagerServiceClient constructs a client for the
// deploy.assetmanagerd.v1.AssetManagerService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssetManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssetManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &assetManagerServiceClient{
		uploadAsset: connect.NewClient[v1.UploadAssetRequest, v1.UploadAssetResponse](
			httpClient,
			baseURL+AssetManagerServiceUploadAssetProcedure,
			connect.WithSchema(assetManagerServiceUploadAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerAsset: connect.NewClient[v1.RegisterAssetRequest, v1.RegisterAssetResponse](
			httpClient,
			baseURL+AssetManagerServiceRegisterAssetProcedure,
			connect.WithSchema(assetManagerServiceRegisterAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAsset: connect.NewClient[v1.GetAssetRequest, v1.GetAssetResponse](
			httpClient,
			baseURL+AssetManagerServiceGetAssetProcedure,
			connect.WithSchema(assetManagerServiceGetAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAssets: connect.NewClient[v1.ListAssetsRequest, v1.ListAssetsResponse](
			httpClient,
			baseURL+AssetManagerServiceListAssetsProcedure,
			connect.WithSchema(assetManagerServiceListAssetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		acquireAsset: connect.NewClient[v1.AcquireAssetRequest, v1.AcquireAssetResponse](
			httpClient,
			baseURL+AssetManagerServiceAcquireAssetProcedure,
			connect.WithSchema(assetManagerServiceAcquireAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		releaseAsset: connect.NewClient[v1.ReleaseAssetRequest, v1.ReleaseAssetResponse](
			httpClient,
			baseURL+AssetManagerServiceReleaseAssetProcedure,
			connect.WithSchema(assetManagerServiceReleaseAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAsset: connect.NewClient[v1.DeleteAssetRequest, v1.DeleteAssetResponse](
			httpClient,
			baseURL+AssetManagerServiceDeleteAssetProcedure,
			connect.WithSchema(assetManagerServiceDeleteAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		garbageCollect: connect.NewClient[v1.GarbageCollectRequest, v1.GarbageCollectResponse](
			httpClient,
			baseURL+AssetManagerServiceGarbageCollectProcedure,
			connect.WithSchema(assetManagerServiceGarbageCollectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		prepareAssets: connect.NewClient[v1.PrepareAssetsRequest, v1.PrepareAssetsResponse](
			httpClient,
			baseURL+AssetManagerServicePrepareAssetsProcedure,
			connect.WithSchema(assetManagerServicePrepareAssetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryAssets: connect.NewClient[v1.QueryAssetsRequest, v1.QueryAssetsResponse](
			httpClient,
			baseURL+AssetManagerServiceQueryAssetsProcedure,
			connect.WithSchema(assetManagerServiceQueryAssetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// assetManagerServiceClient implements AssetManagerServiceClient.
type assetManagerServiceClient struct {
	uploadAsset    *connect.Client[v1.UploadAssetRequest, v1.UploadAssetResponse]
	registerAsset  *connect.Client[v1.RegisterAssetRequest, v1.RegisterAssetResponse]
	getAsset       *connect.Client[v1.GetAssetRequest, v1.GetAssetResponse]
	listAssets     *connect.Client[v1.ListAssetsRequest, v1.ListAssetsResponse]
	acquireAsset   *connect.Client[v1.AcquireAssetRequest, v1.AcquireAssetResponse]
	releaseAsset   *connect.Client[v1.ReleaseAssetRequest, v1.ReleaseAssetResponse]
	deleteAsset    *connect.Client[v1.DeleteAssetRequest, v1.DeleteAssetResponse]
	garbageCollect *connect.Client[v1.GarbageCollectRequest, v1.GarbageCollectResponse]
	prepareAssets  *connect.Client[v1.PrepareAssetsRequest, v1.PrepareAssetsResponse]
	queryAssets    *connect.Client[v1.QueryAssetsRequest, v1.QueryAssetsResponse]
}

// UploadAsset calls deploy.assetmanagerd.v1.AssetManagerService.UploadAsset.
func (c *assetManagerServiceClient) UploadAsset(ctx context.Context) *connect.ClientStreamForClient[v1.UploadAssetRequest, v1.UploadAssetResponse] {
	return c.uploadAsset.CallClientStream(ctx)
}

// RegisterAsset calls deploy.assetmanagerd.v1.AssetManagerService.RegisterAsset.
func (c *assetManagerServiceClient) RegisterAsset(ctx context.Context, req *connect.Request[v1.RegisterAssetRequest]) (*connect.Response[v1.RegisterAssetResponse], error) {
	return c.registerAsset.CallUnary(ctx, req)
}

// GetAsset calls deploy.assetmanagerd.v1.AssetManagerService.GetAsset.
func (c *assetManagerServiceClient) GetAsset(ctx context.Context, req *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error) {
	return c.getAsset.CallUnary(ctx, req)
}

// ListAssets calls deploy.assetmanagerd.v1.AssetManagerService.ListAssets.
func (c *assetManagerServiceClient) ListAssets(ctx context.Context, req *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error) {
	return c.listAssets.CallUnary(ctx, req)
}

// AcquireAsset calls deploy.assetmanagerd.v1.AssetManagerService.AcquireAsset.
func (c *assetManagerServiceClient) AcquireAsset(ctx context.Context, req *connect.Request[v1.AcquireAssetRequest]) (*connect.Response[v1.AcquireAssetResponse], error) {
	return c.acquireAsset.CallUnary(ctx, req)
}

// ReleaseAsset calls deploy.assetmanagerd.v1.AssetManagerService.ReleaseAsset.
func (c *assetManagerServiceClient) ReleaseAsset(ctx context.Context, req *connect.Request[v1.ReleaseAssetRequest]) (*connect.Response[v1.ReleaseAssetResponse], error) {
	return c.releaseAsset.CallUnary(ctx, req)
}

// DeleteAsset calls deploy.assetmanagerd.v1.AssetManagerService.DeleteAsset.
func (c *assetManagerServiceClient) DeleteAsset(ctx context.Context, req *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error) {
	return c.deleteAsset.CallUnary(ctx, req)
}

// GarbageCollect calls deploy.assetmanagerd.v1.AssetManagerService.GarbageCollect.
func (c *assetManagerServiceClient) GarbageCollect(ctx context.Context, req *connect.Request[v1.GarbageCollectRequest]) (*connect.Response[v1.GarbageCollectResponse], error) {
	return c.garbageCollect.CallUnary(ctx, req)
}

// PrepareAssets calls deploy.assetmanagerd.v1.AssetManagerService.PrepareAssets.
func (c *assetManagerServiceClient) PrepareAssets(ctx context.Context, req *connect.Request[v1.PrepareAssetsRequest]) (*connect.Response[v1.PrepareAssetsResponse], error) {
	return c.prepareAssets.CallUnary(ctx, req)
}

// QueryAssets calls deploy.assetmanagerd.v1.AssetManagerService.QueryAssets.
func (c *assetManagerServiceClient) QueryAssets(ctx context.Context, req *connect.Request[v1.QueryAssetsRequest]) (*connect.Response[v1.QueryAssetsResponse], error) {
	return c.queryAssets.CallUnary(ctx, req)
}

// AssetManagerServiceHandler is an implementation of the
// deploy.assetmanagerd.v1.AssetManagerService service.
type AssetManagerServiceHandler interface {
	// Upload and register an asset in one operation
	UploadAsset(context.Context, *connect.ClientStream[v1.UploadAssetRequest]) (*connect.Response[v1.UploadAssetResponse], error)
	// Register a new asset (called by builderd after creating images)
	RegisterAsset(context.Context, *connect.Request[v1.RegisterAssetRequest]) (*connect.Response[v1.RegisterAssetResponse], error)
	// Get asset location and metadata
	GetAsset(context.Context, *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error)
	// List available assets with filtering
	ListAssets(context.Context, *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error)
	// Mark asset as in-use (reference counting for GC)
	AcquireAsset(context.Context, *connect.Request[v1.AcquireAssetRequest]) (*connect.Response[v1.AcquireAssetResponse], error)
	// Release asset reference (decrements ref count)
	ReleaseAsset(context.Context, *connect.Request[v1.ReleaseAssetRequest]) (*connect.Response[v1.ReleaseAssetResponse], error)
	// Delete an asset (only if ref count is 0)
	DeleteAsset(context.Context, *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error)
	// Trigger garbage collection of unused assets
	GarbageCollect(context.Context, *connect.Request[v1.GarbageCollectRequest]) (*connect.Response[v1.GarbageCollectResponse], error)
	// Pre-stage assets for a specific host/jailer
	PrepareAssets(context.Context, *connect.Request[v1.PrepareAssetsRequest]) (*connect.Response[v1.PrepareAssetsResponse], error)
	// Query assets with automatic build triggering if not found
	// This is the enhanced version of ListAssets that supports automatic asset creation
	QueryAssets(context.Context, *connect.Request[v1.QueryAssetsRequest]) (*connect.Response[v1.QueryAssetsResponse], error)
}

// NewAssetManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssetManagerServiceHandler(svc AssetManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assetManagerServiceUploadAssetHandler := connect.NewClientStreamHandler(
		AssetManagerServiceUploadAssetProcedure,
		svc.UploadAsset,
		connect.WithSchema(assetManagerServiceUploadAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceRegisterAssetHandler := connect.NewUnaryHandler(
		AssetManagerServiceRegisterAssetProcedure,
		svc.RegisterAsset,
		connect.WithSchema(assetManagerServiceRegisterAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceGetAssetHandler := connect.NewUnaryHandler(
		AssetManagerServiceGetAssetProcedure,
		svc.GetAsset,
		connect.WithSchema(assetManagerServiceGetAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceListAssetsHandler := connect.NewUnaryHandler(
		AssetManagerServiceListAssetsProcedure,
		svc.ListAssets,
		connect.WithSchema(assetManagerServiceListAssetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceAcquireAssetHandler := connect.NewUnaryHandler(
		AssetManagerServiceAcquireAssetProcedure,
		svc.AcquireAsset,
		connect.WithSchema(assetManagerServiceAcquireAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceReleaseAssetHandler := connect.NewUnaryHandler(
		AssetManagerServiceReleaseAssetProcedure,
		svc.ReleaseAsset,
		connect.WithSchema(assetManagerServiceReleaseAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceDeleteAssetHandler := connect.NewUnaryHandler(
		AssetManagerServiceDeleteAssetProcedure,
		svc.DeleteAsset,
		connect.WithSchema(assetManagerServiceDeleteAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceGarbageCollectHandler := connect.NewUnaryHandler(
		AssetManagerServiceGarbageCollectProcedure,
		svc.GarbageCollect,
		connect.WithSchema(assetManagerServiceGarbageCollectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServicePrepareAssetsHandler := connect.NewUnaryHandler(
		AssetManagerServicePrepareAssetsProcedure,
		svc.PrepareAssets,
		connect.WithSchema(assetManagerServicePrepareAssetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assetManagerServiceQueryAssetsHandler := connect.NewUnaryHandler(
		AssetManagerServiceQueryAssetsProcedure,
		svc.QueryAssets,
		connect.WithSchema(assetManagerServiceQueryAssetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deploy.assetmanagerd.v1.AssetManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssetManagerServiceUploadAssetProcedure:
			assetManagerServiceUploadAssetHandler.ServeHTTP(w, r)
		case AssetManagerServiceRegisterAssetProcedure:
			assetManagerServiceRegisterAssetHandler.ServeHTTP(w, r)
		case AssetManagerServiceGetAssetProcedure:
			assetManagerServiceGetAssetHandler.ServeHTTP(w, r)
		case AssetManagerServiceListAssetsProcedure:
			assetManagerServiceListAssetsHandler.ServeHTTP(w, r)
		case AssetManagerServiceAcquireAssetProcedure:
			assetManagerServiceAcquireAssetHandler.ServeHTTP(w, r)
		case AssetManagerServiceReleaseAssetProcedure:
			assetManagerServiceReleaseAssetHandler.ServeHTTP(w, r)
		case AssetManagerServiceDeleteAssetProcedure:
			assetManagerServiceDeleteAssetHandler.ServeHTTP(w, r)
		case AssetManagerServiceGarbageCollectProcedure:
			assetManagerServiceGarbageCollectHandler.ServeHTTP(w, r)
		case AssetManagerServicePrepareAssetsProcedure:
			assetManagerServicePrepareAssetsHandler.ServeHTTP(w, r)
		case AssetManagerServiceQueryAssetsProcedure:
			assetManagerServiceQueryAssetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssetManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAssetManagerServiceHandler struct{}

func (UnimplementedAssetManagerServiceHandler) UploadAsset(context.Context, *connect.ClientStream[v1.UploadAssetRequest]) (*connect.Response[v1.UploadAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.UploadAsset is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) RegisterAsset(context.Context, *connect.Request[v1.RegisterAssetRequest]) (*connect.Response[v1.RegisterAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.RegisterAsset is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) GetAsset(context.Context, *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.GetAsset is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) ListAssets(context.Context, *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.ListAssets is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) AcquireAsset(context.Context, *connect.Request[v1.AcquireAssetRequest]) (*connect.Response[v1.AcquireAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.AcquireAsset is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) ReleaseAsset(context.Context, *connect.Request[v1.ReleaseAssetRequest]) (*connect.Response[v1.ReleaseAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.ReleaseAsset is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) DeleteAsset(context.Context, *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.DeleteAsset is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) GarbageCollect(context.Context, *connect.Request[v1.GarbageCollectRequest]) (*connect.Response[v1.GarbageCollectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.GarbageCollect is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) PrepareAssets(context.Context, *connect.Request[v1.PrepareAssetsRequest]) (*connect.Response[v1.PrepareAssetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.PrepareAssets is not implemented"))
}

func (UnimplementedAssetManagerServiceHandler) QueryAssets(context.Context, *connect.Request[v1.QueryAssetsRequest]) (*connect.Response[v1.QueryAssetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deploy.assetmanagerd.v1.AssetManagerService.QueryAssets is not implemented"))
}
