# SPIRE Agent Configuration
# AIDEV-NOTE: Agent runs on each host to provide SVID identities to workloads
# Communicates with SPIRE server to obtain and rotate certificates

agent {
  data_dir = "/var/lib/spire/agent/data"
  log_level = "${UNKEY_SPIRE_LOG_LEVEL:-INFO}"
  log_format = "json"
  
  # AIDEV-NOTE: Server connection configuration
  # Agent connects to server via HTTPS
  server_address = "${UNKEY_SPIRE_SERVER_URL:-https://localhost:8085}"
  socket_path = "/var/lib/spire/agent/agent.sock"
  
  # AIDEV-NOTE: Trust domain from environment
  trust_domain = "${UNKEY_SPIRE_TRUST_DOMAIN:-development.unkey.app}"
  
  # AIDEV-SECURITY: Bootstrap bundle for initial trust
  # This file must be distributed securely to agents
  trust_bundle_path = "/etc/spire/agent/bundle.crt"
  
  # AIDEV-NOTE: Workload API configuration
  # Allow workloads to request SVIDs without authentication
  # Security comes from workload attestation
  authorized_delegates = []
  
  # AIDEV-SECURITY: Admin API disabled by default
  # Enable only if needed for debugging
  # admin_socket_path = "/run/spire/agent-admin.sock"
  
  # AIDEV-NOTE: Sync interval for bundle updates
  sync_interval = "30s"
  
  # AIDEV-SECURITY: Limit concurrent attestations
  max_concurrent_attestations = 10
}

plugins {
  # AIDEV-NOTE: Join token attestation for auto-join
  # Production should use platform-specific attestors (aws_iid, gcp_iit, etc.)
  NodeAttestor "join_token" {
    plugin_data {
      # Token provided via UNKEY_SPIRE_JOIN_TOKEN environment variable
      # Enables automatic joining on startup
    }
  }
  
  # AIDEV-NOTE: Disk-based key storage
  # Keys are automatically rotated by SPIRE
  KeyManager "disk" {
    plugin_data {
      directory = "/var/lib/spire/agent/keys"
    }
  }
  
  # AIDEV-NOTE: Unix workload attestor for process-based identity
  # Essential for identifying workloads by binary path and user
  WorkloadAttestor "unix" {
    plugin_data {
      discover_workload_path = true
      discover_workload_user = true
      discover_workload_group = true
    }
  }
  
  # AIDEV-NOTE: Systemd attestor for service-based identity
  # Critical for identifying systemd-managed services
  WorkloadAttestor "systemd" {
    plugin_data {
      # Enable PID tracking for accurate service identification
      pid_path = "/run/spire/systemd-pids"
    }
  }
  
  # AIDEV-SECURITY: Authorize based on SPIFFE ID
  # Only workloads from same trust domain can connect
  SVIDStore "aws_secretsmanager" {
    plugin_data {
      # Optional: Store SVIDs in AWS Secrets Manager for backup
      # region = "${AWS_REGION}"
      # secret_prefix = "spire/svids/"
    }
  }
}

health_checks {
  listener_enabled = true
  # AIDEV-SECURITY: Health checks on localhost only
  bind_address = "127.0.0.1"
  bind_port = "9990"  # AIDEV-NOTE: Health checks in 9xxx range like metrics
  live_path = "/live"
  ready_path = "/ready"
}

# AIDEV-NOTE: Telemetry for monitoring agent health
telemetry {
  Prometheus {
    host = "127.0.0.1"
    port = 9989
  }
  
  # AIDEV-TODO: Add service labels for better observability
  # metric_labels = [{service = "spire-agent"}]
}