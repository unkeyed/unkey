# SPIRE Server Configuration
# AIDEV-NOTE: Static configuration for development
# For production, use the template with preprocess-config.sh

server {
  # AIDEV-SECURITY: Bind to localhost only for security
  # External access should be through a reverse proxy with TLS
  bind_address = "0.0.0.0"
  bind_port = "8085"  # AIDEV-NOTE: Changed from 8081 to avoid conflict with billaged
  socket_path = "/run/spire/server.sock"

  # AIDEV-NOTE: Development trust domain
  trust_domain = "development.unkey.app"

  data_dir = "/var/lib/spire/server/data"
  log_level = "DEBUG"
  log_format = "json"

  # AIDEV-SECURITY: CA configuration with reasonable defaults
  ca_key_type = "ec-p256"
  ca_ttl = "8760h" # 1 year - balance between security and operational overhead

  # AIDEV-NOTE: Default SVID TTL - can be overridden per workload
  default_x509_svid_ttl = "1h"
  default_jwt_svid_ttl = "5m"

  # JWT configuration
  jwt_issuer = "https://development.unkey.app/spire"

  # AIDEV-SECURITY: Audit log for compliance
  audit_log_enabled = true
}

plugins {
  # AIDEV-NOTE: SQLite for development/staging, PostgreSQL for production
  DataStore "sql" {
    plugin_data {
      database_type = "sqlite3"
      connection_string = "/var/lib/spire/server/data/datastore.sqlite3"

      # Connection pool settings
      max_open_conns = 20
      max_idle_conns = 10
      conn_max_lifetime = "300s"
    }
  }

  # AIDEV-NOTE: Disk key manager for dev/staging
  # Production should use AWS KMS or similar
  KeyManager "disk" {
    plugin_data {
      keys_path = "/var/lib/spire/server/keys/keys.json"
    }
  }

  # AIDEV-NOTE: Join token for initial node attestation
  # Consider aws_iid for production EC2 instances
  NodeAttestor "join_token" {
    plugin_data {
      # Tokens managed dynamically via registration API
    }
  }

}

health_checks {
  listener_enabled = true
  # AIDEV-SECURITY: Health checks on localhost only
  bind_address = "127.0.0.1"
  bind_port = "8080"
  live_path = "/live"
  ready_path = "/ready"
}

# AIDEV-NOTE: Telemetry configuration for monitoring
telemetry {
  Prometheus {
    host = "127.0.0.1"
    port = 9988
  }

  # AIDEV-TODO: Configure metric labels for environment identification
  # metric_labels = [{env = "dev"}]
}
