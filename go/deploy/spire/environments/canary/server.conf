# SPIRE Server Configuration - Canary Environment
# AIDEV-NOTE: Canary settings mirror production but with isolated trust domain

server {
  # AIDEV-SECURITY: Same security posture as production
  bind_address = "127.0.0.1"
  bind_port = "8085"  # AIDEV-NOTE: Changed from 8081 to avoid conflict with billaged
  socket_path = "/var/lib/spire/server/server.sock"
  trust_domain = "canary.unkey.app"
  data_dir = "/var/lib/spire/server/data"
  log_level = "INFO"
  log_format = "json"
  
  # AIDEV-NOTE: Same TTLs as production for realistic testing
  default_x509_svid_ttl = "1h"
  default_jwt_svid_ttl = "5m"
  
  # AIDEV-SECURITY: Separate CA for canary isolation
  ca_ttl = "8760h"
  ca_key_type = "ec-p256"
  ca_subject = {
    country = ["US"],
    organization = ["Unkey"],
    common_name = "Unkey Canary CA",
  }
  
  # AIDEV-SECURITY: Enable audit logging
  audit_log_enabled = true
}

plugins {
  # AIDEV-NOTE: PostgreSQL for production-like behavior
  DataStore "sql" {
    plugin_data {
      database_type = "postgres"
      # AIDEV-NOTE: Separate database from production
      connection_string = "${UNKEY_SPIRE_DB_CONNECTION}"
      
      # Connection pool configuration
      max_open_conns = 20
      max_idle_conns = 10
      conn_max_lifetime = "300s"
    }
  }

  # AIDEV-NOTE: AWS instance identity for EC2 nodes
  NodeAttestor "aws_iid" {
    plugin_data {
      # trust_domain inherited from server config
      account_allowlist = ["${UNKEY_AWS_ACCOUNT_ID}"]
    }
  }

  # AIDEV-NOTE: Join tokens for flexibility
  NodeAttestor "join_token" {
    plugin_data {}
  }

  # AIDEV-SECURITY: AWS KMS with separate keys from production
  KeyManager "aws_kms" {
    plugin_data {
      region = "${AWS_REGION:-us-east-1}"
      key_metadata_file = "/etc/spire/server/kms-keys-canary.json"
    }
  }
}

health_checks {
  listener_enabled = true
  bind_address = "127.0.0.1"
  bind_port = "9991"  # AIDEV-NOTE: Health checks in 9xxx range like metrics
  live_path = "/live"
  ready_path = "/ready"
}

# AIDEV-NOTE: Canary telemetry with environment labels
telemetry {
  Prometheus {
    host = "127.0.0.1"
    port = 9988
  }
  
  metric_labels = [
    {env = "canary"},
    {service = "spire-server"},
    {region = "${AWS_REGION:-us-east-1}"}
  ]
}