# SPIRE Server Configuration - Production Environment
# AIDEV-NOTE: Production-grade settings with HA, security, and monitoring

server {
  # AIDEV-SECURITY: Production should use internal network with TLS termination
  # Consider using a load balancer or service mesh for external access
  bind_address = "127.0.0.1"
  bind_port = "8085"  # AIDEV-NOTE: Changed from 8081 to avoid conflict with billaged
  socket_path = "/var/lib/spire/server/server.sock"
  trust_domain = "prod.unkey.app"
  data_dir = "/var/lib/spire/server/data"
  log_level = "INFO"
  log_format = "json" # Structured logging for production
  
  # AIDEV-NOTE: Production TTLs - balance security and performance
  default_x509_svid_ttl = "1h"
  default_jwt_svid_ttl = "5m"
  
  # AIDEV-SECURITY: 1 year CA TTL for production stability
  ca_ttl = "8760h"
  ca_key_type = "ec-p256"
  ca_subject = {
    country = ["US"],
    organization = ["Unkey"],
    common_name = "Unkey Production CA",
  }
  
  # AIDEV-SECURITY: Enable audit logging for compliance
  audit_log_enabled = true
  
  # AIDEV-NOTE: Federation configuration for multi-region
  # federation {
  #   bundle_endpoint {
  #     address = "https://spire-bundle.unkey.app"
  #     port = 443
  #   }
  # }
}

plugins {
  # AIDEV-NOTE: PostgreSQL for HA and durability
  DataStore "sql" {
    plugin_data {
      database_type = "postgres"
      # AIDEV-SECURITY: Use environment variable for connection string
      connection_string = "${UNKEY_SPIRE_DB_CONNECTION}"
      
      # Connection pool configuration
      max_open_conns = 20
      max_idle_conns = 10
      conn_max_lifetime = "300s"
    }
  }

  # AIDEV-NOTE: AWS instance identity for EC2 nodes
  NodeAttestor "aws_iid" {
    plugin_data {
      # AIDEV-SECURITY: Use IAM role instead of access keys
      # AWS SDK will use instance profile automatically
      # trust_domain inherited from server config
      
      # AIDEV-NOTE: Allowlist specific AWS accounts
      account_allowlist = ["${UNKEY_AWS_ACCOUNT_ID}"]
      
      # AIDEV-SECURITY: Require instance to be in specific VPC
      # instance_allowlist = ["i-*"]
    }
  }

  # AIDEV-NOTE: Join tokens for non-EC2 workloads (containers, on-prem)
  NodeAttestor "join_token" {
    plugin_data {}
  }

  # AIDEV-SECURITY: AWS KMS for hardware-backed key management
  KeyManager "aws_kms" {
    plugin_data {
      region = "${AWS_REGION:-us-east-1}"
      # AIDEV-NOTE: KMS key should have alias for easier management
      key_metadata_file = "/etc/spire/server/kms-keys.json"
      # Uses IAM role, no explicit credentials needed
    }
  }
  
  # AIDEV-NOTE: Optional upstream authority for PKI hierarchy
  # UpstreamAuthority "aws_pca" {
  #   plugin_data {
  #     region = "${AWS_REGION}"
  #     certificate_authority_arn = "${UNKEY_PCA_ARN}"
  #   }
  # }
}

health_checks {
  listener_enabled = true
  # AIDEV-SECURITY: Health checks on internal interface only
  bind_address = "127.0.0.1"
  bind_port = "9991"  # AIDEV-NOTE: Health checks in 9xxx range like metrics
  live_path = "/live"
  ready_path = "/ready"
}

# AIDEV-NOTE: Production telemetry configuration
telemetry {
  Prometheus {
    # AIDEV-SECURITY: Metrics on localhost, scraped by monitoring agent
    host = "127.0.0.1"
    port = 9988
  }
  
  # AIDEV-NOTE: Add service discovery labels
  metric_labels = [
    {env = "prod"},
    {service = "spire-server"},
    {region = "${AWS_REGION:-us-east-1}"}
  ]
  
  # AIDEV-NOTE: DogStatsD for additional metrics
  # DogStatsd = [{
  #   address = "127.0.0.1:8125"
  # }]
}