// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vm_upsert.sql

package db

import (
	"context"
	"database/sql"
)

const upsertVM = `-- name: UpsertVM :exec
INSERT INTO vms (id, deployment_id, region, private_ip, port, cpu_millicores, memory_mb, status, health_status)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
  deployment_id = VALUES(deployment_id),
  region = VALUES(region),
  private_ip = VALUES(private_ip),
  port = VALUES(port),
  cpu_millicores = VALUES(cpu_millicores),
  memory_mb = VALUES(memory_mb),
  status = VALUES(status),
  health_status = VALUES(health_status)
`

type UpsertVMParams struct {
	ID            string          `db:"id"`
	DeploymentID  string          `db:"deployment_id"`
	Region        string          `db:"region"`
	PrivateIp     sql.NullString  `db:"private_ip"`
	Port          sql.NullInt32   `db:"port"`
	CpuMillicores int32           `db:"cpu_millicores"`
	MemoryMb      int32           `db:"memory_mb"`
	Status        VmsStatus       `db:"status"`
	HealthStatus  VmsHealthStatus `db:"health_status"`
}

// UpsertVM
//
//	INSERT INTO vms (id, deployment_id, region, private_ip, port, cpu_millicores, memory_mb, status, health_status)
//	VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
//	ON DUPLICATE KEY UPDATE
//	  deployment_id = VALUES(deployment_id),
//	  region = VALUES(region),
//	  private_ip = VALUES(private_ip),
//	  port = VALUES(port),
//	  cpu_millicores = VALUES(cpu_millicores),
//	  memory_mb = VALUES(memory_mb),
//	  status = VALUES(status),
//	  health_status = VALUES(health_status)
func (q *Queries) UpsertVM(ctx context.Context, db DBTX, arg UpsertVMParams) error {
	_, err := db.ExecContext(ctx, upsertVM,
		arg.ID,
		arg.DeploymentID,
		arg.Region,
		arg.PrivateIp,
		arg.Port,
		arg.CpuMillicores,
		arg.MemoryMb,
		arg.Status,
		arg.HealthStatus,
	)
	return err
}
