// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: vm_upsert.sql

package db

import (
	"context"
	"database/sql"
)

const upsertVM = `-- name: UpsertVM :exec
INSERT INTO vms (id, deployment_id, address, cpu_millicores, memory_mb, status)
VALUES (?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
  deployment_id = VALUES(deployment_id),
  address = VALUES(address),
  cpu_millicores = VALUES(cpu_millicores),
  memory_mb = VALUES(memory_mb),
  status = VALUES(status)
`

type UpsertVMParams struct {
	ID            string         `db:"id"`
	DeploymentID  string         `db:"deployment_id"`
	Address       sql.NullString `db:"address"`
	CpuMillicores int32          `db:"cpu_millicores"`
	MemoryMb      int32          `db:"memory_mb"`
	Status        VmsStatus      `db:"status"`
}

// UpsertVM
//
//	INSERT INTO vms (id, deployment_id, address, cpu_millicores, memory_mb, status)
//	VALUES (?, ?, ?, ?, ?, ?)
//	ON DUPLICATE KEY UPDATE
//	  deployment_id = VALUES(deployment_id),
//	  address = VALUES(address),
//	  cpu_millicores = VALUES(cpu_millicores),
//	  memory_mb = VALUES(memory_mb),
//	  status = VALUES(status)
func (q *Queries) UpsertVM(ctx context.Context, db DBTX, arg UpsertVMParams) error {
	_, err := db.ExecContext(ctx, upsertVM,
		arg.ID,
		arg.DeploymentID,
		arg.Address,
		arg.CpuMillicores,
		arg.MemoryMb,
		arg.Status,
	)
	return err
}
