// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: certificate_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertCertificate = `-- name: InsertCertificate :exec
INSERT INTO certificates (workspace_id, hostname, certificate, encrypted_private_key, created_at)
VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE
workspace_id = VALUES(workspace_id),
hostname = VALUES(hostname),
certificate = VALUES(certificate),
encrypted_private_key = VALUES(encrypted_private_key),
updated_at = ?
`

type InsertCertificateParams struct {
	WorkspaceID         string        `db:"workspace_id"`
	Hostname            string        `db:"hostname"`
	Certificate         string        `db:"certificate"`
	EncryptedPrivateKey string        `db:"encrypted_private_key"`
	CreatedAt           int64         `db:"created_at"`
	UpdatedAt           sql.NullInt64 `db:"updated_at"`
}

// InsertCertificate
//
//	INSERT INTO certificates (workspace_id, hostname, certificate, encrypted_private_key, created_at)
//	VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE
//	workspace_id = VALUES(workspace_id),
//	hostname = VALUES(hostname),
//	certificate = VALUES(certificate),
//	encrypted_private_key = VALUES(encrypted_private_key),
//	updated_at = ?
func (q *Queries) InsertCertificate(ctx context.Context, db DBTX, arg InsertCertificateParams) error {
	_, err := db.ExecContext(ctx, insertCertificate,
		arg.WorkspaceID,
		arg.Hostname,
		arg.Certificate,
		arg.EncryptedPrivateKey,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
