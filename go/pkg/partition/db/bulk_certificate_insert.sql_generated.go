// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertCertificate is the base query for bulk insert
const bulkInsertCertificate = `INSERT INTO certificates (workspace_id, hostname, certificate, encrypted_private_key, created_at) VALUES %s ON DUPLICATE KEY UPDATE
workspace_id = VALUES(workspace_id),
hostname = VALUES(hostname),
certificate = VALUES(certificate),
encrypted_private_key = VALUES(encrypted_private_key),
updated_at = ?`

// InsertCertificates performs bulk insert in a single query
func (q *BulkQueries) InsertCertificates(ctx context.Context, db DBTX, args []InsertCertificateParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "(?, ?, ?, ?, ?)"
	}

	bulkQuery := fmt.Sprintf(bulkInsertCertificate, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.Hostname)
		allArgs = append(allArgs, arg.Certificate)
		allArgs = append(allArgs, arg.EncryptedPrivateKey)
		allArgs = append(allArgs, arg.CreatedAt)
	}

	// Add ON DUPLICATE KEY UPDATE parameters (only once, not per row)
	if len(args) > 0 {
		allArgs = append(allArgs, args[0].UpdatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
