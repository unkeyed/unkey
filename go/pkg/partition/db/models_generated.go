// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type MetalHostsStatus string

const (
	MetalHostsStatusProvisioning MetalHostsStatus = "provisioning"
	MetalHostsStatusActive       MetalHostsStatus = "active"
	MetalHostsStatusDraining     MetalHostsStatus = "draining"
	MetalHostsStatusTerminated   MetalHostsStatus = "terminated"
)

func (e *MetalHostsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MetalHostsStatus(s)
	case string:
		*e = MetalHostsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MetalHostsStatus: %T", src)
	}
	return nil
}

type NullMetalHostsStatus struct {
	MetalHostsStatus MetalHostsStatus
	Valid            bool // Valid is true if MetalHostsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMetalHostsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MetalHostsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MetalHostsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMetalHostsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MetalHostsStatus), nil
}

type VmsHealthStatus string

const (
	VmsHealthStatusUnknown   VmsHealthStatus = "unknown"
	VmsHealthStatusHealthy   VmsHealthStatus = "healthy"
	VmsHealthStatusUnhealthy VmsHealthStatus = "unhealthy"
)

func (e *VmsHealthStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VmsHealthStatus(s)
	case string:
		*e = VmsHealthStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VmsHealthStatus: %T", src)
	}
	return nil
}

type NullVmsHealthStatus struct {
	VmsHealthStatus VmsHealthStatus
	Valid           bool // Valid is true if VmsHealthStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVmsHealthStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VmsHealthStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VmsHealthStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVmsHealthStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VmsHealthStatus), nil
}

type VmsStatus string

const (
	VmsStatusAllocated    VmsStatus = "allocated"
	VmsStatusProvisioning VmsStatus = "provisioning"
	VmsStatusStarting     VmsStatus = "starting"
	VmsStatusRunning      VmsStatus = "running"
	VmsStatusStopping     VmsStatus = "stopping"
	VmsStatusStopped      VmsStatus = "stopped"
	VmsStatusFailed       VmsStatus = "failed"
)

func (e *VmsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VmsStatus(s)
	case string:
		*e = VmsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VmsStatus: %T", src)
	}
	return nil
}

type NullVmsStatus struct {
	VmsStatus VmsStatus
	Valid     bool // Valid is true if VmsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVmsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VmsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VmsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVmsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VmsStatus), nil
}

type Certificate struct {
	ID                  uint64        `db:"id"`
	WorkspaceID         string        `db:"workspace_id"`
	Hostname            string        `db:"hostname"`
	Certificate         string        `db:"certificate"`
	EncryptedPrivateKey string        `db:"encrypted_private_key"`
	CreatedAt           int64         `db:"created_at"`
	UpdatedAt           sql.NullInt64 `db:"updated_at"`
}

type Gateway struct {
	ID       uint64 `db:"id"`
	Hostname string `db:"hostname"`
	Config   []byte `db:"config"`
}

type MetalHost struct {
	ID                     string           `db:"id"`
	Region                 string           `db:"region"`
	AvailabilityZone       string           `db:"availability_zone"`
	InstanceType           string           `db:"instance_type"`
	Ec2InstanceID          string           `db:"ec2_instance_id"`
	PrivateIp              string           `db:"private_ip"`
	Status                 MetalHostsStatus `db:"status"`
	CapacityCpuMillicores  int32            `db:"capacity_cpu_millicores"`
	CapacityMemoryMb       int32            `db:"capacity_memory_mb"`
	AllocatedCpuMillicores int32            `db:"allocated_cpu_millicores"`
	AllocatedMemoryMb      int32            `db:"allocated_memory_mb"`
	LastHeartbeat          int64            `db:"last_heartbeat"`
}

type Vm struct {
	ID            string          `db:"id"`
	DeploymentID  string          `db:"deployment_id"`
	MetalHostID   sql.NullString  `db:"metal_host_id"`
	Region        string          `db:"region"`
	PrivateIp     sql.NullString  `db:"private_ip"`
	Port          sql.NullInt32   `db:"port"`
	CpuMillicores int32           `db:"cpu_millicores"`
	MemoryMb      int32           `db:"memory_mb"`
	Status        VmsStatus       `db:"status"`
	HealthStatus  VmsHealthStatus `db:"health_status"`
	LastHeartbeat sql.NullInt64   `db:"last_heartbeat"`
}
