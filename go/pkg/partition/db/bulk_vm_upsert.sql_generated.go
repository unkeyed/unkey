// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkUpsertVM is the base query for bulk insert
const bulkUpsertVM = `INSERT INTO vms (id, deployment_id, address, cpu_millicores, memory_mb, status) VALUES %s ON DUPLICATE KEY UPDATE
  deployment_id = VALUES(deployment_id),
  address = VALUES(address),
  cpu_millicores = VALUES(cpu_millicores),
  memory_mb = VALUES(memory_mb),
  status = VALUES(status)`

// UpsertVM performs bulk insert in a single query
func (q *BulkQueries) UpsertVM(ctx context.Context, db DBTX, args []UpsertVMParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "(?, ?, ?, ?, ?, ?)"
	}

	bulkQuery := fmt.Sprintf(bulkUpsertVM, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.DeploymentID)
		allArgs = append(allArgs, arg.Address)
		allArgs = append(allArgs, arg.CpuMillicores)
		allArgs = append(allArgs, arg.MemoryMb)
		allArgs = append(allArgs, arg.Status)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
