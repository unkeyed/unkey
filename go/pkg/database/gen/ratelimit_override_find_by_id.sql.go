// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ratelimit_override_find_by_id.sql

package gen

import (
	"context"
)

const findRatelimitOverridesById = `-- name: FindRatelimitOverridesById :one
SELECT id, workspace_id, namespace_id, identifier, ` + "`" + `limit` + "`" + `, duration, async, sharding, created_at, updated_at, deleted_at FROM ratelimit_overrides
WHERE
    workspace_id = ?
    AND id = ?
`

type FindRatelimitOverridesByIdParams struct {
	WorkspaceID string `db:"workspace_id"`
	OverrideID  string `db:"override_id"`
}

// FindRatelimitOverridesById
//
//	SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at, updated_at, deleted_at FROM ratelimit_overrides
//	WHERE
//	    workspace_id = ?
//	    AND id = ?
func (q *Queries) FindRatelimitOverridesById(ctx context.Context, arg FindRatelimitOverridesByIdParams) (RatelimitOverride, error) {
	row := q.db.QueryRowContext(ctx, findRatelimitOverridesById, arg.WorkspaceID, arg.OverrideID)
	var i RatelimitOverride
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.NamespaceID,
		&i.Identifier,
		&i.Limit,
		&i.Duration,
		&i.Async,
		&i.Sharding,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
