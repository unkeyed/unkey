// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: keys_find_without_credits.sql

package db

import (
	"context"
	"database/sql"
)

const findKeysWithoutCredits = `-- name: FindKeysWithoutCredits :many
SELECT 
    k.id,
    k.workspace_id,
    k.remaining_requests,
    k.refill_day,
    k.refill_amount,
    CASE 
        WHEN k.last_refill_at IS NULL THEN NULL 
        ELSE UNIX_TIMESTAMP(k.last_refill_at) * 1000 
    END as last_refill_at_unix,
    k.created_at_m,
    k.updated_at_m
FROM ` + "`" + `keys` + "`" + ` k
LEFT JOIN ` + "`" + `credits` + "`" + ` c ON c.key_id = k.id
WHERE k.deleted_at_m IS NULL
    AND k.remaining_requests IS NOT NULL
    AND c.id IS NULL
ORDER BY k.created_at_m DESC
LIMIT ?
OFFSET ?
`

type FindKeysWithoutCreditsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

type FindKeysWithoutCreditsRow struct {
	ID                string        `db:"id"`
	WorkspaceID       string        `db:"workspace_id"`
	RemainingRequests sql.NullInt32 `db:"remaining_requests"`
	RefillDay         sql.NullInt16 `db:"refill_day"`
	RefillAmount      sql.NullInt32 `db:"refill_amount"`
	LastRefillAtUnix  interface{}   `db:"last_refill_at_unix"`
	CreatedAtM        int64         `db:"created_at_m"`
	UpdatedAtM        sql.NullInt64 `db:"updated_at_m"`
}

// FindKeysWithoutCredits
//
//	SELECT
//	    k.id,
//	    k.workspace_id,
//	    k.remaining_requests,
//	    k.refill_day,
//	    k.refill_amount,
//	    CASE
//	        WHEN k.last_refill_at IS NULL THEN NULL
//	        ELSE UNIX_TIMESTAMP(k.last_refill_at) * 1000
//	    END as last_refill_at_unix,
//	    k.created_at_m,
//	    k.updated_at_m
//	FROM `keys` k
//	LEFT JOIN `credits` c ON c.key_id = k.id
//	WHERE k.deleted_at_m IS NULL
//	    AND k.remaining_requests IS NOT NULL
//	    AND c.id IS NULL
//	ORDER BY k.created_at_m DESC
//	LIMIT ?
//	OFFSET ?
func (q *Queries) FindKeysWithoutCredits(ctx context.Context, db DBTX, arg FindKeysWithoutCreditsParams) ([]FindKeysWithoutCreditsRow, error) {
	rows, err := db.QueryContext(ctx, findKeysWithoutCredits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindKeysWithoutCreditsRow
	for rows.Next() {
		var i FindKeysWithoutCreditsRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.RemainingRequests,
			&i.RefillDay,
			&i.RefillAmount,
			&i.LastRefillAtUnix,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
