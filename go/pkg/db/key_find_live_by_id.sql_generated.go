// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_find_live_by_id.sql

package db

import (
	"context"
	"database/sql"
)

const findLiveKeyByID = `-- name: FindLiveKeyByID :one
SELECT
    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
    a.id, a.name, a.workspace_id, a.ip_whitelist, a.auth_type, a.key_auth_id, a.created_at_m, a.updated_at_m, a.deleted_at_m, a.delete_protection,
    ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at,
    ws.id, ws.org_id, ws.name, ws.partition_id, ws.plan, ws.tier, ws.stripe_customer_id, ws.stripe_subscription_id, ws.beta_features, ws.features, ws.subscriptions, ws.enabled, ws.delete_protection, ws.created_at_m, ws.updated_at_m, ws.deleted_at_m,
    i.id as identity_table_id,
    i.external_id as identity_external_id,
    i.meta as identity_meta,
    ek.encrypted as encrypted_key,
    ek.encryption_key_id as encryption_key_id,

    -- Roles with both IDs and names
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', r.id,
                'name', r.name,
                'description', r.description
            )
        )
        FROM keys_roles kr
        JOIN roles r ON r.id = kr.role_id
        WHERE kr.key_id = k.id),
        JSON_ARRAY()
    ) as roles,

    -- Direct permissions attached to the key
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', p.id,
                'name', p.name,
                'slug', p.slug,
                'description', p.description
            )
        )
        FROM keys_permissions kp
        JOIN permissions p ON kp.permission_id = p.id
        WHERE kp.key_id = k.id),
        JSON_ARRAY()
    ) as permissions,

    -- Permissions from roles
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', p.id,
                'name', p.name,
                'slug', p.slug,
                'description', p.description
            )
        )
        FROM keys_roles kr
        JOIN roles_permissions rp ON kr.role_id = rp.role_id
        JOIN permissions p ON rp.permission_id = p.id
        WHERE kr.key_id = k.id),
        JSON_ARRAY()
    ) as role_permissions,

    -- Rate limits
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', rl.id,
                'name', rl.name,
                'key_id', rl.key_id,
                'identity_id', rl.identity_id,
                'limit', rl.` + "`" + `limit` + "`" + `,
                'duration', rl.duration,
                'auto_apply', rl.auto_apply = 1
            )
        )
        FROM ratelimits rl
        WHERE rl.key_id = k.id
            OR rl.identity_id = i.id),
        JSON_ARRAY()
    ) as ratelimits

FROM ` + "`" + `keys` + "`" + ` k
JOIN apis a ON a.key_auth_id = k.key_auth_id
JOIN key_auth ka ON ka.id = k.key_auth_id
JOIN workspaces ws ON ws.id = k.workspace_id
LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = false
LEFT JOIN encrypted_keys ek ON ek.key_id = k.id
WHERE k.id = ?
    AND k.deleted_at_m IS NULL
    AND a.deleted_at_m IS NULL
    AND ka.deleted_at_m IS NULL
    AND ws.deleted_at_m IS NULL
`

type FindLiveKeyByIDRow struct {
	ID                 string         `db:"id"`
	KeyAuthID          string         `db:"key_auth_id"`
	Hash               string         `db:"hash"`
	Start              string         `db:"start"`
	WorkspaceID        string         `db:"workspace_id"`
	ForWorkspaceID     sql.NullString `db:"for_workspace_id"`
	Name               sql.NullString `db:"name"`
	OwnerID            sql.NullString `db:"owner_id"`
	IdentityID         sql.NullString `db:"identity_id"`
	Meta               sql.NullString `db:"meta"`
	Expires            sql.NullTime   `db:"expires"`
	CreatedAtM         int64          `db:"created_at_m"`
	UpdatedAtM         sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM         sql.NullInt64  `db:"deleted_at_m"`
	RefillDay          sql.NullInt16  `db:"refill_day"`
	RefillAmount       sql.NullInt32  `db:"refill_amount"`
	LastRefillAt       sql.NullTime   `db:"last_refill_at"`
	Enabled            bool           `db:"enabled"`
	RemainingRequests  sql.NullInt32  `db:"remaining_requests"`
	RatelimitAsync     sql.NullBool   `db:"ratelimit_async"`
	RatelimitLimit     sql.NullInt32  `db:"ratelimit_limit"`
	RatelimitDuration  sql.NullInt64  `db:"ratelimit_duration"`
	Environment        sql.NullString `db:"environment"`
	Api                Api            `db:"api"`
	KeyAuth            KeyAuth        `db:"key_auth"`
	Workspace          Workspace      `db:"workspace"`
	IdentityTableID    sql.NullString `db:"identity_table_id"`
	IdentityExternalID sql.NullString `db:"identity_external_id"`
	IdentityMeta       []byte         `db:"identity_meta"`
	EncryptedKey       sql.NullString `db:"encrypted_key"`
	EncryptionKeyID    sql.NullString `db:"encryption_key_id"`
	Roles              interface{}    `db:"roles"`
	Permissions        interface{}    `db:"permissions"`
	RolePermissions    interface{}    `db:"role_permissions"`
	Ratelimits         interface{}    `db:"ratelimits"`
}

// FindLiveKeyByID
//
//	SELECT
//	    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
//	    a.id, a.name, a.workspace_id, a.ip_whitelist, a.auth_type, a.key_auth_id, a.created_at_m, a.updated_at_m, a.deleted_at_m, a.delete_protection,
//	    ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at,
//	    ws.id, ws.org_id, ws.name, ws.partition_id, ws.plan, ws.tier, ws.stripe_customer_id, ws.stripe_subscription_id, ws.beta_features, ws.features, ws.subscriptions, ws.enabled, ws.delete_protection, ws.created_at_m, ws.updated_at_m, ws.deleted_at_m,
//	    i.id as identity_table_id,
//	    i.external_id as identity_external_id,
//	    i.meta as identity_meta,
//	    ek.encrypted as encrypted_key,
//	    ek.encryption_key_id as encryption_key_id,
//
//	    -- Roles with both IDs and names
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', r.id,
//	                'name', r.name,
//	                'description', r.description
//	            )
//	        )
//	        FROM keys_roles kr
//	        JOIN roles r ON r.id = kr.role_id
//	        WHERE kr.key_id = k.id),
//	        JSON_ARRAY()
//	    ) as roles,
//
//	    -- Direct permissions attached to the key
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', p.id,
//	                'name', p.name,
//	                'slug', p.slug,
//	                'description', p.description
//	            )
//	        )
//	        FROM keys_permissions kp
//	        JOIN permissions p ON kp.permission_id = p.id
//	        WHERE kp.key_id = k.id),
//	        JSON_ARRAY()
//	    ) as permissions,
//
//	    -- Permissions from roles
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', p.id,
//	                'name', p.name,
//	                'slug', p.slug,
//	                'description', p.description
//	            )
//	        )
//	        FROM keys_roles kr
//	        JOIN roles_permissions rp ON kr.role_id = rp.role_id
//	        JOIN permissions p ON rp.permission_id = p.id
//	        WHERE kr.key_id = k.id),
//	        JSON_ARRAY()
//	    ) as role_permissions,
//
//	    -- Rate limits
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', rl.id,
//	                'name', rl.name,
//	                'key_id', rl.key_id,
//	                'identity_id', rl.identity_id,
//	                'limit', rl.`limit`,
//	                'duration', rl.duration,
//	                'auto_apply', rl.auto_apply = 1
//	            )
//	        )
//	        FROM ratelimits rl
//	        WHERE rl.key_id = k.id
//	            OR rl.identity_id = i.id),
//	        JSON_ARRAY()
//	    ) as ratelimits
//
//	FROM `keys` k
//	JOIN apis a ON a.key_auth_id = k.key_auth_id
//	JOIN key_auth ka ON ka.id = k.key_auth_id
//	JOIN workspaces ws ON ws.id = k.workspace_id
//	LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = false
//	LEFT JOIN encrypted_keys ek ON ek.key_id = k.id
//	WHERE k.id = ?
//	    AND k.deleted_at_m IS NULL
//	    AND a.deleted_at_m IS NULL
//	    AND ka.deleted_at_m IS NULL
//	    AND ws.deleted_at_m IS NULL
func (q *Queries) FindLiveKeyByID(ctx context.Context, db DBTX, id string) (FindLiveKeyByIDRow, error) {
	row := db.QueryRowContext(ctx, findLiveKeyByID, id)
	var i FindLiveKeyByIDRow
	err := row.Scan(
		&i.ID,
		&i.KeyAuthID,
		&i.Hash,
		&i.Start,
		&i.WorkspaceID,
		&i.ForWorkspaceID,
		&i.Name,
		&i.OwnerID,
		&i.IdentityID,
		&i.Meta,
		&i.Expires,
		&i.CreatedAtM,
		&i.UpdatedAtM,
		&i.DeletedAtM,
		&i.RefillDay,
		&i.RefillAmount,
		&i.LastRefillAt,
		&i.Enabled,
		&i.RemainingRequests,
		&i.RatelimitAsync,
		&i.RatelimitLimit,
		&i.RatelimitDuration,
		&i.Environment,
		&i.Api.ID,
		&i.Api.Name,
		&i.Api.WorkspaceID,
		&i.Api.IpWhitelist,
		&i.Api.AuthType,
		&i.Api.KeyAuthID,
		&i.Api.CreatedAtM,
		&i.Api.UpdatedAtM,
		&i.Api.DeletedAtM,
		&i.Api.DeleteProtection,
		&i.KeyAuth.ID,
		&i.KeyAuth.WorkspaceID,
		&i.KeyAuth.CreatedAtM,
		&i.KeyAuth.UpdatedAtM,
		&i.KeyAuth.DeletedAtM,
		&i.KeyAuth.StoreEncryptedKeys,
		&i.KeyAuth.DefaultPrefix,
		&i.KeyAuth.DefaultBytes,
		&i.KeyAuth.SizeApprox,
		&i.KeyAuth.SizeLastUpdatedAt,
		&i.Workspace.ID,
		&i.Workspace.OrgID,
		&i.Workspace.Name,
		&i.Workspace.PartitionID,
		&i.Workspace.Plan,
		&i.Workspace.Tier,
		&i.Workspace.StripeCustomerID,
		&i.Workspace.StripeSubscriptionID,
		&i.Workspace.BetaFeatures,
		&i.Workspace.Features,
		&i.Workspace.Subscriptions,
		&i.Workspace.Enabled,
		&i.Workspace.DeleteProtection,
		&i.Workspace.CreatedAtM,
		&i.Workspace.UpdatedAtM,
		&i.Workspace.DeletedAtM,
		&i.IdentityTableID,
		&i.IdentityExternalID,
		&i.IdentityMeta,
		&i.EncryptedKey,
		&i.EncryptionKeyID,
		&i.Roles,
		&i.Permissions,
		&i.RolePermissions,
		&i.Ratelimits,
	)
	return i, err
}
