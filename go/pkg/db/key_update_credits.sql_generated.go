// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_update_credits.sql

package db

import (
	"context"
	"database/sql"
)

const updateKeyCredits = `-- name: UpdateKeyCredits :exec
UPDATE ` + "`" + `keys` + "`" + `
SET remaining_requests =
CASE
    WHEN ? = 'set' THEN ?
    WHEN ? = 'increment' THEN remaining_requests + ?
    WHEN ? = 'decrement' AND remaining_requests - ? > 0 THEN remaining_requests - ?
    WHEN ? = 'decrement' AND remaining_requests - ? <= 0 THEN 0
END
WHERE id = ?
`

type UpdateKeyCreditsParams struct {
	Operation interface{}   `db:"operation"`
	Credits   sql.NullInt32 `db:"credits"`
	ID        string        `db:"id"`
}

// UpdateKeyCredits
//
//	UPDATE `keys`
//	SET remaining_requests =
//	CASE
//	    WHEN ? = 'set' THEN ?
//	    WHEN ? = 'increment' THEN remaining_requests + ?
//	    WHEN ? = 'decrement' AND remaining_requests - ? > 0 THEN remaining_requests - ?
//	    WHEN ? = 'decrement' AND remaining_requests - ? <= 0 THEN 0
//	END
//	WHERE id = ?
func (q *Queries) UpdateKeyCredits(ctx context.Context, db DBTX, arg UpdateKeyCreditsParams) error {
	_, err := db.ExecContext(ctx, updateKeyCredits,
		arg.Operation,
		arg.Credits,
		arg.Operation,
		arg.Credits,
		arg.Operation,
		arg.Credits,
		arg.Credits,
		arg.Operation,
		arg.Credits,
		arg.ID,
	)
	return err
}
