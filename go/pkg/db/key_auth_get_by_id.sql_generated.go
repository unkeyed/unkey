// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_auth_get_by_id.sql

package db

import (
	"context"
	"database/sql"
)

const getKeyAuthByID = `-- name: GetKeyAuthByID :one
SELECT
    id,
    workspace_id,
    created_at_m,
    default_prefix,
    default_bytes,
    store_encrypted_keys
FROM key_auth
WHERE id = ?
  AND deleted_at_m IS NULL
`

type GetKeyAuthByIDRow struct {
	ID                 string         `db:"id"`
	WorkspaceID        string         `db:"workspace_id"`
	CreatedAtM         int64          `db:"created_at_m"`
	DefaultPrefix      sql.NullString `db:"default_prefix"`
	DefaultBytes       sql.NullInt32  `db:"default_bytes"`
	StoreEncryptedKeys bool           `db:"store_encrypted_keys"`
}

// GetKeyAuthByID
//
//	SELECT
//	    id,
//	    workspace_id,
//	    created_at_m,
//	    default_prefix,
//	    default_bytes,
//	    store_encrypted_keys
//	FROM key_auth
//	WHERE id = ?
//	  AND deleted_at_m IS NULL
func (q *Queries) GetKeyAuthByID(ctx context.Context, db DBTX, id string) (GetKeyAuthByIDRow, error) {
	row := db.QueryRowContext(ctx, getKeyAuthByID, id)
	var i GetKeyAuthByIDRow
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CreatedAtM,
		&i.DefaultPrefix,
		&i.DefaultBytes,
		&i.StoreEncryptedKeys,
	)
	return i, err
}
