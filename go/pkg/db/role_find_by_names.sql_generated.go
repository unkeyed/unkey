// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role_find_by_names.sql

package db

import (
	"context"
	"strings"
)

const findRolesByNames = `-- name: FindRolesByNames :many
SELECT id, name FROM roles WHERE workspace_id = ? AND name IN (/*SLICE:names*/?)
`

type FindRolesByNamesParams struct {
	WorkspaceID string   `db:"workspace_id"`
	Names       []string `db:"names"`
}

type FindRolesByNamesRow struct {
	ID   string `db:"id"`
	Name string `db:"name"`
}

// FindRolesByNames
//
//	SELECT id, name FROM roles WHERE workspace_id = ? AND name IN (/*SLICE:names*/?)
func (q *Queries) FindRolesByNames(ctx context.Context, db DBTX, arg FindRolesByNamesParams) ([]FindRolesByNamesRow, error) {
	query := findRolesByNames
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.Names) > 0 {
		for _, v := range arg.Names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(arg.Names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindRolesByNamesRow
	for rows.Next() {
		var i FindRolesByNamesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
