// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role_list.sql

package db

import (
	"context"
)

const listRoles = `-- name: ListRoles :many
SELECT r.id, r.workspace_id, r.name, r.description, r.created_at_m, r.updated_at_m
FROM roles r
WHERE r.workspace_id = ?
  AND r.id > ?
ORDER BY r.id
LIMIT 101
`

type ListRolesParams struct {
	WorkspaceID string `db:"workspace_id"`
	IDCursor    string `db:"id_cursor"`
}

// ListRoles
//
//	SELECT r.id, r.workspace_id, r.name, r.description, r.created_at_m, r.updated_at_m
//	FROM roles r
//	WHERE r.workspace_id = ?
//	  AND r.id > ?
//	ORDER BY r.id
//	LIMIT 101
func (q *Queries) ListRoles(ctx context.Context, db DBTX, arg ListRolesParams) ([]Role, error) {
	rows, err := db.QueryContext(ctx, listRoles, arg.WorkspaceID, arg.IDCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.Description,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
