// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clickhouse_workspace_settings_find_by_workspace_id.sql

package db

import (
	"context"
)

const findClickhouseWorkspaceSettingsByWorkspaceID = `-- name: FindClickhouseWorkspaceSettingsByWorkspaceID :one
SELECT workspace_id, username, password_encrypted, quota_duration_seconds, max_queries_per_window, max_execution_time_per_window, max_query_execution_time, max_query_memory_bytes, max_query_result_rows, max_rows_to_read, created_at, updated_at FROM ` + "`" + `clickhouse_workspace_settings` + "`" + `
WHERE workspace_id = ?
`

// FindClickhouseWorkspaceSettingsByWorkspaceID
//
//	SELECT workspace_id, username, password_encrypted, quota_duration_seconds, max_queries_per_window, max_execution_time_per_window, max_query_execution_time, max_query_memory_bytes, max_query_result_rows, max_rows_to_read, created_at, updated_at FROM `clickhouse_workspace_settings`
//	WHERE workspace_id = ?
func (q *Queries) FindClickhouseWorkspaceSettingsByWorkspaceID(ctx context.Context, db DBTX, workspaceID string) (ClickhouseWorkspaceSetting, error) {
	row := db.QueryRowContext(ctx, findClickhouseWorkspaceSettingsByWorkspaceID, workspaceID)
	var i ClickhouseWorkspaceSetting
	err := row.Scan(
		&i.WorkspaceID,
		&i.Username,
		&i.PasswordEncrypted,
		&i.QuotaDurationSeconds,
		&i.MaxQueriesPerWindow,
		&i.MaxExecutionTimePerWindow,
		&i.MaxQueryExecutionTime,
		&i.MaxQueryMemoryBytes,
		&i.MaxQueryResultRows,
		&i.MaxRowsToRead,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
