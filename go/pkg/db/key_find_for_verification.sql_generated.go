// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_find_for_verification.sql

package db

import (
	"context"
	"database/sql"
)

const findKeyForVerification = `-- name: FindKeyForVerification :one
select k.id,
       k.key_auth_id,
       k.workspace_id,
       k.for_workspace_id,
       k.name,
       k.meta,
       k.expires,
       k.deleted_at_m,
       k.refill_day,
       k.refill_amount,
       k.last_refill_at,
       k.enabled,
       k.remaining_requests,
       a.ip_whitelist,
       a.id as api_id,
       a.deleted_at_m as api_deleted_at_m,

       COALESCE(
          (SELECT JSON_ARRAYAGG(name)
                 FROM (SELECT name
                       FROM keys_roles kr
                                JOIN roles r ON r.id = kr.role_id
                       WHERE kr.key_id = k.id) as roles),
                JSON_ARRAY()
       ) as roles,

       COALESCE((SELECT JSON_ARRAYAGG(slug)
                 FROM (SELECT slug
                       FROM keys_permissions kp
                                JOIN permissions p ON kp.permission_id = p.id
                       WHERE kp.key_id = k.id) as direct_perms
                 UNION ALL
                 SELECT slug
                 FROM (SELECT slug
                       FROM keys_roles kr
                                JOIN roles_permissions rp ON kr.role_id = rp.role_id
                                JOIN permissions p ON rp.permission_id = p.id
                       WHERE kr.key_id = k.id) as role_permissions),
                JSON_ARRAY()
       ) as perms,

       coalesce(
               (select json_arrayagg(json_array(rl.id, rl.name, rl.key_id, rl.identity_id, rl.limit, rl.duration, rl.auto_apply))
                from ` + "`" + `ratelimits` + "`" + ` rl
                where rl.key_id = k.id
                   OR rl.identity_id = i.id),
               json_array()
       ) as ` + "`" + `ratelimits` + "`" + `,

       i.external_id,
       i.meta as identity_meta,
       ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at,
       ws.enabled as workspace_enabled,
       fws.enabled as for_workspace_enabled
from ` + "`" + `keys` + "`" + ` k
        JOIN apis a USING(key_auth_id)
        LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = 0
        JOIN key_auth ka ON ka.id = k.key_auth_id
        JOIN workspaces ws ON ws.id = k.workspace_id
        LEFT JOIN workspaces fws ON fws.id = k.for_workspace_id
where k.hash = ?
  and k.deleted_at_m is null
`

type FindKeyForVerificationRow struct {
	ID                  string         `db:"id"`
	KeyAuthID           string         `db:"key_auth_id"`
	WorkspaceID         string         `db:"workspace_id"`
	ForWorkspaceID      sql.NullString `db:"for_workspace_id"`
	Name                sql.NullString `db:"name"`
	Meta                sql.NullString `db:"meta"`
	Expires             sql.NullTime   `db:"expires"`
	DeletedAtM          sql.NullInt64  `db:"deleted_at_m"`
	RefillDay           sql.NullInt16  `db:"refill_day"`
	RefillAmount        sql.NullInt32  `db:"refill_amount"`
	LastRefillAt        sql.NullTime   `db:"last_refill_at"`
	Enabled             bool           `db:"enabled"`
	RemainingRequests   sql.NullInt32  `db:"remaining_requests"`
	IpWhitelist         sql.NullString `db:"ip_whitelist"`
	ApiID               string         `db:"api_id"`
	ApiDeletedAtM       sql.NullInt64  `db:"api_deleted_at_m"`
	Roles               interface{}    `db:"roles"`
	Perms               interface{}    `db:"perms"`
	Ratelimits          interface{}    `db:"ratelimits"`
	ExternalID          sql.NullString `db:"external_id"`
	IdentityMeta        []byte         `db:"identity_meta"`
	KeyAuth             KeyAuth        `db:"key_auth"`
	WorkspaceEnabled    bool           `db:"workspace_enabled"`
	ForWorkspaceEnabled sql.NullBool   `db:"for_workspace_enabled"`
}

// FindKeyForVerification
//
//	select k.id,
//	       k.key_auth_id,
//	       k.workspace_id,
//	       k.for_workspace_id,
//	       k.name,
//	       k.meta,
//	       k.expires,
//	       k.deleted_at_m,
//	       k.refill_day,
//	       k.refill_amount,
//	       k.last_refill_at,
//	       k.enabled,
//	       k.remaining_requests,
//	       a.ip_whitelist,
//	       a.id as api_id,
//	       a.deleted_at_m as api_deleted_at_m,
//
//	       COALESCE(
//	          (SELECT JSON_ARRAYAGG(name)
//	                 FROM (SELECT name
//	                       FROM keys_roles kr
//	                                JOIN roles r ON r.id = kr.role_id
//	                       WHERE kr.key_id = k.id) as roles),
//	                JSON_ARRAY()
//	       ) as roles,
//
//	       COALESCE((SELECT JSON_ARRAYAGG(slug)
//	                 FROM (SELECT slug
//	                       FROM keys_permissions kp
//	                                JOIN permissions p ON kp.permission_id = p.id
//	                       WHERE kp.key_id = k.id) as direct_perms
//	                 UNION ALL
//	                 SELECT slug
//	                 FROM (SELECT slug
//	                       FROM keys_roles kr
//	                                JOIN roles_permissions rp ON kr.role_id = rp.role_id
//	                                JOIN permissions p ON rp.permission_id = p.id
//	                       WHERE kr.key_id = k.id) as role_permissions),
//	                JSON_ARRAY()
//	       ) as perms,
//
//	       coalesce(
//	               (select json_arrayagg(json_array(rl.id, rl.name, rl.key_id, rl.identity_id, rl.limit, rl.duration, rl.auto_apply))
//	                from `ratelimits` rl
//	                where rl.key_id = k.id
//	                   OR rl.identity_id = i.id),
//	               json_array()
//	       ) as `ratelimits`,
//
//	       i.external_id,
//	       i.meta as identity_meta,
//	       ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at,
//	       ws.enabled as workspace_enabled,
//	       fws.enabled as for_workspace_enabled
//	from `keys` k
//	        JOIN apis a USING(key_auth_id)
//	        LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = 0
//	        JOIN key_auth ka ON ka.id = k.key_auth_id
//	        JOIN workspaces ws ON ws.id = k.workspace_id
//	        LEFT JOIN workspaces fws ON fws.id = k.for_workspace_id
//	where k.hash = ?
//	  and k.deleted_at_m is null
func (q *Queries) FindKeyForVerification(ctx context.Context, db DBTX, hash string) (FindKeyForVerificationRow, error) {
	row := db.QueryRowContext(ctx, findKeyForVerification, hash)
	var i FindKeyForVerificationRow
	err := row.Scan(
		&i.ID,
		&i.KeyAuthID,
		&i.WorkspaceID,
		&i.ForWorkspaceID,
		&i.Name,
		&i.Meta,
		&i.Expires,
		&i.DeletedAtM,
		&i.RefillDay,
		&i.RefillAmount,
		&i.LastRefillAt,
		&i.Enabled,
		&i.RemainingRequests,
		&i.IpWhitelist,
		&i.ApiID,
		&i.ApiDeletedAtM,
		&i.Roles,
		&i.Perms,
		&i.Ratelimits,
		&i.ExternalID,
		&i.IdentityMeta,
		&i.KeyAuth.ID,
		&i.KeyAuth.WorkspaceID,
		&i.KeyAuth.CreatedAtM,
		&i.KeyAuth.UpdatedAtM,
		&i.KeyAuth.DeletedAtM,
		&i.KeyAuth.StoreEncryptedKeys,
		&i.KeyAuth.DefaultPrefix,
		&i.KeyAuth.DefaultBytes,
		&i.KeyAuth.SizeApprox,
		&i.KeyAuth.SizeLastUpdatedAt,
		&i.WorkspaceEnabled,
		&i.ForWorkspaceEnabled,
	)
	return i, err
}
