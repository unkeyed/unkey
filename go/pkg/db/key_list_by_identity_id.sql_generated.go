// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_list_by_identity_id.sql

package db

import (
	"context"
	"database/sql"
)

const listKeysByIdentityID = `-- name: ListKeysByIdentityID :many
SELECT id, hash FROM ` + "`" + `keys` + "`" + ` WHERE identity_id = ?
`

type ListKeysByIdentityIDRow struct {
	ID   string `db:"id"`
	Hash string `db:"hash"`
}

// ListKeysByIdentityID
//
//	SELECT id, hash FROM `keys` WHERE identity_id = ?
func (q *Queries) ListKeysByIdentityID(ctx context.Context, db DBTX, identityID sql.NullString) ([]ListKeysByIdentityIDRow, error) {
	rows, err := db.QueryContext(ctx, listKeysByIdentityID, identityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListKeysByIdentityIDRow
	for rows.Next() {
		var i ListKeysByIdentityIDRow
		if err := rows.Scan(&i.ID, &i.Hash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
