// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: identity_insert_ratelimit.sql

package db

import (
	"context"
	"database/sql"
)

const insertIdentityRatelimit = `-- name: InsertIdentityRatelimit :exec
INSERT INTO ` + "`" + `ratelimits` + "`" + ` (
    id,
    workspace_id,
    identity_id,
    name,
    ` + "`" + `limit` + "`" + `,
    duration,
    created_at,
    auto_apply
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
) ON DUPLICATE KEY UPDATE
    name = VALUES(name),
    ` + "`" + `limit` + "`" + ` = VALUES(` + "`" + `limit` + "`" + `),
    duration = VALUES(duration),
    auto_apply = VALUES(auto_apply),
    updated_at = VALUES(created_at)
`

type InsertIdentityRatelimitParams struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	IdentityID  sql.NullString `db:"identity_id"`
	Name        string         `db:"name"`
	Limit       int32          `db:"limit"`
	Duration    int64          `db:"duration"`
	CreatedAt   int64          `db:"created_at"`
	AutoApply   bool           `db:"auto_apply"`
}

// InsertIdentityRatelimit
//
//	INSERT INTO `ratelimits` (
//	    id,
//	    workspace_id,
//	    identity_id,
//	    name,
//	    `limit`,
//	    duration,
//	    created_at,
//	    auto_apply
//	) VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?
//	) ON DUPLICATE KEY UPDATE
//	    name = VALUES(name),
//	    `limit` = VALUES(`limit`),
//	    duration = VALUES(duration),
//	    auto_apply = VALUES(auto_apply),
//	    updated_at = VALUES(created_at)
func (q *Queries) InsertIdentityRatelimit(ctx context.Context, db DBTX, arg InsertIdentityRatelimitParams) error {
	_, err := db.ExecContext(ctx, insertIdentityRatelimit,
		arg.ID,
		arg.WorkspaceID,
		arg.IdentityID,
		arg.Name,
		arg.Limit,
		arg.Duration,
		arg.CreatedAt,
		arg.AutoApply,
	)
	return err
}
