// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identity_find_identities_by_ids.sql

package db

import (
	"context"
	"strings"
)

const findIdentitiesByIds = `-- name: FindIdentitiesByIds :many
SELECT id, external_id
FROM identities
WHERE workspace_id = ?
    AND deleted = ?
    AND id IN (/*SLICE:identities*/?)
`

type FindIdentitiesByIdsParams struct {
	WorkspaceID string   `db:"workspace_id"`
	Deleted     bool     `db:"deleted"`
	Identities  []string `db:"identities"`
}

type FindIdentitiesByIdsRow struct {
	ID         string `db:"id"`
	ExternalID string `db:"external_id"`
}

// FindIdentitiesByIds
//
//	SELECT id, external_id
//	FROM identities
//	WHERE workspace_id = ?
//	    AND deleted = ?
//	    AND id IN (/*SLICE:identities*/?)
func (q *Queries) FindIdentitiesByIds(ctx context.Context, db DBTX, arg FindIdentitiesByIdsParams) ([]FindIdentitiesByIdsRow, error) {
	query := findIdentitiesByIds
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	queryParams = append(queryParams, arg.Deleted)
	if len(arg.Identities) > 0 {
		for _, v := range arg.Identities {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:identities*/?", strings.Repeat(",?", len(arg.Identities))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:identities*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindIdentitiesByIdsRow
	for rows.Next() {
		var i FindIdentitiesByIdsRow
		if err := rows.Scan(&i.ID, &i.ExternalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
