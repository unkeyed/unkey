// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_find_by_id_or_hash.sql

package db

import (
	"context"
	"database/sql"
)

const findKeyByIdOrHash = `-- name: FindKeyByIdOrHash :one
SELECT
    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment, a.id, a.name, a.workspace_id, a.ip_whitelist, a.auth_type, a.key_auth_id, a.created_at_m, a.updated_at_m, a.deleted_at_m, a.delete_protection,
    ek.encrypted as encrypted_key,
	ek.encryption_key_id as encryption_key_id
FROM ` + "`" + `keys` + "`" + ` k
JOIN apis a USING(key_auth_id)
LEFT JOIN encrypted_keys ek ON k.id = ek.key_id
WHERE (CASE
    WHEN ? IS NOT NULL THEN k.id = ?
    WHEN ? IS NOT NULL THEN k.hash = ?
    ELSE FALSE
END) AND k.deleted_at_m IS NULL AND a.deleted_at_m IS NULL
`

type FindKeyByIdOrHashParams struct {
	ID   sql.NullString `db:"id"`
	Hash sql.NullString `db:"hash"`
}

type FindKeyByIdOrHashRow struct {
	ID                string         `db:"id"`
	KeyAuthID         string         `db:"key_auth_id"`
	Hash              string         `db:"hash"`
	Start             string         `db:"start"`
	WorkspaceID       string         `db:"workspace_id"`
	ForWorkspaceID    sql.NullString `db:"for_workspace_id"`
	Name              sql.NullString `db:"name"`
	OwnerID           sql.NullString `db:"owner_id"`
	IdentityID        sql.NullString `db:"identity_id"`
	Meta              sql.NullString `db:"meta"`
	Expires           sql.NullTime   `db:"expires"`
	CreatedAtM        int64          `db:"created_at_m"`
	UpdatedAtM        sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM        sql.NullInt64  `db:"deleted_at_m"`
	RefillDay         sql.NullInt16  `db:"refill_day"`
	RefillAmount      sql.NullInt32  `db:"refill_amount"`
	LastRefillAt      sql.NullTime   `db:"last_refill_at"`
	Enabled           bool           `db:"enabled"`
	RemainingRequests sql.NullInt32  `db:"remaining_requests"`
	RatelimitAsync    sql.NullBool   `db:"ratelimit_async"`
	RatelimitLimit    sql.NullInt32  `db:"ratelimit_limit"`
	RatelimitDuration sql.NullInt64  `db:"ratelimit_duration"`
	Environment       sql.NullString `db:"environment"`
	Api               Api            `db:"api"`
	EncryptedKey      sql.NullString `db:"encrypted_key"`
	EncryptionKeyID   sql.NullString `db:"encryption_key_id"`
}

// FindKeyByIdOrHash
//
//	SELECT
//	    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment, a.id, a.name, a.workspace_id, a.ip_whitelist, a.auth_type, a.key_auth_id, a.created_at_m, a.updated_at_m, a.deleted_at_m, a.delete_protection,
//	    ek.encrypted as encrypted_key,
//		ek.encryption_key_id as encryption_key_id
//	FROM `keys` k
//	JOIN apis a USING(key_auth_id)
//	LEFT JOIN encrypted_keys ek ON k.id = ek.key_id
//	WHERE (CASE
//	    WHEN ? IS NOT NULL THEN k.id = ?
//	    WHEN ? IS NOT NULL THEN k.hash = ?
//	    ELSE FALSE
//	END) AND k.deleted_at_m IS NULL AND a.deleted_at_m IS NULL
func (q *Queries) FindKeyByIdOrHash(ctx context.Context, db DBTX, arg FindKeyByIdOrHashParams) (FindKeyByIdOrHashRow, error) {
	row := db.QueryRowContext(ctx, findKeyByIdOrHash,
		arg.ID,
		arg.ID,
		arg.Hash,
		arg.Hash,
	)
	var i FindKeyByIdOrHashRow
	err := row.Scan(
		&i.ID,
		&i.KeyAuthID,
		&i.Hash,
		&i.Start,
		&i.WorkspaceID,
		&i.ForWorkspaceID,
		&i.Name,
		&i.OwnerID,
		&i.IdentityID,
		&i.Meta,
		&i.Expires,
		&i.CreatedAtM,
		&i.UpdatedAtM,
		&i.DeletedAtM,
		&i.RefillDay,
		&i.RefillAmount,
		&i.LastRefillAt,
		&i.Enabled,
		&i.RemainingRequests,
		&i.RatelimitAsync,
		&i.RatelimitLimit,
		&i.RatelimitDuration,
		&i.Environment,
		&i.Api.ID,
		&i.Api.Name,
		&i.Api.WorkspaceID,
		&i.Api.IpWhitelist,
		&i.Api.AuthType,
		&i.Api.KeyAuthID,
		&i.Api.CreatedAtM,
		&i.Api.UpdatedAtM,
		&i.Api.DeletedAtM,
		&i.Api.DeleteProtection,
		&i.EncryptedKey,
		&i.EncryptionKeyID,
	)
	return i, err
}
