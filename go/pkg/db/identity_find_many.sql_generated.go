// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: identity_find_many.sql

package db

import (
	"context"
	"strings"
)

const findIdentities = `-- name: FindIdentities :many
SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at
FROM identities
WHERE workspace_id = ?
 AND deleted = ?
 AND (external_id IN(/*SLICE:identities*/?) OR id IN (/*SLICE:identities*/?))
`

type FindIdentitiesParams struct {
	WorkspaceID string   `db:"workspace_id"`
	Deleted     bool     `db:"deleted"`
	Identities  []string `db:"identities"`
}

// FindIdentities
//
//	SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at
//	FROM identities
//	WHERE workspace_id = ?
//	 AND deleted = ?
//	 AND (external_id IN(/*SLICE:identities*/?) OR id IN (/*SLICE:identities*/?))
func (q *Queries) FindIdentities(ctx context.Context, db DBTX, arg FindIdentitiesParams) ([]Identity, error) {
	query := findIdentities
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	queryParams = append(queryParams, arg.Deleted)
	if len(arg.Identities) > 0 {
		for _, v := range arg.Identities {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:identities*/?", strings.Repeat(",?", len(arg.Identities))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:identities*/?", "NULL", 1)
	}
	if len(arg.Identities) > 0 {
		for _, v := range arg.Identities {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:identities*/?", strings.Repeat(",?", len(arg.Identities))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:identities*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.WorkspaceID,
			&i.Environment,
			&i.Meta,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
