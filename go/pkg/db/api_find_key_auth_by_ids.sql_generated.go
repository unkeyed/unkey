// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_find_key_auth_by_ids.sql

package db

import (
	"context"
	"strings"
)

const findKeyAuthsByIds = `-- name: FindKeyAuthsByIds :many
SELECT ka.id as key_auth_id, a.id as api_id
FROM apis a
JOIN key_auth as ka ON ka.id = a.key_auth_id
WHERE a.workspace_id = ?
    AND a.id IN (/*SLICE:api_ids*/?)
    AND ka.deleted_at_m IS NULL
    AND a.deleted_at_m IS NULL
`

type FindKeyAuthsByIdsParams struct {
	WorkspaceID string   `db:"workspace_id"`
	ApiIds      []string `db:"api_ids"`
}

type FindKeyAuthsByIdsRow struct {
	KeyAuthID string `db:"key_auth_id"`
	ApiID     string `db:"api_id"`
}

// FindKeyAuthsByIds
//
//	SELECT ka.id as key_auth_id, a.id as api_id
//	FROM apis a
//	JOIN key_auth as ka ON ka.id = a.key_auth_id
//	WHERE a.workspace_id = ?
//	    AND a.id IN (/*SLICE:api_ids*/?)
//	    AND ka.deleted_at_m IS NULL
//	    AND a.deleted_at_m IS NULL
func (q *Queries) FindKeyAuthsByIds(ctx context.Context, db DBTX, arg FindKeyAuthsByIdsParams) ([]FindKeyAuthsByIdsRow, error) {
	query := findKeyAuthsByIds
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.ApiIds) > 0 {
		for _, v := range arg.ApiIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:api_ids*/?", strings.Repeat(",?", len(arg.ApiIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:api_ids*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindKeyAuthsByIdsRow
	for rows.Next() {
		var i FindKeyAuthsByIdsRow
		if err := rows.Scan(&i.KeyAuthID, &i.ApiID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
