// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: domain_challenge_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertDomainChallenge = `-- name: InsertDomainChallenge :exec
INSERT INTO domain_challenges (
    workspace_id,
    domain_id,
    token,
    authorization,
    status,
    created_at,
    updated_at,
    expires_at
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type InsertDomainChallengeParams struct {
	WorkspaceID   string                 `db:"workspace_id"`
	DomainID      string                 `db:"domain_id"`
	Token         sql.NullString         `db:"token"`
	Authorization sql.NullString         `db:"authorization"`
	Status        DomainChallengesStatus `db:"status"`
	CreatedAt     int64                  `db:"created_at"`
	UpdatedAt     sql.NullInt64          `db:"updated_at"`
	ExpiresAt     sql.NullInt64          `db:"expires_at"`
}

// InsertDomainChallenge
//
//	INSERT INTO domain_challenges (
//	    workspace_id,
//	    domain_id,
//	    token,
//	    authorization,
//	    status,
//	    created_at,
//	    updated_at,
//	    expires_at
//	) VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?
//	)
func (q *Queries) InsertDomainChallenge(ctx context.Context, db DBTX, arg InsertDomainChallengeParams) error {
	_, err := db.ExecContext(ctx, insertDomainChallenge,
		arg.WorkspaceID,
		arg.DomainID,
		arg.Token,
		arg.Authorization,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	return err
}
