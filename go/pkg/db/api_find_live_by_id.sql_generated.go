// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: api_find_live_by_id.sql

package db

import (
	"context"
	"database/sql"
)

const findLiveApiByID = `-- name: FindLiveApiByID :one
SELECT apis.id, apis.name, apis.workspace_id, apis.ip_whitelist, apis.auth_type, apis.key_auth_id, apis.created_at_m, apis.updated_at_m, apis.deleted_at_m, apis.delete_protection, ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at
FROM apis
JOIN key_auth as ka ON ka.id = apis.key_auth_id
WHERE apis.id = ?
    AND ka.deleted_at_m IS NULL
    AND apis.deleted_at_m IS NULL
LIMIT 1
`

type FindLiveApiByIDRow struct {
	ID               string           `db:"id"`
	Name             string           `db:"name"`
	WorkspaceID      string           `db:"workspace_id"`
	IpWhitelist      sql.NullString   `db:"ip_whitelist"`
	AuthType         NullApisAuthType `db:"auth_type"`
	KeyAuthID        sql.NullString   `db:"key_auth_id"`
	CreatedAtM       int64            `db:"created_at_m"`
	UpdatedAtM       sql.NullInt64    `db:"updated_at_m"`
	DeletedAtM       sql.NullInt64    `db:"deleted_at_m"`
	DeleteProtection sql.NullBool     `db:"delete_protection"`
	KeyAuth          KeyAuth          `db:"key_auth"`
}

// FindLiveApiByID
//
//	SELECT apis.id, apis.name, apis.workspace_id, apis.ip_whitelist, apis.auth_type, apis.key_auth_id, apis.created_at_m, apis.updated_at_m, apis.deleted_at_m, apis.delete_protection, ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at
//	FROM apis
//	JOIN key_auth as ka ON ka.id = apis.key_auth_id
//	WHERE apis.id = ?
//	    AND ka.deleted_at_m IS NULL
//	    AND apis.deleted_at_m IS NULL
//	LIMIT 1
func (q *Queries) FindLiveApiByID(ctx context.Context, db DBTX, id string) (FindLiveApiByIDRow, error) {
	row := db.QueryRowContext(ctx, findLiveApiByID, id)
	var i FindLiveApiByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkspaceID,
		&i.IpWhitelist,
		&i.AuthType,
		&i.KeyAuthID,
		&i.CreatedAtM,
		&i.UpdatedAtM,
		&i.DeletedAtM,
		&i.DeleteProtection,
		&i.KeyAuth.ID,
		&i.KeyAuth.WorkspaceID,
		&i.KeyAuth.CreatedAtM,
		&i.KeyAuth.UpdatedAtM,
		&i.KeyAuth.DeletedAtM,
		&i.KeyAuth.StoreEncryptedKeys,
		&i.KeyAuth.DefaultPrefix,
		&i.KeyAuth.DefaultBytes,
		&i.KeyAuth.SizeApprox,
		&i.KeyAuth.SizeLastUpdatedAt,
	)
	return i, err
}
