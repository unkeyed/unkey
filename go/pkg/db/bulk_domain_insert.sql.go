// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertDomain is the base query for bulk insert
const bulkInsertDomain = `INSERT INTO domains ( id, workspace_id, project_id, domain, type, subdomain_config, created_at ) VALUES %s ON DUPLICATE KEY UPDATE
    workspace_id = VALUES(workspace_id),
    project_id = VALUES(project_id),
    type = VALUES(type),
    subdomain_config = VALUES(subdomain_config),
    updated_at = ?`

// InsertDomains performs bulk insert in a single query
func (q *BulkQueries) InsertDomains(ctx context.Context, db DBTX, args []InsertDomainParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, CAST(? AS JSON), ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertDomain, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.ProjectID)
		allArgs = append(allArgs, arg.Domain)
		allArgs = append(allArgs, arg.Type)
		allArgs = append(allArgs, arg.SubdomainConfig)
		allArgs = append(allArgs, arg.CreatedAt)
	}

	// Add ON DUPLICATE KEY UPDATE parameters (only once, not per row)
	if len(args) > 0 {
		allArgs = append(allArgs, args[0].UpdatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
