// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: build_step_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertVersionStep = `-- name: InsertVersionStep :exec
INSERT INTO version_steps (
    version_id,
    status,
    message,
    error_message,
    created_at
) VALUES (
    ?, ?, ?, ?, ?
)
ON DUPLICATE KEY UPDATE
    message = VALUES(message),
    error_message = VALUES(error_message),
    created_at = VALUES(created_at)
`

type InsertVersionStepParams struct {
	VersionID    string             `db:"version_id"`
	Status       VersionStepsStatus `db:"status"`
	Message      sql.NullString     `db:"message"`
	ErrorMessage sql.NullString     `db:"error_message"`
	CreatedAt    int64              `db:"created_at"`
}

// InsertVersionStep
//
//	INSERT INTO version_steps (
//	    version_id,
//	    status,
//	    message,
//	    error_message,
//	    created_at
//	) VALUES (
//	    ?, ?, ?, ?, ?
//	)
//	ON DUPLICATE KEY UPDATE
//	    message = VALUES(message),
//	    error_message = VALUES(error_message),
//	    created_at = VALUES(created_at)
func (q *Queries) InsertVersionStep(ctx context.Context, db DBTX, arg InsertVersionStepParams) error {
	_, err := db.ExecContext(ctx, insertVersionStep,
		arg.VersionID,
		arg.Status,
		arg.Message,
		arg.ErrorMessage,
		arg.CreatedAt,
	)
	return err
}
