// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credits_upsert.sql

package db

import (
	"context"
	"database/sql"
)

const upsertCredit = `-- name: UpsertCredit :exec
INSERT INTO ` + "`" + `credits` + "`" + ` (
    id,
    workspace_id,
    key_id,
    identity_id,
    remaining,
    refill_day,
    refill_amount,
    created_at,
    updated_at,
    refilled_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    remaining = CASE
        WHEN CAST(? AS UNSIGNED) = 1 THEN VALUES(remaining)
        ELSE remaining
    END,
    refill_day = CASE
        WHEN CAST(? AS UNSIGNED) = 1 THEN VALUES(refill_day)
        ELSE refill_day
    END,
    refill_amount = CASE
        WHEN CAST(? AS UNSIGNED) = 1 THEN VALUES(refill_amount)
        ELSE refill_amount
    END,
    updated_at = VALUES(updated_at)
`

type UpsertCreditParams struct {
	ID                    string         `db:"id"`
	WorkspaceID           string         `db:"workspace_id"`
	KeyID                 sql.NullString `db:"key_id"`
	IdentityID            sql.NullString `db:"identity_id"`
	Remaining             int32          `db:"remaining"`
	RefillDay             sql.NullInt16  `db:"refill_day"`
	RefillAmount          sql.NullInt32  `db:"refill_amount"`
	CreatedAt             int64          `db:"created_at"`
	UpdatedAt             sql.NullInt64  `db:"updated_at"`
	RefilledAt            sql.NullInt64  `db:"refilled_at"`
	RemainingSpecified    int64          `db:"remaining_specified"`
	RefillDaySpecified    int64          `db:"refill_day_specified"`
	RefillAmountSpecified int64          `db:"refill_amount_specified"`
}

// UpsertCredit
//
//	INSERT INTO `credits` (
//	    id,
//	    workspace_id,
//	    key_id,
//	    identity_id,
//	    remaining,
//	    refill_day,
//	    refill_amount,
//	    created_at,
//	    updated_at,
//	    refilled_at
//	) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
//	ON DUPLICATE KEY UPDATE
//	    remaining = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN VALUES(remaining)
//	        ELSE remaining
//	    END,
//	    refill_day = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN VALUES(refill_day)
//	        ELSE refill_day
//	    END,
//	    refill_amount = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN VALUES(refill_amount)
//	        ELSE refill_amount
//	    END,
//	    updated_at = VALUES(updated_at)
func (q *Queries) UpsertCredit(ctx context.Context, db DBTX, arg UpsertCreditParams) error {
	_, err := db.ExecContext(ctx, upsertCredit,
		arg.ID,
		arg.WorkspaceID,
		arg.KeyID,
		arg.IdentityID,
		arg.Remaining,
		arg.RefillDay,
		arg.RefillAmount,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefilledAt,
		arg.RemainingSpecified,
		arg.RefillDaySpecified,
		arg.RefillAmountSpecified,
	)
	return err
}
