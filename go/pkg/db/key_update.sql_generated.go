// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_update.sql

package db

import (
	"context"
	"database/sql"
)

const updateKey = `-- name: UpdateKey :exec
UPDATE ` + "`" + `keys` + "`" + ` k SET
name = COALESCE(?, k.name),
owner_id = ?,
identity_id = ?,
enabled = COALESCE(?, k.enabled),
meta = COALESCE(?, k.meta),
expires = COALESCE(?, k.expires),
remaining_requests = COALESCE(?, k.remaining_requests),
refill_amount = COALESCE(?, k.refill_amount),
refill_day = COALESCE(?, k.refill_day),
updated_at_m = ?
WHERE id = ?
`

type UpdateKeyParams struct {
	Name              sql.NullString `db:"name"`
	OwnerID           sql.NullString `db:"owner_id"`
	IdentityID        sql.NullString `db:"identity_id"`
	Enabled           sql.NullBool   `db:"enabled"`
	Meta              sql.NullString `db:"meta"`
	Expires           sql.NullTime   `db:"expires"`
	RemainingRequests sql.NullInt32  `db:"remaining_requests"`
	RefillAmount      sql.NullInt32  `db:"refill_amount"`
	RefillDay         sql.NullInt16  `db:"refill_day"`
	Now               sql.NullInt64  `db:"now"`
	ID                string         `db:"id"`
}

// UpdateKey
//
//	UPDATE `keys` k SET
//	name = COALESCE(?, k.name),
//	owner_id = ?,
//	identity_id = ?,
//	enabled = COALESCE(?, k.enabled),
//	meta = COALESCE(?, k.meta),
//	expires = COALESCE(?, k.expires),
//	remaining_requests = COALESCE(?, k.remaining_requests),
//	refill_amount = COALESCE(?, k.refill_amount),
//	refill_day = COALESCE(?, k.refill_day),
//	updated_at_m = ?
//	WHERE id = ?
func (q *Queries) UpdateKey(ctx context.Context, db DBTX, arg UpdateKeyParams) error {
	_, err := db.ExecContext(ctx, updateKey,
		arg.Name,
		arg.OwnerID,
		arg.IdentityID,
		arg.Enabled,
		arg.Meta,
		arg.Expires,
		arg.RemainingRequests,
		arg.RefillAmount,
		arg.RefillDay,
		arg.Now,
		arg.ID,
	)
	return err
}
