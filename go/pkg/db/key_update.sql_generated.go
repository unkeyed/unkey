// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_update.sql

package db

import (
	"context"
	"database/sql"
)

const updateKey = `-- name: UpdateKey :exec
UPDATE ` + "`" + `keys` + "`" + ` k SET
    name = CASE 
        WHEN CAST(? AS UNSIGNED) = 1 THEN ? 
        ELSE k.name 
    END,
    identity_id = CASE 
        WHEN CAST(? AS UNSIGNED) = 1 THEN ? 
        ELSE k.identity_id 
    END,
    enabled = CASE 
        WHEN CAST(? AS UNSIGNED) = 1 THEN ? 
        ELSE k.enabled 
    END,
    meta = CASE 
        WHEN CAST(? AS UNSIGNED) = 1 THEN ? 
        ELSE k.meta 
    END,
    expires = CASE 
        WHEN CAST(? AS UNSIGNED) = 1 THEN ? 
        ELSE k.expires 
    END,
    updated_at_m = ?
WHERE id = ?
`

type UpdateKeyParams struct {
	NameSpecified       int64          `db:"name_specified"`
	Name                sql.NullString `db:"name"`
	IdentityIDSpecified int64          `db:"identity_id_specified"`
	IdentityID          sql.NullString `db:"identity_id"`
	EnabledSpecified    int64          `db:"enabled_specified"`
	Enabled             sql.NullBool   `db:"enabled"`
	MetaSpecified       int64          `db:"meta_specified"`
	Meta                sql.NullString `db:"meta"`
	ExpiresSpecified    int64          `db:"expires_specified"`
	Expires             sql.NullTime   `db:"expires"`
	Now                 sql.NullInt64  `db:"now"`
	ID                  string         `db:"id"`
}

// UpdateKey
//
//	UPDATE `keys` k SET
//	    name = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN ?
//	        ELSE k.name
//	    END,
//	    identity_id = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN ?
//	        ELSE k.identity_id
//	    END,
//	    enabled = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN ?
//	        ELSE k.enabled
//	    END,
//	    meta = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN ?
//	        ELSE k.meta
//	    END,
//	    expires = CASE
//	        WHEN CAST(? AS UNSIGNED) = 1 THEN ?
//	        ELSE k.expires
//	    END,
//	    updated_at_m = ?
//	WHERE id = ?
func (q *Queries) UpdateKey(ctx context.Context, db DBTX, arg UpdateKeyParams) error {
	_, err := db.ExecContext(ctx, updateKey,
		arg.NameSpecified,
		arg.Name,
		arg.IdentityIDSpecified,
		arg.IdentityID,
		arg.EnabledSpecified,
		arg.Enabled,
		arg.MetaSpecified,
		arg.Meta,
		arg.ExpiresSpecified,
		arg.Expires,
		arg.Now,
		arg.ID,
	)
	return err
}
