// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_auth_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertKeyAuth = `-- name: InsertKeyAuth :exec
INSERT INTO key_auth (
    id,
    workspace_id,
    created_at_m,
    default_prefix,
    default_bytes,
    store_encrypted_keys
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    false
)
`

type InsertKeyAuthParams struct {
	ID            string         `db:"id"`
	WorkspaceID   string         `db:"workspace_id"`
	CreatedAtM    int64          `db:"created_at_m"`
	DefaultPrefix sql.NullString `db:"default_prefix"`
	DefaultBytes  sql.NullInt32  `db:"default_bytes"`
}

// InsertKeyAuth
//
//	INSERT INTO key_auth (
//	    id,
//	    workspace_id,
//	    created_at_m,
//	    default_prefix,
//	    default_bytes,
//	    store_encrypted_keys
//	) VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    false
//	)
func (q *Queries) InsertKeyAuth(ctx context.Context, db DBTX, arg InsertKeyAuthParams) error {
	_, err := db.ExecContext(ctx, insertKeyAuth,
		arg.ID,
		arg.WorkspaceID,
		arg.CreatedAtM,
		arg.DefaultPrefix,
		arg.DefaultBytes,
	)
	return err
}
