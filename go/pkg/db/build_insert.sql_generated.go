// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: build_insert.sql

package db

import (
	"context"
)

const insertBuild = `-- name: InsertBuild :exec
INSERT INTO builds (
    id,
    workspace_id,
    project_id,
    version_id,
    rootfs_image_id,
    status,
    error_message,
    started_at,
    completed_at,
    created_at_m,
    updated_at_m,
    deleted_at_m
) VALUES (
    ?,
    ?,
    ?,
    ?,
    NULL,
    'pending',
    NULL,
    NULL,
    NULL,
    ?,
    NULL,
    NULL
)
`

type InsertBuildParams struct {
	ID          string `db:"id"`
	WorkspaceID string `db:"workspace_id"`
	ProjectID   string `db:"project_id"`
	VersionID   string `db:"version_id"`
	CreatedAt   int64  `db:"created_at"`
}

// InsertBuild
//
//	INSERT INTO builds (
//	    id,
//	    workspace_id,
//	    project_id,
//	    version_id,
//	    rootfs_image_id,
//	    status,
//	    error_message,
//	    started_at,
//	    completed_at,
//	    created_at_m,
//	    updated_at_m,
//	    deleted_at_m
//	) VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    NULL,
//	    'pending',
//	    NULL,
//	    NULL,
//	    NULL,
//	    ?,
//	    NULL,
//	    NULL
//	)
func (q *Queries) InsertBuild(ctx context.Context, db DBTX, arg InsertBuildParams) error {
	_, err := db.ExecContext(ctx, insertBuild,
		arg.ID,
		arg.WorkspaceID,
		arg.ProjectID,
		arg.VersionID,
		arg.CreatedAt,
	)
	return err
}
