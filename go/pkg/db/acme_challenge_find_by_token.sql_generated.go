// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: acme_challenge_find_by_token.sql

package db

import (
	"context"
)

const findAcmeChallengeByToken = `-- name: FindAcmeChallengeByToken :one
SELECT domain_id, workspace_id, token, type, authorization, status, expires_at, created_at, updated_at FROM acme_challenges WHERE workspace_id = ? AND domain_id = ? AND token = ?
`

type FindAcmeChallengeByTokenParams struct {
	WorkspaceID string `db:"workspace_id"`
	DomainID    string `db:"domain_id"`
	Token       string `db:"token"`
}

// FindAcmeChallengeByToken
//
//	SELECT domain_id, workspace_id, token, type, authorization, status, expires_at, created_at, updated_at FROM acme_challenges WHERE workspace_id = ? AND domain_id = ? AND token = ?
func (q *Queries) FindAcmeChallengeByToken(ctx context.Context, db DBTX, arg FindAcmeChallengeByTokenParams) (AcmeChallenge, error) {
	row := db.QueryRowContext(ctx, findAcmeChallengeByToken, arg.WorkspaceID, arg.DomainID, arg.Token)
	var i AcmeChallenge
	err := row.Scan(
		&i.DomainID,
		&i.WorkspaceID,
		&i.Token,
		&i.Type,
		&i.Authorization,
		&i.Status,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
