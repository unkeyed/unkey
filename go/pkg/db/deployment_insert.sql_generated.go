// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deployment_insert.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const insertDeployment = `-- name: InsertDeployment :exec
INSERT INTO ` + "`" + `deployments` + "`" + ` (
    id,
    workspace_id,
    project_id,
    environment,
    build_id,
    rootfs_image_id,
    git_commit_sha,
    git_branch,
    git_commit_message,
    git_commit_author_name,
    git_commit_author_username,
    git_commit_author_avatar_url,
    git_commit_timestamp, -- Unix epoch milliseconds
    config_snapshot,
    openapi_spec,
    status,
    created_at,
    updated_at
)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type InsertDeploymentParams struct {
	ID                       string                 `db:"id"`
	WorkspaceID              string                 `db:"workspace_id"`
	ProjectID                string                 `db:"project_id"`
	Environment              DeploymentsEnvironment `db:"environment"`
	BuildID                  sql.NullString         `db:"build_id"`
	RootfsImageID            string                 `db:"rootfs_image_id"`
	GitCommitSha             sql.NullString         `db:"git_commit_sha"`
	GitBranch                sql.NullString         `db:"git_branch"`
	GitCommitMessage         sql.NullString         `db:"git_commit_message"`
	GitCommitAuthorName      sql.NullString         `db:"git_commit_author_name"`
	GitCommitAuthorUsername  sql.NullString         `db:"git_commit_author_username"`
	GitCommitAuthorAvatarUrl sql.NullString         `db:"git_commit_author_avatar_url"`
	GitCommitTimestamp       sql.NullInt64          `db:"git_commit_timestamp"`
	ConfigSnapshot           json.RawMessage        `db:"config_snapshot"`
	OpenapiSpec              sql.NullString         `db:"openapi_spec"`
	Status                   DeploymentsStatus      `db:"status"`
	CreatedAt                int64                  `db:"created_at"`
	UpdatedAt                sql.NullInt64          `db:"updated_at"`
}

// InsertDeployment
//
//	INSERT INTO `deployments` (
//	    id,
//	    workspace_id,
//	    project_id,
//	    environment,
//	    build_id,
//	    rootfs_image_id,
//	    git_commit_sha,
//	    git_branch,
//	    git_commit_message,
//	    git_commit_author_name,
//	    git_commit_author_username,
//	    git_commit_author_avatar_url,
//	    git_commit_timestamp, -- Unix epoch milliseconds
//	    config_snapshot,
//	    openapi_spec,
//	    status,
//	    created_at,
//	    updated_at
//	)
//	VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?
//	)
func (q *Queries) InsertDeployment(ctx context.Context, db DBTX, arg InsertDeploymentParams) error {
	_, err := db.ExecContext(ctx, insertDeployment,
		arg.ID,
		arg.WorkspaceID,
		arg.ProjectID,
		arg.Environment,
		arg.BuildID,
		arg.RootfsImageID,
		arg.GitCommitSha,
		arg.GitBranch,
		arg.GitCommitMessage,
		arg.GitCommitAuthorName,
		arg.GitCommitAuthorUsername,
		arg.GitCommitAuthorAvatarUrl,
		arg.GitCommitTimestamp,
		arg.ConfigSnapshot,
		arg.OpenapiSpec,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
