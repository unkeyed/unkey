// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_space_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertKeySpace = `-- name: InsertKeySpace :exec
INSERT INTO ` + "`" + `key_auth` + "`" + ` (
    id,
    workspace_id,
    created_at_m,
    store_encrypted_keys,
    default_prefix,
    default_bytes,
    size_approx,
    size_last_updated_at
) VALUES (
    ?,
    ?,
      ?,
    ?,
    ?,
    ?,
    0,
    0
)
`

type InsertKeySpaceParams struct {
	ID                 string         `db:"id"`
	WorkspaceID        string         `db:"workspace_id"`
	CreatedAtM         int64          `db:"created_at_m"`
	StoreEncryptedKeys bool           `db:"store_encrypted_keys"`
	DefaultPrefix      sql.NullString `db:"default_prefix"`
	DefaultBytes       sql.NullInt32  `db:"default_bytes"`
}

// InsertKeySpace
//
//	INSERT INTO `key_auth` (
//	    id,
//	    workspace_id,
//	    created_at_m,
//	    store_encrypted_keys,
//	    default_prefix,
//	    default_bytes,
//	    size_approx,
//	    size_last_updated_at
//	) VALUES (
//	    ?,
//	    ?,
//	      ?,
//	    ?,
//	    ?,
//	    ?,
//	    0,
//	    0
//	)
func (q *Queries) InsertKeySpace(ctx context.Context, db DBTX, arg InsertKeySpaceParams) error {
	_, err := db.ExecContext(ctx, insertKeySpace,
		arg.ID,
		arg.WorkspaceID,
		arg.CreatedAtM,
		arg.StoreEncryptedKeys,
		arg.DefaultPrefix,
		arg.DefaultBytes,
	)
	return err
}
