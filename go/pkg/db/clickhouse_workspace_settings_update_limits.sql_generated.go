// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clickhouse_workspace_settings_update_limits.sql

package db

import (
	"context"
	"database/sql"
)

const updateClickhouseWorkspaceSettingsLimits = `-- name: UpdateClickhouseWorkspaceSettingsLimits :exec
UPDATE ` + "`" + `clickhouse_workspace_settings` + "`" + `
SET
    quota_duration_seconds = ?,
    max_queries_per_window = ?,
    max_execution_time_per_window = ?,
    max_query_execution_time = ?,
    max_query_memory_bytes = ?,
    max_query_result_rows = ?,
    max_rows_to_read = ?,
    updated_at = ?
WHERE workspace_id = ?
`

type UpdateClickhouseWorkspaceSettingsLimitsParams struct {
	QuotaDurationSeconds      int32         `db:"quota_duration_seconds"`
	MaxQueriesPerWindow       int32         `db:"max_queries_per_window"`
	MaxExecutionTimePerWindow int32         `db:"max_execution_time_per_window"`
	MaxQueryExecutionTime     int32         `db:"max_query_execution_time"`
	MaxQueryMemoryBytes       int64         `db:"max_query_memory_bytes"`
	MaxQueryResultRows        int32         `db:"max_query_result_rows"`
	MaxRowsToRead             int64         `db:"max_rows_to_read"`
	UpdatedAt                 sql.NullInt64 `db:"updated_at"`
	WorkspaceID               string        `db:"workspace_id"`
}

// UpdateClickhouseWorkspaceSettingsLimits
//
//	UPDATE `clickhouse_workspace_settings`
//	SET
//	    quota_duration_seconds = ?,
//	    max_queries_per_window = ?,
//	    max_execution_time_per_window = ?,
//	    max_query_execution_time = ?,
//	    max_query_memory_bytes = ?,
//	    max_query_result_rows = ?,
//	    max_rows_to_read = ?,
//	    updated_at = ?
//	WHERE workspace_id = ?
func (q *Queries) UpdateClickhouseWorkspaceSettingsLimits(ctx context.Context, db DBTX, arg UpdateClickhouseWorkspaceSettingsLimitsParams) error {
	_, err := db.ExecContext(ctx, updateClickhouseWorkspaceSettingsLimits,
		arg.QuotaDurationSeconds,
		arg.MaxQueriesPerWindow,
		arg.MaxExecutionTimePerWindow,
		arg.MaxQueryExecutionTime,
		arg.MaxQueryMemoryBytes,
		arg.MaxQueryResultRows,
		arg.MaxRowsToRead,
		arg.UpdatedAt,
		arg.WorkspaceID,
	)
	return err
}
