// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: deployment_step_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertDeploymentStep = `-- name: InsertDeploymentStep :exec
INSERT INTO deployment_steps (
    deployment_id,
    status,
    message,
    error_message,
    created_at
) VALUES (
    ?, ?, ?, ?, ?
)
ON DUPLICATE KEY UPDATE
    message = VALUES(message),
    error_message = VALUES(error_message),
    created_at = VALUES(created_at)
`

type InsertDeploymentStepParams struct {
	DeploymentID string                `db:"deployment_id"`
	Status       DeploymentStepsStatus `db:"status"`
	Message      sql.NullString        `db:"message"`
	ErrorMessage sql.NullString        `db:"error_message"`
	CreatedAt    int64                 `db:"created_at"`
}

// InsertDeploymentStep
//
//	INSERT INTO deployment_steps (
//	    deployment_id,
//	    status,
//	    message,
//	    error_message,
//	    created_at
//	) VALUES (
//	    ?, ?, ?, ?, ?
//	)
//	ON DUPLICATE KEY UPDATE
//	    message = VALUES(message),
//	    error_message = VALUES(error_message),
//	    created_at = VALUES(created_at)
func (q *Queries) InsertDeploymentStep(ctx context.Context, db DBTX, arg InsertDeploymentStepParams) error {
	_, err := db.ExecContext(ctx, insertDeploymentStep,
		arg.DeploymentID,
		arg.Status,
		arg.Message,
		arg.ErrorMessage,
		arg.CreatedAt,
	)
	return err
}
