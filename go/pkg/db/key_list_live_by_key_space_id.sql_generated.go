// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_list_live_by_key_space_id.sql

package db

import (
	"context"
	"database/sql"
)

const listLiveKeysByKeySpaceID = `-- name: ListLiveKeysByKeySpaceID :many
SELECT k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
       i.id                 as identity_table_id,
       i.external_id        as identity_external_id,
       i.meta               as identity_meta,
       ek.encrypted         as encrypted_key,
       ek.encryption_key_id as encryption_key_id,
       -- Roles with both IDs and names (sorted by name)
       COALESCE(
               (SELECT JSON_ARRAYAGG(
                               JSON_OBJECT(
                                       'id', r.id,
                                       'name', r.name,
                                       'description', r.description
                               )
                       )
                FROM keys_roles kr
                         JOIN roles r ON r.id = kr.role_id
                WHERE kr.key_id = k.id
                ORDER BY r.name),
               JSON_ARRAY()
       )                    as roles,
       -- Direct permissions attached to the key (sorted by slug)
       COALESCE(
               (SELECT JSON_ARRAYAGG(
                               JSON_OBJECT(
                                       'id', p.id,
                                       'name', p.name,
                                       'slug', p.slug,
                                       'description', p.description
                               )
                       )
                FROM keys_permissions kp
                         JOIN permissions p ON kp.permission_id = p.id
                WHERE kp.key_id = k.id
                ORDER BY p.slug),
               JSON_ARRAY()
       )                    as permissions,
       -- Permissions from roles (sorted by slug)
       COALESCE(
               (SELECT JSON_ARRAYAGG(
                               JSON_OBJECT(
                                       'id', p.id,
                                       'name', p.name,
                                       'slug', p.slug,
                                       'description', p.description
                               )
                       )
                FROM keys_roles kr
                         JOIN roles_permissions rp ON kr.role_id = rp.role_id
                         JOIN permissions p ON rp.permission_id = p.id
                WHERE kr.key_id = k.id
                ORDER BY p.slug),
               JSON_ARRAY()
       )                    as role_permissions,
       -- Rate limits
       COALESCE(
               (SELECT JSON_ARRAYAGG(
                               JSON_OBJECT(
                                       'id', id,
                                       'name', name,
                                       'key_id', key_id,
                                       'identity_id', identity_id,
                                       'limit', ` + "`" + `limit` + "`" + `,
                                       'duration', duration,
                                       'auto_apply', auto_apply = 1
                               )
                       )
                FROM (
                    SELECT rl.id, rl.name, rl.key_id, rl.identity_id, rl.` + "`" + `limit` + "`" + `, rl.duration, rl.auto_apply
                    FROM ratelimits rl
                    WHERE rl.key_id = k.id
                    UNION ALL
                    SELECT rl.id, rl.name, rl.key_id, rl.identity_id, rl.` + "`" + `limit` + "`" + `, rl.duration, rl.auto_apply
                    FROM ratelimits rl
                    WHERE rl.identity_id = i.id
                ) AS combined_rl),
               JSON_ARRAY()
       )                    AS ratelimits
FROM ` + "`" + `keys` + "`" + ` k
         JOIN key_auth ka ON ka.id = k.key_auth_id
         JOIN workspaces ws ON ws.id = k.workspace_id
         LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = false
         LEFT JOIN encrypted_keys ek ON ek.key_id = k.id
WHERE k.key_auth_id = ?
  AND k.id >= ?
  AND (
    ? = '' OR (i.external_id = ? OR i.id = ?)
  )
  AND k.deleted_at_m IS NULL
  AND ka.deleted_at_m IS NULL
  AND ws.deleted_at_m IS NULL
ORDER BY k.id ASC
LIMIT ?
`

type ListLiveKeysByKeySpaceIDParams struct {
	KeySpaceID string `db:"key_space_id"`
	IDCursor   string `db:"id_cursor"`
	Identity   string `db:"identity"`
	Limit      int32  `db:"limit"`
}

type ListLiveKeysByKeySpaceIDRow struct {
	ID                 string         `db:"id"`
	KeyAuthID          string         `db:"key_auth_id"`
	Hash               string         `db:"hash"`
	Start              string         `db:"start"`
	WorkspaceID        string         `db:"workspace_id"`
	ForWorkspaceID     sql.NullString `db:"for_workspace_id"`
	Name               sql.NullString `db:"name"`
	OwnerID            sql.NullString `db:"owner_id"`
	IdentityID         sql.NullString `db:"identity_id"`
	Meta               sql.NullString `db:"meta"`
	Expires            sql.NullTime   `db:"expires"`
	CreatedAtM         int64          `db:"created_at_m"`
	UpdatedAtM         sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM         sql.NullInt64  `db:"deleted_at_m"`
	RefillDay          sql.NullInt16  `db:"refill_day"`
	RefillAmount       sql.NullInt32  `db:"refill_amount"`
	LastRefillAt       sql.NullTime   `db:"last_refill_at"`
	Enabled            bool           `db:"enabled"`
	RemainingRequests  sql.NullInt32  `db:"remaining_requests"`
	RatelimitAsync     sql.NullBool   `db:"ratelimit_async"`
	RatelimitLimit     sql.NullInt32  `db:"ratelimit_limit"`
	RatelimitDuration  sql.NullInt64  `db:"ratelimit_duration"`
	Environment        sql.NullString `db:"environment"`
	IdentityTableID    sql.NullString `db:"identity_table_id"`
	IdentityExternalID sql.NullString `db:"identity_external_id"`
	IdentityMeta       []byte         `db:"identity_meta"`
	EncryptedKey       sql.NullString `db:"encrypted_key"`
	EncryptionKeyID    sql.NullString `db:"encryption_key_id"`
	Roles              interface{}    `db:"roles"`
	Permissions        interface{}    `db:"permissions"`
	RolePermissions    interface{}    `db:"role_permissions"`
	Ratelimits         interface{}    `db:"ratelimits"`
}

// ListLiveKeysByKeySpaceID
//
//	SELECT k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
//	       i.id                 as identity_table_id,
//	       i.external_id        as identity_external_id,
//	       i.meta               as identity_meta,
//	       ek.encrypted         as encrypted_key,
//	       ek.encryption_key_id as encryption_key_id,
//	       -- Roles with both IDs and names (sorted by name)
//	       COALESCE(
//	               (SELECT JSON_ARRAYAGG(
//	                               JSON_OBJECT(
//	                                       'id', r.id,
//	                                       'name', r.name,
//	                                       'description', r.description
//	                               )
//	                       )
//	                FROM keys_roles kr
//	                         JOIN roles r ON r.id = kr.role_id
//	                WHERE kr.key_id = k.id
//	                ORDER BY r.name),
//	               JSON_ARRAY()
//	       )                    as roles,
//	       -- Direct permissions attached to the key (sorted by slug)
//	       COALESCE(
//	               (SELECT JSON_ARRAYAGG(
//	                               JSON_OBJECT(
//	                                       'id', p.id,
//	                                       'name', p.name,
//	                                       'slug', p.slug,
//	                                       'description', p.description
//	                               )
//	                       )
//	                FROM keys_permissions kp
//	                         JOIN permissions p ON kp.permission_id = p.id
//	                WHERE kp.key_id = k.id
//	                ORDER BY p.slug),
//	               JSON_ARRAY()
//	       )                    as permissions,
//	       -- Permissions from roles (sorted by slug)
//	       COALESCE(
//	               (SELECT JSON_ARRAYAGG(
//	                               JSON_OBJECT(
//	                                       'id', p.id,
//	                                       'name', p.name,
//	                                       'slug', p.slug,
//	                                       'description', p.description
//	                               )
//	                       )
//	                FROM keys_roles kr
//	                         JOIN roles_permissions rp ON kr.role_id = rp.role_id
//	                         JOIN permissions p ON rp.permission_id = p.id
//	                WHERE kr.key_id = k.id
//	                ORDER BY p.slug),
//	               JSON_ARRAY()
//	       )                    as role_permissions,
//	       -- Rate limits
//	       COALESCE(
//	               (SELECT JSON_ARRAYAGG(
//	                               JSON_OBJECT(
//	                                       'id', id,
//	                                       'name', name,
//	                                       'key_id', key_id,
//	                                       'identity_id', identity_id,
//	                                       'limit', `limit`,
//	                                       'duration', duration,
//	                                       'auto_apply', auto_apply = 1
//	                               )
//	                       )
//	                FROM (
//	                    SELECT rl.id, rl.name, rl.key_id, rl.identity_id, rl.`limit`, rl.duration, rl.auto_apply
//	                    FROM ratelimits rl
//	                    WHERE rl.key_id = k.id
//	                    UNION ALL
//	                    SELECT rl.id, rl.name, rl.key_id, rl.identity_id, rl.`limit`, rl.duration, rl.auto_apply
//	                    FROM ratelimits rl
//	                    WHERE rl.identity_id = i.id
//	                ) AS combined_rl),
//	               JSON_ARRAY()
//	       )                    AS ratelimits
//	FROM `keys` k
//	         JOIN key_auth ka ON ka.id = k.key_auth_id
//	         JOIN workspaces ws ON ws.id = k.workspace_id
//	         LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = false
//	         LEFT JOIN encrypted_keys ek ON ek.key_id = k.id
//	WHERE k.key_auth_id = ?
//	  AND k.id >= ?
//	  AND (
//	    ? = '' OR (i.external_id = ? OR i.id = ?)
//	  )
//	  AND k.deleted_at_m IS NULL
//	  AND ka.deleted_at_m IS NULL
//	  AND ws.deleted_at_m IS NULL
//	ORDER BY k.id ASC
//	LIMIT ?
func (q *Queries) ListLiveKeysByKeySpaceID(ctx context.Context, db DBTX, arg ListLiveKeysByKeySpaceIDParams) ([]ListLiveKeysByKeySpaceIDRow, error) {
	rows, err := db.QueryContext(ctx, listLiveKeysByKeySpaceID,
		arg.KeySpaceID,
		arg.IDCursor,
		arg.Identity,
		arg.Identity,
		arg.Identity,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLiveKeysByKeySpaceIDRow
	for rows.Next() {
		var i ListLiveKeysByKeySpaceIDRow
		if err := rows.Scan(
			&i.ID,
			&i.KeyAuthID,
			&i.Hash,
			&i.Start,
			&i.WorkspaceID,
			&i.ForWorkspaceID,
			&i.Name,
			&i.OwnerID,
			&i.IdentityID,
			&i.Meta,
			&i.Expires,
			&i.CreatedAtM,
			&i.UpdatedAtM,
			&i.DeletedAtM,
			&i.RefillDay,
			&i.RefillAmount,
			&i.LastRefillAt,
			&i.Enabled,
			&i.RemainingRequests,
			&i.RatelimitAsync,
			&i.RatelimitLimit,
			&i.RatelimitDuration,
			&i.Environment,
			&i.IdentityTableID,
			&i.IdentityExternalID,
			&i.IdentityMeta,
			&i.EncryptedKey,
			&i.EncryptionKeyID,
			&i.Roles,
			&i.Permissions,
			&i.RolePermissions,
			&i.Ratelimits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
