// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deployment_find_by_id.sql

package db

import (
	"context"
)

const findDeploymentById = `-- name: FindDeploymentById :one
SELECT 
    id,
    workspace_id,
    project_id,
    environment,
    build_id,
    rootfs_image_id,
    git_commit_sha,
    git_branch,
    git_commit_message,
    git_commit_author_name,
    git_commit_author_username,
    git_commit_author_avatar_url,
    git_commit_timestamp,
    config_snapshot,
    openapi_spec,
    status,
    created_at,
    updated_at
FROM ` + "`" + `deployments` + "`" + `
WHERE id = ?
`

// FindDeploymentById
//
//	SELECT
//	    id,
//	    workspace_id,
//	    project_id,
//	    environment,
//	    build_id,
//	    rootfs_image_id,
//	    git_commit_sha,
//	    git_branch,
//	    git_commit_message,
//	    git_commit_author_name,
//	    git_commit_author_username,
//	    git_commit_author_avatar_url,
//	    git_commit_timestamp,
//	    config_snapshot,
//	    openapi_spec,
//	    status,
//	    created_at,
//	    updated_at
//	FROM `deployments`
//	WHERE id = ?
func (q *Queries) FindDeploymentById(ctx context.Context, db DBTX, id string) (Deployment, error) {
	row := db.QueryRowContext(ctx, findDeploymentById, id)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProjectID,
		&i.Environment,
		&i.BuildID,
		&i.RootfsImageID,
		&i.GitCommitSha,
		&i.GitBranch,
		&i.GitCommitMessage,
		&i.GitCommitAuthorName,
		&i.GitCommitAuthorUsername,
		&i.GitCommitAuthorAvatarUrl,
		&i.GitCommitTimestamp,
		&i.ConfigSnapshot,
		&i.OpenapiSpec,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
