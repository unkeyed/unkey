// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: key_find_many_by_hash.sql

package db

import (
	"context"
	"strings"
)

const findKeysByHash = `-- name: FindKeysByHash :many
SELECT id, hash FROM ` + "`" + `keys` + "`" + ` WHERE hash IN (/*SLICE:hashes*/?)
`

type FindKeysByHashRow struct {
	ID   string `db:"id"`
	Hash string `db:"hash"`
}

// FindKeysByHash
//
//	SELECT id, hash FROM `keys` WHERE hash IN (/*SLICE:hashes*/?)
func (q *Queries) FindKeysByHash(ctx context.Context, db DBTX, hashes []string) ([]FindKeysByHashRow, error) {
	query := findKeysByHash
	var queryParams []interface{}
	if len(hashes) > 0 {
		for _, v := range hashes {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:hashes*/?", strings.Repeat(",?", len(hashes))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:hashes*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindKeysByHashRow
	for rows.Next() {
		var i FindKeysByHashRow
		if err := rows.Scan(&i.ID, &i.Hash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
