// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permissions_find_role_permission_by_ids.sql

package db

import (
	"context"
)

const findRolePermissionsByRoleIdAndPermissionId = `-- name: FindRolePermissionsByRoleIdAndPermissionId :many
SELECT role_id, permission_id, workspace_id, created_at_m, updated_at_m
FROM roles_permissions
WHERE role_id = ?
  AND permission_id = ?
`

type FindRolePermissionsByRoleIdAndPermissionIdParams struct {
	RoleID       string `db:"role_id"`
	PermissionID string `db:"permission_id"`
}

// FindRolePermissionsByRoleIdAndPermissionId
//
//	SELECT role_id, permission_id, workspace_id, created_at_m, updated_at_m
//	FROM roles_permissions
//	WHERE role_id = ?
//	  AND permission_id = ?
func (q *Queries) FindRolePermissionsByRoleIdAndPermissionId(ctx context.Context, db DBTX, arg FindRolePermissionsByRoleIdAndPermissionIdParams) ([]RolesPermission, error) {
	rows, err := db.QueryContext(ctx, findRolePermissionsByRoleIdAndPermissionId, arg.RoleID, arg.PermissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RolesPermission
	for rows.Next() {
		var i RolesPermission
		if err := rows.Scan(
			&i.RoleID,
			&i.PermissionID,
			&i.WorkspaceID,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
