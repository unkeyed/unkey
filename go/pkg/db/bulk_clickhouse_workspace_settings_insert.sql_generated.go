// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertClickhouseWorkspaceSettings is the base query for bulk insert
const bulkInsertClickhouseWorkspaceSettings = `INSERT INTO ` + "`" + `clickhouse_workspace_settings` + "`" + ` ( workspace_id, username, password_encrypted, quota_duration_seconds, max_queries_per_window, max_execution_time_per_window, max_query_execution_time, max_query_memory_bytes, max_query_result_rows, max_rows_to_read, created_at, updated_at ) VALUES %s`

// InsertClickhouseWorkspaceSettingses performs bulk insert in a single query
func (q *BulkQueries) InsertClickhouseWorkspaceSettingses(ctx context.Context, db DBTX, args []InsertClickhouseWorkspaceSettingsParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertClickhouseWorkspaceSettings, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.Username)
		allArgs = append(allArgs, arg.PasswordEncrypted)
		allArgs = append(allArgs, arg.QuotaDurationSeconds)
		allArgs = append(allArgs, arg.MaxQueriesPerWindow)
		allArgs = append(allArgs, arg.MaxExecutionTimePerWindow)
		allArgs = append(allArgs, arg.MaxQueryExecutionTime)
		allArgs = append(allArgs, arg.MaxQueryMemoryBytes)
		allArgs = append(allArgs, arg.MaxQueryResultRows)
		allArgs = append(allArgs, arg.MaxRowsToRead)
		allArgs = append(allArgs, arg.CreatedAt)
		allArgs = append(allArgs, arg.UpdatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
