// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertKey is the base query for bulk insert
const bulkInsertKey = `INSERT INTO ` + "`" + `keys` + "`" + ` ( id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, enabled, remaining_requests, refill_day, refill_amount ) VALUES %s`

// InsertKeys performs bulk insert in a single query
func (q *BulkQueries) InsertKeys(ctx context.Context, db DBTX, args []InsertKeyParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, ?, ?, null, ?, ?, ?, ?, ?, ?, ?, ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertKey, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.KeyringID)
		allArgs = append(allArgs, arg.Hash)
		allArgs = append(allArgs, arg.Start)
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.ForWorkspaceID)
		allArgs = append(allArgs, arg.Name)
		allArgs = append(allArgs, arg.IdentityID)
		allArgs = append(allArgs, arg.Meta)
		allArgs = append(allArgs, arg.Expires)
		allArgs = append(allArgs, arg.CreatedAtM)
		allArgs = append(allArgs, arg.Enabled)
		allArgs = append(allArgs, arg.RemainingRequests)
		allArgs = append(allArgs, arg.RefillDay)
		allArgs = append(allArgs, arg.RefillAmount)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
