// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertAuditLog is the base query for bulk insert
const bulkInsertAuditLog = `INSERT INTO ` + "`" + `audit_log` + "`" + ` ( id, workspace_id, bucket_id, bucket, event, time, display, remote_ip, user_agent, actor_type, actor_id, actor_name, actor_meta, created_at ) VALUES %s`

// InsertAuditLogs performs bulk insert in a single query
func (q *BulkQueries) InsertAuditLogs(ctx context.Context, db DBTX, args []InsertAuditLogParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CAST(? AS JSON), ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertAuditLog, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.BucketID)
		allArgs = append(allArgs, arg.Bucket)
		allArgs = append(allArgs, arg.Event)
		allArgs = append(allArgs, arg.Time)
		allArgs = append(allArgs, arg.Display)
		allArgs = append(allArgs, arg.RemoteIp)
		allArgs = append(allArgs, arg.UserAgent)
		allArgs = append(allArgs, arg.ActorType)
		allArgs = append(allArgs, arg.ActorID)
		allArgs = append(allArgs, arg.ActorName)
		allArgs = append(allArgs, arg.ActorMeta)
		allArgs = append(allArgs, arg.CreatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
