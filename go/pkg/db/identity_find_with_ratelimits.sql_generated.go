// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identity_find_with_ratelimits.sql

package db

import (
	"context"
	"database/sql"
)

const findIdentityWithRatelimits = `-- name: FindIdentityWithRatelimits :many
SELECT
    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', rl.id,
                'name', rl.name,
                'key_id', rl.key_id,
                'identity_id', rl.identity_id,
                'limit', rl.` + "`" + `limit` + "`" + `,
                'duration', rl.duration,
                'auto_apply', rl.auto_apply = 1
            )
        )
        FROM ratelimits rl WHERE rl.identity_id = i.id),
        JSON_ARRAY()
    ) as ratelimits
FROM identities i
WHERE i.workspace_id = ?
  AND i.id = ?
  AND i.deleted = ?
UNION ALL
SELECT
    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', rl.id,
                'name', rl.name,
                'key_id', rl.key_id,
                'identity_id', rl.identity_id,
                'limit', rl.` + "`" + `limit` + "`" + `,
                'duration', rl.duration,
                'auto_apply', rl.auto_apply = 1
            )
        )
        FROM ratelimits rl WHERE rl.identity_id = i.id),
        JSON_ARRAY()
    ) as ratelimits
FROM identities i
WHERE i.workspace_id = ?
  AND i.external_id = ?
  AND i.deleted = ?
LIMIT 1
`

type FindIdentityWithRatelimitsParams struct {
	WorkspaceID string `db:"workspace_id"`
	Identity    string `db:"identity"`
	Deleted     bool   `db:"deleted"`
}

type FindIdentityWithRatelimitsRow struct {
	ID          string        `db:"id"`
	ExternalID  string        `db:"external_id"`
	WorkspaceID string        `db:"workspace_id"`
	Environment string        `db:"environment"`
	Meta        []byte        `db:"meta"`
	Deleted     bool          `db:"deleted"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
	Ratelimits  interface{}   `db:"ratelimits"`
}

// FindIdentityWithRatelimits
//
//	SELECT
//	    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', rl.id,
//	                'name', rl.name,
//	                'key_id', rl.key_id,
//	                'identity_id', rl.identity_id,
//	                'limit', rl.`limit`,
//	                'duration', rl.duration,
//	                'auto_apply', rl.auto_apply = 1
//	            )
//	        )
//	        FROM ratelimits rl WHERE rl.identity_id = i.id),
//	        JSON_ARRAY()
//	    ) as ratelimits
//	FROM identities i
//	WHERE i.workspace_id = ?
//	  AND i.id = ?
//	  AND i.deleted = ?
//	UNION ALL
//	SELECT
//	    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', rl.id,
//	                'name', rl.name,
//	                'key_id', rl.key_id,
//	                'identity_id', rl.identity_id,
//	                'limit', rl.`limit`,
//	                'duration', rl.duration,
//	                'auto_apply', rl.auto_apply = 1
//	            )
//	        )
//	        FROM ratelimits rl WHERE rl.identity_id = i.id),
//	        JSON_ARRAY()
//	    ) as ratelimits
//	FROM identities i
//	WHERE i.workspace_id = ?
//	  AND i.external_id = ?
//	  AND i.deleted = ?
//	LIMIT 1
func (q *Queries) FindIdentityWithRatelimits(ctx context.Context, db DBTX, arg FindIdentityWithRatelimitsParams) ([]FindIdentityWithRatelimitsRow, error) {
	rows, err := db.QueryContext(ctx, findIdentityWithRatelimits,
		arg.WorkspaceID,
		arg.Identity,
		arg.Deleted,
		arg.WorkspaceID,
		arg.Identity,
		arg.Deleted,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindIdentityWithRatelimitsRow
	for rows.Next() {
		var i FindIdentityWithRatelimitsRow
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.WorkspaceID,
			&i.Environment,
			&i.Meta,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ratelimits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
