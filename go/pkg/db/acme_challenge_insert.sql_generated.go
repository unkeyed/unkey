// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: acme_challenge_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertAcmeChallenge = `-- name: InsertAcmeChallenge :exec
INSERT INTO acme_challenges (
    workspace_id,
    domain_id,
    token,
    authorization,
    status,
    type,
    created_at,
    updated_at,
    expires_at
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type InsertAcmeChallengeParams struct {
	WorkspaceID   string               `db:"workspace_id"`
	DomainID      string               `db:"domain_id"`
	Token         string               `db:"token"`
	Authorization string               `db:"authorization"`
	Status        AcmeChallengesStatus `db:"status"`
	Type          AcmeChallengesType   `db:"type"`
	CreatedAt     int64                `db:"created_at"`
	UpdatedAt     sql.NullInt64        `db:"updated_at"`
	ExpiresAt     int64                `db:"expires_at"`
}

// InsertAcmeChallenge
//
//	INSERT INTO acme_challenges (
//	    workspace_id,
//	    domain_id,
//	    token,
//	    authorization,
//	    status,
//	    type,
//	    created_at,
//	    updated_at,
//	    expires_at
//	) VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?
//	)
func (q *Queries) InsertAcmeChallenge(ctx context.Context, db DBTX, arg InsertAcmeChallengeParams) error {
	_, err := db.ExecContext(ctx, insertAcmeChallenge,
		arg.WorkspaceID,
		arg.DomainID,
		arg.Token,
		arg.Authorization,
		arg.Status,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	return err
}
