// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credits_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertCredit = `-- name: InsertCredit :exec
INSERT INTO ` + "`" + `credits` + "`" + ` (
    id,
    workspace_id,
    key_id,
    identity_id,
    remaining,
    refill_day,
    refill_amount,
    created_at,
    updated_at,
    refilled_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertCreditParams struct {
	ID           string         `db:"id"`
	WorkspaceID  string         `db:"workspace_id"`
	KeyID        sql.NullString `db:"key_id"`
	IdentityID   sql.NullString `db:"identity_id"`
	Remaining    int32          `db:"remaining"`
	RefillDay    sql.NullInt16  `db:"refill_day"`
	RefillAmount sql.NullInt32  `db:"refill_amount"`
	CreatedAt    int64          `db:"created_at"`
	UpdatedAt    sql.NullInt64  `db:"updated_at"`
	RefilledAt   sql.NullInt64  `db:"refilled_at"`
}

// InsertCredit
//
//	INSERT INTO `credits` (
//	    id,
//	    workspace_id,
//	    key_id,
//	    identity_id,
//	    remaining,
//	    refill_day,
//	    refill_amount,
//	    created_at,
//	    updated_at,
//	    refilled_at
//	) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
func (q *Queries) InsertCredit(ctx context.Context, db DBTX, arg InsertCreditParams) error {
	_, err := db.ExecContext(ctx, insertCredit,
		arg.ID,
		arg.WorkspaceID,
		arg.KeyID,
		arg.IdentityID,
		arg.Remaining,
		arg.RefillDay,
		arg.RefillAmount,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefilledAt,
	)
	return err
}
