// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: domain_find_by_deployment_id.sql

package db

import (
	"context"
	"database/sql"
)

const findDomainsByDeploymentId = `-- name: FindDomainsByDeploymentId :many
SELECT
    id,
    workspace_id,
    project_id,
    domain,
    deployment_id,
    created_at,
    updated_at
FROM domains
WHERE deployment_id = ?
ORDER BY created_at ASC
`

type FindDomainsByDeploymentIdRow struct {
	ID           string         `db:"id"`
	WorkspaceID  string         `db:"workspace_id"`
	ProjectID    sql.NullString `db:"project_id"`
	Domain       string         `db:"domain"`
	DeploymentID sql.NullString `db:"deployment_id"`
	CreatedAt    int64          `db:"created_at"`
	UpdatedAt    sql.NullInt64  `db:"updated_at"`
}

// FindDomainsByDeploymentId
//
//	SELECT
//	    id,
//	    workspace_id,
//	    project_id,
//	    domain,
//	    deployment_id,
//	    created_at,
//	    updated_at
//	FROM domains
//	WHERE deployment_id = ?
//	ORDER BY created_at ASC
func (q *Queries) FindDomainsByDeploymentId(ctx context.Context, db DBTX, deploymentID sql.NullString) ([]FindDomainsByDeploymentIdRow, error) {
	rows, err := db.QueryContext(ctx, findDomainsByDeploymentId, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindDomainsByDeploymentIdRow
	for rows.Next() {
		var i FindDomainsByDeploymentIdRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ProjectID,
			&i.Domain,
			&i.DeploymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
