// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission_find_many_by_id_or_slug.sql

package db

import (
	"context"
	"strings"
)

const findManyPermissionsByIdOrSlug = `-- name: FindManyPermissionsByIdOrSlug :many
SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m
FROM permissions
WHERE workspace_id = ? AND (id IN (/*SLICE:ids*/?) OR slug IN (/*SLICE:ids*/?))
`

type FindManyPermissionsByIdOrSlugParams struct {
	WorkspaceID string   `db:"workspace_id"`
	Ids         []string `db:"ids"`
}

// FindManyPermissionsByIdOrSlug
//
//	SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m
//	FROM permissions
//	WHERE workspace_id = ? AND (id IN (/*SLICE:ids*/?) OR slug IN (/*SLICE:ids*/?))
func (q *Queries) FindManyPermissionsByIdOrSlug(ctx context.Context, db DBTX, arg FindManyPermissionsByIdOrSlugParams) ([]Permission, error) {
	query := findManyPermissionsByIdOrSlug
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
