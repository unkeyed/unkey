// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project_insert.sql

package db

import (
	"context"
	"database/sql"
)

const insertProject = `-- name: InsertProject :exec
INSERT INTO projects (
    id,
    workspace_id,
    partition_id,
    name,
    slug,
    git_repository_url,
    default_branch,
    delete_protection,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type InsertProjectParams struct {
	ID               string         `db:"id"`
	WorkspaceID      string         `db:"workspace_id"`
	PartitionID      string         `db:"partition_id"`
	Name             string         `db:"name"`
	Slug             string         `db:"slug"`
	GitRepositoryUrl sql.NullString `db:"git_repository_url"`
	DefaultBranch    sql.NullString `db:"default_branch"`
	DeleteProtection sql.NullBool   `db:"delete_protection"`
	CreatedAt        int64          `db:"created_at"`
	UpdatedAt        sql.NullInt64  `db:"updated_at"`
}

// InsertProject
//
//	INSERT INTO projects (
//	    id,
//	    workspace_id,
//	    partition_id,
//	    name,
//	    slug,
//	    git_repository_url,
//	    default_branch,
//	    delete_protection,
//	    created_at,
//	    updated_at
//	) VALUES (
//	    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
//	)
func (q *Queries) InsertProject(ctx context.Context, db DBTX, arg InsertProjectParams) error {
	_, err := db.ExecContext(ctx, insertProject,
		arg.ID,
		arg.WorkspaceID,
		arg.PartitionID,
		arg.Name,
		arg.Slug,
		arg.GitRepositoryUrl,
		arg.DefaultBranch,
		arg.DeleteProtection,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
