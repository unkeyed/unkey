// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: branch_upsert.sql

package db

import (
	"context"
	"database/sql"
)

const upsertBranch = `-- name: UpsertBranch :exec
INSERT INTO branches (
    id,
    workspace_id,
    project_id,
    name,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?
) ON DUPLICATE KEY UPDATE
    updated_at = VALUES(updated_at)
`

type UpsertBranchParams struct {
	ID          string        `db:"id"`
	WorkspaceID string        `db:"workspace_id"`
	ProjectID   string        `db:"project_id"`
	Name        string        `db:"name"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
}

// UpsertBranch
//
//	INSERT INTO branches (
//	    id,
//	    workspace_id,
//	    project_id,
//	    name,
//	    created_at,
//	    updated_at
//	) VALUES (
//	    ?, ?, ?, ?, ?, ?
//	) ON DUPLICATE KEY UPDATE
//	    updated_at = VALUES(updated_at)
func (q *Queries) UpsertBranch(ctx context.Context, db DBTX, arg UpsertBranchParams) error {
	_, err := db.ExecContext(ctx, upsertBranch,
		arg.ID,
		arg.WorkspaceID,
		arg.ProjectID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
