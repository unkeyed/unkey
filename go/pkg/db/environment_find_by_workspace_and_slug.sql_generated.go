// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: environment_find_by_workspace_and_slug.sql

package db

import (
	"context"
	"database/sql"
)

const findEnvironmentByWorkspaceAndSlug = `-- name: FindEnvironmentByWorkspaceAndSlug :one
SELECT id, workspace_id, project_id, slug, description
FROM environments
WHERE workspace_id = ? AND slug = ?
`

type FindEnvironmentByWorkspaceAndSlugParams struct {
	WorkspaceID string `db:"workspace_id"`
	Slug        string `db:"slug"`
}

type FindEnvironmentByWorkspaceAndSlugRow struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	ProjectID   string         `db:"project_id"`
	Slug        string         `db:"slug"`
	Description sql.NullString `db:"description"`
}

// FindEnvironmentByWorkspaceAndSlug
//
//	SELECT id, workspace_id, project_id, slug, description
//	FROM environments
//	WHERE workspace_id = ? AND slug = ?
func (q *Queries) FindEnvironmentByWorkspaceAndSlug(ctx context.Context, db DBTX, arg FindEnvironmentByWorkspaceAndSlugParams) (FindEnvironmentByWorkspaceAndSlugRow, error) {
	row := db.QueryRowContext(ctx, findEnvironmentByWorkspaceAndSlug, arg.WorkspaceID, arg.Slug)
	var i FindEnvironmentByWorkspaceAndSlugRow
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProjectID,
		&i.Slug,
		&i.Description,
	)
	return i, err
}
