// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission_list_by_key_id.sql

package db

import (
	"context"
)

const listPermissionsByKeyID = `-- name: ListPermissionsByKeyID :many
WITH direct_permissions AS (
    SELECT p.slug as permission_slug
    FROM keys_permissions kp
    JOIN permissions p ON kp.permission_id = p.id
    WHERE kp.key_id = ?
),
role_permissions AS (
    SELECT p.slug as permission_slug
    FROM keys_roles kr
    JOIN roles_permissions rp ON kr.role_id = rp.role_id
    JOIN permissions p ON rp.permission_id = p.id
    WHERE kr.key_id = ?
)
SELECT DISTINCT permission_slug
FROM (
    SELECT permission_slug FROM direct_permissions
    UNION ALL
    SELECT permission_slug FROM role_permissions
) all_permissions
`

type ListPermissionsByKeyIDParams struct {
	KeyID string `db:"key_id"`
}

// ListPermissionsByKeyID
//
//	WITH direct_permissions AS (
//	    SELECT p.slug as permission_slug
//	    FROM keys_permissions kp
//	    JOIN permissions p ON kp.permission_id = p.id
//	    WHERE kp.key_id = ?
//	),
//	role_permissions AS (
//	    SELECT p.slug as permission_slug
//	    FROM keys_roles kr
//	    JOIN roles_permissions rp ON kr.role_id = rp.role_id
//	    JOIN permissions p ON rp.permission_id = p.id
//	    WHERE kr.key_id = ?
//	)
//	SELECT DISTINCT permission_slug
//	FROM (
//	    SELECT permission_slug FROM direct_permissions
//	    UNION ALL
//	    SELECT permission_slug FROM role_permissions
//	) all_permissions
func (q *Queries) ListPermissionsByKeyID(ctx context.Context, db DBTX, arg ListPermissionsByKeyIDParams) ([]string, error) {
	rows, err := db.QueryContext(ctx, listPermissionsByKeyID, arg.KeyID, arg.KeyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var permission_slug string
		if err := rows.Scan(&permission_slug); err != nil {
			return nil, err
		}
		items = append(items, permission_slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
