// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workspaces_list.sql

package db

import (
	"context"
)

const listWorkspaces = `-- name: ListWorkspaces :many
SELECT
   w.id, w.org_id, w.name, w.plan, w.tier, w.stripe_customer_id, w.stripe_subscription_id, w.beta_features, w.features, w.subscriptions, w.enabled, w.delete_protection, w.created_at_m, w.updated_at_m, w.deleted_at_m,
   q.workspace_id, q.requests_per_month, q.logs_retention_days, q.audit_logs_retention_days, q.team
FROM ` + "`" + `workspaces` + "`" + ` w
LEFT JOIN quota q ON w.id = q.workspace_id
WHERE w.id > ?
ORDER BY w.id ASC
LIMIT 100
`

type ListWorkspacesRow struct {
	Workspace Workspace `db:"workspace"`
	Quotas    Quotum    `db:"quotum"`
}

// ListWorkspaces
//
//	SELECT
//	   w.id, w.org_id, w.name, w.plan, w.tier, w.stripe_customer_id, w.stripe_subscription_id, w.beta_features, w.features, w.subscriptions, w.enabled, w.delete_protection, w.created_at_m, w.updated_at_m, w.deleted_at_m,
//	   q.workspace_id, q.requests_per_month, q.logs_retention_days, q.audit_logs_retention_days, q.team
//	FROM `workspaces` w
//	LEFT JOIN quota q ON w.id = q.workspace_id
//	WHERE w.id > ?
//	ORDER BY w.id ASC
//	LIMIT 100
func (q *Queries) ListWorkspaces(ctx context.Context, db DBTX, cursor string) ([]ListWorkspacesRow, error) {
	rows, err := db.QueryContext(ctx, listWorkspaces, cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWorkspacesRow
	for rows.Next() {
		var i ListWorkspacesRow
		if err := rows.Scan(
			&i.Workspace.ID,
			&i.Workspace.OrgID,
			&i.Workspace.Name,
			&i.Workspace.Plan,
			&i.Workspace.Tier,
			&i.Workspace.StripeCustomerID,
			&i.Workspace.StripeSubscriptionID,
			&i.Workspace.BetaFeatures,
			&i.Workspace.Features,
			&i.Workspace.Subscriptions,
			&i.Workspace.Enabled,
			&i.Workspace.DeleteProtection,
			&i.Workspace.CreatedAtM,
			&i.Workspace.UpdatedAtM,
			&i.Workspace.DeletedAtM,
			&i.Quotas.WorkspaceID,
			&i.Quotas.RequestsPerMonth,
			&i.Quotas.LogsRetentionDays,
			&i.Quotas.AuditLogsRetentionDays,
			&i.Quotas.Team,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
