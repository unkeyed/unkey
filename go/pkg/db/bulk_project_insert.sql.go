// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertProject is the base query for bulk insert
const bulkInsertProject = `INSERT INTO projects ( id, workspace_id, partition_id, name, slug, git_repository_url, default_branch, delete_protection, created_at, updated_at ) VALUES %s`

// InsertProjects performs bulk insert in a single query
func (q *BulkQueries) InsertProjects(ctx context.Context, db DBTX, args []InsertProjectParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertProject, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.PartitionID)
		allArgs = append(allArgs, arg.Name)
		allArgs = append(allArgs, arg.Slug)
		allArgs = append(allArgs, arg.GitRepositoryUrl)
		allArgs = append(allArgs, arg.DefaultBranch)
		allArgs = append(allArgs, arg.DeleteProtection)
		allArgs = append(allArgs, arg.CreatedAt)
		allArgs = append(allArgs, arg.UpdatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
