// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: domain_challenge_list_executable.sql

package db

import (
	"context"
)

const listExecutableChallenges = `-- name: ListExecutableChallenges :many
SELECT dc.id, dc.workspace_id, domain FROM domain_challenges dc
JOIN domains d ON dc.domain_id = d.id
WHERE dc.status = 'waiting' OR (dc.status = 'verified' AND dc.expires_at <= DATE_ADD(NOW(), INTERVAL 30 DAY))
ORDER BY d.created_at ASC
`

type ListExecutableChallengesRow struct {
	ID          uint64 `db:"id"`
	WorkspaceID string `db:"workspace_id"`
	Domain      string `db:"domain"`
}

// ListExecutableChallenges
//
//	SELECT dc.id, dc.workspace_id, domain FROM domain_challenges dc
//	JOIN domains d ON dc.domain_id = d.id
//	WHERE dc.status = 'waiting' OR (dc.status = 'verified' AND dc.expires_at <= DATE_ADD(NOW(), INTERVAL 30 DAY))
//	ORDER BY d.created_at ASC
func (q *Queries) ListExecutableChallenges(ctx context.Context, db DBTX) ([]ListExecutableChallengesRow, error) {
	rows, err := db.QueryContext(ctx, listExecutableChallenges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListExecutableChallengesRow
	for rows.Next() {
		var i ListExecutableChallengesRow
		if err := rows.Scan(&i.ID, &i.WorkspaceID, &i.Domain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
