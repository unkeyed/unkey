// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission_find_by_slugs.sql

package db

import (
	"context"
	"strings"
)

const findPermissionsBySlugs = `-- name: FindPermissionsBySlugs :many
SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m FROM permissions WHERE workspace_id = ? AND slug IN (/*SLICE:slugs*/?)
`

type FindPermissionsBySlugsParams struct {
	WorkspaceID string   `db:"workspace_id"`
	Slugs       []string `db:"slugs"`
}

// FindPermissionsBySlugs
//
//	SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m FROM permissions WHERE workspace_id = ? AND slug IN (/*SLICE:slugs*/?)
func (q *Queries) FindPermissionsBySlugs(ctx context.Context, db DBTX, arg FindPermissionsBySlugsParams) ([]Permission, error) {
	query := findPermissionsBySlugs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.Slugs) > 0 {
		for _, v := range arg.Slugs {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:slugs*/?", strings.Repeat(",?", len(arg.Slugs))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:slugs*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
