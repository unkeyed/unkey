// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: identity_list_ratelimits_by_ids.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const listIdentityRatelimitsByIDs = `-- name: ListIdentityRatelimitsByIDs :many
SELECT id, name, workspace_id, created_at, updated_at, key_id, identity_id, ` + "`" + `limit` + "`" + `, duration, auto_apply FROM ratelimits WHERE identity_id IN (/*SLICE:ids*/?)
`

// ListIdentityRatelimitsByIDs
//
//	SELECT id, name, workspace_id, created_at, updated_at, key_id, identity_id, `limit`, duration, auto_apply FROM ratelimits WHERE identity_id IN (/*SLICE:ids*/?)
func (q *Queries) ListIdentityRatelimitsByIDs(ctx context.Context, db DBTX, ids []sql.NullString) ([]Ratelimit, error) {
	query := listIdentityRatelimitsByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ratelimit
	for rows.Next() {
		var i Ratelimit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.WorkspaceID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.KeyID,
			&i.IdentityID,
			&i.Limit,
			&i.Duration,
			&i.AutoApply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
