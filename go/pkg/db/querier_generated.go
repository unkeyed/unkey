// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
)

type Querier interface {
	//DeleteRatelimitNamespace
	//
	//  UPDATE `ratelimit_namespaces`
	//  SET deleted_at_m = ?
	//  WHERE id = ?
	DeleteRatelimitNamespace(ctx context.Context, db DBTX, arg DeleteRatelimitNamespaceParams) (sql.Result, error)
	//FindKeyByHash
	//
	//  SELECT
	//      id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment
	//  FROM `keys`
	//  WHERE hash = ?
	FindKeyByHash(ctx context.Context, db DBTX, hash string) (Key, error)
	//FindKeyByID
	//
	//  SELECT
	//      k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
	//      i.id, i.external_id, i.workspace_id, i.environment, i.created_at, i.updated_at, i.meta
	//  FROM `keys` k
	//  LEFT JOIN identities i ON k.identity_id = i.id
	//  WHERE k.id = ?
	FindKeyByID(ctx context.Context, db DBTX, id string) (FindKeyByIDRow, error)
	//FindKeyForVerification
	//
	//  WITH direct_permissions AS (
	//      SELECT kp.key_id, p.name as permission_name
	//      FROM keys_permissions kp
	//      JOIN permissions p ON kp.permission_id = p.id
	//  ),
	//  role_permissions AS (
	//      SELECT kr.key_id, p.name as permission_name
	//      FROM keys_roles kr
	//      JOIN roles_permissions rp ON kr.role_id = rp.role_id
	//      JOIN permissions p ON rp.permission_id = p.id
	//  ),
	//  all_permissions AS (
	//      SELECT key_id, permission_name FROM direct_permissions
	//      UNION
	//      SELECT key_id, permission_name FROM role_permissions
	//  ),
	//  all_ratelimits AS (
	//      SELECT
	//          key_id as target_id,
	//          'key' as target_type,
	//          name,
	//          `limit`,
	//          duration
	//      FROM ratelimits
	//      WHERE key_id IS NOT NULL
	//      UNION
	//      SELECT
	//          identity_id as target_id,
	//          'identity' as target_type,
	//          name,
	//          `limit`,
	//          duration
	//      FROM ratelimits
	//      WHERE identity_id IS NOT NULL
	//  )
	//  SELECT
	//      k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
	//      i.id, i.external_id, i.workspace_id, i.environment, i.created_at, i.updated_at, i.meta,
	//      JSON_ARRAYAGG(
	//          JSON_OBJECT(
	//              'target_type', rl.target_type,
	//              'name', rl.name,
	//              'limit', rl.limit,
	//              'duration', rl.duration
	//          )
	//      ) as ratelimits,
	//      GROUP_CONCAT(DISTINCT perms.permission_name) as permissions
	//  FROM `keys` k
	//  LEFT JOIN identities i ON k.identity_id = i.id
	//  LEFT JOIN all_permissions perms ON k.id = perms.key_id
	//  LEFT JOIN all_ratelimits rl ON (
	//      (rl.target_type = 'key' AND rl.target_id = k.id) OR
	//      (rl.target_type = 'identity' AND rl.target_id = k.identity_id)
	//  )
	//  WHERE k.hash = ?
	//  GROUP BY k.id
	FindKeyForVerification(ctx context.Context, db DBTX, hash string) (FindKeyForVerificationRow, error)
	//FindKeyringByID
	//
	//  SELECT id, workspace_id, created_at_m, updated_at_m, deleted_at_m, store_encrypted_keys, default_prefix, default_bytes, size_approx, size_last_updated_at FROM `key_auth`
	//  WHERE id = ?
	FindKeyringByID(ctx context.Context, db DBTX, id string) (KeyAuth, error)
	//FindPermissionsForKey
	//
	//  WITH direct_permissions AS (
	//      SELECT p.name as permission_name
	//      FROM keys_permissions kp
	//      JOIN permissions p ON kp.permission_id = p.id
	//      WHERE kp.key_id = ?
	//  ),
	//  role_permissions AS (
	//      SELECT p.name as permission_name
	//      FROM keys_roles kr
	//      JOIN roles_permissions rp ON kr.role_id = rp.role_id
	//      JOIN permissions p ON rp.permission_id = p.id
	//      WHERE kr.key_id = ?
	//  )
	//  SELECT DISTINCT permission_name
	//  FROM (
	//      SELECT permission_name FROM direct_permissions
	//      UNION ALL
	//      SELECT permission_name FROM role_permissions
	//  ) all_permissions
	FindPermissionsForKey(ctx context.Context, db DBTX, arg FindPermissionsForKeyParams) ([]string, error)
	//FindRatelimitNamespaceByID
	//
	//  SELECT id, workspace_id, name, created_at_m, updated_at_m, deleted_at_m FROM `ratelimit_namespaces`
	//  WHERE id = ?
	FindRatelimitNamespaceByID(ctx context.Context, db DBTX, id string) (RatelimitNamespace, error)
	//FindRatelimitNamespaceByName
	//
	//  SELECT id, workspace_id, name, created_at_m, updated_at_m, deleted_at_m FROM `ratelimit_namespaces`
	//  WHERE name = ?
	//  AND workspace_id = ?
	FindRatelimitNamespaceByName(ctx context.Context, db DBTX, arg FindRatelimitNamespaceByNameParams) (RatelimitNamespace, error)
	//FindRatelimitOverrideById
	//
	//  SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at_m, updated_at_m, deleted_at_m FROM ratelimit_overrides
	//  WHERE
	//      workspace_id = ?
	//      AND id = ?
	FindRatelimitOverrideById(ctx context.Context, db DBTX, arg FindRatelimitOverrideByIdParams) (RatelimitOverride, error)
	//FindRatelimitOverrideMatches
	//
	//  SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at_m, updated_at_m, deleted_at_m FROM ratelimit_overrides
	//  WHERE
	//      workspace_id = ?
	//      AND namespace_id = ?
	//      AND identifier LIKE ?
	FindRatelimitOverrideMatches(ctx context.Context, db DBTX, arg FindRatelimitOverrideMatchesParams) ([]RatelimitOverride, error)
	//FindRatelimitOverridesByIdentifier
	//
	//  SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at_m, updated_at_m, deleted_at_m FROM ratelimit_overrides
	//  WHERE
	//      workspace_id = ?
	//      AND namespace_id = ?
	//      AND identifier = ?
	FindRatelimitOverridesByIdentifier(ctx context.Context, db DBTX, arg FindRatelimitOverridesByIdentifierParams) (RatelimitOverride, error)
	//FindWorkspaceByID
	//
	//  SELECT id, tenant_id, name, plan, stripe_customer_id, stripe_subscription_id, trial_ends, beta_features, features, plan_locked_until, plan_downgrade_request, plan_changed, subscriptions, enabled, delete_protection, created_at_m, updated_at_m, deleted_at_m FROM `workspaces`
	//  WHERE id = ?
	FindWorkspaceByID(ctx context.Context, db DBTX, id string) (Workspace, error)
	//HardDeleteWorkspace
	//
	//  DELETE FROM `workspaces`
	//  WHERE id = ?
	//  AND delete_protection = false
	HardDeleteWorkspace(ctx context.Context, db DBTX, id string) (sql.Result, error)
	//InsertAuditLog
	//
	//  INSERT INTO `audit_log` (
	//      id,
	//      workspace_id,
	//      bucket_id,
	//      event,
	//      time,
	//      display,
	//      remote_ip,
	//      user_agent,
	//      actor_type,
	//      actor_id,
	//      actor_name,
	//      actor_meta,
	//      created_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertAuditLog(ctx context.Context, db DBTX, arg InsertAuditLogParams) error
	//InsertAuditLogTarget
	//
	//  INSERT INTO `audit_log_target` (
	//      workspace_id,
	//      bucket_id,
	//      audit_log_id,
	//      display_name,
	//      type,
	//      id,
	//      name,
	//      meta,
	//      created_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertAuditLogTarget(ctx context.Context, db DBTX, arg InsertAuditLogTargetParams) error
	//InsertKey
	//
	//  INSERT INTO `keys` (
	//      id,
	//      key_auth_id,
	//      hash,
	//      start,
	//      workspace_id,
	//      for_workspace_id,
	//      name,
	//      owner_id,
	//      identity_id,
	//      meta,
	//      expires,
	//      created_at_m,
	//      enabled,
	//      remaining_requests,
	//      ratelimit_async,
	//      ratelimit_limit,
	//      ratelimit_duration,
	//      environment
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      null,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertKey(ctx context.Context, db DBTX, arg InsertKeyParams) error
	//InsertKeyPermission
	//
	//  INSERT INTO `keys_permissions` (
	//      key_id,
	//      permission_id,
	//      workspace_id,
	//      created_at_m
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertKeyPermission(ctx context.Context, db DBTX, arg InsertKeyPermissionParams) error
	//InsertKeyring
	//
	//  INSERT INTO `key_auth` (
	//      id,
	//      workspace_id,
	//      created_at_m,
	//      store_encrypted_keys,
	//      default_prefix,
	//      default_bytes,
	//      size_approx,
	//      size_last_updated_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//        ?,
	//      ?,
	//      ?,
	//      ?,
	//      0,
	//      0
	//  )
	InsertKeyring(ctx context.Context, db DBTX, arg InsertKeyringParams) error
	//InsertPermission
	//
	//  INSERT INTO `permissions` (
	//      id,
	//      workspace_id,
	//      name,
	//      description,
	//      created_at_m
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertPermission(ctx context.Context, db DBTX, arg InsertPermissionParams) error
	//InsertRatelimitNamespace
	//
	//  INSERT INTO
	//      `ratelimit_namespaces` (
	//          id,
	//          workspace_id,
	//          name,
	//          created_at_m,
	//          updated_at_m,
	//          deleted_at_m
	//          )
	//  VALUES
	//      (
	//          ?,
	//          ?,
	//          ?,
	//           ?,
	//          NULL,
	//          NULL
	//      )
	InsertRatelimitNamespace(ctx context.Context, db DBTX, arg InsertRatelimitNamespaceParams) error
	//InsertRatelimitOverride
	//
	//  INSERT INTO
	//      `ratelimit_overrides` (
	//          id,
	//          workspace_id,
	//          namespace_id,
	//          identifier,
	//          `limit`,
	//          duration,
	//          async,
	//          created_at_m
	//      )
	//  VALUES
	//      (
	//          ?,
	//          ?,
	//          ?,
	//          ?,
	//          ?,
	//          ?,
	//          false,
	//           ?
	//      )
	InsertRatelimitOverride(ctx context.Context, db DBTX, arg InsertRatelimitOverrideParams) error
	//InsertWorkspace
	//
	//  INSERT INTO `workspaces` (
	//      id,
	//      tenant_id,
	//      name,
	//      created_at_m,
	//      plan,
	//      beta_features,
	//      features,
	//      enabled,
	//      delete_protection,
	//      subscriptions
	//  )
	//  VALUES (
	//      ?,
	//      ?,
	//      ?,
	//       ?,
	//      'free',
	//      '{}',
	//      '{}',
	//      true,
	//      true,
	//      '{}'
	//  )
	InsertWorkspace(ctx context.Context, db DBTX, arg InsertWorkspaceParams) error
	//SoftDeleteRatelimitOverride
	//
	//  UPDATE `ratelimit_overrides`
	//  SET
	//      deleted_at_m =  ?
	//  WHERE id = ?
	SoftDeleteRatelimitOverride(ctx context.Context, db DBTX, arg SoftDeleteRatelimitOverrideParams) error
	//SoftDeleteWorkspace
	//
	//  UPDATE `workspaces`
	//  SET deleted_at_m = ?
	//  WHERE id = ?
	//  AND delete_protection = false
	SoftDeleteWorkspace(ctx context.Context, db DBTX, arg SoftDeleteWorkspaceParams) (sql.Result, error)
	//UpdateRatelimitOverride
	//
	//  UPDATE `ratelimit_overrides`
	//  SET
	//      `limit` = ?,
	//      duration = ?,
	//      async = ?,
	//      updated_at_m= ?
	//  WHERE id = ?
	UpdateRatelimitOverride(ctx context.Context, db DBTX, arg UpdateRatelimitOverrideParams) (sql.Result, error)
	//UpdateWorkspaceEnabled
	//
	//  UPDATE `workspaces`
	//  SET enabled = ?
	//  WHERE id = ?
	UpdateWorkspaceEnabled(ctx context.Context, db DBTX, arg UpdateWorkspaceEnabledParams) (sql.Result, error)
	//UpdateWorkspacePlan
	//
	//  UPDATE `workspaces`
	//  SET plan = ?
	//  WHERE id = ?
	UpdateWorkspacePlan(ctx context.Context, db DBTX, arg UpdateWorkspacePlanParams) (sql.Result, error)
}

var _ Querier = (*Queries)(nil)
