// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
)

type Querier interface {
	//DeleteAllKeyPermissionsByKeyID
	//
	//  DELETE FROM keys_permissions
	//  WHERE key_id = ?
	DeleteAllKeyPermissionsByKeyID(ctx context.Context, db DBTX, keyID string) error
	//DeleteAllKeyRolesByKeyID
	//
	//  DELETE FROM keys_roles
	//  WHERE key_id = ?
	DeleteAllKeyRolesByKeyID(ctx context.Context, db DBTX, keyID string) error
	//DeleteIdentity
	//
	//  DELETE FROM identities WHERE id = ?
	DeleteIdentity(ctx context.Context, db DBTX, id string) error
	//DeleteKeyByID
	//
	//  DELETE k, kp, kr, rl, ek
	//  FROM `keys` k
	//  LEFT JOIN keys_permissions kp ON k.id = kp.key_id
	//  LEFT JOIN keys_roles kr ON k.id = kr.key_id
	//  LEFT JOIN ratelimits rl ON k.id = rl.key_id
	//  LEFT JOIN encrypted_keys ek ON k.id = ek.key_id
	//  WHERE k.id = ?
	DeleteKeyByID(ctx context.Context, db DBTX, id string) error
	//DeleteKeyPermissionByKeyAndPermissionID
	//
	//  DELETE FROM keys_permissions
	//  WHERE key_id = ? AND permission_id = ?
	DeleteKeyPermissionByKeyAndPermissionID(ctx context.Context, db DBTX, arg DeleteKeyPermissionByKeyAndPermissionIDParams) error
	//DeleteManyKeyPermissionByKeyAndPermissionIDs
	//
	//  DELETE FROM keys_permissions
	//  WHERE key_id = ? AND permission_id IN (/*SLICE:ids*/?)
	DeleteManyKeyPermissionByKeyAndPermissionIDs(ctx context.Context, db DBTX, arg DeleteManyKeyPermissionByKeyAndPermissionIDsParams) error
	//DeleteManyKeyPermissionsByPermissionID
	//
	//  DELETE FROM keys_permissions
	//  WHERE permission_id = ?
	DeleteManyKeyPermissionsByPermissionID(ctx context.Context, db DBTX, permissionID string) error
	//DeleteManyKeyRolesByKeyAndRoleIDs
	//
	//  DELETE FROM keys_roles
	//  WHERE key_id = ? AND role_id IN(/*SLICE:role_ids*/?)
	DeleteManyKeyRolesByKeyAndRoleIDs(ctx context.Context, db DBTX, arg DeleteManyKeyRolesByKeyAndRoleIDsParams) error
	//DeleteManyKeyRolesByKeyID
	//
	//  DELETE FROM keys_roles
	//  WHERE key_id = ? AND role_id = ?
	DeleteManyKeyRolesByKeyID(ctx context.Context, db DBTX, arg DeleteManyKeyRolesByKeyIDParams) error
	//DeleteManyKeyRolesByRoleID
	//
	//  DELETE FROM keys_roles
	//  WHERE role_id = ?
	DeleteManyKeyRolesByRoleID(ctx context.Context, db DBTX, roleID string) error
	//DeleteManyRatelimitsByIDs
	//
	//  DELETE FROM ratelimits WHERE id IN (/*SLICE:ids*/?)
	DeleteManyRatelimitsByIDs(ctx context.Context, db DBTX, ids []string) error
	//DeleteManyRatelimitsByIdentityID
	//
	//  DELETE FROM ratelimits WHERE identity_id = ?
	DeleteManyRatelimitsByIdentityID(ctx context.Context, db DBTX, identityID sql.NullString) error
	//DeleteManyRolePermissionsByPermissionID
	//
	//  DELETE FROM roles_permissions
	//  WHERE permission_id = ?
	DeleteManyRolePermissionsByPermissionID(ctx context.Context, db DBTX, permissionID string) error
	//DeleteManyRolePermissionsByRoleID
	//
	//  DELETE FROM roles_permissions
	//  WHERE role_id = ?
	DeleteManyRolePermissionsByRoleID(ctx context.Context, db DBTX, roleID string) error
	//DeletePermission
	//
	//  DELETE FROM permissions
	//  WHERE id = ?
	DeletePermission(ctx context.Context, db DBTX, permissionID string) error
	//DeleteRatelimit
	//
	//  DELETE FROM `ratelimits` WHERE id = ?
	DeleteRatelimit(ctx context.Context, db DBTX, id string) error
	//DeleteRatelimitNamespace
	//
	//  UPDATE `ratelimit_namespaces`
	//  SET deleted_at_m = ?
	//  WHERE id = ?
	DeleteRatelimitNamespace(ctx context.Context, db DBTX, arg DeleteRatelimitNamespaceParams) (sql.Result, error)
	//DeleteRoleByID
	//
	//  DELETE FROM roles
	//  WHERE id = ?
	DeleteRoleByID(ctx context.Context, db DBTX, roleID string) error
	//FindApiByID
	//
	//  SELECT id, name, workspace_id, ip_whitelist, auth_type, key_auth_id, created_at_m, updated_at_m, deleted_at_m, delete_protection FROM apis WHERE id = ?
	FindApiByID(ctx context.Context, db DBTX, id string) (Api, error)
	//FindAuditLogTargetByID
	//
	//  SELECT audit_log_target.workspace_id, audit_log_target.bucket_id, audit_log_target.bucket, audit_log_target.audit_log_id, audit_log_target.display_name, audit_log_target.type, audit_log_target.id, audit_log_target.name, audit_log_target.meta, audit_log_target.created_at, audit_log_target.updated_at, audit_log.id, audit_log.workspace_id, audit_log.bucket, audit_log.bucket_id, audit_log.event, audit_log.time, audit_log.display, audit_log.remote_ip, audit_log.user_agent, audit_log.actor_type, audit_log.actor_id, audit_log.actor_name, audit_log.actor_meta, audit_log.created_at, audit_log.updated_at
	//  FROM audit_log_target
	//  JOIN audit_log ON audit_log.id = audit_log_target.audit_log_id
	//  WHERE audit_log_target.id = ?
	FindAuditLogTargetByID(ctx context.Context, db DBTX, id string) ([]FindAuditLogTargetByIDRow, error)
	//FindBranchByProjectName
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      project_id,
	//      name,
	//      created_at,
	//      updated_at
	//  FROM branches
	//  WHERE project_id = ? AND name = ?
	FindBranchByProjectName(ctx context.Context, db DBTX, arg FindBranchByProjectNameParams) (Branch, error)
	//FindBuildById
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      project_id,
	//      version_id,
	//      rootfs_image_id,
	//      git_commit_sha,
	//      git_branch,
	//      status,
	//      build_tool,
	//      error_message,
	//      started_at,
	//      completed_at,
	//      created_at,
	//      updated_at
	//  FROM `builds`
	//  WHERE id = ?
	FindBuildById(ctx context.Context, db DBTX, id string) (Build, error)
	//FindHostnameRoutesByVersionId
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      project_id,
	//      hostname,
	//      version_id,
	//      is_enabled,
	//      created_at,
	//      updated_at
	//  FROM hostname_routes
	//  WHERE version_id = ? AND is_enabled = true
	//  ORDER BY created_at ASC
	FindHostnameRoutesByVersionId(ctx context.Context, db DBTX, versionID string) ([]HostnameRoute, error)
	//FindIdentityByExternalID
	//
	//  SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at FROM identities WHERE workspace_id = ? AND external_id = ? AND deleted = ?
	FindIdentityByExternalID(ctx context.Context, db DBTX, arg FindIdentityByExternalIDParams) (Identity, error)
	//FindIdentityByID
	//
	//  SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at FROM identities WHERE id = ? AND deleted = ?
	FindIdentityByID(ctx context.Context, db DBTX, arg FindIdentityByIDParams) (Identity, error)
	//FindKeyByHash
	//
	//  SELECT id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment FROM `keys` WHERE hash = ?
	FindKeyByHash(ctx context.Context, db DBTX, hash string) (Key, error)
	//FindKeyByID
	//
	//  SELECT
	//      id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment
	//  FROM `keys`
	//  WHERE id = ?
	FindKeyByID(ctx context.Context, db DBTX, id string) (Key, error)
	//FindKeyByIdOrHash
	//
	//  SELECT
	//      k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment, a.id, a.name, a.workspace_id, a.ip_whitelist, a.auth_type, a.key_auth_id, a.created_at_m, a.updated_at_m, a.deleted_at_m, a.delete_protection,
	//      ek.encrypted as encrypted_key,
	//  	ek.encryption_key_id as encryption_key_id
	//  FROM `keys` k
	//  JOIN apis a USING(key_auth_id)
	//  LEFT JOIN encrypted_keys ek ON k.id = ek.key_id
	//  WHERE (CASE
	//      WHEN ? IS NOT NULL THEN k.id = ?
	//      WHEN ? IS NOT NULL THEN k.hash = ?
	//      ELSE FALSE
	//  END) AND k.deleted_at_m IS NULL AND a.deleted_at_m IS NULL
	FindKeyByIdOrHash(ctx context.Context, db DBTX, arg FindKeyByIdOrHashParams) (FindKeyByIdOrHashRow, error)
	//FindKeyCredits
	//
	//  SELECT remaining_requests FROM `keys` k WHERE k.id = ?
	FindKeyCredits(ctx context.Context, db DBTX, id string) (sql.NullInt32, error)
	//FindKeyEncryptionByKeyID
	//
	//  SELECT workspace_id, key_id, created_at, updated_at, encrypted, encryption_key_id FROM encrypted_keys WHERE key_id = ?
	FindKeyEncryptionByKeyID(ctx context.Context, db DBTX, keyID string) (EncryptedKey, error)
	//FindKeyForVerification
	//
	//  select k.id,
	//         k.key_auth_id,
	//         k.workspace_id,
	//         k.for_workspace_id,
	//         k.name,
	//         k.meta,
	//         k.expires,
	//         k.deleted_at_m,
	//         k.refill_day,
	//         k.refill_amount,
	//         k.last_refill_at,
	//         k.enabled,
	//         k.remaining_requests,
	//         a.ip_whitelist,
	//         a.workspace_id  as api_workspace_id,
	//         a.id            as api_id,
	//         a.deleted_at_m  as api_deleted_at_m,
	//
	//         COALESCE(
	//                 (SELECT JSON_ARRAYAGG(name)
	//                  FROM (SELECT name
	//                        FROM keys_roles kr
	//                                 JOIN roles r ON r.id = kr.role_id
	//                        WHERE kr.key_id = k.id) as roles),
	//                 JSON_ARRAY()
	//         )               as roles,
	//
	//         COALESCE(
	//                 (SELECT JSON_ARRAYAGG(slug)
	//                  FROM (SELECT slug
	//                        FROM keys_permissions kp
	//                                 JOIN permissions p ON kp.permission_id = p.id
	//                        WHERE kp.key_id = k.id
	//
	//                        UNION ALL
	//
	//                        SELECT slug
	//                        FROM keys_roles kr
	//                                 JOIN roles_permissions rp ON kr.role_id = rp.role_id
	//                                 JOIN permissions p ON rp.permission_id = p.id
	//                        WHERE kr.key_id = k.id) as combined_perms),
	//                 JSON_ARRAY()
	//         )               as permissions,
	//
	//         coalesce(
	//                 (select json_arrayagg(
	//                      json_object(
	//                         'id', rl.id,
	//                         'name', rl.name,
	//                         'key_id', rl.key_id,
	//                         'identity_id', rl.identity_id,
	//                         'limit', rl.limit,
	//                         'duration', rl.duration,
	//                         'auto_apply', rl.auto_apply
	//                      )
	//                  )
	//                  from `ratelimits` rl
	//                  where rl.key_id = k.id
	//                     OR rl.identity_id = i.id),
	//                 json_array()
	//         ) as ratelimits,
	//
	//         i.id as identity_id,
	//         i.external_id,
	//         i.meta          as identity_meta,
	//         ka.deleted_at_m as key_auth_deleted_at_m,
	//         ws.enabled      as workspace_enabled,
	//         fws.enabled     as for_workspace_enabled
	//  from `keys` k
	//           JOIN apis a USING (key_auth_id)
	//           JOIN key_auth ka ON ka.id = k.key_auth_id
	//           JOIN workspaces ws ON ws.id = k.workspace_id
	//           LEFT JOIN workspaces fws ON fws.id = k.for_workspace_id
	//           LEFT JOIN identities i ON k.identity_id = i.id AND i.deleted = 0
	//  where k.hash = ?
	//    and k.deleted_at_m is null
	FindKeyForVerification(ctx context.Context, db DBTX, hash string) (FindKeyForVerificationRow, error)
	//FindKeyRoleByKeyAndRoleID
	//
	//  SELECT key_id, role_id, workspace_id, created_at_m, updated_at_m
	//  FROM keys_roles
	//  WHERE key_id = ?
	//    AND role_id = ?
	FindKeyRoleByKeyAndRoleID(ctx context.Context, db DBTX, arg FindKeyRoleByKeyAndRoleIDParams) ([]KeysRole, error)
	//FindKeyringByID
	//
	//  SELECT id, workspace_id, created_at_m, updated_at_m, deleted_at_m, store_encrypted_keys, default_prefix, default_bytes, size_approx, size_last_updated_at FROM `key_auth` WHERE id = ?
	FindKeyringByID(ctx context.Context, db DBTX, id string) (KeyAuth, error)
	//FindLatestBuildByVersionId
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      project_id,
	//      version_id,
	//      rootfs_image_id,
	//      git_commit_sha,
	//      git_branch,
	//      status,
	//      build_tool,
	//      error_message,
	//      started_at,
	//      completed_at,
	//      created_at,
	//      updated_at
	//  FROM `builds`
	//  WHERE version_id = ?
	//  ORDER BY created_at DESC
	//  LIMIT 1
	FindLatestBuildByVersionId(ctx context.Context, db DBTX, versionID string) (Build, error)
	//FindManyRolesByIdOrNameWithPerms
	//
	//  SELECT id, workspace_id, name, description, created_at_m, updated_at_m, COALESCE(
	//          (SELECT JSON_ARRAYAGG(
	//              json_object(
	//                  'id', permission.id,
	//                  'name', permission.name,
	//                  'slug', permission.slug,
	//                  'description', permission.description
	//             )
	//          )
	//           FROM (SELECT name, id, slug, description
	//                 FROM roles_permissions rp
	//                          JOIN permissions p ON p.id = rp.permission_id
	//                 WHERE rp.role_id = r.id) as permission),
	//          JSON_ARRAY()
	//  ) as permissions
	//  FROM roles r
	//  WHERE r.workspace_id = ? AND (
	//      r.id IN (/*SLICE:search*/?)
	//      OR r.name IN (/*SLICE:search*/?)
	//  )
	FindManyRolesByIdOrNameWithPerms(ctx context.Context, db DBTX, arg FindManyRolesByIdOrNameWithPermsParams) ([]FindManyRolesByIdOrNameWithPermsRow, error)
	//FindManyRolesByNamesWithPerms
	//
	//  SELECT id, workspace_id, name, description, created_at_m, updated_at_m, COALESCE(
	//          (SELECT JSON_ARRAYAGG(
	//              json_object(
	//                  'id', permission.id,
	//                  'name', permission.name,
	//                  'slug', permission.slug,
	//                  'description', permission.description
	//             )
	//          )
	//           FROM (SELECT name, id, slug, description
	//                 FROM roles_permissions rp
	//                          JOIN permissions p ON p.id = rp.permission_id
	//                 WHERE rp.role_id = r.id) as permission),
	//          JSON_ARRAY()
	//  ) as permissions
	//  FROM roles r
	//  WHERE r.workspace_id = ? AND r.name IN (/*SLICE:names*/?)
	FindManyRolesByNamesWithPerms(ctx context.Context, db DBTX, arg FindManyRolesByNamesWithPermsParams) ([]FindManyRolesByNamesWithPermsRow, error)
	// Finds a permission record by its ID
	// Returns: The permission record if found
	//
	//  SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m
	//  FROM permissions
	//  WHERE id = ?
	//  LIMIT 1
	FindPermissionByID(ctx context.Context, db DBTX, permissionID string) (Permission, error)
	//FindPermissionByIdOrSlug
	//
	//  SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m
	//  FROM permissions
	//  WHERE workspace_id = ? AND (id = ? OR slug = ?)
	FindPermissionByIdOrSlug(ctx context.Context, db DBTX, arg FindPermissionByIdOrSlugParams) (Permission, error)
	//FindPermissionByNameAndWorkspaceID
	//
	//  SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m
	//  FROM permissions
	//  WHERE name = ?
	//  AND workspace_id = ?
	//  LIMIT 1
	FindPermissionByNameAndWorkspaceID(ctx context.Context, db DBTX, arg FindPermissionByNameAndWorkspaceIDParams) (Permission, error)
	//FindPermissionBySlugAndWorkspaceID
	//
	//  SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m
	//  FROM permissions
	//  WHERE slug = ?
	//  AND workspace_id = ?
	//  LIMIT 1
	FindPermissionBySlugAndWorkspaceID(ctx context.Context, db DBTX, arg FindPermissionBySlugAndWorkspaceIDParams) (Permission, error)
	//FindPermissionsBySlugs
	//
	//  SELECT id, workspace_id, name, slug, description, created_at_m, updated_at_m FROM permissions WHERE workspace_id = ? AND slug IN (/*SLICE:slugs*/?)
	FindPermissionsBySlugs(ctx context.Context, db DBTX, arg FindPermissionsBySlugsParams) ([]Permission, error)
	//FindProjectById
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      partition_id,
	//      name,
	//      slug,
	//      git_repository_url,
	//      default_branch,
	//      delete_protection,
	//      created_at,
	//      updated_at
	//  FROM projects
	//  WHERE id = ?
	FindProjectById(ctx context.Context, db DBTX, id string) (Project, error)
	//FindProjectByWorkspaceSlug
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      partition_id,
	//      name,
	//      slug,
	//      git_repository_url,
	//      default_branch,
	//      delete_protection,
	//      created_at,
	//      updated_at
	//  FROM projects
	//  WHERE workspace_id = ? AND slug = ?
	FindProjectByWorkspaceSlug(ctx context.Context, db DBTX, arg FindProjectByWorkspaceSlugParams) (Project, error)
	//FindRatelimitNamespace
	//
	//  SELECT id, workspace_id, name, created_at_m, updated_at_m, deleted_at_m,
	//         coalesce(
	//                 (select json_arrayagg(
	//                                 json_object(
	//                                         'id', ro.id,
	//                                         'identifier', ro.identifier,
	//                                         'limit', ro.limit,
	//                                         'duration', ro.duration
	//                                 )
	//                         )
	//                  from ratelimit_overrides ro where ro.namespace_id = ns.id AND ro.deleted_at_m IS NULL),
	//                 json_array()
	//         ) as overrides
	//  FROM `ratelimit_namespaces` ns
	//  WHERE ns.workspace_id = ?
	//  AND (ns.id = ? OR ns.name = ?)
	FindRatelimitNamespace(ctx context.Context, db DBTX, arg FindRatelimitNamespaceParams) (FindRatelimitNamespaceRow, error)
	//FindRatelimitNamespaceByID
	//
	//  SELECT id, workspace_id, name, created_at_m, updated_at_m, deleted_at_m FROM `ratelimit_namespaces`
	//  WHERE id = ?
	FindRatelimitNamespaceByID(ctx context.Context, db DBTX, id string) (RatelimitNamespace, error)
	//FindRatelimitNamespaceByName
	//
	//  SELECT id, workspace_id, name, created_at_m, updated_at_m, deleted_at_m FROM `ratelimit_namespaces`
	//  WHERE name = ?
	//  AND workspace_id = ?
	FindRatelimitNamespaceByName(ctx context.Context, db DBTX, arg FindRatelimitNamespaceByNameParams) (RatelimitNamespace, error)
	//FindRatelimitOverrideByID
	//
	//  SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at_m, updated_at_m, deleted_at_m FROM ratelimit_overrides
	//  WHERE
	//      workspace_id = ?
	//      AND id = ?
	FindRatelimitOverrideByID(ctx context.Context, db DBTX, arg FindRatelimitOverrideByIDParams) (RatelimitOverride, error)
	//FindRatelimitOverrideByIdentifier
	//
	//  SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at_m, updated_at_m, deleted_at_m FROM ratelimit_overrides
	//  WHERE
	//      workspace_id = ?
	//      AND namespace_id = ?
	//      AND identifier = ?
	FindRatelimitOverrideByIdentifier(ctx context.Context, db DBTX, arg FindRatelimitOverrideByIdentifierParams) (RatelimitOverride, error)
	// Finds a role record by its ID
	// Returns: The role record if found
	//
	//  SELECT id, workspace_id, name, description, created_at_m, updated_at_m
	//  FROM roles
	//  WHERE id = ?
	//  LIMIT 1
	FindRoleByID(ctx context.Context, db DBTX, roleID string) (Role, error)
	//FindRoleByIdOrNameWithPerms
	//
	//  SELECT id, workspace_id, name, description, created_at_m, updated_at_m, COALESCE(
	//          (SELECT JSON_ARRAYAGG(
	//              json_object(
	//                  'id', permission.id,
	//                  'name', permission.name,
	//                  'slug', permission.slug,
	//                  'description', permission.description
	//             )
	//          )
	//           FROM (SELECT name, id, slug, description
	//                 FROM roles_permissions rp
	//                          JOIN permissions p ON p.id = rp.permission_id
	//                 WHERE rp.role_id = r.id) as permission),
	//          JSON_ARRAY()
	//  ) as permissions
	//  FROM roles r
	//  WHERE r.workspace_id = ? AND (
	//      r.id = ?
	//      OR r.name = ?
	//  )
	FindRoleByIdOrNameWithPerms(ctx context.Context, db DBTX, arg FindRoleByIdOrNameWithPermsParams) (FindRoleByIdOrNameWithPermsRow, error)
	// Finds a role record by its name within a specific workspace
	// Returns: The role record if found
	//
	//  SELECT id, workspace_id, name, description, created_at_m, updated_at_m
	//  FROM roles
	//  WHERE name = ?
	//  AND workspace_id = ?
	//  LIMIT 1
	FindRoleByNameAndWorkspaceID(ctx context.Context, db DBTX, arg FindRoleByNameAndWorkspaceIDParams) (Role, error)
	//FindRolePermissionByRoleAndPermissionID
	//
	//  SELECT role_id, permission_id, workspace_id, created_at_m, updated_at_m
	//  FROM roles_permissions
	//  WHERE role_id = ?
	//    AND permission_id = ?
	FindRolePermissionByRoleAndPermissionID(ctx context.Context, db DBTX, arg FindRolePermissionByRoleAndPermissionIDParams) ([]RolesPermission, error)
	//FindRolesByNames
	//
	//  SELECT id, name FROM roles WHERE workspace_id = ? AND name IN (/*SLICE:names*/?)
	FindRolesByNames(ctx context.Context, db DBTX, arg FindRolesByNamesParams) ([]FindRolesByNamesRow, error)
	//FindVersionById
	//
	//  SELECT
	//      id,
	//      workspace_id,
	//      project_id,
	//      branch_id,
	//      build_id,
	//      rootfs_image_id,
	//      git_commit_sha,
	//      git_branch,
	//      config_snapshot,
	//      openapi_spec,
	//      status,
	//      created_at,
	//      updated_at
	//  FROM `versions`
	//  WHERE id = ?
	FindVersionById(ctx context.Context, db DBTX, id string) (Version, error)
	//FindVersionStepsByVersionId
	//
	//  SELECT
	//      version_id,
	//      status,
	//      message,
	//      error_message,
	//      created_at
	//  FROM version_steps
	//  WHERE version_id = ?
	//  ORDER BY created_at ASC
	FindVersionStepsByVersionId(ctx context.Context, db DBTX, versionID string) ([]VersionStep, error)
	//FindWorkspaceByID
	//
	//  SELECT id, org_id, name, partition_id, plan, tier, stripe_customer_id, stripe_subscription_id, beta_features, features, subscriptions, enabled, delete_protection, created_at_m, updated_at_m, deleted_at_m FROM `workspaces`
	//  WHERE id = ?
	FindWorkspaceByID(ctx context.Context, db DBTX, id string) (Workspace, error)
	//HardDeleteWorkspace
	//
	//  DELETE FROM `workspaces`
	//  WHERE id = ?
	//  AND delete_protection = false
	HardDeleteWorkspace(ctx context.Context, db DBTX, id string) (sql.Result, error)
	//InsertApi
	//
	//  INSERT INTO apis (
	//      id,
	//      name,
	//      workspace_id,
	//      auth_type,
	//      ip_whitelist,
	//      key_auth_id,
	//      created_at_m,
	//      deleted_at_m
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      NULL
	//  )
	InsertApi(ctx context.Context, db DBTX, arg InsertApiParams) error
	//InsertAuditLog
	//
	//  INSERT INTO `audit_log` (
	//      id,
	//      workspace_id,
	//      bucket_id,
	//      bucket,
	//      event,
	//      time,
	//      display,
	//      remote_ip,
	//      user_agent,
	//      actor_type,
	//      actor_id,
	//      actor_name,
	//      actor_meta,
	//      created_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      CAST(? AS JSON),
	//      ?
	//  )
	InsertAuditLog(ctx context.Context, db DBTX, arg InsertAuditLogParams) error
	//InsertAuditLogTarget
	//
	//  INSERT INTO `audit_log_target` (
	//      workspace_id,
	//      bucket_id,
	//      bucket,
	//      audit_log_id,
	//      display_name,
	//      type,
	//      id,
	//      name,
	//      meta,
	//      created_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      CAST(? AS JSON),
	//      ?
	//  )
	InsertAuditLogTarget(ctx context.Context, db DBTX, arg InsertAuditLogTargetParams) error
	//InsertBranch
	//
	//  INSERT INTO branches (
	//      id,
	//      workspace_id,
	//      project_id,
	//      name,
	//      created_at,
	//      updated_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?
	//  )
	InsertBranch(ctx context.Context, db DBTX, arg InsertBranchParams) error
	//InsertBuild
	//
	//  INSERT INTO builds (
	//      id,
	//      workspace_id,
	//      project_id,
	//      version_id,
	//      rootfs_image_id,
	//      git_commit_sha,
	//      git_branch,
	//      status,
	//      build_tool,
	//      error_message,
	//      started_at,
	//      completed_at,
	//      created_at,
	//      updated_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      NULL,
	//      NULL,
	//      NULL,
	//      'pending',
	//      'docker',
	//      NULL,
	//      NULL,
	//      NULL,
	//      ?,
	//      NULL
	//  )
	InsertBuild(ctx context.Context, db DBTX, arg InsertBuildParams) error
	//InsertHostnameRoute
	//
	//  INSERT INTO hostname_routes (
	//      id,
	//      workspace_id,
	//      project_id,
	//      hostname,
	//      version_id,
	//      is_enabled,
	//      created_at,
	//      updated_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?, ?, ?
	//  )
	InsertHostnameRoute(ctx context.Context, db DBTX, arg InsertHostnameRouteParams) error
	//InsertIdentity
	//
	//  INSERT INTO `identities` (
	//      id,
	//      external_id,
	//      workspace_id,
	//      environment,
	//      created_at,
	//      meta
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      CAST(? AS JSON)
	//  )
	InsertIdentity(ctx context.Context, db DBTX, arg InsertIdentityParams) error
	//InsertIdentityRatelimit
	//
	//  INSERT INTO `ratelimits` (
	//      id,
	//      workspace_id,
	//      identity_id,
	//      name,
	//      `limit`,
	//      duration,
	//      created_at,
	//      auto_apply
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  ) ON DUPLICATE KEY UPDATE
	//      name = VALUES(name),
	//      `limit` = VALUES(`limit`),
	//      duration = VALUES(duration),
	//      auto_apply = VALUES(auto_apply),
	//      updated_at = VALUES(created_at)
	InsertIdentityRatelimit(ctx context.Context, db DBTX, arg InsertIdentityRatelimitParams) error
	//InsertKey
	//
	//  INSERT INTO `keys` (
	//      id,
	//      key_auth_id,
	//      hash,
	//      start,
	//      workspace_id,
	//      for_workspace_id,
	//      name,
	//      owner_id,
	//      identity_id,
	//      meta,
	//      expires,
	//      created_at_m,
	//      enabled,
	//      remaining_requests,
	//      refill_day,
	//      refill_amount
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      null,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertKey(ctx context.Context, db DBTX, arg InsertKeyParams) error
	//InsertKeyEncryption
	//
	//  INSERT INTO encrypted_keys
	//  (workspace_id, key_id, encrypted, encryption_key_id, created_at)
	//  VALUES (?, ?, ?, ?, ?)
	InsertKeyEncryption(ctx context.Context, db DBTX, arg InsertKeyEncryptionParams) error
	//InsertKeyPermission
	//
	//  INSERT INTO `keys_permissions` (
	//      key_id,
	//      permission_id,
	//      workspace_id,
	//      created_at_m
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  ) ON DUPLICATE KEY UPDATE updated_at_m = ?
	InsertKeyPermission(ctx context.Context, db DBTX, arg InsertKeyPermissionParams) error
	//InsertKeyRatelimit
	//
	//  INSERT INTO `ratelimits` (
	//      id,
	//      workspace_id,
	//      key_id,
	//      name,
	//      `limit`,
	//      duration,
	//      auto_apply,
	//      created_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertKeyRatelimit(ctx context.Context, db DBTX, arg InsertKeyRatelimitParams) error
	//InsertKeyRole
	//
	//  INSERT INTO keys_roles (
	//    key_id,
	//    role_id,
	//    workspace_id,
	//    created_at_m
	//  )
	//  VALUES (
	//    ?,
	//    ?,
	//    ?,
	//    ?
	//  )
	InsertKeyRole(ctx context.Context, db DBTX, arg InsertKeyRoleParams) error
	//InsertKeyring
	//
	//  INSERT INTO `key_auth` (
	//      id,
	//      workspace_id,
	//      created_at_m,
	//      store_encrypted_keys,
	//      default_prefix,
	//      default_bytes,
	//      size_approx,
	//      size_last_updated_at
	//  ) VALUES (
	//      ?,
	//      ?,
	//        ?,
	//      ?,
	//      ?,
	//      ?,
	//      0,
	//      0
	//  )
	InsertKeyring(ctx context.Context, db DBTX, arg InsertKeyringParams) error
	//InsertPermission
	//
	//  INSERT INTO permissions (
	//    id,
	//    workspace_id,
	//    name,
	//    slug,
	//    description,
	//    created_at_m
	//  )
	//  VALUES (
	//    ?,
	//    ?,
	//    ?,
	//    ?,
	//    ?,
	//    ?
	//  )
	InsertPermission(ctx context.Context, db DBTX, arg InsertPermissionParams) error
	//InsertProject
	//
	//  INSERT INTO projects (
	//      id,
	//      workspace_id,
	//      partition_id,
	//      name,
	//      slug,
	//      git_repository_url,
	//      default_branch,
	//      delete_protection,
	//      created_at,
	//      updated_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
	//  )
	InsertProject(ctx context.Context, db DBTX, arg InsertProjectParams) error
	//InsertRatelimitNamespace
	//
	//  INSERT INTO
	//      `ratelimit_namespaces` (
	//          id,
	//          workspace_id,
	//          name,
	//          created_at_m,
	//          updated_at_m,
	//          deleted_at_m
	//          )
	//  VALUES
	//      (
	//          ?,
	//          ?,
	//          ?,
	//           ?,
	//          NULL,
	//          NULL
	//      )
	InsertRatelimitNamespace(ctx context.Context, db DBTX, arg InsertRatelimitNamespaceParams) error
	//InsertRatelimitOverride
	//
	//  INSERT INTO ratelimit_overrides (
	//      id,
	//      workspace_id,
	//      namespace_id,
	//      identifier,
	//      `limit`,
	//      duration,
	//      async,
	//      created_at_m
	//  )
	//  VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      false,
	//      ?
	//  )
	//  ON DUPLICATE KEY UPDATE
	//      `limit` = VALUES(`limit`),
	//      duration = VALUES(duration),
	//      async = VALUES(async),
	//      updated_at_m = ?
	InsertRatelimitOverride(ctx context.Context, db DBTX, arg InsertRatelimitOverrideParams) error
	//InsertRole
	//
	//  INSERT INTO roles (
	//    id,
	//    workspace_id,
	//    name,
	//    description,
	//    created_at_m
	//  )
	//  VALUES (
	//    ?,
	//    ?,
	//    ?,
	//    ?,
	//    ?
	//  )
	InsertRole(ctx context.Context, db DBTX, arg InsertRoleParams) error
	//InsertRolePermission
	//
	//  INSERT INTO roles_permissions (
	//    role_id,
	//    permission_id,
	//    workspace_id,
	//    created_at_m
	//  )
	//  VALUES (
	//    ?,
	//    ?,
	//    ?,
	//    ?
	//  )
	InsertRolePermission(ctx context.Context, db DBTX, arg InsertRolePermissionParams) error
	//InsertVersion
	//
	//  INSERT INTO `versions` (
	//      id,
	//      workspace_id,
	//      project_id,
	//      branch_id,
	//      build_id,
	//      rootfs_image_id,
	//      git_commit_sha,
	//      git_branch,
	//      config_snapshot,
	//      openapi_spec,
	//      status,
	//      created_at,
	//      updated_at
	//  )
	//  VALUES (
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?,
	//      ?
	//  )
	InsertVersion(ctx context.Context, db DBTX, arg InsertVersionParams) error
	//InsertVersionStep
	//
	//  INSERT INTO version_steps (
	//      version_id,
	//      status,
	//      message,
	//      error_message,
	//      created_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?
	//  )
	//  ON DUPLICATE KEY UPDATE
	//      message = VALUES(message),
	//      error_message = VALUES(error_message),
	//      created_at = VALUES(created_at)
	InsertVersionStep(ctx context.Context, db DBTX, arg InsertVersionStepParams) error
	//InsertWorkspace
	//
	//  INSERT INTO `workspaces` (
	//      id,
	//      org_id,
	//      name,
	//      created_at_m,
	//      tier,
	//      beta_features,
	//      features,
	//      enabled,
	//      delete_protection
	//  )
	//  VALUES (
	//      ?,
	//      ?,
	//      ?,
	//       ?,
	//      'Free',
	//      '{}',
	//      '{}',
	//      true,
	//      true
	//  )
	InsertWorkspace(ctx context.Context, db DBTX, arg InsertWorkspaceParams) error
	//ListDirectPermissionsByKeyID
	//
	//  SELECT p.id, p.workspace_id, p.name, p.slug, p.description, p.created_at_m, p.updated_at_m
	//  FROM keys_permissions kp
	//  JOIN permissions p ON kp.permission_id = p.id
	//  WHERE kp.key_id = ?
	//  ORDER BY p.slug
	ListDirectPermissionsByKeyID(ctx context.Context, db DBTX, keyID string) ([]Permission, error)
	//ListIdentities
	//
	//  SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at
	//  FROM identities
	//  WHERE workspace_id = ?
	//  AND deleted = ?
	//  AND id >= ?
	//  ORDER BY id ASC
	//  LIMIT ?
	ListIdentities(ctx context.Context, db DBTX, arg ListIdentitiesParams) ([]Identity, error)
	//ListIdentityRatelimits
	//
	//  SELECT id, name, workspace_id, created_at, updated_at, key_id, identity_id, `limit`, duration, auto_apply
	//  FROM ratelimits
	//  WHERE identity_id = ?
	//  ORDER BY id ASC
	ListIdentityRatelimits(ctx context.Context, db DBTX, identityID sql.NullString) ([]Ratelimit, error)
	//ListIdentityRatelimitsByID
	//
	//  SELECT id, name, workspace_id, created_at, updated_at, key_id, identity_id, `limit`, duration, auto_apply FROM ratelimits WHERE identity_id = ?
	ListIdentityRatelimitsByID(ctx context.Context, db DBTX, identityID sql.NullString) ([]Ratelimit, error)
	//ListIdentityRatelimitsByIDs
	//
	//  SELECT id, name, workspace_id, created_at, updated_at, key_id, identity_id, `limit`, duration, auto_apply FROM ratelimits WHERE identity_id IN (/*SLICE:ids*/?)
	ListIdentityRatelimitsByIDs(ctx context.Context, db DBTX, ids []sql.NullString) ([]Ratelimit, error)
	//ListKeysByKeyAuthID
	//
	//  SELECT
	//    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
	//    i.id as identity_id,
	//    i.external_id as external_id,
	//    i.meta as identity_meta,
	//    ek.encrypted as encrypted_key,
	//    ek.encryption_key_id as encryption_key_id
	//
	//  FROM `keys` k
	//  LEFT JOIN `identities` i ON k.identity_id = i.id
	//  LEFT JOIN encrypted_keys ek ON k.id = ek.key_id
	//  WHERE k.key_auth_id = ?
	//  AND k.id >= ?
	//  AND (? IS NULL OR k.identity_id = ?)
	//  AND k.deleted_at_m IS NULL
	//  ORDER BY k.id ASC
	//  LIMIT ?
	ListKeysByKeyAuthID(ctx context.Context, db DBTX, arg ListKeysByKeyAuthIDParams) ([]ListKeysByKeyAuthIDRow, error)
	//ListPermissions
	//
	//  SELECT p.id, p.workspace_id, p.name, p.slug, p.description, p.created_at_m, p.updated_at_m
	//  FROM permissions p
	//  WHERE p.workspace_id = ?
	//    AND p.id > ?
	//  ORDER BY p.id
	//  LIMIT 101
	ListPermissions(ctx context.Context, db DBTX, arg ListPermissionsParams) ([]Permission, error)
	//ListPermissionsByKeyID
	//
	//  WITH direct_permissions AS (
	//      SELECT p.slug as permission_slug
	//      FROM keys_permissions kp
	//      JOIN permissions p ON kp.permission_id = p.id
	//      WHERE kp.key_id = ?
	//  ),
	//  role_permissions AS (
	//      SELECT p.slug as permission_slug
	//      FROM keys_roles kr
	//      JOIN roles_permissions rp ON kr.role_id = rp.role_id
	//      JOIN permissions p ON rp.permission_id = p.id
	//      WHERE kr.key_id = ?
	//  )
	//  SELECT DISTINCT permission_slug
	//  FROM (
	//      SELECT permission_slug FROM direct_permissions
	//      UNION ALL
	//      SELECT permission_slug FROM role_permissions
	//  ) all_permissions
	ListPermissionsByKeyID(ctx context.Context, db DBTX, arg ListPermissionsByKeyIDParams) ([]string, error)
	//ListPermissionsByRoleID
	//
	//  SELECT p.id, p.workspace_id, p.name, p.slug, p.description, p.created_at_m, p.updated_at_m
	//  FROM permissions p
	//  JOIN roles_permissions rp ON p.id = rp.permission_id
	//  WHERE rp.role_id = ?
	//  ORDER BY p.slug
	ListPermissionsByRoleID(ctx context.Context, db DBTX, roleID string) ([]Permission, error)
	//ListRatelimitOverridesByNamespaceID
	//
	//  SELECT id, workspace_id, namespace_id, identifier, `limit`, duration, async, sharding, created_at_m, updated_at_m, deleted_at_m FROM ratelimit_overrides
	//  WHERE
	//      workspace_id = ?
	//      AND namespace_id = ?
	ListRatelimitOverridesByNamespaceID(ctx context.Context, db DBTX, arg ListRatelimitOverridesByNamespaceIDParams) ([]RatelimitOverride, error)
	//ListRatelimitsByKeyID
	//
	//  SELECT
	//    id,
	//    name,
	//    `limit`,
	//    duration,
	//    auto_apply
	//  FROM ratelimits
	//  WHERE key_id = ?
	ListRatelimitsByKeyID(ctx context.Context, db DBTX, keyID sql.NullString) ([]ListRatelimitsByKeyIDRow, error)
	//ListRatelimitsByKeyIDs
	//
	//  SELECT
	//    id,
	//    key_id,
	//    name,
	//    `limit`,
	//    duration,
	//    auto_apply
	//  FROM ratelimits
	//  WHERE key_id IN (/*SLICE:key_ids*/?)
	//  ORDER BY key_id, id
	ListRatelimitsByKeyIDs(ctx context.Context, db DBTX, keyIds []sql.NullString) ([]ListRatelimitsByKeyIDsRow, error)
	//ListRoles
	//
	//  SELECT r.id, r.workspace_id, r.name, r.description, r.created_at_m, r.updated_at_m, COALESCE(
	//          (SELECT JSON_ARRAYAGG(
	//              json_object(
	//                  'id', permission.id,
	//                  'name', permission.name,
	//                  'slug', permission.slug,
	//                  'description', permission.description
	//             )
	//          )
	//           FROM (SELECT name, id, slug, description
	//                 FROM roles_permissions rp
	//                          JOIN permissions p ON p.id = rp.permission_id
	//                 WHERE rp.role_id = r.id) as permission),
	//          JSON_ARRAY()
	//  ) as permissions
	//  FROM roles r
	//  WHERE r.workspace_id = ?
	//  AND r.id > ?
	//  ORDER BY r.id
	//  LIMIT 101
	ListRoles(ctx context.Context, db DBTX, arg ListRolesParams) ([]ListRolesRow, error)
	//ListRolesByKeyID
	//
	//  SELECT r.id, r.workspace_id, r.name, r.description, r.created_at_m, r.updated_at_m, COALESCE(
	//          (SELECT JSON_ARRAYAGG(
	//              json_object(
	//                  'id', permission.id,
	//                  'name', permission.name,
	//                  'slug', permission.slug,
	//                  'description', permission.description
	//             )
	//          )
	//           FROM (SELECT name, id, slug, description
	//                 FROM roles_permissions rp
	//                          JOIN permissions p ON p.id = rp.permission_id
	//                 WHERE rp.role_id = r.id) as permission),
	//          JSON_ARRAY()
	//  ) as permissions
	//  FROM keys_roles kr
	//  JOIN roles r ON kr.role_id = r.id
	//  WHERE kr.key_id = ?
	//  ORDER BY r.name
	ListRolesByKeyID(ctx context.Context, db DBTX, keyID string) ([]ListRolesByKeyIDRow, error)
	//ListWorkspaces
	//
	//  SELECT
	//     w.id, w.org_id, w.name, w.partition_id, w.plan, w.tier, w.stripe_customer_id, w.stripe_subscription_id, w.beta_features, w.features, w.subscriptions, w.enabled, w.delete_protection, w.created_at_m, w.updated_at_m, w.deleted_at_m,
	//     q.workspace_id, q.requests_per_month, q.logs_retention_days, q.audit_logs_retention_days, q.team
	//  FROM `workspaces` w
	//  LEFT JOIN quota q ON w.id = q.workspace_id
	//  WHERE w.id > ?
	//  ORDER BY w.id ASC
	//  LIMIT 100
	ListWorkspaces(ctx context.Context, db DBTX, cursor string) ([]ListWorkspacesRow, error)
	//SoftDeleteApi
	//
	//  UPDATE apis
	//  SET deleted_at_m = ?
	//  WHERE id = ?
	SoftDeleteApi(ctx context.Context, db DBTX, arg SoftDeleteApiParams) error
	//SoftDeleteIdentity
	//
	//  UPDATE identities set deleted = 1 WHERE id = ?
	SoftDeleteIdentity(ctx context.Context, db DBTX, id string) error
	//SoftDeleteKeyByID
	//
	//  UPDATE `keys` SET deleted_at_m = ? WHERE id = ?
	SoftDeleteKeyByID(ctx context.Context, db DBTX, arg SoftDeleteKeyByIDParams) error
	//SoftDeleteManyKeysByKeyAuthID
	//
	//  UPDATE `keys`
	//  SET deleted_at_m = ?
	//  WHERE key_auth_id = ?
	//  AND deleted_at_m IS NULL
	SoftDeleteManyKeysByKeyAuthID(ctx context.Context, db DBTX, arg SoftDeleteManyKeysByKeyAuthIDParams) error
	//SoftDeleteRatelimitNamespace
	//
	//  UPDATE `ratelimit_namespaces`
	//  SET
	//      deleted_at_m =  ?
	//  WHERE id = ?
	SoftDeleteRatelimitNamespace(ctx context.Context, db DBTX, arg SoftDeleteRatelimitNamespaceParams) error
	//SoftDeleteRatelimitOverride
	//
	//  UPDATE `ratelimit_overrides`
	//  SET
	//      deleted_at_m =  ?
	//  WHERE id = ?
	SoftDeleteRatelimitOverride(ctx context.Context, db DBTX, arg SoftDeleteRatelimitOverrideParams) error
	//SoftDeleteWorkspace
	//
	//  UPDATE `workspaces`
	//  SET deleted_at_m = ?
	//  WHERE id = ?
	//  AND delete_protection = false
	SoftDeleteWorkspace(ctx context.Context, db DBTX, arg SoftDeleteWorkspaceParams) (sql.Result, error)
	//UpdateApiDeleteProtection
	//
	//  UPDATE apis
	//  SET delete_protection = ?
	//  WHERE id = ?
	UpdateApiDeleteProtection(ctx context.Context, db DBTX, arg UpdateApiDeleteProtectionParams) error
	//UpdateBuildFailed
	//
	//  UPDATE builds SET
	//      status = 'failed',
	//      completed_at = ?,
	//      error_message = ?,
	//      updated_at = ?
	//  WHERE id = ?
	UpdateBuildFailed(ctx context.Context, db DBTX, arg UpdateBuildFailedParams) error
	//UpdateBuildStatus
	//
	//  UPDATE builds SET
	//      status = ?,
	//      updated_at = ?
	//  WHERE id = ?
	UpdateBuildStatus(ctx context.Context, db DBTX, arg UpdateBuildStatusParams) error
	//UpdateBuildSucceeded
	//
	//  UPDATE builds SET
	//      status = 'succeeded',
	//      completed_at = ?,
	//      updated_at = ?
	//  WHERE id = ?
	UpdateBuildSucceeded(ctx context.Context, db DBTX, arg UpdateBuildSucceededParams) error
	//UpdateIdentity
	//
	//  UPDATE `identities`
	//  SET
	//      meta = CAST(? AS JSON),
	//      updated_at = NOW()
	//  WHERE
	//      id = ?
	UpdateIdentity(ctx context.Context, db DBTX, arg UpdateIdentityParams) error
	//UpdateKey
	//
	//  UPDATE `keys` k SET
	//      name = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.name
	//      END,
	//      identity_id = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.identity_id
	//      END,
	//      enabled = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.enabled
	//      END,
	//      meta = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.meta
	//      END,
	//      expires = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.expires
	//      END,
	//      remaining_requests = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.remaining_requests
	//      END,
	//      refill_amount = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.refill_amount
	//      END,
	//      refill_day = CASE
	//          WHEN CAST(? AS UNSIGNED) = 1 THEN ?
	//          ELSE k.refill_day
	//      END,
	//      updated_at_m = ?
	//  WHERE id = ?
	UpdateKey(ctx context.Context, db DBTX, arg UpdateKeyParams) error
	//UpdateKeyCredits
	//
	//  UPDATE `keys`
	//  SET remaining_requests =
	//  CASE
	//      WHEN ? = 'set' THEN ?
	//      WHEN ? = 'increment' THEN remaining_requests + ?
	//      WHEN ? = 'decrement' AND remaining_requests - ? > 0 THEN remaining_requests - ?
	//      WHEN ? = 'decrement' AND remaining_requests - ? <= 0 THEN 0
	//  END
	//  WHERE id = ?
	UpdateKeyCredits(ctx context.Context, db DBTX, arg UpdateKeyCreditsParams) error
	//UpdateKeyCreditsRefill
	//
	//  UPDATE `keys` SET refill_amount = ?, refill_day = ? WHERE id = ?
	UpdateKeyCreditsRefill(ctx context.Context, db DBTX, arg UpdateKeyCreditsRefillParams) error
	//UpdateKeyringKeyEncryption
	//
	//  UPDATE `key_auth` SET store_encrypted_keys = ? WHERE id = ?
	UpdateKeyringKeyEncryption(ctx context.Context, db DBTX, arg UpdateKeyringKeyEncryptionParams) error
	//UpdateRatelimit
	//
	//  UPDATE `ratelimits`
	//  SET
	//      name = ?,
	//      `limit` = ?,
	//      duration = ?,
	//      auto_apply = ?,
	//      updated_at = NOW()
	//  WHERE
	//      id = ?
	UpdateRatelimit(ctx context.Context, db DBTX, arg UpdateRatelimitParams) error
	//UpdateRatelimitOverride
	//
	//  UPDATE `ratelimit_overrides`
	//  SET
	//      `limit` = ?,
	//      duration = ?,
	//      async = ?,
	//      updated_at_m= ?
	//  WHERE id = ?
	UpdateRatelimitOverride(ctx context.Context, db DBTX, arg UpdateRatelimitOverrideParams) (sql.Result, error)
	//UpdateVersionOpenApiSpec
	//
	//  UPDATE versions SET
	//      openapi_spec = ?
	//  WHERE id = ?
	UpdateVersionOpenApiSpec(ctx context.Context, db DBTX, arg UpdateVersionOpenApiSpecParams) error
	//UpdateVersionStatus
	//
	//  UPDATE versions SET
	//      status = ?,
	//      updated_at = ?
	//  WHERE id = ?
	UpdateVersionStatus(ctx context.Context, db DBTX, arg UpdateVersionStatusParams) error
	//UpdateWorkspaceEnabled
	//
	//  UPDATE `workspaces`
	//  SET enabled = ?
	//  WHERE id = ?
	UpdateWorkspaceEnabled(ctx context.Context, db DBTX, arg UpdateWorkspaceEnabledParams) (sql.Result, error)
	//UpdateWorkspacePlan
	//
	//  UPDATE `workspaces`
	//  SET plan = ?
	//  WHERE id = ?
	UpdateWorkspacePlan(ctx context.Context, db DBTX, arg UpdateWorkspacePlanParams) (sql.Result, error)
	//UpsertBranch
	//
	//  INSERT INTO branches (
	//      id,
	//      workspace_id,
	//      project_id,
	//      name,
	//      created_at,
	//      updated_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?
	//  ) ON DUPLICATE KEY UPDATE
	//      updated_at = VALUES(updated_at)
	UpsertBranch(ctx context.Context, db DBTX, arg UpsertBranchParams) error
}

var _ Querier = (*Queries)(nil)
