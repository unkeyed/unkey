// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identity_list.sql

package db

import (
	"context"
	"database/sql"
)

const listIdentities = `-- name: ListIdentities :many
SELECT 
    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
    c.id as credit_id,
    c.remaining as credit_remaining,
    c.refill_amount as credit_refill_amount,
    c.refill_day as credit_refill_day
FROM identities i
LEFT JOIN credits c ON c.identity_id = i.id
WHERE i.workspace_id = ?
AND i.deleted = ?
AND i.id >= ?
ORDER BY i.id ASC
LIMIT ?
`

type ListIdentitiesParams struct {
	WorkspaceID string `db:"workspace_id"`
	Deleted     bool   `db:"deleted"`
	IDCursor    string `db:"id_cursor"`
	Limit       int32  `db:"limit"`
}

type ListIdentitiesRow struct {
	ID                 string         `db:"id"`
	ExternalID         string         `db:"external_id"`
	WorkspaceID        string         `db:"workspace_id"`
	Environment        string         `db:"environment"`
	Meta               []byte         `db:"meta"`
	Deleted            bool           `db:"deleted"`
	CreatedAt          int64          `db:"created_at"`
	UpdatedAt          sql.NullInt64  `db:"updated_at"`
	CreditID           sql.NullString `db:"credit_id"`
	CreditRemaining    sql.NullInt32  `db:"credit_remaining"`
	CreditRefillAmount sql.NullInt32  `db:"credit_refill_amount"`
	CreditRefillDay    sql.NullInt16  `db:"credit_refill_day"`
}

// ListIdentities
//
//	SELECT
//	    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
//	    c.id as credit_id,
//	    c.remaining as credit_remaining,
//	    c.refill_amount as credit_refill_amount,
//	    c.refill_day as credit_refill_day
//	FROM identities i
//	LEFT JOIN credits c ON c.identity_id = i.id
//	WHERE i.workspace_id = ?
//	AND i.deleted = ?
//	AND i.id >= ?
//	ORDER BY i.id ASC
//	LIMIT ?
func (q *Queries) ListIdentities(ctx context.Context, db DBTX, arg ListIdentitiesParams) ([]ListIdentitiesRow, error) {
	rows, err := db.QueryContext(ctx, listIdentities,
		arg.WorkspaceID,
		arg.Deleted,
		arg.IDCursor,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIdentitiesRow
	for rows.Next() {
		var i ListIdentitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.WorkspaceID,
			&i.Environment,
			&i.Meta,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreditID,
			&i.CreditRemaining,
			&i.CreditRefillAmount,
			&i.CreditRefillDay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
