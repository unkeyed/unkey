// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: identity_list.sql

package db

import (
	"context"
)

const listIdentities = `-- name: ListIdentities :many
SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at
FROM identities
WHERE workspace_id = ?
AND deleted = ?
AND id >= ?
ORDER BY id ASC
LIMIT ?
`

type ListIdentitiesParams struct {
	WorkspaceID string `db:"workspace_id"`
	Deleted     bool   `db:"deleted"`
	IDCursor    string `db:"id_cursor"`
	Limit       int32  `db:"limit"`
}

// ListIdentities
//
//	SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at
//	FROM identities
//	WHERE workspace_id = ?
//	AND deleted = ?
//	AND id >= ?
//	ORDER BY id ASC
//	LIMIT ?
func (q *Queries) ListIdentities(ctx context.Context, db DBTX, arg ListIdentitiesParams) ([]Identity, error) {
	rows, err := db.QueryContext(ctx, listIdentities,
		arg.WorkspaceID,
		arg.Deleted,
		arg.IDCursor,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.WorkspaceID,
			&i.Environment,
			&i.Meta,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
