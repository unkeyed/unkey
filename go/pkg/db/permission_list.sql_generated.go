// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission_list.sql

package db

import (
	"context"
)

const listPermissions = `-- name: ListPermissions :many
SELECT p.id, p.workspace_id, p.name, p.slug, p.description, p.created_at_m, p.updated_at_m
FROM permissions p
WHERE p.workspace_id = ?
  AND p.id > ?
ORDER BY p.id
LIMIT 101
`

type ListPermissionsParams struct {
	WorkspaceID string `db:"workspace_id"`
	IDCursor    string `db:"id_cursor"`
}

// ListPermissions
//
//	SELECT p.id, p.workspace_id, p.name, p.slug, p.description, p.created_at_m, p.updated_at_m
//	FROM permissions p
//	WHERE p.workspace_id = ?
//	  AND p.id > ?
//	ORDER BY p.id
//	LIMIT 101
func (q *Queries) ListPermissions(ctx context.Context, db DBTX, arg ListPermissionsParams) ([]Permission, error) {
	rows, err := db.QueryContext(ctx, listPermissions, arg.WorkspaceID, arg.IDCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
