// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_find_by_id.sql

package db

import (
	"context"
	"database/sql"
)

const findProjectById = `-- name: FindProjectById :one
SELECT
    id,
    workspace_id,
    name,
    slug,
    git_repository_url,
    default_branch,
    delete_protection,
    created_at,
    updated_at
FROM projects
WHERE id = ?
`

type FindProjectByIdRow struct {
	ID               string         `db:"id"`
	WorkspaceID      string         `db:"workspace_id"`
	Name             string         `db:"name"`
	Slug             string         `db:"slug"`
	GitRepositoryUrl sql.NullString `db:"git_repository_url"`
	DefaultBranch    sql.NullString `db:"default_branch"`
	DeleteProtection sql.NullBool   `db:"delete_protection"`
	CreatedAt        int64          `db:"created_at"`
	UpdatedAt        sql.NullInt64  `db:"updated_at"`
}

// FindProjectById
//
//	SELECT
//	    id,
//	    workspace_id,
//	    name,
//	    slug,
//	    git_repository_url,
//	    default_branch,
//	    delete_protection,
//	    created_at,
//	    updated_at
//	FROM projects
//	WHERE id = ?
func (q *Queries) FindProjectById(ctx context.Context, db DBTX, id string) (FindProjectByIdRow, error) {
	row := db.QueryRowContext(ctx, findProjectById, id)
	var i FindProjectByIdRow
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Slug,
		&i.GitRepositoryUrl,
		&i.DefaultBranch,
		&i.DeleteProtection,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
