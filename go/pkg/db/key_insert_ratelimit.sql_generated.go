// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_insert_ratelimit.sql

package db

import (
	"context"
	"database/sql"
)

const insertKeyRatelimit = `-- name: InsertKeyRatelimit :exec
INSERT INTO ` + "`" + `ratelimits` + "`" + ` (
    id,
    workspace_id,
    key_id,
    name,
    ` + "`" + `limit` + "`" + `,
    duration,
    auto_apply,
    created_at
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type InsertKeyRatelimitParams struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	KeyID       sql.NullString `db:"key_id"`
	Name        string         `db:"name"`
	Limit       int32          `db:"limit"`
	Duration    int64          `db:"duration"`
	AutoApply   bool           `db:"auto_apply"`
	CreatedAt   int64          `db:"created_at"`
}

// InsertKeyRatelimit
//
//	INSERT INTO `ratelimits` (
//	    id,
//	    workspace_id,
//	    key_id,
//	    name,
//	    `limit`,
//	    duration,
//	    auto_apply,
//	    created_at
//	) VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?
//	)
func (q *Queries) InsertKeyRatelimit(ctx context.Context, db DBTX, arg InsertKeyRatelimitParams) error {
	_, err := db.ExecContext(ctx, insertKeyRatelimit,
		arg.ID,
		arg.WorkspaceID,
		arg.KeyID,
		arg.Name,
		arg.Limit,
		arg.Duration,
		arg.AutoApply,
		arg.CreatedAt,
	)
	return err
}
