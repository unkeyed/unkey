// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identity_find.sql

package db

import (
	"context"
	"database/sql"
)

const findIdentity = `-- name: FindIdentity :one
SELECT
    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
    c.id AS credit_id,
    c.remaining AS credit_remaining,
    c.refill_amount AS credit_refill_amount,
    c.refill_day AS credit_refill_day,
    c.refilled_at AS credit_refilled_at,
    COALESCE(
        (SELECT JSON_ARRAYAGG(
            JSON_OBJECT(
                'id', rl.id,
                'name', rl.name,
                'key_id', rl.key_id,
                'identity_id', rl.identity_id,
                'limit', rl.` + "`" + `limit` + "`" + `,
                'duration', rl.duration,
                'auto_apply', rl.auto_apply = 1
            )
        )
        FROM ratelimits rl WHERE rl.identity_id = i.id),
        JSON_ARRAY()
    ) as ratelimits
FROM identities i
LEFT JOIN credits c ON c.identity_id = i.id
WHERE i.id = (
    SELECT id FROM identities sub1
    WHERE sub1.workspace_id = ?
      AND sub1.id = ?
      AND sub1.deleted = ?
    UNION ALL
    SELECT id FROM identities sub2
    WHERE sub2.workspace_id = ?
      AND sub2.external_id = ?
      AND sub2.deleted = ?
    LIMIT 1
)
`

type FindIdentityParams struct {
	WorkspaceID string `db:"workspace_id"`
	Identity    string `db:"identity"`
	Deleted     bool   `db:"deleted"`
}

type FindIdentityRow struct {
	ID                 string         `db:"id"`
	ExternalID         string         `db:"external_id"`
	WorkspaceID        string         `db:"workspace_id"`
	Environment        string         `db:"environment"`
	Meta               []byte         `db:"meta"`
	Deleted            bool           `db:"deleted"`
	CreatedAt          int64          `db:"created_at"`
	UpdatedAt          sql.NullInt64  `db:"updated_at"`
	CreditID           sql.NullString `db:"credit_id"`
	CreditRemaining    sql.NullInt32  `db:"credit_remaining"`
	CreditRefillAmount sql.NullInt32  `db:"credit_refill_amount"`
	CreditRefillDay    sql.NullInt16  `db:"credit_refill_day"`
	CreditRefilledAt   sql.NullInt64  `db:"credit_refilled_at"`
	Ratelimits         interface{}    `db:"ratelimits"`
}

// FindIdentity
//
//	SELECT
//	    i.id, i.external_id, i.workspace_id, i.environment, i.meta, i.deleted, i.created_at, i.updated_at,
//	    c.id AS credit_id,
//	    c.remaining AS credit_remaining,
//	    c.refill_amount AS credit_refill_amount,
//	    c.refill_day AS credit_refill_day,
//	    c.refilled_at AS credit_refilled_at,
//	    COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            JSON_OBJECT(
//	                'id', rl.id,
//	                'name', rl.name,
//	                'key_id', rl.key_id,
//	                'identity_id', rl.identity_id,
//	                'limit', rl.`limit`,
//	                'duration', rl.duration,
//	                'auto_apply', rl.auto_apply = 1
//	            )
//	        )
//	        FROM ratelimits rl WHERE rl.identity_id = i.id),
//	        JSON_ARRAY()
//	    ) as ratelimits
//	FROM identities i
//	LEFT JOIN credits c ON c.identity_id = i.id
//	WHERE i.id = (
//	    SELECT id FROM identities sub1
//	    WHERE sub1.workspace_id = ?
//	      AND sub1.id = ?
//	      AND sub1.deleted = ?
//	    UNION ALL
//	    SELECT id FROM identities sub2
//	    WHERE sub2.workspace_id = ?
//	      AND sub2.external_id = ?
//	      AND sub2.deleted = ?
//	    LIMIT 1
//	)
func (q *Queries) FindIdentity(ctx context.Context, db DBTX, arg FindIdentityParams) (FindIdentityRow, error) {
	row := db.QueryRowContext(ctx, findIdentity,
		arg.WorkspaceID,
		arg.Identity,
		arg.Deleted,
		arg.WorkspaceID,
		arg.Identity,
		arg.Deleted,
	)
	var i FindIdentityRow
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.WorkspaceID,
		&i.Environment,
		&i.Meta,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreditID,
		&i.CreditRemaining,
		&i.CreditRefillAmount,
		&i.CreditRefillDay,
		&i.CreditRefilledAt,
		&i.Ratelimits,
	)
	return i, err
}
