// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: identity_find.sql

package db

import (
	"context"
)

const findIdentity = `-- name: FindIdentity :one
SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at 
FROM identities 
WHERE workspace_id = ? 
 AND (external_id = ? OR id = ?) 
 AND deleted = ?
`

type FindIdentityParams struct {
	WorkspaceID string `db:"workspace_id"`
	Identity    string `db:"identity"`
	Deleted     bool   `db:"deleted"`
}

// FindIdentity
//
//	SELECT id, external_id, workspace_id, environment, meta, deleted, created_at, updated_at
//	FROM identities
//	WHERE workspace_id = ?
//	 AND (external_id = ? OR id = ?)
//	 AND deleted = ?
func (q *Queries) FindIdentity(ctx context.Context, db DBTX, arg FindIdentityParams) (Identity, error) {
	row := db.QueryRowContext(ctx, findIdentity,
		arg.WorkspaceID,
		arg.Identity,
		arg.Identity,
		arg.Deleted,
	)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.WorkspaceID,
		&i.Environment,
		&i.Meta,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
