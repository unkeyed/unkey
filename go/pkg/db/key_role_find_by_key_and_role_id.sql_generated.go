// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_role_find_by_key_and_role_id.sql

package db

import (
	"context"
)

const findKeyRoleByKeyAndRoleID = `-- name: FindKeyRoleByKeyAndRoleID :many
SELECT key_id, role_id, workspace_id, created_at_m, updated_at_m
FROM keys_roles
WHERE key_id = ?
  AND role_id = ?
`

type FindKeyRoleByKeyAndRoleIDParams struct {
	KeyID  string `db:"key_id"`
	RoleID string `db:"role_id"`
}

// FindKeyRoleByKeyAndRoleID
//
//	SELECT key_id, role_id, workspace_id, created_at_m, updated_at_m
//	FROM keys_roles
//	WHERE key_id = ?
//	  AND role_id = ?
func (q *Queries) FindKeyRoleByKeyAndRoleID(ctx context.Context, db DBTX, arg FindKeyRoleByKeyAndRoleIDParams) ([]KeysRole, error) {
	rows, err := db.QueryContext(ctx, findKeyRoleByKeyAndRoleID, arg.KeyID, arg.RoleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeysRole
	for rows.Next() {
		var i KeysRole
		if err := rows.Scan(
			&i.KeyID,
			&i.RoleID,
			&i.WorkspaceID,
			&i.CreatedAtM,
			&i.UpdatedAtM,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
