// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role_find_many_by_name_with_perms.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const findManyRolesByNamesWithPerms = `-- name: FindManyRolesByNamesWithPerms :many
SELECT id, workspace_id, name, description, created_at_m, updated_at_m, COALESCE(
        (SELECT JSON_ARRAYAGG(
            json_object(
                'id', permission.id,
                'name', permission.name,
                'slug', permission.slug,
                'description', permission.description
           )
        )
         FROM (SELECT name, id, slug, description
               FROM roles_permissions rp
                        JOIN permissions p ON p.id = rp.permission_id
               WHERE rp.role_id = r.id) as permission),
        JSON_ARRAY()
) as permissions
FROM roles r
WHERE r.workspace_id = ? AND r.name IN (/*SLICE:names*/?)
`

type FindManyRolesByNamesWithPermsParams struct {
	WorkspaceID string   `db:"workspace_id"`
	Names       []string `db:"names"`
}

type FindManyRolesByNamesWithPermsRow struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	CreatedAtM  int64          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64  `db:"updated_at_m"`
	Permissions interface{}    `db:"permissions"`
}

// FindManyRolesByNamesWithPerms
//
//	SELECT id, workspace_id, name, description, created_at_m, updated_at_m, COALESCE(
//	        (SELECT JSON_ARRAYAGG(
//	            json_object(
//	                'id', permission.id,
//	                'name', permission.name,
//	                'slug', permission.slug,
//	                'description', permission.description
//	           )
//	        )
//	         FROM (SELECT name, id, slug, description
//	               FROM roles_permissions rp
//	                        JOIN permissions p ON p.id = rp.permission_id
//	               WHERE rp.role_id = r.id) as permission),
//	        JSON_ARRAY()
//	) as permissions
//	FROM roles r
//	WHERE r.workspace_id = ? AND r.name IN (/*SLICE:names*/?)
func (q *Queries) FindManyRolesByNamesWithPerms(ctx context.Context, db DBTX, arg FindManyRolesByNamesWithPermsParams) ([]FindManyRolesByNamesWithPermsRow, error) {
	query := findManyRolesByNamesWithPerms
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.Names) > 0 {
		for _, v := range arg.Names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(arg.Names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindManyRolesByNamesWithPermsRow
	for rows.Next() {
		var i FindManyRolesByNamesWithPermsRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.Description,
			&i.CreatedAtM,
			&i.UpdatedAtM,
			&i.Permissions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
