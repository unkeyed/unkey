// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertAuditLogTarget is the base query for bulk insert
const bulkInsertAuditLogTarget = `INSERT INTO ` + "`" + `audit_log_target` + "`" + ` ( workspace_id, bucket_id, bucket, audit_log_id, display_name, type, id, name, meta, created_at ) VALUES %s`

// InsertAuditLogTargets performs bulk insert in a single query
func (q *BulkQueries) InsertAuditLogTargets(ctx context.Context, db DBTX, args []InsertAuditLogTargetParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, ?, ?, ?, CAST(? AS JSON), ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertAuditLogTarget, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.BucketID)
		allArgs = append(allArgs, arg.Bucket)
		allArgs = append(allArgs, arg.AuditLogID)
		allArgs = append(allArgs, arg.DisplayName)
		allArgs = append(allArgs, arg.Type)
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.Name)
		allArgs = append(allArgs, arg.Meta)
		allArgs = append(allArgs, arg.CreatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
