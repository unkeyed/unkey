// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: domain_find_by_ids.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const findDomainsByIds = `-- name: FindDomainsByIds :many
SELECT
    id,
    workspace_id,
    project_id,
    environment_id,
    domain,
    deployment_id,
    sticky,
    type,
    created_at,
    updated_at
FROM domains
WHERE id IN (/*SLICE:ids*/?)
`

type FindDomainsByIdsRow struct {
	ID            string            `db:"id"`
	WorkspaceID   string            `db:"workspace_id"`
	ProjectID     sql.NullString    `db:"project_id"`
	EnvironmentID sql.NullString    `db:"environment_id"`
	Domain        string            `db:"domain"`
	DeploymentID  sql.NullString    `db:"deployment_id"`
	Sticky        NullDomainsSticky `db:"sticky"`
	Type          DomainsType       `db:"type"`
	CreatedAt     int64             `db:"created_at"`
	UpdatedAt     sql.NullInt64     `db:"updated_at"`
}

// FindDomainsByIds
//
//	SELECT
//	    id,
//	    workspace_id,
//	    project_id,
//	    environment_id,
//	    domain,
//	    deployment_id,
//	    sticky,
//	    type,
//	    created_at,
//	    updated_at
//	FROM domains
//	WHERE id IN (/*SLICE:ids*/?)
func (q *Queries) FindDomainsByIds(ctx context.Context, db DBTX, ids []string) ([]FindDomainsByIdsRow, error) {
	query := findDomainsByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindDomainsByIdsRow
	for rows.Next() {
		var i FindDomainsByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ProjectID,
			&i.EnvironmentID,
			&i.Domain,
			&i.DeploymentID,
			&i.Sticky,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
