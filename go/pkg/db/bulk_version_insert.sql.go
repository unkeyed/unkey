// Code generated by sqlc bulk insert plugin. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

// bulkInsertVersion is the base query for bulk insert
const bulkInsertVersion = `INSERT INTO ` + "`" + `versions` + "`" + ` ( id, workspace_id, project_id, branch_id, build_id, rootfs_image_id, git_commit_sha, git_branch, config_snapshot, openapi_spec, status, created_at, updated_at ) VALUES %s`

// InsertVersions performs bulk insert in a single query
func (q *BulkQueries) InsertVersions(ctx context.Context, db DBTX, args []InsertVersionParams) error {

	if len(args) == 0 {
		return nil
	}

	// Build the bulk insert query
	valueClauses := make([]string, len(args))
	for i := range args {
		valueClauses[i] = "( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )"
	}

	bulkQuery := fmt.Sprintf(bulkInsertVersion, strings.Join(valueClauses, ", "))

	// Collect all arguments
	var allArgs []any
	for _, arg := range args {
		allArgs = append(allArgs, arg.ID)
		allArgs = append(allArgs, arg.WorkspaceID)
		allArgs = append(allArgs, arg.ProjectID)
		allArgs = append(allArgs, arg.BranchID)
		allArgs = append(allArgs, arg.BuildID)
		allArgs = append(allArgs, arg.RootfsImageID)
		allArgs = append(allArgs, arg.GitCommitSha)
		allArgs = append(allArgs, arg.GitBranch)
		allArgs = append(allArgs, arg.ConfigSnapshot)
		allArgs = append(allArgs, arg.OpenapiSpec)
		allArgs = append(allArgs, arg.Status)
		allArgs = append(allArgs, arg.CreatedAt)
		allArgs = append(allArgs, arg.UpdatedAt)
	}

	// Execute the bulk insert
	_, err := db.ExecContext(ctx, bulkQuery, allArgs...)
	return err
}
