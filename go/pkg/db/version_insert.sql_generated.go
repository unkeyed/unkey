// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: version_insert.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const insertVersion = `-- name: InsertVersion :exec
INSERT INTO ` + "`" + `versions` + "`" + ` (
    id,
    workspace_id,
    project_id,
    branch_id,
    build_id,
    rootfs_image_id,
    git_commit_sha,
    git_branch,
    config_snapshot,
    openapi_spec,
    status,
    created_at,
    updated_at
)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type InsertVersionParams struct {
	ID             string          `db:"id"`
	WorkspaceID    string          `db:"workspace_id"`
	ProjectID      string          `db:"project_id"`
	BranchID       sql.NullString  `db:"branch_id"`
	BuildID        sql.NullString  `db:"build_id"`
	RootfsImageID  string          `db:"rootfs_image_id"`
	GitCommitSha   sql.NullString  `db:"git_commit_sha"`
	GitBranch      sql.NullString  `db:"git_branch"`
	ConfigSnapshot json.RawMessage `db:"config_snapshot"`
	OpenapiSpec    sql.NullString  `db:"openapi_spec"`
	Status         VersionsStatus  `db:"status"`
	CreatedAt      int64           `db:"created_at"`
	UpdatedAt      sql.NullInt64   `db:"updated_at"`
}

// InsertVersion
//
//	INSERT INTO `versions` (
//	    id,
//	    workspace_id,
//	    project_id,
//	    branch_id,
//	    build_id,
//	    rootfs_image_id,
//	    git_commit_sha,
//	    git_branch,
//	    config_snapshot,
//	    openapi_spec,
//	    status,
//	    created_at,
//	    updated_at
//	)
//	VALUES (
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?,
//	    ?
//	)
func (q *Queries) InsertVersion(ctx context.Context, db DBTX, arg InsertVersionParams) error {
	_, err := db.ExecContext(ctx, insertVersion,
		arg.ID,
		arg.WorkspaceID,
		arg.ProjectID,
		arg.BranchID,
		arg.BuildID,
		arg.RootfsImageID,
		arg.GitCommitSha,
		arg.GitBranch,
		arg.ConfigSnapshot,
		arg.OpenapiSpec,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
