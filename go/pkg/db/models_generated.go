// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"

	dbtype "github.com/unkeyed/unkey/go/pkg/db/types"
)

type AcmeChallengesStatus string

const (
	AcmeChallengesStatusWaiting  AcmeChallengesStatus = "waiting"
	AcmeChallengesStatusPending  AcmeChallengesStatus = "pending"
	AcmeChallengesStatusVerified AcmeChallengesStatus = "verified"
	AcmeChallengesStatusFailed   AcmeChallengesStatus = "failed"
)

func (e *AcmeChallengesStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AcmeChallengesStatus(s)
	case string:
		*e = AcmeChallengesStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AcmeChallengesStatus: %T", src)
	}
	return nil
}

type NullAcmeChallengesStatus struct {
	AcmeChallengesStatus AcmeChallengesStatus
	Valid                bool // Valid is true if AcmeChallengesStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAcmeChallengesStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AcmeChallengesStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AcmeChallengesStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAcmeChallengesStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AcmeChallengesStatus), nil
}

type AcmeChallengesType string

const (
	AcmeChallengesTypeHTTP01 AcmeChallengesType = "HTTP-01"
	AcmeChallengesTypeDNS01  AcmeChallengesType = "DNS-01"
)

func (e *AcmeChallengesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AcmeChallengesType(s)
	case string:
		*e = AcmeChallengesType(s)
	default:
		return fmt.Errorf("unsupported scan type for AcmeChallengesType: %T", src)
	}
	return nil
}

type NullAcmeChallengesType struct {
	AcmeChallengesType AcmeChallengesType
	Valid              bool // Valid is true if AcmeChallengesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAcmeChallengesType) Scan(value interface{}) error {
	if value == nil {
		ns.AcmeChallengesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AcmeChallengesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAcmeChallengesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AcmeChallengesType), nil
}

type ApisAuthType string

const (
	ApisAuthTypeKey ApisAuthType = "key"
	ApisAuthTypeJwt ApisAuthType = "jwt"
)

func (e *ApisAuthType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApisAuthType(s)
	case string:
		*e = ApisAuthType(s)
	default:
		return fmt.Errorf("unsupported scan type for ApisAuthType: %T", src)
	}
	return nil
}

type NullApisAuthType struct {
	ApisAuthType ApisAuthType
	Valid        bool // Valid is true if ApisAuthType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApisAuthType) Scan(value interface{}) error {
	if value == nil {
		ns.ApisAuthType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApisAuthType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApisAuthType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApisAuthType), nil
}

type DeploymentStepsStatus string

const (
	DeploymentStepsStatusPending                DeploymentStepsStatus = "pending"
	DeploymentStepsStatusDownloadingDockerImage DeploymentStepsStatus = "downloading_docker_image"
	DeploymentStepsStatusBuildingRootfs         DeploymentStepsStatus = "building_rootfs"
	DeploymentStepsStatusUploadingRootfs        DeploymentStepsStatus = "uploading_rootfs"
	DeploymentStepsStatusCreatingVm             DeploymentStepsStatus = "creating_vm"
	DeploymentStepsStatusBootingVm              DeploymentStepsStatus = "booting_vm"
	DeploymentStepsStatusAssigningDomains       DeploymentStepsStatus = "assigning_domains"
	DeploymentStepsStatusCompleted              DeploymentStepsStatus = "completed"
	DeploymentStepsStatusFailed                 DeploymentStepsStatus = "failed"
)

func (e *DeploymentStepsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeploymentStepsStatus(s)
	case string:
		*e = DeploymentStepsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeploymentStepsStatus: %T", src)
	}
	return nil
}

type NullDeploymentStepsStatus struct {
	DeploymentStepsStatus DeploymentStepsStatus
	Valid                 bool // Valid is true if DeploymentStepsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeploymentStepsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeploymentStepsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeploymentStepsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeploymentStepsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeploymentStepsStatus), nil
}

type DeploymentsStatus string

const (
	DeploymentsStatusPending   DeploymentsStatus = "pending"
	DeploymentsStatusBuilding  DeploymentsStatus = "building"
	DeploymentsStatusDeploying DeploymentsStatus = "deploying"
	DeploymentsStatusNetwork   DeploymentsStatus = "network"
	DeploymentsStatusReady     DeploymentsStatus = "ready"
	DeploymentsStatusFailed    DeploymentsStatus = "failed"
)

func (e *DeploymentsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeploymentsStatus(s)
	case string:
		*e = DeploymentsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeploymentsStatus: %T", src)
	}
	return nil
}

type NullDeploymentsStatus struct {
	DeploymentsStatus DeploymentsStatus
	Valid             bool // Valid is true if DeploymentsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeploymentsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeploymentsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeploymentsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeploymentsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeploymentsStatus), nil
}

type DomainsType string

const (
	DomainsTypeCustom   DomainsType = "custom"
	DomainsTypeWildcard DomainsType = "wildcard"
)

func (e *DomainsType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomainsType(s)
	case string:
		*e = DomainsType(s)
	default:
		return fmt.Errorf("unsupported scan type for DomainsType: %T", src)
	}
	return nil
}

type NullDomainsType struct {
	DomainsType DomainsType
	Valid       bool // Valid is true if DomainsType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomainsType) Scan(value interface{}) error {
	if value == nil {
		ns.DomainsType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomainsType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomainsType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomainsType), nil
}

type RatelimitOverridesSharding string

const (
	RatelimitOverridesShardingEdge RatelimitOverridesSharding = "edge"
)

func (e *RatelimitOverridesSharding) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RatelimitOverridesSharding(s)
	case string:
		*e = RatelimitOverridesSharding(s)
	default:
		return fmt.Errorf("unsupported scan type for RatelimitOverridesSharding: %T", src)
	}
	return nil
}

type NullRatelimitOverridesSharding struct {
	RatelimitOverridesSharding RatelimitOverridesSharding
	Valid                      bool // Valid is true if RatelimitOverridesSharding is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRatelimitOverridesSharding) Scan(value interface{}) error {
	if value == nil {
		ns.RatelimitOverridesSharding, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RatelimitOverridesSharding.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRatelimitOverridesSharding) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RatelimitOverridesSharding), nil
}

type VercelBindingsEnvironment string

const (
	VercelBindingsEnvironmentDevelopment VercelBindingsEnvironment = "development"
	VercelBindingsEnvironmentPreview     VercelBindingsEnvironment = "preview"
	VercelBindingsEnvironmentProduction  VercelBindingsEnvironment = "production"
)

func (e *VercelBindingsEnvironment) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VercelBindingsEnvironment(s)
	case string:
		*e = VercelBindingsEnvironment(s)
	default:
		return fmt.Errorf("unsupported scan type for VercelBindingsEnvironment: %T", src)
	}
	return nil
}

type NullVercelBindingsEnvironment struct {
	VercelBindingsEnvironment VercelBindingsEnvironment
	Valid                     bool // Valid is true if VercelBindingsEnvironment is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVercelBindingsEnvironment) Scan(value interface{}) error {
	if value == nil {
		ns.VercelBindingsEnvironment, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VercelBindingsEnvironment.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVercelBindingsEnvironment) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VercelBindingsEnvironment), nil
}

type VercelBindingsResourceType string

const (
	VercelBindingsResourceTypeRootKey VercelBindingsResourceType = "rootKey"
	VercelBindingsResourceTypeApiId   VercelBindingsResourceType = "apiId"
)

func (e *VercelBindingsResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VercelBindingsResourceType(s)
	case string:
		*e = VercelBindingsResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for VercelBindingsResourceType: %T", src)
	}
	return nil
}

type NullVercelBindingsResourceType struct {
	VercelBindingsResourceType VercelBindingsResourceType
	Valid                      bool // Valid is true if VercelBindingsResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVercelBindingsResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.VercelBindingsResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VercelBindingsResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVercelBindingsResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VercelBindingsResourceType), nil
}

type WorkspacesPlan string

const (
	WorkspacesPlanFree       WorkspacesPlan = "free"
	WorkspacesPlanPro        WorkspacesPlan = "pro"
	WorkspacesPlanEnterprise WorkspacesPlan = "enterprise"
)

func (e *WorkspacesPlan) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkspacesPlan(s)
	case string:
		*e = WorkspacesPlan(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkspacesPlan: %T", src)
	}
	return nil
}

type NullWorkspacesPlan struct {
	WorkspacesPlan WorkspacesPlan
	Valid          bool // Valid is true if WorkspacesPlan is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkspacesPlan) Scan(value interface{}) error {
	if value == nil {
		ns.WorkspacesPlan, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkspacesPlan.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkspacesPlan) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkspacesPlan), nil
}

type AcmeChallenge struct {
	ID            uint64               `db:"id"`
	WorkspaceID   string               `db:"workspace_id"`
	DomainID      string               `db:"domain_id"`
	Token         string               `db:"token"`
	Type          AcmeChallengesType   `db:"type"`
	Authorization string               `db:"authorization"`
	Status        AcmeChallengesStatus `db:"status"`
	ExpiresAt     int64                `db:"expires_at"`
	CreatedAt     int64                `db:"created_at"`
	UpdatedAt     sql.NullInt64        `db:"updated_at"`
}

type AcmeUser struct {
	ID              uint64         `db:"id"`
	WorkspaceID     string         `db:"workspace_id"`
	EncryptedKey    string         `db:"encrypted_key"`
	RegistrationUri sql.NullString `db:"registration_uri"`
	CreatedAt       int64          `db:"created_at"`
	UpdatedAt       sql.NullInt64  `db:"updated_at"`
}

type Api struct {
	ID               string           `db:"id"`
	Name             string           `db:"name"`
	WorkspaceID      string           `db:"workspace_id"`
	IpWhitelist      sql.NullString   `db:"ip_whitelist"`
	AuthType         NullApisAuthType `db:"auth_type"`
	KeyAuthID        sql.NullString   `db:"key_auth_id"`
	CreatedAtM       int64            `db:"created_at_m"`
	UpdatedAtM       sql.NullInt64    `db:"updated_at_m"`
	DeletedAtM       sql.NullInt64    `db:"deleted_at_m"`
	DeleteProtection sql.NullBool     `db:"delete_protection"`
}

type AuditLog struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	Bucket      string         `db:"bucket"`
	BucketID    string         `db:"bucket_id"`
	Event       string         `db:"event"`
	Time        int64          `db:"time"`
	Display     string         `db:"display"`
	RemoteIp    sql.NullString `db:"remote_ip"`
	UserAgent   sql.NullString `db:"user_agent"`
	ActorType   string         `db:"actor_type"`
	ActorID     string         `db:"actor_id"`
	ActorName   sql.NullString `db:"actor_name"`
	ActorMeta   []byte         `db:"actor_meta"`
	CreatedAt   int64          `db:"created_at"`
	UpdatedAt   sql.NullInt64  `db:"updated_at"`
}

type AuditLogBucket struct {
	ID               string        `db:"id"`
	WorkspaceID      string        `db:"workspace_id"`
	Name             string        `db:"name"`
	RetentionDays    sql.NullInt32 `db:"retention_days"`
	CreatedAt        int64         `db:"created_at"`
	UpdatedAt        sql.NullInt64 `db:"updated_at"`
	DeleteProtection sql.NullBool  `db:"delete_protection"`
}

type AuditLogTarget struct {
	WorkspaceID string         `db:"workspace_id"`
	BucketID    string         `db:"bucket_id"`
	Bucket      string         `db:"bucket"`
	AuditLogID  string         `db:"audit_log_id"`
	DisplayName string         `db:"display_name"`
	Type        string         `db:"type"`
	ID          string         `db:"id"`
	Name        sql.NullString `db:"name"`
	Meta        []byte         `db:"meta"`
	CreatedAt   int64          `db:"created_at"`
	UpdatedAt   sql.NullInt64  `db:"updated_at"`
}

type Deployment struct {
	ID                       string            `db:"id"`
	WorkspaceID              string            `db:"workspace_id"`
	ProjectID                string            `db:"project_id"`
	EnvironmentID            string            `db:"environment_id"`
	GitCommitSha             sql.NullString    `db:"git_commit_sha"`
	GitBranch                sql.NullString    `db:"git_branch"`
	GitCommitMessage         sql.NullString    `db:"git_commit_message"`
	GitCommitAuthorName      sql.NullString    `db:"git_commit_author_name"`
	GitCommitAuthorEmail     sql.NullString    `db:"git_commit_author_email"`
	GitCommitAuthorUsername  sql.NullString    `db:"git_commit_author_username"`
	GitCommitAuthorAvatarUrl sql.NullString    `db:"git_commit_author_avatar_url"`
	GitCommitTimestamp       sql.NullInt64     `db:"git_commit_timestamp"`
	RuntimeConfig            json.RawMessage   `db:"runtime_config"`
	OpenapiSpec              sql.NullString    `db:"openapi_spec"`
	Status                   DeploymentsStatus `db:"status"`
	CreatedAt                int64             `db:"created_at"`
	UpdatedAt                sql.NullInt64     `db:"updated_at"`
}

type DeploymentStep struct {
	DeploymentID string                `db:"deployment_id"`
	WorkspaceID  string                `db:"workspace_id"`
	ProjectID    string                `db:"project_id"`
	Status       DeploymentStepsStatus `db:"status"`
	Message      string                `db:"message"`
	CreatedAt    int64                 `db:"created_at"`
}

type Domain struct {
	ID           string         `db:"id"`
	WorkspaceID  string         `db:"workspace_id"`
	ProjectID    sql.NullString `db:"project_id"`
	DeploymentID sql.NullString `db:"deployment_id"`
	Domain       string         `db:"domain"`
	Type         DomainsType    `db:"type"`
	CreatedAt    int64          `db:"created_at"`
	UpdatedAt    sql.NullInt64  `db:"updated_at"`
}

type EncryptedKey struct {
	WorkspaceID     string        `db:"workspace_id"`
	KeyID           string        `db:"key_id"`
	CreatedAt       int64         `db:"created_at"`
	UpdatedAt       sql.NullInt64 `db:"updated_at"`
	Encrypted       string        `db:"encrypted"`
	EncryptionKeyID string        `db:"encryption_key_id"`
}

type Environment struct {
	ID               string         `db:"id"`
	WorkspaceID      string         `db:"workspace_id"`
	ProjectID        string         `db:"project_id"`
	Slug             string         `db:"slug"`
	Description      sql.NullString `db:"description"`
	DeleteProtection sql.NullBool   `db:"delete_protection"`
	CreatedAt        int64          `db:"created_at"`
	UpdatedAt        sql.NullInt64  `db:"updated_at"`
}

type Identity struct {
	ID          string        `db:"id"`
	ExternalID  string        `db:"external_id"`
	WorkspaceID string        `db:"workspace_id"`
	Environment string        `db:"environment"`
	Meta        []byte        `db:"meta"`
	Deleted     bool          `db:"deleted"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
}

type Key struct {
	ID                string         `db:"id"`
	KeyAuthID         string         `db:"key_auth_id"`
	Hash              string         `db:"hash"`
	Start             string         `db:"start"`
	WorkspaceID       string         `db:"workspace_id"`
	ForWorkspaceID    sql.NullString `db:"for_workspace_id"`
	Name              sql.NullString `db:"name"`
	OwnerID           sql.NullString `db:"owner_id"`
	IdentityID        sql.NullString `db:"identity_id"`
	Meta              sql.NullString `db:"meta"`
	Expires           sql.NullTime   `db:"expires"`
	CreatedAtM        int64          `db:"created_at_m"`
	UpdatedAtM        sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM        sql.NullInt64  `db:"deleted_at_m"`
	RefillDay         sql.NullInt16  `db:"refill_day"`
	RefillAmount      sql.NullInt32  `db:"refill_amount"`
	LastRefillAt      sql.NullTime   `db:"last_refill_at"`
	Enabled           bool           `db:"enabled"`
	RemainingRequests sql.NullInt32  `db:"remaining_requests"`
	RatelimitAsync    sql.NullBool   `db:"ratelimit_async"`
	RatelimitLimit    sql.NullInt32  `db:"ratelimit_limit"`
	RatelimitDuration sql.NullInt64  `db:"ratelimit_duration"`
	Environment       sql.NullString `db:"environment"`
}

type KeyAuth struct {
	ID                 string         `db:"id"`
	WorkspaceID        string         `db:"workspace_id"`
	CreatedAtM         int64          `db:"created_at_m"`
	UpdatedAtM         sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM         sql.NullInt64  `db:"deleted_at_m"`
	StoreEncryptedKeys bool           `db:"store_encrypted_keys"`
	DefaultPrefix      sql.NullString `db:"default_prefix"`
	DefaultBytes       sql.NullInt32  `db:"default_bytes"`
	SizeApprox         int32          `db:"size_approx"`
	SizeLastUpdatedAt  int64          `db:"size_last_updated_at"`
}

type KeyMigrationError struct {
	ID          string          `db:"id"`
	MigrationID string          `db:"migration_id"`
	CreatedAt   int64           `db:"created_at"`
	WorkspaceID string          `db:"workspace_id"`
	Message     json.RawMessage `db:"message"`
}

type KeysPermission struct {
	TempID       int64         `db:"temp_id"`
	KeyID        string        `db:"key_id"`
	PermissionID string        `db:"permission_id"`
	WorkspaceID  string        `db:"workspace_id"`
	CreatedAtM   int64         `db:"created_at_m"`
	UpdatedAtM   sql.NullInt64 `db:"updated_at_m"`
}

type KeysRole struct {
	KeyID       string        `db:"key_id"`
	RoleID      string        `db:"role_id"`
	WorkspaceID string        `db:"workspace_id"`
	CreatedAtM  int64         `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64 `db:"updated_at_m"`
}

type Permission struct {
	ID          string            `db:"id"`
	WorkspaceID string            `db:"workspace_id"`
	Name        string            `db:"name"`
	Slug        string            `db:"slug"`
	Description dbtype.NullString `db:"description"`
	CreatedAtM  int64             `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64     `db:"updated_at_m"`
}

type Project struct {
	ID               string         `db:"id"`
	WorkspaceID      string         `db:"workspace_id"`
	Name             string         `db:"name"`
	Slug             string         `db:"slug"`
	GitRepositoryUrl sql.NullString `db:"git_repository_url"`
	DefaultBranch    sql.NullString `db:"default_branch"`
	DeleteProtection sql.NullBool   `db:"delete_protection"`
	CreatedAt        int64          `db:"created_at"`
	UpdatedAt        sql.NullInt64  `db:"updated_at"`
}

type Quotum struct {
	WorkspaceID            string `db:"workspace_id"`
	RequestsPerMonth       int64  `db:"requests_per_month"`
	LogsRetentionDays      int32  `db:"logs_retention_days"`
	AuditLogsRetentionDays int32  `db:"audit_logs_retention_days"`
	Team                   bool   `db:"team"`
}

type Ratelimit struct {
	ID          string         `db:"id"`
	Name        string         `db:"name"`
	WorkspaceID string         `db:"workspace_id"`
	CreatedAt   int64          `db:"created_at"`
	UpdatedAt   sql.NullInt64  `db:"updated_at"`
	KeyID       sql.NullString `db:"key_id"`
	IdentityID  sql.NullString `db:"identity_id"`
	Limit       int32          `db:"limit"`
	Duration    int64          `db:"duration"`
	AutoApply   bool           `db:"auto_apply"`
}

type RatelimitNamespace struct {
	ID          string        `db:"id"`
	WorkspaceID string        `db:"workspace_id"`
	Name        string        `db:"name"`
	CreatedAtM  int64         `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64 `db:"updated_at_m"`
	DeletedAtM  sql.NullInt64 `db:"deleted_at_m"`
}

type RatelimitOverride struct {
	ID          string                         `db:"id"`
	WorkspaceID string                         `db:"workspace_id"`
	NamespaceID string                         `db:"namespace_id"`
	Identifier  string                         `db:"identifier"`
	Limit       int32                          `db:"limit"`
	Duration    int32                          `db:"duration"`
	Async       sql.NullBool                   `db:"async"`
	Sharding    NullRatelimitOverridesSharding `db:"sharding"`
	CreatedAtM  int64                          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64                  `db:"updated_at_m"`
	DeletedAtM  sql.NullInt64                  `db:"deleted_at_m"`
}

type Role struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	CreatedAtM  int64          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64  `db:"updated_at_m"`
}

type RolesPermission struct {
	RoleID       string        `db:"role_id"`
	PermissionID string        `db:"permission_id"`
	WorkspaceID  string        `db:"workspace_id"`
	CreatedAtM   int64         `db:"created_at_m"`
	UpdatedAtM   sql.NullInt64 `db:"updated_at_m"`
}

type VercelBinding struct {
	ID            string                     `db:"id"`
	IntegrationID string                     `db:"integration_id"`
	WorkspaceID   string                     `db:"workspace_id"`
	ProjectID     string                     `db:"project_id"`
	Environment   VercelBindingsEnvironment  `db:"environment"`
	ResourceID    string                     `db:"resource_id"`
	ResourceType  VercelBindingsResourceType `db:"resource_type"`
	VercelEnvID   string                     `db:"vercel_env_id"`
	LastEditedBy  string                     `db:"last_edited_by"`
	CreatedAtM    int64                      `db:"created_at_m"`
	UpdatedAtM    sql.NullInt64              `db:"updated_at_m"`
	DeletedAtM    sql.NullInt64              `db:"deleted_at_m"`
}

type VercelIntegration struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	TeamID      sql.NullString `db:"team_id"`
	AccessToken string         `db:"access_token"`
	CreatedAtM  int64          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM  sql.NullInt64  `db:"deleted_at_m"`
}

type Workspace struct {
	ID                   string             `db:"id"`
	OrgID                string             `db:"org_id"`
	Name                 string             `db:"name"`
	Slug                 sql.NullString     `db:"slug"`
	PartitionID          sql.NullString     `db:"partition_id"`
	Plan                 NullWorkspacesPlan `db:"plan"`
	Tier                 sql.NullString     `db:"tier"`
	StripeCustomerID     sql.NullString     `db:"stripe_customer_id"`
	StripeSubscriptionID sql.NullString     `db:"stripe_subscription_id"`
	BetaFeatures         json.RawMessage    `db:"beta_features"`
	Features             json.RawMessage    `db:"features"`
	Subscriptions        []byte             `db:"subscriptions"`
	Enabled              bool               `db:"enabled"`
	DeleteProtection     sql.NullBool       `db:"delete_protection"`
	CreatedAtM           int64              `db:"created_at_m"`
	UpdatedAtM           sql.NullInt64      `db:"updated_at_m"`
	DeletedAtM           sql.NullInt64      `db:"deleted_at_m"`
}
