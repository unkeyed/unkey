// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"

	dbtype "github.com/unkeyed/unkey/go/pkg/db/types"
)

type ApisAuthType string

const (
	ApisAuthTypeKey ApisAuthType = "key"
	ApisAuthTypeJwt ApisAuthType = "jwt"
)

func (e *ApisAuthType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApisAuthType(s)
	case string:
		*e = ApisAuthType(s)
	default:
		return fmt.Errorf("unsupported scan type for ApisAuthType: %T", src)
	}
	return nil
}

type NullApisAuthType struct {
	ApisAuthType ApisAuthType
	Valid        bool // Valid is true if ApisAuthType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApisAuthType) Scan(value interface{}) error {
	if value == nil {
		ns.ApisAuthType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApisAuthType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApisAuthType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApisAuthType), nil
}

type BuildsBuildTool string

const (
	BuildsBuildToolDocker BuildsBuildTool = "docker"
	BuildsBuildToolDepot  BuildsBuildTool = "depot"
	BuildsBuildToolCustom BuildsBuildTool = "custom"
)

func (e *BuildsBuildTool) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BuildsBuildTool(s)
	case string:
		*e = BuildsBuildTool(s)
	default:
		return fmt.Errorf("unsupported scan type for BuildsBuildTool: %T", src)
	}
	return nil
}

type NullBuildsBuildTool struct {
	BuildsBuildTool BuildsBuildTool
	Valid           bool // Valid is true if BuildsBuildTool is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBuildsBuildTool) Scan(value interface{}) error {
	if value == nil {
		ns.BuildsBuildTool, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BuildsBuildTool.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBuildsBuildTool) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BuildsBuildTool), nil
}

type BuildsStatus string

const (
	BuildsStatusPending   BuildsStatus = "pending"
	BuildsStatusRunning   BuildsStatus = "running"
	BuildsStatusSucceeded BuildsStatus = "succeeded"
	BuildsStatusFailed    BuildsStatus = "failed"
	BuildsStatusCancelled BuildsStatus = "cancelled"
)

func (e *BuildsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BuildsStatus(s)
	case string:
		*e = BuildsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BuildsStatus: %T", src)
	}
	return nil
}

type NullBuildsStatus struct {
	BuildsStatus BuildsStatus
	Valid        bool // Valid is true if BuildsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBuildsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BuildsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BuildsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBuildsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BuildsStatus), nil
}

type DomainsVerificationMethod string

const (
	DomainsVerificationMethodDnsTxt     DomainsVerificationMethod = "dns_txt"
	DomainsVerificationMethodDnsCname   DomainsVerificationMethod = "dns_cname"
	DomainsVerificationMethodFileUpload DomainsVerificationMethod = "file_upload"
	DomainsVerificationMethodAutomatic  DomainsVerificationMethod = "automatic"
)

func (e *DomainsVerificationMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomainsVerificationMethod(s)
	case string:
		*e = DomainsVerificationMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for DomainsVerificationMethod: %T", src)
	}
	return nil
}

type NullDomainsVerificationMethod struct {
	DomainsVerificationMethod DomainsVerificationMethod
	Valid                     bool // Valid is true if DomainsVerificationMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomainsVerificationMethod) Scan(value interface{}) error {
	if value == nil {
		ns.DomainsVerificationMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomainsVerificationMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomainsVerificationMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomainsVerificationMethod), nil
}

type DomainsVerificationStatus string

const (
	DomainsVerificationStatusPending  DomainsVerificationStatus = "pending"
	DomainsVerificationStatusVerified DomainsVerificationStatus = "verified"
	DomainsVerificationStatusFailed   DomainsVerificationStatus = "failed"
	DomainsVerificationStatusExpired  DomainsVerificationStatus = "expired"
)

func (e *DomainsVerificationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomainsVerificationStatus(s)
	case string:
		*e = DomainsVerificationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DomainsVerificationStatus: %T", src)
	}
	return nil
}

type NullDomainsVerificationStatus struct {
	DomainsVerificationStatus DomainsVerificationStatus
	Valid                     bool // Valid is true if DomainsVerificationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomainsVerificationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DomainsVerificationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomainsVerificationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomainsVerificationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomainsVerificationStatus), nil
}

type PartitionsStatus string

const (
	PartitionsStatusActive   PartitionsStatus = "active"
	PartitionsStatusDraining PartitionsStatus = "draining"
	PartitionsStatusInactive PartitionsStatus = "inactive"
)

func (e *PartitionsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PartitionsStatus(s)
	case string:
		*e = PartitionsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PartitionsStatus: %T", src)
	}
	return nil
}

type NullPartitionsStatus struct {
	PartitionsStatus PartitionsStatus
	Valid            bool // Valid is true if PartitionsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPartitionsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PartitionsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PartitionsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPartitionsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PartitionsStatus), nil
}

type RatelimitOverridesSharding string

const (
	RatelimitOverridesShardingEdge RatelimitOverridesSharding = "edge"
)

func (e *RatelimitOverridesSharding) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RatelimitOverridesSharding(s)
	case string:
		*e = RatelimitOverridesSharding(s)
	default:
		return fmt.Errorf("unsupported scan type for RatelimitOverridesSharding: %T", src)
	}
	return nil
}

type NullRatelimitOverridesSharding struct {
	RatelimitOverridesSharding RatelimitOverridesSharding
	Valid                      bool // Valid is true if RatelimitOverridesSharding is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRatelimitOverridesSharding) Scan(value interface{}) error {
	if value == nil {
		ns.RatelimitOverridesSharding, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RatelimitOverridesSharding.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRatelimitOverridesSharding) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RatelimitOverridesSharding), nil
}

type VercelBindingsEnvironment string

const (
	VercelBindingsEnvironmentDevelopment VercelBindingsEnvironment = "development"
	VercelBindingsEnvironmentPreview     VercelBindingsEnvironment = "preview"
	VercelBindingsEnvironmentProduction  VercelBindingsEnvironment = "production"
)

func (e *VercelBindingsEnvironment) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VercelBindingsEnvironment(s)
	case string:
		*e = VercelBindingsEnvironment(s)
	default:
		return fmt.Errorf("unsupported scan type for VercelBindingsEnvironment: %T", src)
	}
	return nil
}

type NullVercelBindingsEnvironment struct {
	VercelBindingsEnvironment VercelBindingsEnvironment
	Valid                     bool // Valid is true if VercelBindingsEnvironment is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVercelBindingsEnvironment) Scan(value interface{}) error {
	if value == nil {
		ns.VercelBindingsEnvironment, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VercelBindingsEnvironment.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVercelBindingsEnvironment) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VercelBindingsEnvironment), nil
}

type VercelBindingsResourceType string

const (
	VercelBindingsResourceTypeRootKey VercelBindingsResourceType = "rootKey"
	VercelBindingsResourceTypeApiId   VercelBindingsResourceType = "apiId"
)

func (e *VercelBindingsResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VercelBindingsResourceType(s)
	case string:
		*e = VercelBindingsResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for VercelBindingsResourceType: %T", src)
	}
	return nil
}

type NullVercelBindingsResourceType struct {
	VercelBindingsResourceType VercelBindingsResourceType
	Valid                      bool // Valid is true if VercelBindingsResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVercelBindingsResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.VercelBindingsResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VercelBindingsResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVercelBindingsResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VercelBindingsResourceType), nil
}

type VersionStepsStatus string

const (
	VersionStepsStatusPending                VersionStepsStatus = "pending"
	VersionStepsStatusDownloadingDockerImage VersionStepsStatus = "downloading_docker_image"
	VersionStepsStatusBuildingRootfs         VersionStepsStatus = "building_rootfs"
	VersionStepsStatusUploadingRootfs        VersionStepsStatus = "uploading_rootfs"
	VersionStepsStatusCreatingVm             VersionStepsStatus = "creating_vm"
	VersionStepsStatusBootingVm              VersionStepsStatus = "booting_vm"
	VersionStepsStatusAssigningDomains       VersionStepsStatus = "assigning_domains"
	VersionStepsStatusCompleted              VersionStepsStatus = "completed"
	VersionStepsStatusFailed                 VersionStepsStatus = "failed"
)

func (e *VersionStepsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VersionStepsStatus(s)
	case string:
		*e = VersionStepsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VersionStepsStatus: %T", src)
	}
	return nil
}

type NullVersionStepsStatus struct {
	VersionStepsStatus VersionStepsStatus
	Valid              bool // Valid is true if VersionStepsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVersionStepsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VersionStepsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VersionStepsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVersionStepsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VersionStepsStatus), nil
}

type VersionsStatus string

const (
	VersionsStatusPending   VersionsStatus = "pending"
	VersionsStatusBuilding  VersionsStatus = "building"
	VersionsStatusDeploying VersionsStatus = "deploying"
	VersionsStatusActive    VersionsStatus = "active"
	VersionsStatusFailed    VersionsStatus = "failed"
	VersionsStatusArchived  VersionsStatus = "archived"
)

func (e *VersionsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VersionsStatus(s)
	case string:
		*e = VersionsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VersionsStatus: %T", src)
	}
	return nil
}

type NullVersionsStatus struct {
	VersionsStatus VersionsStatus
	Valid          bool // Valid is true if VersionsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVersionsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VersionsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VersionsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVersionsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VersionsStatus), nil
}

type WorkspacesPlan string

const (
	WorkspacesPlanFree       WorkspacesPlan = "free"
	WorkspacesPlanPro        WorkspacesPlan = "pro"
	WorkspacesPlanEnterprise WorkspacesPlan = "enterprise"
)

func (e *WorkspacesPlan) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkspacesPlan(s)
	case string:
		*e = WorkspacesPlan(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkspacesPlan: %T", src)
	}
	return nil
}

type NullWorkspacesPlan struct {
	WorkspacesPlan WorkspacesPlan
	Valid          bool // Valid is true if WorkspacesPlan is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkspacesPlan) Scan(value interface{}) error {
	if value == nil {
		ns.WorkspacesPlan, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkspacesPlan.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkspacesPlan) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkspacesPlan), nil
}

type Api struct {
	ID               string           `db:"id"`
	Name             string           `db:"name"`
	WorkspaceID      string           `db:"workspace_id"`
	IpWhitelist      sql.NullString   `db:"ip_whitelist"`
	AuthType         NullApisAuthType `db:"auth_type"`
	KeyAuthID        sql.NullString   `db:"key_auth_id"`
	CreatedAtM       int64            `db:"created_at_m"`
	UpdatedAtM       sql.NullInt64    `db:"updated_at_m"`
	DeletedAtM       sql.NullInt64    `db:"deleted_at_m"`
	DeleteProtection sql.NullBool     `db:"delete_protection"`
}

type AuditLog struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	Bucket      string         `db:"bucket"`
	BucketID    string         `db:"bucket_id"`
	Event       string         `db:"event"`
	Time        int64          `db:"time"`
	Display     string         `db:"display"`
	RemoteIp    sql.NullString `db:"remote_ip"`
	UserAgent   sql.NullString `db:"user_agent"`
	ActorType   string         `db:"actor_type"`
	ActorID     string         `db:"actor_id"`
	ActorName   sql.NullString `db:"actor_name"`
	ActorMeta   []byte         `db:"actor_meta"`
	CreatedAt   int64          `db:"created_at"`
	UpdatedAt   sql.NullInt64  `db:"updated_at"`
}

type AuditLogBucket struct {
	ID               string        `db:"id"`
	WorkspaceID      string        `db:"workspace_id"`
	Name             string        `db:"name"`
	RetentionDays    sql.NullInt32 `db:"retention_days"`
	CreatedAt        int64         `db:"created_at"`
	UpdatedAt        sql.NullInt64 `db:"updated_at"`
	DeleteProtection sql.NullBool  `db:"delete_protection"`
}

type AuditLogTarget struct {
	WorkspaceID string         `db:"workspace_id"`
	BucketID    string         `db:"bucket_id"`
	Bucket      string         `db:"bucket"`
	AuditLogID  string         `db:"audit_log_id"`
	DisplayName string         `db:"display_name"`
	Type        string         `db:"type"`
	ID          string         `db:"id"`
	Name        sql.NullString `db:"name"`
	Meta        []byte         `db:"meta"`
	CreatedAt   int64          `db:"created_at"`
	UpdatedAt   sql.NullInt64  `db:"updated_at"`
}

type Branch struct {
	ID          string        `db:"id"`
	WorkspaceID string        `db:"workspace_id"`
	ProjectID   string        `db:"project_id"`
	Name        string        `db:"name"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
}

type Build struct {
	ID            string          `db:"id"`
	WorkspaceID   string          `db:"workspace_id"`
	ProjectID     string          `db:"project_id"`
	VersionID     string          `db:"version_id"`
	RootfsImageID sql.NullString  `db:"rootfs_image_id"`
	GitCommitSha  sql.NullString  `db:"git_commit_sha"`
	GitBranch     sql.NullString  `db:"git_branch"`
	Status        BuildsStatus    `db:"status"`
	BuildTool     BuildsBuildTool `db:"build_tool"`
	ErrorMessage  sql.NullString  `db:"error_message"`
	StartedAt     sql.NullInt64   `db:"started_at"`
	CompletedAt   sql.NullInt64   `db:"completed_at"`
	CreatedAt     int64           `db:"created_at"`
	UpdatedAt     sql.NullInt64   `db:"updated_at"`
}

type Domain struct {
	ID                 string                        `db:"id"`
	WorkspaceID        string                        `db:"workspace_id"`
	ProjectID          string                        `db:"project_id"`
	Hostname           string                        `db:"hostname"`
	IsCustomDomain     bool                          `db:"is_custom_domain"`
	CertificateID      sql.NullString                `db:"certificate_id"`
	VerificationStatus NullDomainsVerificationStatus `db:"verification_status"`
	VerificationToken  sql.NullString                `db:"verification_token"`
	VerificationMethod NullDomainsVerificationMethod `db:"verification_method"`
	SubdomainConfig    []byte                        `db:"subdomain_config"`
	CreatedAt          int64                         `db:"created_at"`
	UpdatedAt          sql.NullInt64                 `db:"updated_at"`
}

type EncryptedKey struct {
	WorkspaceID     string        `db:"workspace_id"`
	KeyID           string        `db:"key_id"`
	CreatedAt       int64         `db:"created_at"`
	UpdatedAt       sql.NullInt64 `db:"updated_at"`
	Encrypted       string        `db:"encrypted"`
	EncryptionKeyID string        `db:"encryption_key_id"`
}

type HostnameRoute struct {
	ID          string        `db:"id"`
	WorkspaceID string        `db:"workspace_id"`
	ProjectID   string        `db:"project_id"`
	Hostname    string        `db:"hostname"`
	VersionID   string        `db:"version_id"`
	IsEnabled   bool          `db:"is_enabled"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
}

type Identity struct {
	ID          string        `db:"id"`
	ExternalID  string        `db:"external_id"`
	WorkspaceID string        `db:"workspace_id"`
	Environment string        `db:"environment"`
	Meta        []byte        `db:"meta"`
	Deleted     bool          `db:"deleted"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
}

type Key struct {
	ID                string         `db:"id"`
	KeyAuthID         string         `db:"key_auth_id"`
	Hash              string         `db:"hash"`
	Start             string         `db:"start"`
	WorkspaceID       string         `db:"workspace_id"`
	ForWorkspaceID    sql.NullString `db:"for_workspace_id"`
	Name              sql.NullString `db:"name"`
	OwnerID           sql.NullString `db:"owner_id"`
	IdentityID        sql.NullString `db:"identity_id"`
	Meta              sql.NullString `db:"meta"`
	Expires           sql.NullTime   `db:"expires"`
	CreatedAtM        int64          `db:"created_at_m"`
	UpdatedAtM        sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM        sql.NullInt64  `db:"deleted_at_m"`
	RefillDay         sql.NullInt16  `db:"refill_day"`
	RefillAmount      sql.NullInt32  `db:"refill_amount"`
	LastRefillAt      sql.NullTime   `db:"last_refill_at"`
	Enabled           bool           `db:"enabled"`
	RemainingRequests sql.NullInt32  `db:"remaining_requests"`
	RatelimitAsync    sql.NullBool   `db:"ratelimit_async"`
	RatelimitLimit    sql.NullInt32  `db:"ratelimit_limit"`
	RatelimitDuration sql.NullInt64  `db:"ratelimit_duration"`
	Environment       sql.NullString `db:"environment"`
}

type KeyAuth struct {
	ID                 string         `db:"id"`
	WorkspaceID        string         `db:"workspace_id"`
	CreatedAtM         int64          `db:"created_at_m"`
	UpdatedAtM         sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM         sql.NullInt64  `db:"deleted_at_m"`
	StoreEncryptedKeys bool           `db:"store_encrypted_keys"`
	DefaultPrefix      sql.NullString `db:"default_prefix"`
	DefaultBytes       sql.NullInt32  `db:"default_bytes"`
	SizeApprox         int32          `db:"size_approx"`
	SizeLastUpdatedAt  int64          `db:"size_last_updated_at"`
}

type KeyMigrationError struct {
	ID          string          `db:"id"`
	MigrationID string          `db:"migration_id"`
	CreatedAt   int64           `db:"created_at"`
	WorkspaceID string          `db:"workspace_id"`
	Message     json.RawMessage `db:"message"`
}

type KeysPermission struct {
	TempID       int64         `db:"temp_id"`
	KeyID        string        `db:"key_id"`
	PermissionID string        `db:"permission_id"`
	WorkspaceID  string        `db:"workspace_id"`
	CreatedAtM   int64         `db:"created_at_m"`
	UpdatedAtM   sql.NullInt64 `db:"updated_at_m"`
}

type KeysRole struct {
	KeyID       string        `db:"key_id"`
	RoleID      string        `db:"role_id"`
	WorkspaceID string        `db:"workspace_id"`
	CreatedAtM  int64         `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64 `db:"updated_at_m"`
}

type Partition struct {
	ID               string           `db:"id"`
	Name             string           `db:"name"`
	Description      sql.NullString   `db:"description"`
	AwsAccountID     string           `db:"aws_account_id"`
	Region           string           `db:"region"`
	IpV4Address      sql.NullString   `db:"ip_v4_address"`
	IpV6Address      sql.NullString   `db:"ip_v6_address"`
	Status           PartitionsStatus `db:"status"`
	DeleteProtection sql.NullBool     `db:"delete_protection"`
	CreatedAt        int64            `db:"created_at"`
	UpdatedAt        sql.NullInt64    `db:"updated_at"`
}

type Permission struct {
	ID          string            `db:"id"`
	WorkspaceID string            `db:"workspace_id"`
	Name        string            `db:"name"`
	Slug        string            `db:"slug"`
	Description dbtype.NullString `db:"description"`
	CreatedAtM  int64             `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64     `db:"updated_at_m"`
}

type Project struct {
	ID               string         `db:"id"`
	WorkspaceID      string         `db:"workspace_id"`
	PartitionID      string         `db:"partition_id"`
	Name             string         `db:"name"`
	Slug             string         `db:"slug"`
	GitRepositoryUrl sql.NullString `db:"git_repository_url"`
	DefaultBranch    sql.NullString `db:"default_branch"`
	DeleteProtection sql.NullBool   `db:"delete_protection"`
	CreatedAt        int64          `db:"created_at"`
	UpdatedAt        sql.NullInt64  `db:"updated_at"`
}

type Quotum struct {
	WorkspaceID            string `db:"workspace_id"`
	RequestsPerMonth       int64  `db:"requests_per_month"`
	LogsRetentionDays      int32  `db:"logs_retention_days"`
	AuditLogsRetentionDays int32  `db:"audit_logs_retention_days"`
	Team                   bool   `db:"team"`
}

type Ratelimit struct {
	ID          string         `db:"id"`
	Name        string         `db:"name"`
	WorkspaceID string         `db:"workspace_id"`
	CreatedAt   int64          `db:"created_at"`
	UpdatedAt   sql.NullInt64  `db:"updated_at"`
	KeyID       sql.NullString `db:"key_id"`
	IdentityID  sql.NullString `db:"identity_id"`
	Limit       int32          `db:"limit"`
	Duration    int64          `db:"duration"`
	AutoApply   bool           `db:"auto_apply"`
}

type RatelimitNamespace struct {
	ID          string        `db:"id"`
	WorkspaceID string        `db:"workspace_id"`
	Name        string        `db:"name"`
	CreatedAtM  int64         `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64 `db:"updated_at_m"`
	DeletedAtM  sql.NullInt64 `db:"deleted_at_m"`
}

type RatelimitOverride struct {
	ID          string                         `db:"id"`
	WorkspaceID string                         `db:"workspace_id"`
	NamespaceID string                         `db:"namespace_id"`
	Identifier  string                         `db:"identifier"`
	Limit       int32                          `db:"limit"`
	Duration    int32                          `db:"duration"`
	Async       sql.NullBool                   `db:"async"`
	Sharding    NullRatelimitOverridesSharding `db:"sharding"`
	CreatedAtM  int64                          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64                  `db:"updated_at_m"`
	DeletedAtM  sql.NullInt64                  `db:"deleted_at_m"`
}

type Role struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	CreatedAtM  int64          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64  `db:"updated_at_m"`
}

type RolesPermission struct {
	RoleID       string        `db:"role_id"`
	PermissionID string        `db:"permission_id"`
	WorkspaceID  string        `db:"workspace_id"`
	CreatedAtM   int64         `db:"created_at_m"`
	UpdatedAtM   sql.NullInt64 `db:"updated_at_m"`
}

type RootfsImage struct {
	ID          string        `db:"id"`
	WorkspaceID string        `db:"workspace_id"`
	ProjectID   string        `db:"project_id"`
	S3Bucket    string        `db:"s3_bucket"`
	S3Key       string        `db:"s3_key"`
	SizeBytes   int64         `db:"size_bytes"`
	CreatedAt   int64         `db:"created_at"`
	UpdatedAt   sql.NullInt64 `db:"updated_at"`
}

type VercelBinding struct {
	ID            string                     `db:"id"`
	IntegrationID string                     `db:"integration_id"`
	WorkspaceID   string                     `db:"workspace_id"`
	ProjectID     string                     `db:"project_id"`
	Environment   VercelBindingsEnvironment  `db:"environment"`
	ResourceID    string                     `db:"resource_id"`
	ResourceType  VercelBindingsResourceType `db:"resource_type"`
	VercelEnvID   string                     `db:"vercel_env_id"`
	LastEditedBy  string                     `db:"last_edited_by"`
	CreatedAtM    int64                      `db:"created_at_m"`
	UpdatedAtM    sql.NullInt64              `db:"updated_at_m"`
	DeletedAtM    sql.NullInt64              `db:"deleted_at_m"`
}

type VercelIntegration struct {
	ID          string         `db:"id"`
	WorkspaceID string         `db:"workspace_id"`
	TeamID      sql.NullString `db:"team_id"`
	AccessToken string         `db:"access_token"`
	CreatedAtM  int64          `db:"created_at_m"`
	UpdatedAtM  sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM  sql.NullInt64  `db:"deleted_at_m"`
}

type Version struct {
	ID             string          `db:"id"`
	WorkspaceID    string          `db:"workspace_id"`
	ProjectID      string          `db:"project_id"`
	BranchID       sql.NullString  `db:"branch_id"`
	BuildID        sql.NullString  `db:"build_id"`
	RootfsImageID  string          `db:"rootfs_image_id"`
	GitCommitSha   sql.NullString  `db:"git_commit_sha"`
	GitBranch      sql.NullString  `db:"git_branch"`
	ConfigSnapshot json.RawMessage `db:"config_snapshot"`
	OpenapiSpec    sql.NullString  `db:"openapi_spec"`
	Status         VersionsStatus  `db:"status"`
	CreatedAt      int64           `db:"created_at"`
	UpdatedAt      sql.NullInt64   `db:"updated_at"`
}

type VersionStep struct {
	VersionID    string             `db:"version_id"`
	Status       VersionStepsStatus `db:"status"`
	Message      sql.NullString     `db:"message"`
	ErrorMessage sql.NullString     `db:"error_message"`
	CreatedAt    int64              `db:"created_at"`
}

type Workspace struct {
	ID                   string             `db:"id"`
	OrgID                string             `db:"org_id"`
	Name                 string             `db:"name"`
	PartitionID          sql.NullString     `db:"partition_id"`
	Plan                 NullWorkspacesPlan `db:"plan"`
	Tier                 sql.NullString     `db:"tier"`
	StripeCustomerID     sql.NullString     `db:"stripe_customer_id"`
	StripeSubscriptionID sql.NullString     `db:"stripe_subscription_id"`
	BetaFeatures         json.RawMessage    `db:"beta_features"`
	Features             json.RawMessage    `db:"features"`
	Subscriptions        []byte             `db:"subscriptions"`
	Enabled              bool               `db:"enabled"`
	DeleteProtection     sql.NullBool       `db:"delete_protection"`
	CreatedAtM           int64              `db:"created_at_m"`
	UpdatedAtM           sql.NullInt64      `db:"updated_at_m"`
	DeletedAtM           sql.NullInt64      `db:"deleted_at_m"`
}
