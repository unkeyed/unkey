// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: route_find_by_deployment_id.sql

package db

import (
	"context"
)

const findHostnameRoutesByDeploymentId = `-- name: FindHostnameRoutesByDeploymentId :many
SELECT 
    id,
    workspace_id,
    project_id,
    hostname,
    deployment_id,
    is_enabled,
    created_at,
    updated_at
FROM hostname_routes 
WHERE deployment_id = ? AND is_enabled = true
ORDER BY created_at ASC
`

// FindHostnameRoutesByDeploymentId
//
//	SELECT
//	    id,
//	    workspace_id,
//	    project_id,
//	    hostname,
//	    deployment_id,
//	    is_enabled,
//	    created_at,
//	    updated_at
//	FROM hostname_routes
//	WHERE deployment_id = ? AND is_enabled = true
//	ORDER BY created_at ASC
func (q *Queries) FindHostnameRoutesByDeploymentId(ctx context.Context, db DBTX, deploymentID string) ([]HostnameRoute, error) {
	rows, err := db.QueryContext(ctx, findHostnameRoutesByDeploymentId, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HostnameRoute
	for rows.Next() {
		var i HostnameRoute
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ProjectID,
			&i.Hostname,
			&i.DeploymentID,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
