// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_find_by_id.sql

package db

import (
	"context"
)

const findKeyByID = `-- name: FindKeyByID :one
SELECT
    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
    i.id, i.external_id, i.workspace_id, i.environment, i.created_at, i.updated_at, i.meta
FROM ` + "`" + `keys` + "`" + ` k
LEFT JOIN identities i ON k.identity_id = i.id
WHERE k.id = ?
`

type FindKeyByIDRow struct {
	Key      Key      `db:"key"`
	Identity Identity `db:"identity"`
}

// FindKeyByID
//
//	SELECT
//	    k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
//	    i.id, i.external_id, i.workspace_id, i.environment, i.created_at, i.updated_at, i.meta
//	FROM `keys` k
//	LEFT JOIN identities i ON k.identity_id = i.id
//	WHERE k.id = ?
func (q *Queries) FindKeyByID(ctx context.Context, db DBTX, id string) (FindKeyByIDRow, error) {
	row := db.QueryRowContext(ctx, findKeyByID, id)
	var i FindKeyByIDRow
	err := row.Scan(
		&i.Key.ID,
		&i.Key.KeyAuthID,
		&i.Key.Hash,
		&i.Key.Start,
		&i.Key.WorkspaceID,
		&i.Key.ForWorkspaceID,
		&i.Key.Name,
		&i.Key.OwnerID,
		&i.Key.IdentityID,
		&i.Key.Meta,
		&i.Key.Expires,
		&i.Key.CreatedAtM,
		&i.Key.UpdatedAtM,
		&i.Key.DeletedAtM,
		&i.Key.RefillDay,
		&i.Key.RefillAmount,
		&i.Key.LastRefillAt,
		&i.Key.Enabled,
		&i.Key.RemainingRequests,
		&i.Key.RatelimitAsync,
		&i.Key.RatelimitLimit,
		&i.Key.RatelimitDuration,
		&i.Key.Environment,
		&i.Identity.ID,
		&i.Identity.ExternalID,
		&i.Identity.WorkspaceID,
		&i.Identity.Environment,
		&i.Identity.CreatedAt,
		&i.Identity.UpdatedAt,
		&i.Identity.Meta,
	)
	return i, err
}
