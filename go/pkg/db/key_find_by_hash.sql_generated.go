// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: key_find_by_hash.sql

package db

import (
	"context"
	"database/sql"
)

const findKeyByHash = `-- name: FindKeyByHash :one
SELECT k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
ws.id as ws_id,
ws.enabled as ws_enabled,
ws.deleted_at_m as ws_deleted_at_m,
fws.enabled as for_workspace_enabled,
fws.deleted_at_m as for_workspace_deleted_at_m
FROM ` + "`" + `keys` + "`" + ` k
LEFT JOIN ` + "`" + `workspaces` + "`" + ` ws ON ws.id = k.workspace_id
LEFT JOIN ` + "`" + `workspaces` + "`" + ` fws ON fws.id = k.for_workspace_id
WHERE hash = ?
`

type FindKeyByHashRow struct {
	ID                     string         `db:"id"`
	KeyAuthID              string         `db:"key_auth_id"`
	Hash                   string         `db:"hash"`
	Start                  string         `db:"start"`
	WorkspaceID            string         `db:"workspace_id"`
	ForWorkspaceID         sql.NullString `db:"for_workspace_id"`
	Name                   sql.NullString `db:"name"`
	OwnerID                sql.NullString `db:"owner_id"`
	IdentityID             sql.NullString `db:"identity_id"`
	Meta                   sql.NullString `db:"meta"`
	Expires                sql.NullTime   `db:"expires"`
	CreatedAtM             int64          `db:"created_at_m"`
	UpdatedAtM             sql.NullInt64  `db:"updated_at_m"`
	DeletedAtM             sql.NullInt64  `db:"deleted_at_m"`
	RefillDay              sql.NullInt16  `db:"refill_day"`
	RefillAmount           sql.NullInt32  `db:"refill_amount"`
	LastRefillAt           sql.NullTime   `db:"last_refill_at"`
	Enabled                bool           `db:"enabled"`
	RemainingRequests      sql.NullInt32  `db:"remaining_requests"`
	RatelimitAsync         sql.NullBool   `db:"ratelimit_async"`
	RatelimitLimit         sql.NullInt32  `db:"ratelimit_limit"`
	RatelimitDuration      sql.NullInt64  `db:"ratelimit_duration"`
	Environment            sql.NullString `db:"environment"`
	WsID                   sql.NullString `db:"ws_id"`
	WsEnabled              sql.NullBool   `db:"ws_enabled"`
	WsDeletedAtM           sql.NullInt64  `db:"ws_deleted_at_m"`
	ForWorkspaceEnabled    sql.NullBool   `db:"for_workspace_enabled"`
	ForWorkspaceDeletedAtM sql.NullInt64  `db:"for_workspace_deleted_at_m"`
}

// FindKeyByHash
//
//	SELECT k.id, k.key_auth_id, k.hash, k.start, k.workspace_id, k.for_workspace_id, k.name, k.owner_id, k.identity_id, k.meta, k.expires, k.created_at_m, k.updated_at_m, k.deleted_at_m, k.refill_day, k.refill_amount, k.last_refill_at, k.enabled, k.remaining_requests, k.ratelimit_async, k.ratelimit_limit, k.ratelimit_duration, k.environment,
//	ws.id as ws_id,
//	ws.enabled as ws_enabled,
//	ws.deleted_at_m as ws_deleted_at_m,
//	fws.enabled as for_workspace_enabled,
//	fws.deleted_at_m as for_workspace_deleted_at_m
//	FROM `keys` k
//	LEFT JOIN `workspaces` ws ON ws.id = k.workspace_id
//	LEFT JOIN `workspaces` fws ON fws.id = k.for_workspace_id
//	WHERE hash = ?
func (q *Queries) FindKeyByHash(ctx context.Context, db DBTX, hash string) (FindKeyByHashRow, error) {
	row := db.QueryRowContext(ctx, findKeyByHash, hash)
	var i FindKeyByHashRow
	err := row.Scan(
		&i.ID,
		&i.KeyAuthID,
		&i.Hash,
		&i.Start,
		&i.WorkspaceID,
		&i.ForWorkspaceID,
		&i.Name,
		&i.OwnerID,
		&i.IdentityID,
		&i.Meta,
		&i.Expires,
		&i.CreatedAtM,
		&i.UpdatedAtM,
		&i.DeletedAtM,
		&i.RefillDay,
		&i.RefillAmount,
		&i.LastRefillAt,
		&i.Enabled,
		&i.RemainingRequests,
		&i.RatelimitAsync,
		&i.RatelimitLimit,
		&i.RatelimitDuration,
		&i.Environment,
		&i.WsID,
		&i.WsEnabled,
		&i.WsDeletedAtM,
		&i.ForWorkspaceEnabled,
		&i.ForWorkspaceDeletedAtM,
	)
	return i, err
}
