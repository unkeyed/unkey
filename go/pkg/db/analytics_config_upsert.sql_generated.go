// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analytics_config_upsert.sql

package db

import (
	"context"
	"encoding/json"
)

const upsertAnalyticsConfig = `-- name: UpsertAnalyticsConfig :exec
INSERT INTO ` + "`" + `analytics_config` + "`" + ` (workspace_id, enabled, storage, config, created_at)
VALUES (?, TRUE, ?, ?, UNIX_TIMESTAMP() * 1000)
ON DUPLICATE KEY UPDATE
	enabled = TRUE,
	storage = VALUES(storage),
	config = VALUES(config),
	updated_at = UNIX_TIMESTAMP() * 1000
`

type UpsertAnalyticsConfigParams struct {
	WorkspaceID string                 `db:"workspace_id"`
	Storage     AnalyticsConfigStorage `db:"storage"`
	Config      json.RawMessage        `db:"config"`
}

// UpsertAnalyticsConfig
//
//	INSERT INTO `analytics_config` (workspace_id, enabled, storage, config, created_at)
//	VALUES (?, TRUE, ?, ?, UNIX_TIMESTAMP() * 1000)
//	ON DUPLICATE KEY UPDATE
//		enabled = TRUE,
//		storage = VALUES(storage),
//		config = VALUES(config),
//		updated_at = UNIX_TIMESTAMP() * 1000
func (q *Queries) UpsertAnalyticsConfig(ctx context.Context, db DBTX, arg UpsertAnalyticsConfigParams) error {
	_, err := db.ExecContext(ctx, upsertAnalyticsConfig, arg.WorkspaceID, arg.Storage, arg.Config)
	return err
}
