package array

// Fill creates a new slice with the specified length where each element is generated by calling the provided function.
//
// The generator function is called exactly length times in sequential order. Returns an empty slice
// for zero or negative length.
//
// Parameters:
//   - length: Number of elements to create
//   - generator: Function called once per element to generate the value
//
// The returned slice has capacity equal to length for optimal memory allocation.
//
//	// Generate test data
//	userIDs := array.Fill(1000, func() string {
//	    return fmt.Sprintf("user_%d", rand.Intn(10000))
//	})
//
//	// Create structs with varying properties
//	testCases := array.Fill(100, func() TestCase {
//	    return TestCase{ID: rand.Int(), Created: time.Now()}
//	})
func Fill[T any](length int, generator func() T) []T {
	if length <= 0 {
		return []T{}
	}

	slice := make([]T, length)
	for i := range length {
		slice[i] = generator()
	}
	return slice
}
