// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Errors Optional list of individual error details
	Errors *[]ValidationErrorDetail `json:"errors,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// RequestId A unique id for this request. Please always provide this to support.
	RequestId string `json:"requestId"`

	// Status HTTP status code
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title string `json:"title"`

	// Type A URI reference to human-readable documentation for the error.
	Type string `json:"type"`
}

// BaseError defines model for BaseError.
type BaseError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Errors Optional list of individual error details
	Errors *[]ValidationErrorDetail `json:"errors,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// RequestId A unique id for this request. Please always provide this to support.
	RequestId string `json:"requestId"`

	// Status HTTP status code
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title string `json:"title"`

	// Type A URI reference to human-readable documentation for the error.
	Type string `json:"type"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = BaseError

// NotFoundError defines model for NotFoundError.
type NotFoundError = BaseError

// V1LivenessResponseBody defines model for V1LivenessResponseBody.
type V1LivenessResponseBody struct {
	// Message Whether we're alive or not
	Message string `json:"message"`
}

// V1RatelimitLimitRequestBody defines model for V1RatelimitLimitRequestBody.
type V1RatelimitLimitRequestBody struct {
	// Cost The cost of the request. Defaults to 1 if not provided.
	Cost *int64 `json:"cost,omitempty"`

	// Duration The duration in milliseconds for the rate limit window.
	Duration int64 `json:"duration"`

	// Identifier The identifier for the rate limit.
	Identifier string `json:"identifier"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`
}

// V1RatelimitLimitResponseBody defines model for V1RatelimitLimitResponseBody.
type V1RatelimitLimitResponseBody struct {
	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`

	// Remaining The number of requests remaining in the current window.
	Remaining int64 `json:"remaining"`

	// Reset The time in milliseconds when the rate limit will reset.
	Reset int64 `json:"reset"`

	// Success Whether the request passed the ratelimit. If false, the request must be blocked.
	Success bool `json:"success"`
}

// ValidationErrorDetail defines model for ValidationErrorDetail.
type ValidationErrorDetail struct {
	// Fix A human-readable message describing how to fix the error.
	Fix *string `json:"fix,omitempty"`

	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location string `json:"location"`

	// Message Error message text
	Message string `json:"message"`
}

// V1RatelimitLimitJSONRequestBody defines body for V1RatelimitLimit for application/json ContentType.
type V1RatelimitLimitJSONRequestBody = V1RatelimitLimitRequestBody
