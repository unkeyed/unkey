package hydra

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"github.com/unkeyed/unkey/go/pkg/hydra/store"
	sqlcstore "github.com/unkeyed/unkey/go/pkg/hydra/store/sqlc"
	"github.com/unkeyed/unkey/go/pkg/uid"
)

// TestNewQueryPattern demonstrates the new Query pattern usage
func TestNewQueryPattern(t *testing.T) {
	// Use the existing test engine to get a database connection
	engine := newTestEngine(t)
	ctx := context.Background()
	namespace := engine.GetNamespace()

	// Get the database connection directly from the engine
	db := engine.GetDB()

	// Example: Create a workflow using the new pattern
	workflowID := uid.New(uid.WorkflowPrefix)
	
	// This is how it would look with the new pattern
	err := store.Query.CreateWorkflow(ctx, db, sqlcstore.CreateWorkflowParams{
		ID:                workflowID,
		WorkflowName:      "test-workflow",
		Status:            sqlcstore.WorkflowExecutionsStatusPending,
		InputData:         []byte(`{"test": true}`),
		OutputData:        []byte{},
		ErrorMessage:      sql.NullString{},
		CreatedAt:         time.Now().UnixMilli(),
		StartedAt:         sql.NullInt64{},
		CompletedAt:       sql.NullInt64{},
		MaxAttempts:       3,
		RemainingAttempts: 3,
		NextRetryAt:       sql.NullInt64{},
		Namespace:         namespace,
		TriggerType:       sqlcstore.NullWorkflowExecutionsTriggerType{},
		TriggerSource:     sql.NullString{},
		SleepUntil:        sql.NullInt64{},
		TraceID:           sql.NullString{},
		SpanID:            sql.NullString{},
	})
	require.NoError(t, err, "CreateWorkflow should work with new pattern")

	// Example: Get the workflow using the new pattern
	workflow, err := store.Query.GetWorkflow(ctx, db, sqlcstore.GetWorkflowParams{
		ID:        workflowID,
		Namespace: namespace,
	})
	require.NoError(t, err, "GetWorkflow should work with new pattern")
	require.Equal(t, workflowID, workflow.ID)
	require.Equal(t, "test-workflow", workflow.WorkflowName)

	// Example: Transaction usage with the new pattern
	err = withTransaction(ctx, db, func(ctx context.Context, tx *sql.Tx) error {
		// Update workflow status within transaction
		return store.Query.UpdateWorkflowStatus(ctx, tx, sqlcstore.UpdateWorkflowStatusParams{
			Status:       sqlcstore.WorkflowExecutionsStatusRunning,
			ErrorMessage: sql.NullString{},
			ID:           workflowID,
			Namespace:    namespace,
		})
	})
	require.NoError(t, err, "Transaction should work with new pattern")

	// Verify the update worked
	updatedWorkflow, err := store.Query.GetWorkflow(ctx, db, sqlcstore.GetWorkflowParams{
		ID:        workflowID,
		Namespace: namespace,
	})
	require.NoError(t, err)
	require.Equal(t, sqlcstore.WorkflowExecutionsStatusRunning, updatedWorkflow.Status)

	t.Log("New Query pattern works successfully!")
}

// Helper function for transaction handling - this would be part of the engine or a utility package
func withTransaction(ctx context.Context, db *sql.DB, fn func(context.Context, *sql.Tx) error) error {
	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	if err := fn(ctx, tx); err != nil {
		return err
	}

	return tx.Commit()
}