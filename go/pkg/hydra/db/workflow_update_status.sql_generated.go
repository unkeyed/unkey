// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow_update_status.sql

package db

import (
	"context"
	"database/sql"
)

const updateWorkflowStatus = `-- name: UpdateWorkflowStatus :exec
UPDATE workflow_executions 
SET status = ?, error_message = ?
WHERE id = ? AND namespace = ?
`

type UpdateWorkflowStatusParams struct {
	Status       WorkflowExecutionsStatus `db:"status"`
	ErrorMessage sql.NullString           `db:"error_message"`
	ID           string                   `db:"id"`
	Namespace    string                   `db:"namespace"`
}

// UpdateWorkflowStatus
//
//	UPDATE workflow_executions
//	SET status = ?, error_message = ?
//	WHERE id = ? AND namespace = ?
func (q *Queries) UpdateWorkflowStatus(ctx context.Context, db DBTX, arg UpdateWorkflowStatusParams) error {
	_, err := db.ExecContext(ctx, updateWorkflowStatus,
		arg.Status,
		arg.ErrorMessage,
		arg.ID,
		arg.Namespace,
	)
	return err
}

const updateWorkflowStatusRunning = `-- name: UpdateWorkflowStatusRunning :exec
UPDATE workflow_executions 
SET status = 'running',
    started_at = CASE WHEN started_at IS NULL THEN ? ELSE started_at END,
    sleep_until = NULL
WHERE id = ? AND namespace = ?
`

type UpdateWorkflowStatusRunningParams struct {
	StartedAt sql.NullInt64 `db:"started_at"`
	ID        string        `db:"id"`
	Namespace string        `db:"namespace"`
}

// UpdateWorkflowStatusRunning
//
//	UPDATE workflow_executions
//	SET status = 'running',
//	    started_at = CASE WHEN started_at IS NULL THEN ? ELSE started_at END,
//	    sleep_until = NULL
//	WHERE id = ? AND namespace = ?
func (q *Queries) UpdateWorkflowStatusRunning(ctx context.Context, db DBTX, arg UpdateWorkflowStatusRunningParams) error {
	_, err := db.ExecContext(ctx, updateWorkflowStatusRunning, arg.StartedAt, arg.ID, arg.Namespace)
	return err
}
