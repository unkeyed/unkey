// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cron_create.sql

package db

import (
	"context"
)

const createCronJob = `-- name: CreateCronJob :exec
INSERT INTO cron_jobs (
    id,
    name,
    cron_spec,
    namespace,
    workflow_name,
    enabled,
    created_at,
    updated_at,
    next_run_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateCronJobParams struct {
	ID           string `db:"id"`
	Name         string `db:"name"`
	CronSpec     string `db:"cron_spec"`
	Namespace    string `db:"namespace"`
	WorkflowName string `db:"workflow_name"`
	Enabled      bool   `db:"enabled"`
	CreatedAt    int64  `db:"created_at"`
	UpdatedAt    int64  `db:"updated_at"`
	NextRunAt    int64  `db:"next_run_at"`
}

// CreateCronJob
//
//	INSERT INTO cron_jobs (
//	    id,
//	    name,
//	    cron_spec,
//	    namespace,
//	    workflow_name,
//	    enabled,
//	    created_at,
//	    updated_at,
//	    next_run_at
//	) VALUES (
//	    ?, ?, ?, ?, ?, ?, ?, ?, ?
//	)
func (q *Queries) CreateCronJob(ctx context.Context, db DBTX, arg CreateCronJobParams) error {
	_, err := db.ExecContext(ctx, createCronJob,
		arg.ID,
		arg.Name,
		arg.CronSpec,
		arg.Namespace,
		arg.WorkflowName,
		arg.Enabled,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.NextRunAt,
	)
	return err
}

const updateCronJob = `-- name: UpdateCronJob :exec
UPDATE cron_jobs 
SET cron_spec = ?,
    workflow_name = ?,
    enabled = ?,
    updated_at = ?,
    next_run_at = ?
WHERE id = ?
`

type UpdateCronJobParams struct {
	CronSpec     string `db:"cron_spec"`
	WorkflowName string `db:"workflow_name"`
	Enabled      bool   `db:"enabled"`
	UpdatedAt    int64  `db:"updated_at"`
	NextRunAt    int64  `db:"next_run_at"`
	ID           string `db:"id"`
}

// UpdateCronJob
//
//	UPDATE cron_jobs
//	SET cron_spec = ?,
//	    workflow_name = ?,
//	    enabled = ?,
//	    updated_at = ?,
//	    next_run_at = ?
//	WHERE id = ?
func (q *Queries) UpdateCronJob(ctx context.Context, db DBTX, arg UpdateCronJobParams) error {
	_, err := db.ExecContext(ctx, updateCronJob,
		arg.CronSpec,
		arg.WorkflowName,
		arg.Enabled,
		arg.UpdatedAt,
		arg.NextRunAt,
		arg.ID,
	)
	return err
}
