// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: lease_get.sql

package db

import (
	"context"
)

const getExpiredLeases = `-- name: GetExpiredLeases :many
SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases 
WHERE namespace = ? AND expires_at < ?
`

type GetExpiredLeasesParams struct {
	Namespace string `db:"namespace"`
	ExpiresAt int64  `db:"expires_at"`
}

// GetExpiredLeases
//
//	SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases
//	WHERE namespace = ? AND expires_at < ?
func (q *Queries) GetExpiredLeases(ctx context.Context, db DBTX, arg GetExpiredLeasesParams) ([]Lease, error) {
	rows, err := db.QueryContext(ctx, getExpiredLeases, arg.Namespace, arg.ExpiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lease
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ResourceID,
			&i.Kind,
			&i.Namespace,
			&i.WorkerID,
			&i.AcquiredAt,
			&i.ExpiresAt,
			&i.HeartbeatAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLease = `-- name: GetLease :one
SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases 
WHERE resource_id = ?
`

// GetLease
//
//	SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases
//	WHERE resource_id = ?
func (q *Queries) GetLease(ctx context.Context, db DBTX, resourceID string) (Lease, error) {
	row := db.QueryRowContext(ctx, getLease, resourceID)
	var i Lease
	err := row.Scan(
		&i.ResourceID,
		&i.Kind,
		&i.Namespace,
		&i.WorkerID,
		&i.AcquiredAt,
		&i.ExpiresAt,
		&i.HeartbeatAt,
	)
	return i, err
}
