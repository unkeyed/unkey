// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow_fail.sql

package db

import (
	"context"
	"database/sql"
)

const failWorkflow = `-- name: FailWorkflow :exec
UPDATE workflow_executions 
SET status = 'failed',
    error_message = ?,
    remaining_attempts = ?,
    completed_at = ?,
    next_retry_at = ?
WHERE id = ? AND namespace = ?
`

type FailWorkflowParams struct {
	ErrorMessage      sql.NullString `db:"error_message"`
	RemainingAttempts int32          `db:"remaining_attempts"`
	CompletedAt       sql.NullInt64  `db:"completed_at"`
	NextRetryAt       sql.NullInt64  `db:"next_retry_at"`
	ID                string         `db:"id"`
	Namespace         string         `db:"namespace"`
}

// FailWorkflow
//
//	UPDATE workflow_executions
//	SET status = 'failed',
//	    error_message = ?,
//	    remaining_attempts = ?,
//	    completed_at = ?,
//	    next_retry_at = ?
//	WHERE id = ? AND namespace = ?
func (q *Queries) FailWorkflow(ctx context.Context, db DBTX, arg FailWorkflowParams) error {
	_, err := db.ExecContext(ctx, failWorkflow,
		arg.ErrorMessage,
		arg.RemainingAttempts,
		arg.CompletedAt,
		arg.NextRetryAt,
		arg.ID,
		arg.Namespace,
	)
	return err
}

const failWorkflowFinal = `-- name: FailWorkflowFinal :exec
UPDATE workflow_executions 
SET status = 'failed',
    error_message = ?,
    remaining_attempts = ?,
    completed_at = ?,
    next_retry_at = NULL
WHERE id = ? AND namespace = ?
`

type FailWorkflowFinalParams struct {
	ErrorMessage      sql.NullString `db:"error_message"`
	RemainingAttempts int32          `db:"remaining_attempts"`
	CompletedAt       sql.NullInt64  `db:"completed_at"`
	ID                string         `db:"id"`
	Namespace         string         `db:"namespace"`
}

// FailWorkflowFinal
//
//	UPDATE workflow_executions
//	SET status = 'failed',
//	    error_message = ?,
//	    remaining_attempts = ?,
//	    completed_at = ?,
//	    next_retry_at = NULL
//	WHERE id = ? AND namespace = ?
func (q *Queries) FailWorkflowFinal(ctx context.Context, db DBTX, arg FailWorkflowFinalParams) error {
	_, err := db.ExecContext(ctx, failWorkflowFinal,
		arg.ErrorMessage,
		arg.RemainingAttempts,
		arg.CompletedAt,
		arg.ID,
		arg.Namespace,
	)
	return err
}
