// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow_sleep.sql

package db

import (
	"context"
	"database/sql"
)

const getSleepingWorkflows = `-- name: GetSleepingWorkflows :many
SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
WHERE namespace = ? 
  AND status = 'sleeping' 
  AND sleep_until <= ?
ORDER BY sleep_until ASC
`

type GetSleepingWorkflowsParams struct {
	Namespace  string        `db:"namespace"`
	SleepUntil sql.NullInt64 `db:"sleep_until"`
}

// GetSleepingWorkflows
//
//	SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
//	WHERE namespace = ?
//	  AND status = 'sleeping'
//	  AND sleep_until <= ?
//	ORDER BY sleep_until ASC
func (q *Queries) GetSleepingWorkflows(ctx context.Context, db DBTX, arg GetSleepingWorkflowsParams) ([]WorkflowExecution, error) {
	rows, err := db.QueryContext(ctx, getSleepingWorkflows, arg.Namespace, arg.SleepUntil)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowExecution
	for rows.Next() {
		var i WorkflowExecution
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowName,
			&i.Status,
			&i.InputData,
			&i.OutputData,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.MaxAttempts,
			&i.RemainingAttempts,
			&i.NextRetryAt,
			&i.Namespace,
			&i.TriggerType,
			&i.TriggerSource,
			&i.SleepUntil,
			&i.TraceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sleepWorkflow = `-- name: SleepWorkflow :exec
UPDATE workflow_executions 
SET status = 'sleeping',
    sleep_until = ?
WHERE id = ? AND namespace = ?
`

type SleepWorkflowParams struct {
	SleepUntil sql.NullInt64 `db:"sleep_until"`
	ID         string        `db:"id"`
	Namespace  string        `db:"namespace"`
}

// SleepWorkflow
//
//	UPDATE workflow_executions
//	SET status = 'sleeping',
//	    sleep_until = ?
//	WHERE id = ? AND namespace = ?
func (q *Queries) SleepWorkflow(ctx context.Context, db DBTX, arg SleepWorkflowParams) error {
	_, err := db.ExecContext(ctx, sleepWorkflow, arg.SleepUntil, arg.ID, arg.Namespace)
	return err
}
