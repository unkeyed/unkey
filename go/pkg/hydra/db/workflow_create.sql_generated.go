// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow_create.sql

package db

import (
	"context"
	"database/sql"
)

const createWorkflow = `-- name: CreateWorkflow :exec
INSERT INTO workflow_executions (
    id,
    workflow_name,
    status,
    input_data,
    max_attempts,
    remaining_attempts,
    namespace,
    trigger_type,
    trigger_source,
    trace_id,
    created_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateWorkflowParams struct {
	ID                string                        `db:"id"`
	WorkflowName      string                        `db:"workflow_name"`
	Status            WorkflowExecutionsStatus      `db:"status"`
	InputData         []byte                        `db:"input_data"`
	MaxAttempts       int32                         `db:"max_attempts"`
	RemainingAttempts int32                         `db:"remaining_attempts"`
	Namespace         string                        `db:"namespace"`
	TriggerType       WorkflowExecutionsTriggerType `db:"trigger_type"`
	TriggerSource     sql.NullString                `db:"trigger_source"`
	TraceID           string                        `db:"trace_id"`
	CreatedAt         int64                         `db:"created_at"`
}

// CreateWorkflow
//
//	INSERT INTO workflow_executions (
//	    id,
//	    workflow_name,
//	    status,
//	    input_data,
//	    max_attempts,
//	    remaining_attempts,
//	    namespace,
//	    trigger_type,
//	    trigger_source,
//	    trace_id,
//	    created_at
//	) VALUES (
//	    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
//	)
func (q *Queries) CreateWorkflow(ctx context.Context, db DBTX, arg CreateWorkflowParams) error {
	_, err := db.ExecContext(ctx, createWorkflow,
		arg.ID,
		arg.WorkflowName,
		arg.Status,
		arg.InputData,
		arg.MaxAttempts,
		arg.RemainingAttempts,
		arg.Namespace,
		arg.TriggerType,
		arg.TriggerSource,
		arg.TraceID,
		arg.CreatedAt,
	)
	return err
}
