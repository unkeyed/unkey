// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: lease_update.sql

package db

import (
	"context"
)

const heartbeatLease = `-- name: HeartbeatLease :execrows
UPDATE leases 
SET heartbeat_at = ?,
    expires_at = ?
WHERE resource_id = ? AND worker_id = ?
`

type HeartbeatLeaseParams struct {
	HeartbeatAt int64  `db:"heartbeat_at"`
	ExpiresAt   int64  `db:"expires_at"`
	ResourceID  string `db:"resource_id"`
	WorkerID    string `db:"worker_id"`
}

// HeartbeatLease
//
//	UPDATE leases
//	SET heartbeat_at = ?,
//	    expires_at = ?
//	WHERE resource_id = ? AND worker_id = ?
func (q *Queries) HeartbeatLease(ctx context.Context, db DBTX, arg HeartbeatLeaseParams) (int64, error) {
	result, err := db.ExecContext(ctx, heartbeatLease,
		arg.HeartbeatAt,
		arg.ExpiresAt,
		arg.ResourceID,
		arg.WorkerID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateLease = `-- name: UpdateLease :exec
UPDATE leases 
SET worker_id = ?,
    acquired_at = ?,
    expires_at = ?,
    heartbeat_at = ?
WHERE resource_id = ?
`

type UpdateLeaseParams struct {
	WorkerID    string `db:"worker_id"`
	AcquiredAt  int64  `db:"acquired_at"`
	ExpiresAt   int64  `db:"expires_at"`
	HeartbeatAt int64  `db:"heartbeat_at"`
	ResourceID  string `db:"resource_id"`
}

// UpdateLease
//
//	UPDATE leases
//	SET worker_id = ?,
//	    acquired_at = ?,
//	    expires_at = ?,
//	    heartbeat_at = ?
//	WHERE resource_id = ?
func (q *Queries) UpdateLease(ctx context.Context, db DBTX, arg UpdateLeaseParams) error {
	_, err := db.ExecContext(ctx, updateLease,
		arg.WorkerID,
		arg.AcquiredAt,
		arg.ExpiresAt,
		arg.HeartbeatAt,
		arg.ResourceID,
	)
	return err
}
