// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: step_get.sql

package db

import (
	"context"
)

const getCompletedStep = `-- name: GetCompletedStep :one
SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps 
WHERE namespace = ? AND execution_id = ? AND step_name = ? AND status = 'completed'
`

type GetCompletedStepParams struct {
	Namespace   string `db:"namespace"`
	ExecutionID string `db:"execution_id"`
	StepName    string `db:"step_name"`
}

// GetCompletedStep
//
//	SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps
//	WHERE namespace = ? AND execution_id = ? AND step_name = ? AND status = 'completed'
func (q *Queries) GetCompletedStep(ctx context.Context, db DBTX, arg GetCompletedStepParams) (WorkflowStep, error) {
	row := db.QueryRowContext(ctx, getCompletedStep, arg.Namespace, arg.ExecutionID, arg.StepName)
	var i WorkflowStep
	err := row.Scan(
		&i.ID,
		&i.ExecutionID,
		&i.StepName,
		&i.StepOrder,
		&i.Status,
		&i.OutputData,
		&i.ErrorMessage,
		&i.StartedAt,
		&i.CompletedAt,
		&i.MaxAttempts,
		&i.RemainingAttempts,
		&i.Namespace,
	)
	return i, err
}

const getStep = `-- name: GetStep :one
SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps 
WHERE namespace = ? AND execution_id = ? AND step_name = ?
`

type GetStepParams struct {
	Namespace   string `db:"namespace"`
	ExecutionID string `db:"execution_id"`
	StepName    string `db:"step_name"`
}

// GetStep
//
//	SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps
//	WHERE namespace = ? AND execution_id = ? AND step_name = ?
func (q *Queries) GetStep(ctx context.Context, db DBTX, arg GetStepParams) (WorkflowStep, error) {
	row := db.QueryRowContext(ctx, getStep, arg.Namespace, arg.ExecutionID, arg.StepName)
	var i WorkflowStep
	err := row.Scan(
		&i.ID,
		&i.ExecutionID,
		&i.StepName,
		&i.StepOrder,
		&i.Status,
		&i.OutputData,
		&i.ErrorMessage,
		&i.StartedAt,
		&i.CompletedAt,
		&i.MaxAttempts,
		&i.RemainingAttempts,
		&i.Namespace,
	)
	return i, err
}
