// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
)

type Querier interface {
	//AcquireLease
	//
	//  INSERT INTO leases (
	//      resource_id,
	//      kind,
	//      namespace,
	//      worker_id,
	//      acquired_at,
	//      expires_at,
	//      heartbeat_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?, ?
	//  )
	AcquireLease(ctx context.Context, db DBTX, arg AcquireLeaseParams) error
	//CheckLeaseExpired
	//
	//  SELECT EXISTS(
	//      SELECT 1 FROM leases
	//      WHERE resource_id = ? AND expires_at > ?
	//  ) as lease_active
	CheckLeaseExpired(ctx context.Context, db DBTX, arg CheckLeaseExpiredParams) (bool, error)
	//CleanupExpiredLeases
	//
	//  DELETE FROM leases
	//  WHERE namespace = ? AND expires_at < ?
	CleanupExpiredLeases(ctx context.Context, db DBTX, arg CleanupExpiredLeasesParams) error
	//CompleteWorkflow
	//
	//  UPDATE workflow_executions
	//  SET status = 'completed',
	//      completed_at = ?,
	//      output_data = ?
	//  WHERE id = ? AND namespace = ?
	CompleteWorkflow(ctx context.Context, db DBTX, arg CompleteWorkflowParams) error
	//CreateCronJob
	//
	//  INSERT INTO cron_jobs (
	//      id,
	//      name,
	//      cron_spec,
	//      namespace,
	//      workflow_name,
	//      enabled,
	//      created_at,
	//      updated_at,
	//      next_run_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?, ?, ?, ?
	//  )
	CreateCronJob(ctx context.Context, db DBTX, arg CreateCronJobParams) error
	//CreateStep
	//
	//  INSERT INTO workflow_steps (
	//      id,
	//      execution_id,
	//      step_name,
	//      step_order,
	//      status,
	//      max_attempts,
	//      remaining_attempts,
	//      namespace
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?, ?, ?
	//  )
	CreateStep(ctx context.Context, db DBTX, arg CreateStepParams) error
	//CreateWorkflow
	//
	//  INSERT INTO workflow_executions (
	//      id,
	//      workflow_name,
	//      status,
	//      input_data,
	//      max_attempts,
	//      remaining_attempts,
	//      namespace,
	//      trigger_type,
	//      trigger_source,
	//      trace_id,
	//      created_at
	//  ) VALUES (
	//      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
	//  )
	CreateWorkflow(ctx context.Context, db DBTX, arg CreateWorkflowParams) error
	//FailWorkflow
	//
	//  UPDATE workflow_executions
	//  SET status = 'failed',
	//      error_message = ?,
	//      remaining_attempts = ?,
	//      completed_at = ?,
	//      next_retry_at = ?
	//  WHERE id = ? AND namespace = ?
	FailWorkflow(ctx context.Context, db DBTX, arg FailWorkflowParams) error
	//FailWorkflowFinal
	//
	//  UPDATE workflow_executions
	//  SET status = 'failed',
	//      error_message = ?,
	//      remaining_attempts = ?,
	//      completed_at = ?,
	//      next_retry_at = NULL
	//  WHERE id = ? AND namespace = ?
	FailWorkflowFinal(ctx context.Context, db DBTX, arg FailWorkflowFinalParams) error
	//GetAllSteps
	//
	//  SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps
	//  WHERE namespace = ?
	GetAllSteps(ctx context.Context, db DBTX, namespace string) ([]WorkflowStep, error)
	//GetAllWorkflows
	//
	//  SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
	//  WHERE namespace = ?
	GetAllWorkflows(ctx context.Context, db DBTX, namespace string) ([]WorkflowExecution, error)
	//GetCompletedStep
	//
	//  SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps
	//  WHERE namespace = ? AND execution_id = ? AND step_name = ? AND status = 'completed'
	GetCompletedStep(ctx context.Context, db DBTX, arg GetCompletedStepParams) (WorkflowStep, error)
	//GetCronJob
	//
	//  SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs
	//  WHERE namespace = ? AND name = ?
	GetCronJob(ctx context.Context, db DBTX, arg GetCronJobParams) (CronJob, error)
	//GetCronJobs
	//
	//  SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs
	//  WHERE namespace = ? AND enabled = true
	GetCronJobs(ctx context.Context, db DBTX, namespace string) ([]CronJob, error)
	//GetDueCronJobs
	//
	//  SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs
	//  WHERE namespace = ? AND enabled = true AND next_run_at <= ?
	GetDueCronJobs(ctx context.Context, db DBTX, arg GetDueCronJobsParams) ([]CronJob, error)
	//GetExistingLease
	//
	//  SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases
	//  WHERE resource_id = ? AND kind = 'workflow'
	GetExistingLease(ctx context.Context, db DBTX, resourceID string) (Lease, error)
	//GetExpiredLeases
	//
	//  SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases
	//  WHERE namespace = ? AND expires_at < ?
	GetExpiredLeases(ctx context.Context, db DBTX, arg GetExpiredLeasesParams) ([]Lease, error)
	//GetLease
	//
	//  SELECT resource_id, kind, namespace, worker_id, acquired_at, expires_at, heartbeat_at FROM leases
	//  WHERE resource_id = ?
	GetLease(ctx context.Context, db DBTX, resourceID string) (Lease, error)
	//GetPendingWorkflows
	//
	//  SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
	//  WHERE namespace = ?
	//    AND (
	//      status = 'pending'
	//      OR (status = 'failed' AND next_retry_at <= ?)
	//      OR (status = 'sleeping' AND sleep_until <= ?)
	//    )
	//  ORDER BY created_at ASC
	//  LIMIT ? OFFSET ?
	GetPendingWorkflows(ctx context.Context, db DBTX, arg GetPendingWorkflowsParams) ([]WorkflowExecution, error)
	//GetPendingWorkflowsWithNames
	//
	//  SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
	//  WHERE namespace = ?
	//    AND (
	//      status = 'pending'
	//      OR (status = 'failed' AND next_retry_at <= ?)
	//      OR (status = 'sleeping' AND sleep_until <= ?)
	//    )
	//    AND workflow_name IN (/*SLICE:workflow_names*/?)
	//  ORDER BY created_at ASC
	//  LIMIT ? OFFSET ?
	GetPendingWorkflowsWithNames(ctx context.Context, db DBTX, arg GetPendingWorkflowsWithNamesParams) ([]WorkflowExecution, error)
	//GetSleepingWorkflows
	//
	//  SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
	//  WHERE namespace = ?
	//    AND status = 'sleeping'
	//    AND sleep_until <= ?
	//  ORDER BY sleep_until ASC
	GetSleepingWorkflows(ctx context.Context, db DBTX, arg GetSleepingWorkflowsParams) ([]WorkflowExecution, error)
	//GetStep
	//
	//  SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps
	//  WHERE namespace = ? AND execution_id = ? AND step_name = ?
	GetStep(ctx context.Context, db DBTX, arg GetStepParams) (WorkflowStep, error)
	//GetWorkflow
	//
	//  SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
	//  WHERE id = ? AND namespace = ?
	GetWorkflow(ctx context.Context, db DBTX, arg GetWorkflowParams) (WorkflowExecution, error)
	// Complex queries for workflow lease acquisition transaction
	//
	//
	//  SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
	//  WHERE id = ? AND namespace = ?
	GetWorkflowForLease(ctx context.Context, db DBTX, arg GetWorkflowForLeaseParams) (WorkflowExecution, error)
	//HeartbeatLease
	//
	//  UPDATE leases
	//  SET heartbeat_at = ?,
	//      expires_at = ?
	//  WHERE resource_id = ? AND worker_id = ?
	HeartbeatLease(ctx context.Context, db DBTX, arg HeartbeatLeaseParams) (int64, error)
	//ReleaseLease
	//
	//  DELETE FROM leases
	//  WHERE resource_id = ? AND worker_id = ?
	ReleaseLease(ctx context.Context, db DBTX, arg ReleaseLeaseParams) (int64, error)
	//ResetOrphanedWorkflows
	//
	//  UPDATE workflow_executions we
	//  SET status = 'pending'
	//  WHERE we.namespace = ?
	//    AND we.status = 'running'
	//    AND we.id NOT IN (
	//      SELECT l.resource_id
	//      FROM leases l
	//      WHERE l.kind = 'workflow' AND l.namespace = ?
	//    )
	ResetOrphanedWorkflows(ctx context.Context, db DBTX, arg ResetOrphanedWorkflowsParams) error
	//SleepWorkflow
	//
	//  UPDATE workflow_executions
	//  SET status = 'sleeping',
	//      sleep_until = ?
	//  WHERE id = ? AND namespace = ?
	SleepWorkflow(ctx context.Context, db DBTX, arg SleepWorkflowParams) error
	//UpdateCronJob
	//
	//  UPDATE cron_jobs
	//  SET cron_spec = ?,
	//      workflow_name = ?,
	//      enabled = ?,
	//      updated_at = ?,
	//      next_run_at = ?
	//  WHERE id = ?
	UpdateCronJob(ctx context.Context, db DBTX, arg UpdateCronJobParams) error
	//UpdateCronJobLastRun
	//
	//  UPDATE cron_jobs
	//  SET last_run_at = ?,
	//      next_run_at = ?,
	//      updated_at = ?
	//  WHERE id = ? AND namespace = ?
	UpdateCronJobLastRun(ctx context.Context, db DBTX, arg UpdateCronJobLastRunParams) error
	//UpdateLease
	//
	//  UPDATE leases
	//  SET worker_id = ?,
	//      acquired_at = ?,
	//      expires_at = ?,
	//      heartbeat_at = ?
	//  WHERE resource_id = ?
	UpdateLease(ctx context.Context, db DBTX, arg UpdateLeaseParams) error
	//UpdateStepStatus
	//
	//  UPDATE workflow_steps
	//  SET status = ?,
	//      completed_at = ?,
	//      output_data = ?,
	//      error_message = ?
	//  WHERE namespace = ? AND execution_id = ? AND step_name = ?
	UpdateStepStatus(ctx context.Context, db DBTX, arg UpdateStepStatusParams) error
	//UpdateWorkflowStatus
	//
	//  UPDATE workflow_executions
	//  SET status = ?, error_message = ?
	//  WHERE id = ? AND namespace = ?
	UpdateWorkflowStatus(ctx context.Context, db DBTX, arg UpdateWorkflowStatusParams) error
	//UpdateWorkflowStatusRunning
	//
	//  UPDATE workflow_executions
	//  SET status = 'running',
	//      started_at = CASE WHEN started_at IS NULL THEN ? ELSE started_at END,
	//      sleep_until = NULL
	//  WHERE id = ? AND namespace = ?
	UpdateWorkflowStatusRunning(ctx context.Context, db DBTX, arg UpdateWorkflowStatusRunningParams) error
}

var _ Querier = (*Queries)(nil)
