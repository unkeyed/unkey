// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: testing_helpers.sql

package db

import (
	"context"
)

const getAllSteps = `-- name: GetAllSteps :many
SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps 
WHERE namespace = ?
`

// GetAllSteps
//
//	SELECT id, execution_id, step_name, step_order, status, output_data, error_message, started_at, completed_at, max_attempts, remaining_attempts, namespace FROM workflow_steps
//	WHERE namespace = ?
func (q *Queries) GetAllSteps(ctx context.Context, db DBTX, namespace string) ([]WorkflowStep, error) {
	rows, err := db.QueryContext(ctx, getAllSteps, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowStep
	for rows.Next() {
		var i WorkflowStep
		if err := rows.Scan(
			&i.ID,
			&i.ExecutionID,
			&i.StepName,
			&i.StepOrder,
			&i.Status,
			&i.OutputData,
			&i.ErrorMessage,
			&i.StartedAt,
			&i.CompletedAt,
			&i.MaxAttempts,
			&i.RemainingAttempts,
			&i.Namespace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWorkflows = `-- name: GetAllWorkflows :many
SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions 
WHERE namespace = ?
`

// GetAllWorkflows
//
//	SELECT id, workflow_name, status, input_data, output_data, error_message, created_at, started_at, completed_at, max_attempts, remaining_attempts, next_retry_at, namespace, trigger_type, trigger_source, sleep_until, trace_id FROM workflow_executions
//	WHERE namespace = ?
func (q *Queries) GetAllWorkflows(ctx context.Context, db DBTX, namespace string) ([]WorkflowExecution, error) {
	rows, err := db.QueryContext(ctx, getAllWorkflows, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowExecution
	for rows.Next() {
		var i WorkflowExecution
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowName,
			&i.Status,
			&i.InputData,
			&i.OutputData,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.MaxAttempts,
			&i.RemainingAttempts,
			&i.NextRetryAt,
			&i.Namespace,
			&i.TriggerType,
			&i.TriggerSource,
			&i.SleepUntil,
			&i.TraceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
