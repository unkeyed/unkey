// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cron_get.sql

package db

import (
	"context"
)

const getCronJob = `-- name: GetCronJob :one
SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs 
WHERE namespace = ? AND name = ?
`

type GetCronJobParams struct {
	Namespace string `db:"namespace"`
	Name      string `db:"name"`
}

// GetCronJob
//
//	SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs
//	WHERE namespace = ? AND name = ?
func (q *Queries) GetCronJob(ctx context.Context, db DBTX, arg GetCronJobParams) (CronJob, error) {
	row := db.QueryRowContext(ctx, getCronJob, arg.Namespace, arg.Name)
	var i CronJob
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CronSpec,
		&i.Namespace,
		&i.WorkflowName,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastRunAt,
		&i.NextRunAt,
	)
	return i, err
}

const getCronJobs = `-- name: GetCronJobs :many
SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs 
WHERE namespace = ? AND enabled = true
`

// GetCronJobs
//
//	SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs
//	WHERE namespace = ? AND enabled = true
func (q *Queries) GetCronJobs(ctx context.Context, db DBTX, namespace string) ([]CronJob, error) {
	rows, err := db.QueryContext(ctx, getCronJobs, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CronJob
	for rows.Next() {
		var i CronJob
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CronSpec,
			&i.Namespace,
			&i.WorkflowName,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastRunAt,
			&i.NextRunAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDueCronJobs = `-- name: GetDueCronJobs :many
SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs 
WHERE namespace = ? AND enabled = true AND next_run_at <= ?
`

type GetDueCronJobsParams struct {
	Namespace string `db:"namespace"`
	NextRunAt int64  `db:"next_run_at"`
}

// GetDueCronJobs
//
//	SELECT id, name, cron_spec, namespace, workflow_name, enabled, created_at, updated_at, last_run_at, next_run_at FROM cron_jobs
//	WHERE namespace = ? AND enabled = true AND next_run_at <= ?
func (q *Queries) GetDueCronJobs(ctx context.Context, db DBTX, arg GetDueCronJobsParams) ([]CronJob, error) {
	rows, err := db.QueryContext(ctx, getDueCronJobs, arg.Namespace, arg.NextRunAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CronJob
	for rows.Next() {
		var i CronJob
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CronSpec,
			&i.Namespace,
			&i.WorkflowName,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastRunAt,
			&i.NextRunAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
