package main

//go:generate go run main.go

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

// TestCase defines a single rate limit test configuration
type TestCase struct {
	NodeCount   int
	Limit       int64
	Duration    int64
	LoadFactor  float64
	WindowCount int
}

func (tc TestCase) PackageName() string {
	return fmt.Sprintf("ratelimit_nodes%d_limit%d_duration%d_load%s_windows%d",
		tc.NodeCount,
		tc.Limit,
		tc.Duration,
		strings.ReplaceAll(fmt.Sprintf("%.2f", tc.LoadFactor), ".", "_"),
		tc.WindowCount,
	)

}

func (tc TestCase) TestName() string {
	return fmt.Sprintf("TestIntegration_RateLimit_Nodes%d_Limit%d_Duration%d_Load%s_Windows%d",
		tc.NodeCount,
		tc.Limit,
		tc.Duration,
		strings.ReplaceAll(fmt.Sprintf("%.2f", tc.LoadFactor), ".", "_"),
		tc.WindowCount,
	)

}

// Define test matrix parameters
var (
	nodeCounts   = []int{1, 3, 9}
	limits       = []int64{5, 100, 1000}
	durations    = []time.Duration{time.Second, time.Minute, time.Hour}
	loadFactors  = []float64{0.9, 2.0, 10.0}
	windowCounts = []int{10, 100}
)

const testTemplate = `// Code generated by go generate; DO NOT EDIT.
package {{ .PackageName }}

import (
	"testing"

	"github.com/unkeyed/unkey/go/apps/api/integration"
	run "github.com/unkeyed/unkey/go/apps/api/integration/multi_node_ratelimiting"
	"github.com/unkeyed/unkey/go/pkg/testutil"
)

func {{ .TestName }}(t *testing.T) {
	testutil.SkipUnlessIntegration(t)

	h := integration.New(t, integration.Config{
		NumNodes: {{ .NodeCount }},
	})

	run.RunRateLimitTest(
		t,
		h,
		{{ .Limit }},            // limit
		{{ .Duration }},         // duration
		{{ .WindowCount }},      // window count
		{{ .LoadFactor }},       // load factor
		{{ .NodeCount }},        // node count
	)
}
`

func main() {
	// Create base directory for generated tests
	baseDir := "../generated"
	err := os.RemoveAll(baseDir)
	if err != nil {
		panic(err)
	}
	err = os.MkdirAll(baseDir, 0755)
	if err != nil {
		panic(err)
	}

	// Parse template
	tmpl, err := template.New("test").Parse(testTemplate)
	if err != nil {
		panic(err)
	}

	// Generate test cases
	var testCases []TestCase
	for _, nodeCount := range nodeCounts {
		for _, limit := range limits {
			for _, duration := range durations {
				for _, loadFactor := range loadFactors {
					for _, windowCount := range windowCounts {
						testCases = append(testCases, TestCase{
							NodeCount:   nodeCount,
							Limit:       limit,
							Duration:    duration.Milliseconds(),
							LoadFactor:  loadFactor,
							WindowCount: windowCount,
						})
					}
				}
			}
		}
	}

	// Generate test files
	for _, tc := range testCases {
		packageDir := filepath.Join(baseDir, tc.PackageName())
		err := os.MkdirAll(packageDir, 0755)
		if err != nil {
			panic(err)
		}

		filePath := filepath.Join(packageDir, "generated_test.go")
		file, err := os.Create(filePath)
		if err != nil {
			panic(err)
		}

		err = tmpl.Execute(file, tc)
		if err != nil {
			panic(err)
		}

		err = file.Close()
		if err != nil {
			panic(err)
		}
	}

	fmt.Printf("Generated %d test cases\n", len(testCases))
}
