# Code generated by generate_bundle.go; DO NOT EDIT.
# Generated at: 2025-07-23T08:03:49Z
# Source: openapi-split.yaml

components:
    securitySchemes:
        rootKey:
            bearerFormat: root key
            description: |-
                Unkey uses API keys (root keys) for authentication. These keys authorize access to management operations in the API.
                To authenticate, include your root key in the Authorization header of each request:
                ```
                Authorization: Bearer unkey_123
                ```
                Root keys have specific permissions attached to them, controlling what operations they can perform. Key permissions follow a hierarchical structure with patterns like `resource.resource_id.action` (e.g., `apis.*.create_key`, `apis.*.read_api`).
                Security best practices:
                - Keep root keys secure and never expose them in client-side code
                - Use different root keys for different environments
                - Rotate keys periodically, especially after team member departures
                - Create keys with minimal necessary permissions following least privilege principle
                - Monitor key usage with audit logs.
            scheme: bearer
            type: http
    schemas:
        ChproxyMetricsRequestBody:
            type: array
            description: Array of API request metric events to be processed
            items:
                type: object
                additionalProperties: true
        ChproxyMetricsResponseBody:
            type: object
            required:
                - status
            properties:
                status:
                    type: string
                    description: Processing status
                    example: "OK"
        badRequestErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BadRequestErrorDetails"
            description: Error response for invalid requests that cannot be processed due to client-side errors. This typically occurs when request parameters are missing, malformed, or fail validation rules. The response includes detailed information about the specific errors in the request, including the location of each error and suggestions for fixing it. When receiving this error, check the 'errors' array in the response for specific validation issues that need to be addressed before retrying.
        internalServerErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.

                When you encounter this error:
                - The request ID in the response can help Unkey support investigate the issue
                - The error is likely temporary and retrying may succeed
                - If the error persists, contact Unkey support with the request ID
        ChproxyRatelimitsRequestBody:
            type: array
            description: Array of ratelimit events to be processed
            items:
                type: object
                additionalProperties: true
        ChproxyRatelimitsResponseBody:
            type: object
            required:
                - status
            properties:
                status:
                    type: string
                    description: Processing status
                    example: "OK"
        ChproxyVerificationsRequestBody:
            type: array
            description: Array of key verification events to be processed
            items:
                type: object
                additionalProperties: true
        ChproxyVerificationsResponseBody:
            type: object
            required:
                - status
            properties:
                status:
                    type: string
                    description: Processing status
                    example: "OK"
        V2ApisCreateApiRequestBody:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                    description: |
                        Creates an API with this name as an internal identifier for organization and isolation.
                        APIs serve as containers for groups of keys and provide namespace separation between environments or services.
                        Names must be unique within your workspace and are not shown to end users.

                        Use descriptive names that clearly identify the API's purpose and environment:
                        - Include environment indicators like 'production', 'staging', 'development'
                        - Use service-based naming like 'payment-service', 'user-management', 'analytics'
                        - Follow consistent naming conventions across your organization
                        - Keep names concise but informative for easy identification

                        Must start with a letter and contain only letters, numbers, underscores, dots, and hyphens.
                        Avoid generic names like 'api' or 'main' that don't provide meaningful context.
                    example: payment-service-production
            additionalProperties: false
        V2ApisCreateApiResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                data:
                    $ref: "#/components/schemas/V2ApisCreateApiResponseData"
            additionalProperties: false
        BadRequestErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BadRequestErrorDetails"
            description: Error response for invalid requests that cannot be processed due to client-side errors. This typically occurs when request parameters are missing, malformed, or fail validation rules. The response includes detailed information about the specific errors in the request, including the location of each error and suggestions for fixing it. When receiving this error, check the 'errors' array in the response for specific validation issues that need to be addressed before retrying.
        UnauthorizedErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when authentication has failed or credentials are missing. This occurs when:
                - No authentication token is provided in the request
                - The provided token is invalid, expired, or malformed
                - The token format doesn't match expected patterns

                To resolve this error, ensure you're including a valid root key in the Authorization header.
        ForbiddenErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when the provided credentials are valid but lack sufficient permissions for the requested operation. This occurs when:
                - The root key doesn't have the required permissions for this endpoint
                - The operation requires elevated privileges that the current key lacks
                - Access to the requested resource is restricted based on workspace settings

                To resolve this error, ensure your root key has the necessary permissions or contact your workspace administrator.
        InternalServerErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.

                When you encounter this error:
                - The request ID in the response can help Unkey support investigate the issue
                - The error is likely temporary and retrying may succeed
                - If the error persists, contact Unkey support with the request ID
        V2ApisDeleteApiRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which API to permanently delete from your workspace.
                        Must be a valid API ID that begins with 'api_' and exists within your workspace.

                        CRITICAL WARNING: Deletion is immediate and irreversible with severe consequences:
                        - ALL keys associated with this API become invalid instantly
                        - Verification requests for these keys will fail with `code=NOT_FOUND`
                        - Client applications using these keys will lose access immediately
                        - Analytics data and key metadata are permanently removed
                        - This operation cannot be undone under any circumstances

                        Before proceeding, ensure you have:
                        - Verified the correct API ID (double-check environment and service)
                        - Migrated all active keys to alternative APIs
                        - Updated all client applications to use replacement keys
                        - Backed up critical analytics data and key configurations
                        - Notified all stakeholders of the service interruption
                        - Tested replacement systems in non-production environments

                        Consider disabling keys first to test impact before permanent deletion.
                    example: api_VNcuGfVjUkrVcWJmda0A
            additionalProperties: false
        V2ApisDeleteApiResponseBody:
            type: object
            required:
                - meta
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
            additionalProperties: false
        NotFoundErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when the requested resource cannot be found. This occurs when:
                - The specified resource ID doesn't exist in your workspace
                - The resource has been deleted or moved
                - The resource exists but is not accessible with current permissions

                To resolve this error, verify the resource ID is correct and that you have access to it.
        PreconditionFailedErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when one or more conditions specified in the request headers are not met. This typically occurs when:
                - Using conditional requests with If-Match or If-None-Match headers
                - The resource version doesn't match the expected value
                - Optimistic concurrency control detects a conflict

                To resolve this error, fetch the latest version of the resource and retry with updated conditions.
        V2ApisGetApiRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which API to retrieve by its unique identifier.
                        Must be a valid API ID that begins with 'api_' and exists within your workspace.

                        Use this endpoint to:
                        - Verify an API exists and is accessible
                        - Retrieve the API's current name and configuration
                        - Validate API IDs before performing key operations
                        - Check API status during debugging or troubleshooting

                        Returns complete API information including name, ID, and metadata.
                    example: api_1234567890abcdef
            additionalProperties: false
        V2ApisGetApiResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2ApisGetApiResponseData"
            additionalProperties: false
        V2ApisListKeysRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 1
                    description: The ID of the API whose keys you want to list (begins with 'api_'). This endpoint returns all keys associated with this specific API, subject to pagination and any additional filters provided.
                    example: api_1234
                limit:
                    type: integer
                    description: The maximum number of keys to return in a single request. Use this to control response size and loading performance. Higher values return more keys but may increase response time. Lower values may require more pagination requests but provide faster initial loading.
                    default: 100
                    minimum: 1
                    maximum: 100
                cursor:
                    type: string
                    description: Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains hasMore=true. Each response containing additional results will include a new cursor value in the pagination object.
                    example: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMjNld3MiLCJsYXN0Q3JlYXRlZEF0IjoxNjcyNTI0MjM0MDAwfQ==
                externalId:
                    type: string
                    minLength: 3
                    description: Optional filter to return only keys associated with a specific external ID. This is useful when you need to find all keys belonging to a particular user, organization, or entity in your system. The value must exactly match the externalId set during key creation.
                    example: user_5bf93ab218e
                decrypt:
                    type: boolean
                    description: |-
                        When true, attempts to include the plaintext key value in the response. SECURITY WARNING:
                        - This requires special permissions on the calling root key
                        - Only works for keys created with 'recoverable: true'
                        - Exposes sensitive key material in the response
                        - Should only be used in secure administrative contexts
                        - Never enable this in user-facing applications
                    default: false
                revalidateKeysCache:
                    type: boolean
                    default: false
                    description: |-
                        EXPERIMENTAL: Skip the cache and fetch the keys directly from the database. This ensures you see the most recent state, including keys created moments ago. Use this when:
                        - You've just created a key and need to display it immediately
                        - You need absolute certainty about the current key state
                        - You're debugging cache consistency issues

                        This parameter comes with a performance cost and should be used sparingly.
            additionalProperties: false
        V2ApisListKeysResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2ApisListKeysResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
            additionalProperties: false
        V2IdentitiesCreateIdentityRequestBody:
            type: object
            required:
                - externalId
            properties:
                externalId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.-]+$"
                    description: |
                        Creates an identity using your system's unique identifier for a user, organization, or entity.
                        Must be stable and unique across your workspace - duplicate externalIds return CONFLICT errors.
                        This identifier links Unkey identities to your authentication system, database records, or tenant structure.

                        Avoid changing externalIds after creation as this breaks the link between your systems.
                        Use consistent identifier patterns across your application for easier management and debugging.
                        Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                        Essential for implementing proper multi-tenant isolation and user-specific rate limiting.
                    example: user_123
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: |
                        Stores arbitrary JSON metadata returned during key verification for contextual information.
                        Eliminates additional database lookups during verification, improving performance for stateless services.
                        Avoid storing sensitive data here as it's returned in verification responses.

                        Large metadata objects increase verification latency and should stay under 10KB total size.
                        Use this for subscription details, feature flags, user preferences, and organization information.
                        Metadata is returned as-is whenever keys associated with this identity are verified.
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        "$ref": "#/components/schemas/RatelimitRequest"
                    description: |
                        Defines shared rate limits that apply to all keys belonging to this identity.
                        Prevents abuse by users with multiple keys by enforcing consistent limits across their entire key portfolio.
                        Essential for implementing fair usage policies and tiered access levels in multi-tenant applications.

                        Rate limit counters are shared across all keys with this identity, regardless of how many keys the user creates.
                        During verification, specify which named limits to check for enforcement.
                        Identity rate limits supplement any key-specific rate limits that may also be configured.
                        - Each named limit can have different thresholds and windows

                        When verifying keys, you can specify which limits you want to use and all keys attached to this identity will share the limits, regardless of which specific key is used.
        V2IdentitiesCreateIdentityResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2IdentitiesCreateIdentityResponseData"
        ConflictErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when the request conflicts with the current state of the resource. This occurs when:
                - Attempting to create a resource that already exists
                - Modifying a resource that has been changed by another operation
                - Violating unique constraints or business rules

                To resolve this error, check the current state of the resource and adjust your request accordingly.
        V2IdentitiesDeleteIdentityRequestBody:
            additionalProperties: false
            type: object
            properties:
                externalId:
                    type: string
                    minLength: 3
                    description: |
                        The id of this identity in your system.
                        This should match the externalId value you used when creating the identity.
                        This identifier typically comes from your authentication system and could be a userId, organizationId, or any other stable unique identifier in your application.
                    example: user_123
            required:
                - externalId
        V2IdentitiesDeleteIdentityResponseBody:
            type: object
            description: Empty response object. A successful response indicates the identity was deleted successfully.
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
            required:
                - meta
        V2IdentitiesGetIdentityRequestBody:
            type: object
            properties:
                externalId:
                    type: string
                    minLength: 1
                    description: The external ID of the identity to retrieve. This is the ID from your own system that was used during identity creation.
                    example: user_abc123
            additionalProperties: false
            required:
                - externalId
        V2IdentitiesGetIdentityResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2IdentitiesGetIdentityResponseData"
        V2IdentitiesListIdentitiesRequestBody:
            type: object
            properties:
                limit:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 100
                    description: The maximum number of identities to return in a single request. Use this to control response size and loading performance.
                    example: 50
                cursor:
                    type: string
                    description: Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains a cursor value.
                    example: cursor_eyJrZXkiOiJrZXlfMTIzNCJ9
            additionalProperties: false
        V2IdentitiesListIdentitiesResponseBody:
            type: object
            required:
                - meta
                - data
                - pagination
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2IdentitiesListIdentitiesResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
            additionalProperties: false
        V2IdentitiesUpdateIdentityRequestBody:
            type: object
            properties:
                externalId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.-]+$"
                    description: |
                        Specifies which identity to update using your system's identifier from identity creation.
                        Use this when you track identities by your own user IDs, organization IDs, or tenant identifiers.
                        Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                    example: user_abc123
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: |
                        Replaces all existing metadata with this new metadata object.
                        Omitting this field preserves existing metadata, while providing an empty object clears all metadata.
                        Avoid storing sensitive data here as it's returned in verification responses.
                        Large metadata objects increase verification latency and should stay under 10KB total size.
                    example:
                        name: Alice Smith
                        email: alice@example.com
                        plan: premium
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        $ref: "#/components/schemas/RatelimitRequest"
                    description: |
                        Replaces all existing identity rate limits with this complete list of rate limits.
                        Omitting this field preserves existing rate limits, while providing an empty array removes all rate limits.
                        These limits are shared across all keys belonging to this identity, preventing abuse through multiple keys.
                        Rate limit changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example:
                        - name: requests
                          limit: 1000
                          duration: 3600000
                          autoApply: true
            additionalProperties: false
            required:
                - externalId
        V2IdentitiesUpdateIdentityResponseBody:
            type: object
            required:
                - data
                - meta
            properties:
                data:
                    "$ref": "#/components/schemas/Identity"
                meta:
                    "$ref": "#/components/schemas/Meta"
        V2KeysAddPermissionsRequestBody:
            type: object
            required:
                - keyId
                - permissions
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key receives the additional permissions using the database identifier returned from `keys.createKey`.
                        Do not confuse this with the actual API key string that users include in requests.
                        Added permissions supplement existing permissions and roles without replacing them.
                        Permission changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                permissions:
                    type: array
                    minItems: 1
                    maxItems: 1000
                    description: |
                        Grants additional permissions to the key through direct assignment or automatic creation.
                        Duplicate permissions are ignored automatically, making this operation idempotent.
                        Use either ID for existing permissions or slug for new permissions with optional auto-creation.

                        Permission changes take effect immediately but cache propagation across regions may take up to 30 seconds.
                        Adding permissions never removes existing permissions or role-based permissions.
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                minLength: 3
                                maxLength: 255
                                pattern: "^[a-zA-Z0-9_]+$"
                                description: |
                                    References an existing permission by its database identifier.
                                    Use when you know the exact permission ID and want to ensure you're referencing a specific permission.
                                    Takes precedence over slug when both are provided in the same object.
                                    The referenced permission must already exist in your workspace.
                                example: perm_1n9McEIBSqy44Qy7hzWyM5
                            slug:
                                type: string
                                minLength: 1
                                maxLength: 100
                                pattern: "^[a-zA-Z0-9_.]+$"
                                description: |
                                    Identifies the permission by its human-readable name using hierarchical naming patterns.
                                    Use `resource.action` format for logical organization and verification flexibility.
                                    Slugs must be unique within your `workspace` and support wildcard matching during verification.
                                    Combined with `create=true`, allows automatic permission creation for streamlined workflows.
                                example: documents.write
                            create:
                                type: boolean
                                default: false
                                description: |
                                    Enables automatic permission creation when the specified slug does not exist.
                                    Only works with slug-based references, not ID-based references.
                                    Requires the `rbac.*.create_permission` permission on your root key.

                                    Created permissions are permanent and visible workspace-wide to all API keys.
                                    Use carefully to avoid permission proliferation from typos or uncontrolled creation.
                                    Consider centralizing permission creation in controlled processes for better governance.
                                    Auto-created permissions use the slug as both the name and identifier.
                        additionalProperties: false
            additionalProperties: false
        V2KeysAddPermissionsResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysAddPermissionsResponseData"
        V2KeysAddRolesRequestBody:
            type: object
            required:
                - keyId
                - roles
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key receives the additional roles using the database identifier returned from `createKey`.
                        Do not confuse this with the actual API key string that users include in requests.
                        Added roles supplement existing roles and permissions without replacing them.
                        Role assignments take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                roles:
                    type: array
                    minItems: 1
                    maxItems: 100
                    description: |
                        Assigns additional roles to the key through direct assignment to existing workspace roles.
                        Operations are idempotent - adding existing roles has no effect and causes no errors.
                        Use either ID for existing roles or name for human-readable references.

                        All roles must already exist in the workspace - roles cannot be created automatically.
                        Invalid roles cause the entire operation to fail atomically, ensuring consistent state.
                        Role assignments take effect immediately but cache propagation across regions may take up to 30 seconds.
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                minLength: 3
                                maxLength: 255
                                pattern: "^[a-zA-Z0-9_]+$"
                                description: |
                                    References an existing role by its database identifier.
                                    Use when you know the exact role ID and want to ensure you're referencing a specific role.
                                    Takes precedence over name when both are provided in the same object.
                                    Essential for automation scripts where role names might change but IDs remain stable.
                                example: role_1n9McEIBSqy44Qy7hzWyM5
                            name:
                                type: string
                                minLength: 1
                                maxLength: 100
                                pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                                description: |
                                    Identifies the role by its human-readable name within the workspace.
                                    Role names must start with a letter and contain only letters, numbers, underscores, or hyphens.
                                    Names must be unique within the workspace and are case-sensitive.
                                    More readable than IDs but vulnerable to integration breaks if roles are renamed.
                                    Use IDs for automation and names for human-configured integrations.
                                example: admin
                        additionalProperties: false
            additionalProperties: false
        V2KeysAddRolesResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysAddRolesResponseData"
        V2KeysCreateKeyRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which API this key belongs to, providing complete isolation between environments.
                        Keys from one API cannot be used to access another API, preventing cross-environment access.
                        Create separate APIs for different environments (development, staging, production) and services.
                    example: api_2cGKbMxRjIzhCxo1IdjH3a
                prefix:
                    type: string
                    minLength: 1
                    maxLength: 16
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Adds a visual identifier to the beginning of the generated key for easier recognition in logs and dashboards.
                        The prefix becomes part of the actual key string (e.g., `prod_xxxxxxxxx`).
                        Avoid using sensitive information in prefixes as they may appear in logs and error messages.
                    example: prod
                name:
                    type: string
                    minLength: 1
                    maxLength: 200
                    description: |
                        Sets a human-readable identifier for internal organization and dashboard display.
                        Never exposed to end users, only visible in management interfaces and API responses.
                        Avoid generic names like "API Key" when managing multiple keys for the same user or service.
                    example: Payment Service Production Key
                byteLength:
                    type: integer
                    minimum: 16
                    maximum: 255
                    default: 16
                    description: |
                        Controls the cryptographic strength of the generated key in bytes.
                        Higher values increase security but result in longer keys that may be harder to handle.
                        The default 16 bytes provides 2^128 possible combinations, sufficient for most applications.
                        Consider 32 bytes for highly sensitive APIs, but avoid values above 64 bytes unless specifically required.
                    example: 24
                externalId:
                    type: string
                    minLength: 1
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.-]+$"
                    description: |
                        Links this key to a user or entity in your system using your own identifier.
                        Returned during verification to identify the key owner without additional database lookups.
                        Essential for user-specific analytics, billing, and multi-tenant key management.
                        Use your primary user ID, organization ID, or tenant ID for best results.
                        Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                    example: user_912a841d
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: |
                        Stores arbitrary JSON metadata returned during key verification for contextual information.
                        Eliminates additional database lookups during verification, improving performance for stateless services.
                        Avoid storing sensitive data here as it's returned in verification responses.
                        Large metadata objects increase verification latency and should stay under 10KB total size.
                    example:
                        plan: enterprise
                        featureFlags:
                            betaAccess: true
                            concurrentConnections: 10
                        customerName: Acme Corp
                        billing:
                            tier: premium
                            renewal: "2024-12-31"
                roles:
                    type: array
                    maxItems: 100
                    items:
                        type: string
                        minLength: 1
                        maxLength: 100
                        pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                    description: |
                        Assigns existing roles to this key for permission management through role-based access control.
                        Roles must already exist in your workspace before assignment.
                        During verification, all permissions from assigned roles are checked against requested permissions.
                        Roles provide a convenient way to group permissions and apply consistent access patterns across multiple keys.
                    example:
                        - api_admin
                        - billing_reader
                permissions:
                    type: array
                    maxItems: 1000
                    items:
                        type: string
                        minLength: 1
                        maxLength: 100
                    pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                    description: |
                        Grants specific permissions directly to this key without requiring role membership.
                        Wildcard permissions like `documents.*` grant access to all sub-permissions including `documents.read` and `documents.write`.
                        Direct permissions supplement any permissions inherited from assigned roles.
                    example:
                        - documents.read
                        - documents.write
                        - settings.view
                expires:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 4102444800000
                    description: |
                        Sets when this key automatically expires as a Unix timestamp in milliseconds.
                        Verification fails with code=EXPIRED immediately after this time passes.
                        Omitting this field creates a permanent key that never expires.

                        Avoid setting timestamps in the past as they immediately invalidate the key.
                        Keys expire based on server time, not client time, which prevents timezone-related issues.
                        Essential for trial periods, temporary access, and security compliance requiring key rotation.
                    example: 1704067200000
                credits:
                    "$ref": "#/components/schemas/KeyCreditsData"
                    description: |
                        Controls usage-based limits through credit consumption with optional automatic refills.
                        Unlike rate limits which control frequency, credits control total usage with global consistency.
                        Essential for implementing usage-based pricing, subscription tiers, and hard usage quotas.
                        Omitting this field creates unlimited usage, while setting null is not allowed during creation.
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        "$ref": "#/components/schemas/RatelimitRequest"
                    description: |
                        Defines time-based rate limits that protect against abuse by controlling request frequency.
                        Unlike credits which track total usage, rate limits reset automatically after each window expires.
                        Multiple rate limits can control different operation types with separate thresholds and windows.
                        Essential for preventing API abuse while maintaining good performance for legitimate usage.
                    example:
                        - name: requests
                          limit: 100
                          duration: 60000
                          autoApply: true
                        - name: heavy_operations
                          limit: 10
                          duration: 3600000
                          autoApply: false
                enabled:
                    type: boolean
                    default: true
                    description: |
                        Controls whether the key is active immediately upon creation.
                        When set to `false`, the key exists but all verification attempts fail with `code=DISABLED`.
                        Useful for pre-creating keys that will be activated later or for keys requiring manual approval.
                        Most keys should be created with `enabled=true` for immediate use.
                    example: true
                recoverable:
                    type: boolean
                    default: false
                    description: |
                        Controls whether the plaintext key is stored in an encrypted vault for later retrieval.
                        When true, allows recovering the actual key value using keys.getKey with decrypt=true.
                        When false, the key value cannot be retrieved after creation for maximum security.
                        Only enable for development keys or when key recovery is absolutely necessary.
                    example: false
            additionalProperties: false
        V2KeysCreateKeyResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysCreateKeyResponseData"
        V2KeysDeleteKeyRequestBody:
            type: object
            required:
                - keyId
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key to delete using the database identifier returned from `createKey`.
                        Do not confuse this with the actual API key string that users include in requests.
                        Deletion immediately invalidates the key, causing all future verification attempts to fail with `code=NOT_FOUND`.
                        Key deletion triggers cache invalidation across all regions but may take up to 30 seconds to fully propagate.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                permanent:
                    type: boolean
                    default: false
                    description: |
                        Controls deletion behavior between recoverable soft-deletion and irreversible permanent erasure.
                        Soft deletion (default) preserves key data for potential recovery through direct database operations.
                        Permanent deletion completely removes all traces including hash values and metadata with no recovery option.

                        Use permanent deletion only for regulatory compliance (GDPR), resolving hash collisions, or when reusing identical key strings.
                        Permanent deletion cannot be undone and may affect analytics data that references the deleted key.
                        Most applications should use soft deletion to maintain audit trails and prevent accidental data loss.
                    example: false
            additionalProperties: false
        V2KeysDeleteKeyResponseBody:
            type: object
            required:
                - meta
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/KeysDeleteKeyResponseData"
        V2KeysGetKeyRequestBody:
            type: object
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key to retrieve using the database identifier returned from `keys.createKey`.
                        Do not confuse this with the actual API key string that users include in requests.
                        Key data includes metadata, permissions, usage statistics, and configuration but never the plaintext key value unless `decrypt=true`.
                        Find this ID in creation responses, key listings, dashboard, or verification responses.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                decrypt:
                    type: boolean
                    default: false
                    description: |
                        Controls whether to include the plaintext key value in the response for recovery purposes.
                        Only works for keys created with `recoverable=true` and requires the `decrypt_key` permission.
                        Returned keys must be handled securely, never logged, cached, or stored insecurely.

                        Use only for legitimate recovery scenarios like user password resets or emergency access.
                        Most applications should keep this false to maintain security best practices and avoid accidental key exposure.
                        Decryption requests are audited and may trigger security alerts in enterprise environments.
                key:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The complete API key string provided by you, including any prefix.
                        Never log, cache, or store API keys in your system as they provide full access to user resources.
                        Include the full key exactly as provided - even minor modifications will cause a not found error.
                    example: prefix_f4cc2d765275c206b7d76ff0e92e583067c4e33603fb4055d7ba3031cd7ce36a
            additionalProperties: false
            oneOf:
                - required:
                    - keyId
                - required:
                    - key
        V2KeysGetKeyResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/KeyResponseData"
        V2KeysRemovePermissionsRequestBody:
            type: object
            required:
                - keyId
                - permissions
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key to remove permissions from using the database identifier returned from `keys.createKey`.
                        Do not confuse this with the actual API key string that users include in requests.
                        Removing permissions only affects direct assignments, not permissions inherited from roles.
                        Permission changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                permissions:
                    type: array
                    minItems: 1
                    maxItems: 1000
                    description: |
                        Removes direct permissions from the key without affecting role-based permissions.
                        Operations are idempotent - removing non-existent permissions has no effect and causes no errors.
                        Use either ID for existing permissions or name for exact string matching.

                        After removal, verification checks for these permissions will fail unless granted through roles.
                        Permission changes take effect immediately but cache propagation across regions may take up to 30 seconds.
                        Removing all direct permissions does not disable the key, only removes its direct permission grants.
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                minLength: 3
                                maxLength: 255
                                pattern: "^[a-zA-Z0-9_]+$"
                                description: |
                                    References the permission to remove by its database identifier.
                                    Use when you know the exact permission ID and want to ensure you're removing a specific permission.
                                    Takes precedence over name when both are provided in the same object.
                                    Essential for automation scripts where precision prevents accidental permission removal.
                                example: perm_1n9McEIBSqy44Qy7hzWyM5
                            slug:
                                type: string
                                minLength: 1
                                maxLength: 100
                                pattern: "^[a-zA-Z0-9_.]+$"
                                description: |
                                    Identifies the permission by slug for removal from the key's direct assignment list.
                                example: documents.write
                        additionalProperties: false
            additionalProperties: false
        V2KeysRemovePermissionsResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysRemovePermissionsResponseData"
        V2KeysRemoveRolesRequestBody:
            type: object
            required:
                - keyId
                - roles
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key loses the roles using the database identifier returned from createKey.
                        Do not confuse this with the actual API key string that users include in requests.
                        Removing roles only affects direct assignments, not permissions inherited from other sources.
                        Role changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                roles:
                    type: array
                    minItems: 1
                    maxItems: 100
                    description: |
                        Removes direct role assignments from the key without affecting other role sources or permissions.
                        Operations are idempotent - removing non-assigned roles has no effect and causes no errors.
                        Use either ID for existing roles or name for exact string matching.

                        After removal, the key loses access to permissions that were only granted through these roles.
                        Role changes take effect immediately but cache propagation across regions may take up to 30 seconds.
                        Invalid role references cause the entire operation to fail atomically, ensuring consistent state.
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                minLength: 3
                                maxLength: 255
                                pattern: "^[a-zA-Z0-9_]+$"
                                description: |
                                    References the role to remove by its database identifier.
                                    Use when you know the exact role ID and want to ensure you're removing a specific role.
                                    Takes precedence over name when both are provided in the same object.
                                    Essential for automation scripts where role names might change but IDs remain stable.
                                example: role_1n9McEIBSqy44Qy7hzWyM5
                            name:
                                type: string
                                minLength: 1
                                maxLength: 100
                                pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                                description: |
                                    Identifies the role to remove by its exact name with case-sensitive matching.
                                    Must match the complete role name as currently defined in the workspace, starting with a letter and using only letters, numbers, underscores, or hyphens.
                                    More readable than IDs but vulnerable to integration breaks if roles are renamed.
                                    Use IDs for automation and names for human-configured integrations.
                                example: admin
                        additionalProperties: false
            additionalProperties: false
        V2KeysRemoveRolesResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysRemoveRolesResponseData"
        V2KeysSetPermissionsRequestBody:
            type: object
            required:
                - keyId
                - permissions
            properties:
                keyId:
                    type: string
                    description: The unique identifier of the key to set permissions on (begins with 'key_'). This ID comes from the createKey response and identifies which key will have its permissions replaced. This is the database ID, not the actual API key string that users authenticate with.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                    minLength: 3
                permissions:
                    type: array
                    description: |-
                        The permissions to set for this key. This is a complete replacement operation - it overwrites all existing direct permissions with this new set.

                        Key behaviors:
                        - Providing an empty array removes all direct permissions from the key
                        - This only affects direct permissions - permissions granted through roles are not affected
                        - All existing direct permissions not included in this list will be removed
                        - The complete list approach allows synchronizing permissions with external systems
                        - Permission changes take effect immediately for new verifications

                        Unlike addPermissions (which only adds) or removePermissions (which only removes), this endpoint performs a wholesale replacement of the permission set.
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                description: The ID of an existing permission (begins with `perm_`). Provide either ID or slug for each permission, not both. Using ID is more precise and guarantees you're referencing the exact permission intended, regardless of slug changes or duplicates. IDs are particularly useful in automation scripts and when migrating permissions between environments.
                                example: perm_1n9McEIBSqy44Qy7hzWyM5
                                minLength: 3
                            slug:
                                type: string
                                description: The slug of the permission. Provide either ID or slug for each permission, not both. Slugs must match exactly as defined in your permission system - including case sensitivity and the complete hierarchical path. Slugs are generally more human-readable but can be ambiguous if not carefully managed across your workspace.
                                example: documents.write
                                minLength: 1
                            create:
                                type: boolean
                                description: |-
                                    When true, if a permission with this slug doesn't exist, it will be automatically created on-the-fly. Only works when specifying slug, not ID.

                                    SECURITY CONSIDERATIONS:
                                    - Requires the `rbac.*.create_permission` permission on your root key
                                    - Created permissions are permanent and visible throughout your workspace
                                    - Use carefully to avoid permission proliferation and inconsistency
                                    - Consider using a controlled process for permission creation instead
                                    - Typos with `create=true` will create unintended permissions that persist in your system
                                default: false
                        additionalProperties: false
            additionalProperties: false
        V2KeysSetPermissionsResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysSetPermissionsResponseData"
        V2KeysSetRolesRequestBody:
            type: object
            required:
                - keyId
                - roles
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key gets the complete role replacement using the database identifier returned from createKey.
                        Do not confuse this with the actual API key string that users include in requests.
                        This is a wholesale replacement operation that removes all existing roles not included in the request.
                        Role changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                roles:
                    type: array
                    maxItems: 100
                    description: |
                        Replaces all existing role assignments with this complete list of roles.
                        This is a wholesale replacement operation, not an incremental update like add/remove operations.
                        Use either ID for existing roles or name for human-readable references.

                        Providing an empty array removes all direct role assignments from the key.
                        All roles must already exist in the workspace - roles cannot be created automatically.
                        Invalid role references cause the entire operation to fail atomically, ensuring consistent state.
                        Role changes take effect immediately but cache propagation across regions may take up to 30 seconds.
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                minLength: 3
                                maxLength: 255
                                pattern: "^[a-zA-Z0-9_]+$"
                                description: |
                                    References an existing role by its database identifier.
                                    Use when you know the exact role ID and want to ensure you're referencing a specific role.
                                    Takes precedence over name when both are provided in the same object.
                                    Essential for automation scripts where role names might change but IDs remain stable.
                                example: role_1n9McEIBSqy44Qy7hzWyM5
                            name:
                                type: string
                                minLength: 1
                                maxLength: 100
                                pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                                description: |
                                    Identifies the role by its human-readable name within the workspace.
                                    Role names must start with a letter and contain only letters, numbers, underscores, or hyphens.
                                    Names must be unique within the workspace and are case-sensitive.
                                    More readable than IDs but vulnerable to integration breaks if roles are renamed.
                                    Use IDs for automation and names for human-configured integrations.
                                example: admin
                        additionalProperties: false
            additionalProperties: false
        V2KeysSetRolesResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysSetRolesResponseData"
        V2KeysUpdateCreditsRequestBody:
            type: object
            required:
                - keyId
                - operation
            properties:
                keyId:
                    type: string
                    description: The ID of the key to update (begins with `key_`). This is the database reference ID for the key, not the actual API key string that users authenticate with. This ID uniquely identifies which key's credits will be updated.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                    minLength: 3
                value:
                    type: integer
                    format: int64
                    nullable: true
                    minimum: 0
                    maximum: 9223372036854776000
                    description: |
                        The new value for the remaining credits. This is an absolute value replacement, not an increment or decrement operation.

                        Key behaviors:
                        - This completely replaces the current remaining credits value when operation is set to 'set'
                        - To add credits, either replace the current value with the new value or increment the current value by a new value
                        - To make a key unlimited, set value = null
                        - To make a key with unlimited usage have a specific limit, set remaining to a positive number
                        - If a decrement would result in a negative value, the remaining credits are set to zero
                        - Credits are decremented each time the key is successfully verified (by the cost value, default 1)
                        - When credits reach zero, verification fails with code=USAGE_EXCEEDED

                        This field is useful for implementing usage-based pricing, subscription tiers, trial periods, or consumption quotas.
                    example: 1000
                operation:
                    type: string
                    enum:
                        - set
                        - increment
                        - decrement
                    description: |
                        The operation to perform on the remaining credits. This can be one of:
                        - set: Replace the current remaining credits value with the specified value.
                        - increment: Add the specified value to the current remaining credits value.
                        - decrement: Subtract the specified value from the current remaining credits value.
            additionalProperties: false
        V2KeysUpdateCreditsResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/KeyCreditsData"
        V2KeysUpdateKeyRequestBody:
            type: object
            required:
                - keyId
            properties:
                keyId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which key to update using the database identifier returned from `createKey`.
                        Do not confuse this with the actual API key string that users include in requests.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                name:
                    type: string
                    minLength: 1
                    maxLength: 255
                    nullable: true
                    description: |
                        Sets a human-readable name for internal organization and identification.
                        Omitting this field leaves the current name unchanged, while setting null removes it entirely.
                        Avoid generic names like "API Key" when managing multiple keys per user or service.
                    example: Payment Service Production Key
                externalId:
                    type: string
                    nullable: true
                    minLength: 1
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.-]+$"
                    description: |
                        Links this key to a user or entity in your system for ownership tracking during verification.
                        Omitting this field preserves the current association, while setting null disconnects the key from any identity.
                        Essential for user-specific analytics, billing, and key management across multiple users.
                        Supports letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                    example: user_912a841d
                meta:
                    type: object
                    nullable: true
                    additionalProperties: true
                    maxProperties: 100
                    description: |
                        Stores arbitrary JSON metadata returned during key verification.
                        Omitting this field preserves existing metadata, while setting null removes all metadata entirely.
                        Avoid storing sensitive data here as it's returned in verification responses.
                        Large metadata objects increase verification latency and should stay under 10KB total size.
                    example:
                        plan: enterprise
                        limits:
                            storage: 500GB
                            compute: 1000 minutes/month
                        features: [analytics, exports, webhooks]
                        hasAcceptedTerms: true
                        billing:
                            cycle: monthly
                            next_billing: "2024-01-15"
                        preferences:
                            timezone: "UTC"
                            notifications: true
                        lastBillingDate: "2023-10-15"
                expires:
                    type: integer
                    nullable: true
                    format: int64
                    minimum: 0
                    maximum: 4102444800000
                    description: |
                        Sets when this key automatically expires as a Unix timestamp in milliseconds.
                        Verification fails with code=EXPIRED immediately after this time passes.
                        Omitting this field preserves the current expiration, while setting null makes the key permanent.

                        Avoid setting timestamps in the past as they immediately invalidate the key.
                        Keys expire based on server time, not client time, which prevents timezone-related issues.
                        Active sessions continue until their next verification attempt after expiry.
                    example: 1704067200000
                credits:
                    "$ref": "#/components/schemas/KeyCreditsData"
                    description: |
                        Controls usage-based limits for this key through credit consumption.
                        Omitting this field preserves current credit settings, while setting null enables unlimited usage.
                        Cannot configure refill settings when credits is null, and refillDay requires monthly interval.
                        Essential for implementing usage-based pricing and subscription quotas.
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        "$ref": "#/components/schemas/RatelimitRequest"
                    description: |
                        Defines time-based rate limits that protect against abuse by controlling request frequency.
                        Omitting this field preserves existing rate limits, while setting null removes all rate limits.
                        Unlike credits which track total usage, rate limits reset automatically after each window expires.
                        Multiple rate limits can control different operation types with separate thresholds and windows.
                enabled:
                    type: boolean
                    description: |
                        Controls whether the key is currently active for verification requests.
                        When set to `false`, all verification attempts fail with `code=DISABLED` regardless of other settings.
                        Omitting this field preserves the current enabled status.
                        Useful for temporarily suspending access during billing issues, security incidents, or maintenance windows without losing key configuration.
                    example: true
                roles:
                    type: array
                    maxItems: 100
                    items:
                        type: string
                        minLength: 1
                        maxLength: 100
                        pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                        description: |
                            Assigns existing roles to this key for permission management through role-based access control.
                            Roles must already exist in your workspace before assignment.
                            During verification, all permissions from assigned roles are checked against requested permissions.
                            Roles provide a convenient way to group permissions and apply consistent access patterns across multiple keys.
                    example:
                        - api_admin
                        - billing_reader
                permissions:
                    type: array
                    maxItems: 1000
                    items:
                        type: string
                        minLength: 1
                        maxLength: 100
                        pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                        description: |
                            Grants specific permissions directly to this key without requiring role membership.
                            Wildcard permissions like `documents.*` grant access to all sub-permissions including `documents.read` and `documents.write`.
                            Direct permissions supplement any permissions inherited from assigned roles.
                    example:
                        - documents.read
                        - documents.write
                        - settings.view
            additionalProperties: false
        V2KeysUpdateKeyResponseBody:
            type: object
            required:
                - meta
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2KeysUpdateKeyResponseData"
        V2KeysVerifyKeyRequestBody:
            type: object
            additionalProperties: false
            required:
                - apiId
                - key
            properties:
                apiId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which API the key belongs to for complete environment isolation.
                        Keys from different APIs cannot access each other, preventing cross-environment leaks.
                        Essential for ensuring development keys cannot access production data and vice versa.
                        Store this API ID in your service configuration rather than hardcoding it.
                    example: api_1234
                key:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The complete API key string provided by your user, including any prefix.
                        Verification uses secure hashing algorithms without storing plaintext values.
                        Never log, cache, or store API keys in your system as they provide full access to user resources.
                        Include the full key exactly as provided - even minor modifications will cause verification failure.
                    example: prefix_f4cc2d765275c206b7d76ff0e92e583067c4e33603fb4055d7ba3031cd7ce36a
                tags:
                    type: array
                    items:
                        type: string
                        minLength: 1
                        maxLength: 128
                        pattern: "^[a-zA-Z0-9_=/.:-]+$"
                    maxItems: 20
                    description: |
                        Attaches metadata tags for analytics and monitoring without affecting verification outcomes.
                        Enables segmentation of API usage in dashboards by endpoint, client version, region, or custom dimensions.
                        Use 'key=value' format for compatibility with most analytics tools and clear categorization.
                        Avoid including sensitive data in tags as they may appear in logs and analytics reports.
                    example:
                        - endpoint=/users/profile
                        - method=GET
                        - region=us-east-1
                        - clientVersion=2.3.0
                        - feature=premium
                permissions:
                    type: string
                    minLength: 1
                    maxLength: 1000
                    pattern: "^[a-zA-Z0-9_.()\\s-]+$"
                    description: |
                        Checks if the key has the specified permission(s) using a query syntax.
                        Supports single permissions, logical operators (AND, OR), and parentheses for grouping.
                        Examples:
                        - Single permission: "documents.read"
                        - Multiple permissions: "documents.read AND documents.write"
                        - Complex queries: "(documents.read OR documents.write) AND users.view"
                        Verification fails if the key lacks the required permissions through direct assignment or role inheritance.
                    example: "documents.read AND users.view"
                credits:
                    "$ref": "#/components/schemas/KeysVerifyKeyCredits"
                ratelimits:
                    type: array
                    items:
                        "$ref": "#/components/schemas/KeysVerifyKeyRatelimit"
                    description: |
                        Enforces time-based rate limiting during verification to prevent abuse and ensure fair usage.
                        Omitting this field skips rate limit checks entirely, relying only on configured key rate limits.
                        Multiple rate limits can be checked simultaneously, each with different costs and temporary overrides.
                        Rate limit checks are optimized for performance but may allow brief bursts during high concurrency.
        V2KeysVerifyKeyResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/KeysVerifyKeyResponseData"
            additionalProperties: false
        V2LivenessResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2LivenessResponseData"
        V2PermissionsCreatePermissionRequestBody:
            type: object
            required:
                - name
                - slug
            properties:
                name:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        Creates a permission with this human-readable name that describes its purpose.
                        Names must be unique within your workspace to prevent conflicts during assignment.
                        Use clear, semantic names that developers can easily understand when building authorization logic.
                        Consider using hierarchical naming conventions like 'resource.action' for better organization.

                        Examples: 'users.read', 'billing.write', 'analytics.view', 'admin.manage'
                    example: "users.read"
                slug:
                    type: string
                    minLength: 1
                    maxLength: 128
                    pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                    description: |
                        Creates a URL-safe identifier for this permission that can be used in APIs and integrations.
                        Must start with a letter and contain only letters, numbers, periods, underscores, and hyphens.
                        Slugs are often used in REST endpoints, configuration files, and external integrations.
                        Should closely match the name but in a format suitable for technical usage.
                        Must be unique within your workspace to ensure reliable permission lookups.

                        Keep slugs concise but descriptive for better developer experience.
                    example: "users-read"
                description:
                    type: string
                    maxLength: 128
                    description: |
                        Provides detailed documentation of what this permission grants access to.
                        Include information about affected resources, allowed actions, and any important limitations.
                        This internal documentation helps team members understand permission scope and security implications.
                        Not visible to end users - designed for development teams and security audits.

                        Consider documenting:
                        - What resources can be accessed
                        - What operations are permitted
                        - Any conditions or limitations
                        - Related permissions that might be needed
                    example: "Grants read-only access to user profile information, account settings, and subscription status."
            additionalProperties: false
        V2PermissionsCreatePermissionResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2PermissionsCreatePermissionResponseData"
        V2PermissionsCreateRoleRequestBody:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
                    minLength: 1
                    maxLength: 512
                    pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                    description: |
                        Creates a role with this unique name that groups related permissions together.
                        Names must be unique within your workspace to prevent conflicts during assignment.
                        Use descriptive names that clearly indicate the role's purpose and scope of access.
                        Consider hierarchical naming conventions like 'department.function' for better organization.

                        Role names should be:
                        - Descriptive enough to understand their purpose
                        - Consistent with your organization's naming conventions
                        - Unique to avoid confusion during role assignment
                        - Focused on a specific function or responsibility

                        Examples: 'admin.billing', 'support.readonly', 'developer.api', 'manager.analytics'
                    example: "support.readonly"
                description:
                    type: string
                    maxLength: 2048
                    description: |
                        Provides comprehensive documentation of what this role encompasses and what access it grants.
                        Include information about the intended use case, what permissions should be assigned, and any important considerations.
                        This internal documentation helps team members understand role boundaries and security implications.
                        Not visible to end users - designed for administration teams and access control audits.

                        Consider documenting:
                        - The role's intended purpose and scope
                        - What types of users should receive this role
                        - What permissions are typically associated with it
                        - Any security considerations or limitations
                        - Related roles that might be used together
                    example: "Provides read-only access for customer support representatives. Includes permissions to view user accounts, support tickets, and basic analytics. Does not include access to billing, admin functions, or data modification capabilities."
            additionalProperties: false
        V2PermissionsCreateRoleResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2PermissionsCreateRoleResponseData"
        V2PermissionsDeletePermissionRequestBody:
            type: object
            required:
                - permissionId
            properties:
                permissionId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which permission to permanently delete from your workspace.

                        WARNING: Deleting a permission has immediate and irreversible consequences:
                        - All API keys with this permission will lose that access immediately
                        - All roles containing this permission will have it removed
                        - Any verification requests checking for this permission will fail
                        - This action cannot be undone

                        Before deletion, ensure you:
                        - Have updated any keys or roles that depend on this permission
                        - Have migrated to alternative permissions if needed
                        - Have notified affected users about the access changes
                        - Have the correct permission ID (double-check against your permission list)
                    example: perm_1234567890abcdef
            additionalProperties: false
        V2PermissionsDeletePermissionResponseBody:
            type: object
            required:
                - meta
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
            additionalProperties: false
        V2PermissionsDeleteRoleRequestBody:
            type: object
            required:
                - roleId
            properties:
                roleId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Unique identifier of the role to permanently delete from your workspace.
                        Must be a valid role ID that begins with 'role_' and exists within your workspace.

                        WARNING: Deletion is immediate and irreversible with significant consequences:
                        - All API keys assigned this role will lose the associated permissions
                        - Access to resources protected by this role's permissions will be denied
                        - Any authorization logic depending on this role will start failing
                        - Historical analytics and audit logs referencing this role remain intact

                        Before deletion, ensure:
                        - You have the correct role ID (verify the role name and permissions)
                        - You've updated any dependent authorization logic or code
                        - You've migrated any keys to use alternative roles or direct permissions
                        - You've notified relevant team members of the access changes
                    example: role_dns_manager
            additionalProperties: false
        V2PermissionsDeleteRoleResponseBody:
            type: object
            required:
                - meta
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
            additionalProperties: false
        V2PermissionsGetPermissionRequestBody:
            type: object
            required:
                - permissionId
            properties:
                permissionId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which permission to retrieve by its unique identifier.
                        Must be a valid permission ID that begins with 'perm_' and exists within your workspace.
                        Use this endpoint to verify permission details, check its current configuration, or retrieve metadata.
                        Returns detailed information including name, description, and workspace association.
                    example: perm_1234567890abcdef
            additionalProperties: false
        V2PermissionsGetPermissionResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2PermissionsGetPermissionResponseData"
        V2PermissionsGetRoleRequestBody:
            type: object
            required:
                - roleId
            properties:
                roleId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which role to retrieve by its unique identifier.
                        Must be a valid role ID that begins with 'role_' and exists within your workspace.
                        Use this endpoint to verify role details, check its current permissions, or retrieve metadata.
                        Returns complete role information including all assigned permissions for comprehensive access review.
                    example: role_1234567890abcdef
            additionalProperties: false
        V2PermissionsGetRoleResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2PermissionsGetRoleResponseData"
            additionalProperties: false
        V2PermissionsListPermissionsRequestBody:
            type: object
            properties:
                cursor:
                    type: string
                    maxLength: 1024
                    description: |
                        Pagination cursor from a previous response to fetch the next page of permissions.
                        Include this value when you need to retrieve additional permissions beyond the initial response.
                        Each response containing more results than the requested limit includes a cursor for subsequent pages.

                        Leave empty or omit this field to start from the beginning of the permission list.
                        Cursors are temporary and may expire - always handle cases where a cursor becomes invalid.
                    example: "eyJrZXkiOiJwZXJtXzEyMzQifQ=="
                limit:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 100
                    description: Maximum number of permissions to return in a single response.
                    example: 50
            additionalProperties: false
        V2PermissionsListPermissionsResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2PermissionsListPermissionsResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
            additionalProperties: false
        V2PermissionsListRolesRequestBody:
            type: object
            properties:
                limit:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 100
                    description: |
                        Maximum number of roles to return in a single response.
                        Use smaller values for faster response times and better UI performance.
                        Use larger values when you need to process many roles efficiently.
                        Results exceeding this limit will be paginated with a cursor for continuation.
                    example: 50
                cursor:
                    type: string
                    maxLength: 1024
                    description: |
                        Pagination cursor from a previous response to fetch the next page of roles.
                        Include this when you need to retrieve additional roles beyond the first page.
                        Each response containing more results will include a cursor value that can be used here.
                        Leave empty or omit this field to start from the beginning of the role list.
                    example: "eyJrZXkiOiJyb2xlXzEyMzQifQ=="
            additionalProperties: false
        V2PermissionsListRolesResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2PermissionsListRolesResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
            additionalProperties: false
        V2RatelimitDeleteOverrideRequestBody:
            description: |-
                Deletes an existing rate limit override. This permanently removes a custom rate limit rule, reverting affected identifiers back to the default rate limits for the namespace.

                Use this endpoint when you need to:
                - Remove special rate limit rules that are no longer needed
                - Reset entities back to standard rate limits
                - Clean up temporary overrides
                - Remove outdated tiering or custom limit rules
                - Fix misconfigured overrides

                Once deleted, the override cannot be recovered, and the operation takes effect immediately.
            additionalProperties: false
            properties:
                namespaceId:
                    description: The unique ID of the rate limit namespace containing the override. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` is more precise and less prone to naming conflicts, making it ideal for automation and scripts.
                    type: string
                    minLength: 1
                    maxLength: 255
                namespaceName:
                    description: The name of the rate limit namespace containing the override. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and convenient for manual operations and configurations.
                    type: string
                    minLength: 1
                    maxLength: 255
                identifier:
                    description: |-
                        The exact identifier pattern of the override to delete. This must match exactly as it was specified when creating the override.

                        Important notes:
                        - This is case-sensitive and must match exactly
                        - Include any wildcards (*) that were part of the original pattern
                        - For example, if the override was created for 'premium_*', you must use 'premium_*' here, not a specific ID

                        After deletion, any identifiers previously affected by this override will immediately revert to using the default rate limit for the namespace.
                    type: string
                    minLength: 1
                    maxLength: 255
            required:
                - identifier
            type: object
        V2RatelimitDeleteOverrideResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2RatelimitDeleteOverrideResponseData"
        V2RatelimitGetOverrideRequestBody:
            description: |-
                Gets the configuration of an existing rate limit override. Use this to retrieve details about custom rate limit rules that have been created for specific identifiers within a namespace.

                This endpoint is useful for:
                - Verifying override configurations
                - Checking current limits for specific entities
                - Auditing rate limit policies
                - Debugging rate limiting behavior
                - Retrieving override settings for modification
            additionalProperties: false
            properties:
                namespaceId:
                    description: The unique ID of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` is more precise and less prone to naming conflicts, making it ideal for scripts and automated operations.
                    type: string
                    minLength: 1
                    maxLength: 255
                namespaceName:
                    description: The name of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and easier to work with for manual operations and configurations.
                    type: string
                    minLength: 1
                    maxLength: 255
                identifier:
                    description: |-
                        The exact identifier pattern for the override you want to retrieve. This must match exactly as it was specified when creating the override.

                        Important notes:
                        - This is case-sensitive and must match exactly
                        - Include any wildcards (*) that were part of the original pattern
                        - For example, if the override was created for 'premium_*', you must use 'premium_*' here, not a specific ID like 'premium_user1'

                        This field is used to look up the specific override configuration for this pattern.
                    type: string
                    minLength: 1
                    maxLength: 255
            required:
                - identifier
            type: object
            oneOf:
                - required:
                    - namespaceName
                    - identifier
                - required:
                    - namespaceId
                    - identifier
        V2RatelimitGetOverrideResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/RatelimitOverride"
        V2RatelimitLimitRequestBody:
            additionalProperties: false
            properties:
                namespace:
                    type: string
                    minLength: 1
                    maxLength: 255
                    pattern: "^[a-zA-Z][a-zA-Z0-9_./-]*$"
                    description: |
                        Identifies the rate limit category using hierarchical naming for organization and monitoring.
                        Namespaces must start with a letter and can contain letters, numbers, underscores, dots, slashes, or hyphens.
                        Use descriptive, hierarchical names like 'auth.login', 'api.requests', or 'media.uploads' for clear categorization.
                        Namespaces must be unique within your workspace and support segmentation of different API operations.
                        Consistent naming conventions across your application improve monitoring and debugging capabilities.
                    example: sms.sign_up
                cost:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 1000
                    default: 1
                    description: |
                        Sets how much of the rate limit quota this request consumes, enabling weighted rate limiting.
                        Use higher values for resource-intensive operations and 0 for tracking without limiting.
                        When accumulated cost exceeds the limit within the duration window, subsequent requests are rejected.
                        Essential for implementing fair usage policies and preventing resource abuse through expensive operations.
                    example: 5
                duration:
                    type: integer
                    format: int64
                    minimum: 1000
                    maximum: 2592000000
                    description: |
                        Sets the rate limit window duration in milliseconds after which the counter resets.
                        Shorter durations enable faster recovery but may be less effective against sustained abuse.
                        Common values include 60000 (1 minute), 3600000 (1 hour), and 86400000 (24 hours).
                        Balance user experience with protection needs when choosing window sizes.
                    example: 60000
                identifier:
                    type: string
                    minLength: 1
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.:/-]+$"
                    description: |
                        Defines the scope of rate limiting by identifying the entity being limited.
                        Use user IDs for per-user limits, IP addresses for anonymous limiting, or API key IDs for per-key limits.
                        Accepts letters, numbers, underscores, dots, colons, slashes, and hyphens for flexible identifier formats.
                        The same identifier can be used across different namespaces to apply multiple rate limit types.
                        Choose identifiers that provide appropriate granularity for your rate limiting strategy.
                    example: "user_12345"
                limit:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 1000000
                    description: |
                        Sets the maximum operations allowed within the duration window before requests are rejected.
                        When this limit is reached, subsequent requests fail with `RATE_LIMITED` until the window resets.
                        Balance user experience with resource protection when setting limits for different user tiers.
                        Consider system capacity, business requirements, and fair usage policies in limit determination.
                    example: 1000
            required:
                - namespace
                - identifier
                - limit
                - duration
            type: object
        V2RatelimitLimitResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2RatelimitLimitResponseData"
        V2RatelimitListOverridesRequestBody:
            additionalProperties: false
            properties:
                namespaceId:
                    description: The unique ID of the rate limit namespace to list overrides for. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` guarantees you're targeting the exact namespace intended, even if names change over time.
                    type: string
                    minLength: 1
                    maxLength: 255
                namespaceName:
                    description: The name of the rate limit namespace to list overrides for. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and convenient for manual operations and dashboards.
                    type: string
                cursor:
                    description: Pagination cursor from a previous response. Include this when fetching subsequent pages of results. Each response containing more results than the requested limit will include a cursor value in the pagination object that can be used here.
                    type: string
                limit:
                    description: |-
                        Maximum number of override entries to return in a single response. Use this to control response size and loading performance.

                        - Lower values (10-20): Better for UI displays and faster response times
                        - Higher values (50-100): Better for data exports or bulk operations
                        - Default (10): Suitable for most dashboard views

                        Results exceeding this limit will be paginated, with a cursor provided for fetching subsequent pages.
                    type: integer
                    default: 10
                    minimum: 1
                    maximum: 100
            type: object
        V2RatelimitListOverridesResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2RatelimitListOverridesResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
        V2RatelimitSetOverrideRequestBody:
            description: |-
                Sets a new or overwrites an existing rate limit override. Overrides allow you to apply special rate limit rules to specific identifiers, providing custom limits that differ from the default.

                Overrides are useful for:
                - Granting higher limits to premium users or trusted partners
                - Implementing stricter limits for suspicious or abusive users
                - Creating tiered access levels with different quotas
                - Implementing temporary rate limit adjustments
                - Prioritizing important clients with higher limits
            additionalProperties: false
            properties:
                namespaceId:
                    description: The unique ID of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` guarantees you're targeting the exact namespace intended, even if names change, making it ideal for automation and scripts.
                    type: string
                    minLength: 1
                    maxLength: 255
                namespaceName:
                    description: The name of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and convenient for manual operations and configurations.
                    type: string
                duration:
                    description: |-
                        The duration in milliseconds for the rate limit window. This defines how long the rate limit counter accumulates before resetting to zero.

                        Considerations:
                        - This can differ from the default duration for the namespace
                        - Longer durations create stricter limits that take longer to reset
                        - Shorter durations allow more frequent bursts of activity
                        - Common values: 60000 (1 minute), 3600000 (1 hour), 86400000 (1 day)
                    format: int64
                    type: integer
                    minimum: 1000
                identifier:
                    description: |-
                        Identifier of the entity receiving this custom rate limit. This can be:

                        - A specific user ID for individual custom limits
                        - An IP address for location-based rules
                        - An email domain for organization-wide policies
                        - Any other string that identifies the target entity

                        Wildcards (*) can be used to create pattern-matching rules that apply to multiple identifiers. For example:
                        - 'premium_*' would match all identifiers starting with 'premium_'
                        - '*_admin' would match all identifiers ending with '_admin'
                        - '*suspicious*' would match any identifier containing 'suspicious'

                        More detailed information on wildcard pattern rules is available at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
                    type: string
                    minLength: 1
                    maxLength: 255
                limit:
                    description: |-
                        The maximum number of requests allowed for this override. This defines the custom quota for the specified identifier(s).

                        Special values:
                        - Higher than default: For premium or trusted entities
                        - Lower than default: For suspicious or abusive entities
                        - 0: To completely block access (useful for ban implementation)

                        This limit entirely replaces the default limit for matching identifiers.
                    format: int64
                    type: integer
                    minimum: 0
            required:
                - identifier
                - limit
                - duration
            type: object
        V2RatelimitSetOverrideResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2RatelimitSetOverrideResponseData"
        Meta:
            type: object
            required:
                - requestId
            properties:
                requestId:
                    description: A unique id for this request. Always include this ID when contacting support about a specific API request. This identifier allows Unkey's support team to trace the exact request through logs and diagnostic systems to provide faster assistance.
                    example: req_123
                    type: string
            additionalProperties: false
            description: Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
        BadRequestErrorDetails:
            allOf:
                - $ref: "#/components/schemas/BaseError"
                - type: object
                  properties:
                    errors:
                        description: List of individual validation errors that occurred in the request. Each error provides specific details about what failed validation, where the error occurred in the request, and suggestions for fixing it. This granular information helps developers quickly identify and resolve multiple issues in a single request without having to make repeated API calls.
                        items:
                            $ref: "#/components/schemas/ValidationError"
                        type: array
                  required:
                    - errors
            description: Extended error details specifically for bad request (400) errors. This builds on the BaseError structure by adding an array of individual validation errors, making it easy to identify and fix multiple issues at once.
        BaseError:
            properties:
                detail:
                    description: A human-readable explanation specific to this occurrence of the problem. This provides detailed information about what went wrong and potential remediation steps. The message is intended to be helpful for developers troubleshooting the issue.
                    example: Property foo is required but is missing.
                    type: string
                status:
                    description: HTTP status code that corresponds to this error. This will match the status code in the HTTP response. Common codes include `400` (Bad Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict), and `500` (Internal Server Error).
                    example: 404
                    format: int
                    type: integer
                title:
                    description: A short, human-readable summary of the problem type. This remains constant from occurrence to occurrence of the same problem and should be used for programmatic handling.
                    example: Not Found
                    type: string
                type:
                    description: A URI reference that identifies the problem type. This provides a stable identifier for the error that can be used for documentation lookups and programmatic error handling. When followed, this URI should provide human-readable documentation for the problem type.
                    example: https://unkey.com/docs/api-reference/errors-v2/unkey/resource/not_found
                    type: string
            required:
                - title
                - detail
                - status
                - type
            type: object
            additionalProperties: false
            description: Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
        ValidationError:
            additionalProperties: false
            properties:
                location:
                    description: |-
                        JSON path indicating exactly where in the request the error occurred. This helps pinpoint the problematic field or parameter. Examples include:
                        - 'body.name' (field in request body)
                        - 'body.items[3].tags' (nested array element)
                        - 'path.apiId' (path parameter)
                        - 'query.limit' (query parameter)
                        Use this location to identify exactly which part of your request needs correction.
                    type: string
                    example: body.permissions[0].name
                message:
                    description: Detailed error message explaining what validation rule was violated. This provides specific information about why the field or parameter was rejected, such as format errors, invalid values, or constraint violations.
                    type: string
                    example: Must be at least 3 characters long
                fix:
                    description: A human-readable suggestion describing how to fix the error. This provides practical guidance on what changes would satisfy the validation requirements. Not all validation errors include fix suggestions, but when present, they offer specific remediation advice.
                    type: string
                    example: Ensure the name uses only alphanumeric characters, underscores, and hyphens
            required:
                - location
                - message
            type: object
            description: Individual validation error details. Each validation error provides precise information about what failed, where it failed, and how to fix it, enabling efficient error resolution.
        V2ApisCreateApiResponseData:
            type: object
            properties:
                apiId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier assigned to the newly created API.
                        Use this ID for all subsequent operations including key creation, verification, and API management.
                        Always begins with 'api_' followed by a unique alphanumeric sequence.

                        Store this ID securely as it's required when:
                        - Creating API keys within this namespace
                        - Verifying keys associated with this API
                        - Managing API settings and metadata
                        - Listing keys belonging to this API

                        This identifier is permanent and cannot be changed after creation.
                    example: api_2cGKbMxRjIzhCxo1IdjH3a
            required:
                - apiId
            additionalProperties: false
        V2ApisGetApiResponseData:
            type: object
            properties:
                id:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier of this API within Unkey's system.
                        Used in all operations related to this API including key creation, verification, and management.
                        Always begins with 'api_' followed by alphanumeric characters and underscores.
                        This identifier is permanent and never changes after API creation.
                    example: api_1234567890abcdef
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    description: |
                        The internal name of this API as specified during creation.
                        Used for organization and identification within your workspace.
                        Helps distinguish between different environments, services, or access tiers.
                        Not visible to end users - this is purely for administrative purposes.
                    example: payment-service-production
            required:
                - id
                - name
            additionalProperties: false
        V2ApisListKeysResponseData:
            type: array
            maxItems: 100
            items:
                "$ref": "#/components/schemas/KeyResponseData"
            description: Array of API keys with complete configuration and metadata.
        Pagination:
            type: object
            properties:
                cursor:
                    type: string
                    minLength: 1
                    maxLength: 1024
                    description: |
                        Opaque pagination token for retrieving the next page of results.
                        Include this exact value in the cursor field of subsequent requests.
                        Cursors are temporary and may expire after extended periods.
                    example: eyJrZXkiOiJrZXlfMTIzNCIsInRzIjoxNjk5Mzc4ODAwfQ==
                hasMore:
                    type: boolean
                    description: |
                        Indicates whether additional results exist beyond this page.
                        When true, use the cursor to fetch the next page.
                        When false, you have reached the end of the result set.
                    example: true
            required:
                - hasMore
            additionalProperties: false
            description: Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
        KeyResponseData:
            type: object
            properties:
                keyId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: Unique identifier for this key.
                    example: key_1234567890abcdef
                start:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: First few characters of the key for identification.
                    example: sk_test_abc123
                enabled:
                    type: boolean
                    description: Whether the key is enabled or disabled.
                    example: true
                name:
                    type: string
                    maxLength: 255
                    description: Human-readable name for this key.
                    example: Production API Key
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: Custom metadata associated with this key.
                    example:
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key was created.
                    example: 1701425400000
                updatedAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key was last updated.
                    example: 1701425400000
                expires:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key expires (if set).
                    example: 1735689600000
                externalId:
                    type: string
                    maxLength: 255
                    description: External identifier linking this key to an entity in your system.
                    example: user_12345
                permissions:
                    type: array
                    items:
                        type: string
                        description: List of permissions granted to this key.
                    example:
                        - documents.read
                        - documents.write
                roles:
                    type: array
                    items:
                        type: string
                        description: List of roles assigned to this key.
                    example:
                        - editor
                        - viewer
                credits:
                    "$ref": "#/components/schemas/KeyCreditsData"
                identity:
                    "$ref": "#/components/schemas/Identity"
                plaintext:
                    type: string
                    description: Decrypted key value (only when decrypt=true).
                    example: sk_test_abc123def456
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        "$ref": "#/components/schemas/RatelimitResponse"
                        description: Rate limit configurations for this key.
            required:
                - keyId
                - start
                - createdAt
                - enabled
            additionalProperties: false
        KeyCreditsData:
            type: object
            description: Credit configuration and remaining balance for this key.
            properties:
                remaining:
                    type: integer
                    format: int64
                    nullable: true
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Number of credits remaining (null for unlimited).
                    example: 1000
                refill:
                    "$ref": "#/components/schemas/KeyCreditsRefill"
            required:
                - remaining
            additionalProperties: false
        Identity:
            type: object
            properties:
                externalId:
                    type: string
                    description: External identity ID
                meta:
                    type: object
                    description: Identity metadata
                ratelimits:
                    type: array
                    items:
                        "$ref": "#/components/schemas/RatelimitResponse"
                description: {}
            required:
                - externalId
                - ratelimits
        RatelimitResponse:
            type: object
            properties:
                id:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^rl_[a-zA-Z0-9_]+$"
                    description: Unique identifier for this rate limit configuration.
                    example: rl_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 128
                    pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                    description: Human-readable name for this rate limit.
                    example: api_requests
                limit:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 1000000
                    description: Maximum requests allowed within the time window.
                    example: 1000
                duration:
                    type: integer
                    format: int64
                    minimum: 1000
                    maximum: 2592000000
                    description: Rate limit window duration in milliseconds.
                    example: 3600000
                autoApply:
                    type: boolean
                    description: Whether this rate limit was automatically applied when verifying the key.
                    example: true
            required:
                - id
                - name
                - limit
                - duration
                - autoApply
            additionalProperties: false
        KeyCreditsRefill:
            type: object
            description: Configuration for automatic credit refill behavior.
            properties:
                interval:
                    type: string
                    enum:
                        - daily
                        - monthly
                    description: How often credits are automatically refilled.
                    example: daily
                amount:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 9223372036854776000
                    description: Number of credits to add during each refill cycle.
                    example: 1000
                refillDay:
                    type: integer
                    minimum: 1
                    maximum: 31
                    description: |
                        Day of the month for monthly refills (1-31).
                        Only required when interval is 'monthly'.
                        For days beyond the month's length, refill occurs on the last day of the month.
                    example: 15
            required:
                - interval
                - amount
            additionalProperties: false
        RatelimitRequest:
            type: object
            required:
                - name
                - limit
                - duration
                - autoApply
            properties:
                name:
                    description: |-
                        The name of this rate limit. This name is used to identify which limit to check during key verification.

                        Best practices for limit names:
                        - Use descriptive, semantic names like 'api_requests', 'heavy_operations', or 'downloads'
                        - Be consistent with naming conventions across your application
                        - Create separate limits for different resource types or operation costs
                        - Consider using namespaced names for better organization (e.g., 'files.downloads', 'compute.training')

                        You will reference this exact name when verifying keys to check against this specific limit.
                    type: string
                    example: api
                    minLength: 3
                    maxLength: 128
                limit:
                    description: |-
                        The maximum number of operations allowed within the specified time window.

                        When this limit is reached, verification requests will fail with `code=RATE_LIMITED` until the window resets. The limit should reflect:
                        - Your infrastructure capacity and scaling limitations
                        - Fair usage expectations for your service
                        - Different tier levels for various user types
                        - The relative cost of the operations being limited

                        Higher values allow more frequent access but may impact service performance.
                    type: integer
                    format: int64
                    minimum: 1
                duration:
                    description: |-
                        The duration for each ratelimit window in milliseconds.

                        This controls how long the rate limit counter accumulates before resetting. Common values include:
                        - 1000 (1 second): For strict per-second limits on high-frequency operations
                        - 60000 (1 minute): For moderate API usage control
                        - 3600000 (1 hour): For less frequent but costly operations
                        - 86400000 (24 hours): For daily quotas

                        Shorter windows provide more frequent resets but may allow large burst usage. Longer windows provide more consistent usage patterns but take longer to reset after limit exhaustion.
                    type: integer
                    format: int64
                    minimum: 1000
                autoApply:
                    description: |-
                        Whether this ratelimit should be automatically applied when verifying a key.
                    type: boolean
                    default: false
        V2IdentitiesCreateIdentityResponseData:
            type: object
        V2IdentitiesGetIdentityResponseData:
            type: object
            required:
                - externalId
            properties:
                externalId:
                    type: string
                    description: The external identifier for this identity in your system. This is the ID you provided during identity creation.
                    example: user_abc123
                meta:
                    type: object
                    additionalProperties: true
                    description: Custom metadata associated with this identity. This can include any JSON-serializable data you stored with the identity during creation or updates.
                    example:
                        name: Alice Smith
                        email: alice@example.com
                        plan: premium
                ratelimits:
                    type: array
                    items:
                        $ref: "#/components/schemas/RatelimitResponse"
                    description: Rate limits associated with this identity. These limits are shared across all API keys linked to this identity, providing consistent rate limiting regardless of which key is used.
        V2IdentitiesListIdentitiesResponseData:
            type: array
            items:
                "$ref": "#/components/schemas/Identity"
            description: List of identities matching the specified criteria.
        V2KeysAddPermissionsResponseData:
            type: array
            description: |-
                Complete list of all permissions directly assigned to the key (including both newly added permissions and those that were already assigned).

                This response includes:
                - All direct permissions assigned to the key (both pre-existing and newly added)
                - Permissions sorted alphabetically by name for consistent response format
                - Both the permission ID and name for each permission

                Important notes:
                - This list does NOT include permissions granted through roles
                - For a complete permission picture, use `/v2/keys.getKey` instead
                - An empty array indicates the key has no direct permissions assigned
            items:
                type: object
                required:
                    - id
                    - name
                    - slug
                properties:
                    id:
                        type: string
                        description: The unique identifier of the permission (begins with `perm_`). This ID can be used in other API calls to reference this specific permission. IDs are guaranteed unique and won't change, making them ideal for scripting and automation. You can store these IDs in your system for consistent reference.
                        example: perm_1n9McEIBSqy44Qy7hzWyM5
                    name:
                        type: string
                        description: "The human-readable name of the permission. "
                        example: Can write documents
                    slug:
                        type: string
                        description: |-
                            The slug of the permission, typically following a `resource.action` pattern like `documents.read`.
                        example: documents.write
        V2KeysAddRolesResponseData:
            type: array
            description: |-
                Complete list of all roles directly assigned to the key after the operation completes.

                The response includes:
                - All roles now assigned to the key (both pre-existing and newly added)
                - Both ID and name of each role for easy reference
                - Roles sorted alphabetically by name for consistent response format

                Important notes:
                - The response shows the complete current state after the addition
                - An empty array means the key has no roles assigned (unlikely after an add operation)
                - This only shows direct role assignments, not inherited or nested roles
                - Role permissions are not expanded in this response - use keys.getKey for full details
                - All role changes are logged in the audit log for security tracking
            items:
                type: object
                required:
                    - id
                    - name
                properties:
                    id:
                        type: string
                        description: The unique identifier of the role (begins with `role_`). This ID can be used in other API calls to reference this specific role. Role IDs are immutable and guaranteed to be unique within your Unkey workspace, making them reliable reference points for integration and automation systems.
                        example: role_1n9McEIBSqy44Qy7hzWyM5
                    name:
                        type: string
                        description: The name of the role. This is a human-readable identifier that's unique within your workspace. Role names help identify what access level or function a role provides. Common patterns include naming by access level (`admin`, `editor`, `viewer`), by department (`billing_manager`, `support_agent`), or by feature area (`analytics_user`, `dashboard_admin`).
                        example: admin
        V2KeysCreateKeyResponseData:
            type: object
            properties:
                keyId:
                    type: string
                    description: The unique identifier for this key in Unkey's system. This is NOT the actual API key, but a reference ID used for management operations like updating or deleting the key. Store this ID in your database to reference the key later. This ID is not sensitive and can be logged or displayed in dashboards.
                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                key:
                    type: string
                    description: "The full generated API key that should be securely provided to your user. SECURITY WARNING: This is the only time you'll receive the complete key - Unkey only stores a securely hashed version. Never log or store this value in your own systems; provide it directly to your end user via secure channels. After this API call completes, this value cannot be retrieved again (unless created with `recoverable=true`)."
                    example: prod_2cGKbMxRjIzhCxo1IdjH3arELti7Sdyc8w6XYbvtcyuBowPT
            required:
                - keyId
                - key
        KeysDeleteKeyResponseData:
            type: object
            additionalProperties: false
            description: Empty response object by design. A successful response indicates the key was deleted successfully.
        V2KeysRemovePermissionsResponseData:
            type: array
            description: |-
                Complete list of all permissions directly assigned to the key after the removal operation (remaining permissions only).

                This response includes:
                - All direct permissions still assigned to the key after removal
                - Permissions sorted alphabetically by name for consistent response format
                - Both the permission ID and name for each remaining permission

                Important notes:
                - This list does NOT include permissions granted through roles
                - For a complete permission picture, use `/v2/keys.getKey` instead
                - An empty array indicates the key has no direct permissions assigned
                - Any cached versions of the key are immediately invalidated to ensure consistency
                - Changes to permissions take effect within seconds for new verifications
                - All permission removals are logged to the audit log for security tracking
            items:
                type: object
                required:
                    - id
                    - name
                    - slug
                properties:
                    id:
                        type: string
                        description: The unique identifier of the permission (begins with `perm_`). This ID can be used in other API calls to reference this specific permission. IDs are guaranteed unique and won't change, making them ideal for scripting and automation. You can store these IDs in your system for consistent reference.
                        example: perm_1n9McEIBSqy44Qy7hzWyM5
                    name:
                        type: string
                        description: The name of the permission
                        example: documents.write
                    slug:
                        type: string
                        description: |-
                            The slug of the permission, typically following a `resource.action` pattern like `documents.read`. Names are human-readable identifiers used both for assignment and verification.

                            During verification:
                            - The exact name is matched (e.g., `documents.read`)
                            - Hierarchical wildcards are supported in verification requests
                            - A key with permission `documents.*` grants access to `documents.read`, `documents.write`, etc.
                            - Wildcards can appear at any level: `billing.*.view` matches `billing.invoices.view` and `billing.payments.view`

                            However, when adding permissions, you must specify each exact permission - wildcards are not valid for assignment.
                        example: documents.write
        V2KeysRemoveRolesResponseData:
            type: array
            description: |-
                Complete list of all roles directly assigned to the key after the removal operation completes.

                The response includes:
                - The remaining roles still assigned to the key (after removing the specified roles)
                - Both ID and name for each role for easy reference
                - Roles sorted alphabetically by name for consistent response format

                Important notes:
                - The response reflects the current state after the removal operation
                - An empty array indicates the key now has no roles assigned
                - This only shows direct role assignments
                - Role permissions are not expanded in this response - use keys.getKey for full details
                - All role changes are logged in the audit log for security tracking
                - Changes take effect immediately for new verifications but cached sessions may retain old permissions briefly
            items:
                type: object
                required:
                    - id
                    - name
                properties:
                    id:
                        type: string
                        description: The unique identifier of the role (begins with `role_`). This ID can be used in other API calls to reference this specific role.
                        example: role_1n9McEIBSqy44Qy7hzWyM5
                    name:
                        type: string
                        description: The name of the role. This is a human-readable identifier that's unique within your workspace.
                        example: admin
        V2KeysSetPermissionsResponseData:
            type: array
            description: |-
                Complete list of all permissions now directly assigned to the key after the set operation has completed.

                The response includes:
                - The comprehensive, updated set of direct permissions (reflecting the complete replacement)
                - Both ID and name for each permission for easy reference
                - Permissions sorted alphabetically by name for consistent response format

                Important notes:
                - This only shows direct permissions, not those granted through roles
                - An empty array means the key has no direct permissions assigned
                - For a complete permission picture including roles, use keys.getKey instead
                - All permission changes are logged in the audit log for security tracking
            items:
                type: object
                required:
                    - id
                    - name
                properties:
                    id:
                        type: string
                        description: The unique identifier of the permission
                        example: perm_1n9McEIBSqy44Qy7hzWyM5
                    name:
                        type: string
                        description: The name of the permission
                        example: documents.write
        V2KeysSetRolesResponseData:
            type: array
            description: |-
                Complete list of all roles now directly assigned to the key after the set operation has completed.

                The response includes:
                - The comprehensive, updated set of roles (reflecting the complete replacement)
                - Both ID and name for each role for easy reference
                - Roles sorted alphabetically by name for consistent response format

                Important notes:
                - This response shows the final state after the complete replacement
                - If you provided an empty array in the request, this will also be empty
                - This only shows direct role assignments on the key
                - Role permissions are not expanded in this response - use keys.getKey for complete details
                - All role changes are logged in the audit log for security tracking
                - An empty array indicates the key now has no roles assigned at all
            items:
                type: object
                required:
                    - id
                    - name
                properties:
                    id:
                        type: string
                        description: The unique identifier of the role (begins with `role_`). This ID can be used in other API calls to reference this specific role. Role IDs are immutable and guaranteed to be unique, making them reliable reference points for integration and automation systems.
                        example: role_1n9McEIBSqy44Qy7hzWyM5
                    name:
                        type: string
                        description: The name of the role. This is a human-readable identifier that's unique within your workspace. Role names are descriptive labels that help identify what access level or function a role provides. Good naming practices include naming by access level ('admin', 'editor'), by department ('billing_team', 'support_staff'), or by feature area ('reporting_user', 'settings_manager').
                        example: admin
        V2KeysUpdateKeyResponseData:
            type: object
            additionalProperties: false
            description: Empty response object by design. A successful response indicates the key was updated successfully.
        KeysVerifyKeyCredits:
            type: object
            required:
                - cost
            properties:
                cost:
                    type: integer
                    format: int32
                    minimum: 0
                    maximum: 1000000000
                    description: |
                        Sets how many credits to deduct for this verification request.
                        Use 0 for read-only operations or free tier access, higher values for premium features.
                        Credits are deducted immediately upon verification, even if the key lacks required permissions.
                        Essential for implementing usage-based pricing with different operation costs.
                    example: 5
            additionalProperties: false
            description: |
                Controls credit consumption for usage-based billing and quota enforcement.
                Omitting this field uses the default cost of 1 credit per verification.
                Credits provide globally consistent usage tracking, essential for paid APIs with strict quotas.
                Verification can succeed while credit deduction fails if the key has insufficient credits.
        KeysVerifyKeyRatelimit:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    description: References an existing ratelimit by its name. Key Ratelimits will take precedence over identifier-based limits.
                    example: tokens
                cost:
                    type: integer
                    minimum: 0
                    default: 1
                    description: Optionally override how expensive this operation is and how many tokens are deducted from the current limit.
                    example: 2
                limit:
                    type: integer
                    minimum: 0
                    description: Optionally override the maximum number of requests allowed within the specified interval.
                    example: 50
                duration:
                    type: integer
                    minimum: 0
                    description: Optionally override the duration of the rate limit window duration.
                    example: 600000
        KeysVerifyKeyResponseData:
            type: object
            properties:
                valid:
                    type: boolean
                    description: The primary verification result. If true, the key is valid and can be used. If false, check the 'code' field to understand why verification failed. Your application should always check this field first before proceeding.
                code:
                    type: string
                    enum:
                        - VALID
                        - NOT_FOUND
                        - FORBIDDEN
                        - USAGE_EXCEEDED
                        - RATE_LIMITED
                        - DISABLED
                        - INSUFFICIENT_PERMISSIONS
                        - EXPIRED
                    description: "A machine-readable code indicating the verification status or failure reason. Values: `VALID` (key is valid), `NOT_FOUND` (key doesn't exist), `FORBIDDEN` (key exists but belongs to a different API), `USAGE_EXCEEDED` (key has no more credits), `RATE_LIMITED` (key exceeded rate limits), `UNAUTHORIZED` (key can't be used for this action), `DISABLED` (key was explicitly disabled), `INSUFFICIENT_PERMISSIONS` (key lacks required permissions), `EXPIRED` (key has passed its expiration date)."
                keyId:
                    type: string
                    description: The unique identifier of the verified key in Unkey's system. Use this ID for operations like updating or revoking the key. This field is returned for both valid and invalid keys (except when `code=NOT_FOUND`).
                name:
                    type: string
                    description: The human-readable name assigned to this key during creation. This is useful for displaying in logs or admin interfaces to identify the key's purpose or owner.
                meta:
                    type: object
                    additionalProperties: true
                    description: Custom metadata associated with the key. This can include any JSON-serializable data you stored with the key during creation or updates, such as plan information, feature flags, or user details. Use this to avoid additional database lookups for contextual information needed during API calls.
                expires:
                    type: integer
                    format: int64
                    description: Unix timestamp (in milliseconds) when the key will expire. If null or not present, the key has no expiration. You can use this to warn users about upcoming expirations or to understand the validity period.
                credits:
                    type: integer
                    format: int32
                    description: The number of requests/credits remaining for this key. If null or not present, the key has unlimited usage. This value decreases with each verification (based on the 'cost' parameter) unless explicit credit refills are configured.
                enabled:
                    type: boolean
                    description: Indicates if the key is currently enabled. Disabled keys will always fail verification with `code=DISABLED`. This is useful for implementing temporary suspensions without deleting the key.
                permissions:
                    type: array
                    items:
                        type: string
                    description: A list of all permission names assigned to this key, either directly or through roles. These permissions determine what actions the key can perform. Only returned when permissions were checked during verification or when the key fails with `code=INSUFFICIENT_PERMISSIONS`.
                roles:
                    type: array
                    items:
                        type: string
                    description: A list of all role names assigned to this key. Roles are collections of permissions that grant access to specific functionality. Only returned when permissions were checked during verification.
                identity:
                    "$ref": "#/components/schemas/Identity"
                    description: Information about the identity associated with this key. Identities allow multiple keys to share resources (like rate limits) and represent the same user or entity across different applications or devices.
                ratelimits:
                    type: array
                    items:
                        "$ref": "#/components/schemas/VerifyKeyRatelimitData"
                        description: The ratelimits that got checked
            required:
                - valid
                - code
        VerifyKeyRatelimitData:
            type: object
            properties:
                exceeded:
                    type: boolean
                    description: Whether the rate limit was exceeded.
                id:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^rl_[a-zA-Z0-9_]+$"
                    description: Unique identifier for this rate limit configuration.
                    example: rl_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 128
                    pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                    description: Human-readable name for this rate limit.
                    example: api_requests
                limit:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 1000000
                    description: Maximum requests allowed within the time window.
                    example: 1000
                duration:
                    type: integer
                    format: int64
                    minimum: 1000
                    maximum: 2592000000
                    description: Rate limit window duration in milliseconds.
                    example: 3600000
                reset:
                    type: integer
                    format: int64
                    minimum: 1000
                    maximum: 2592000000
                    description: Rate limit reset duration in milliseconds.
                    example: 3600000
                remaining:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 1000000
                    description: Rate limit remaining requests within the time window.
                    example: 999
                autoApply:
                    type: boolean
                    description: |
                        Whether this rate limit should be automatically applied when verifying keys.
                        When true, we will automatically apply this limit during verification without it being explicitly listed.
                    example: true
            required:
                - id
                - exceeded
                - name
                - limit
                - duration
                - reset
                - remaining
                - autoApply
            additionalProperties: false
        V2LivenessResponseData:
            type: object
            properties:
                message:
                    description: Status message indicating the health of the service. A value of 'OK' indicates that the service is functioning properly and ready to accept requests. Any other value indicates a potential issue with the service health.
                    example: OK
                    type: string
            required:
                - message
            description: Response data for the liveness check endpoint. This provides a simple indication of whether the Unkey API service is running and able to process requests. Monitoring systems can use this endpoint to track service availability and trigger alerts if the service becomes unhealthy.
        V2PermissionsCreatePermissionResponseData:
            type: object
            properties:
                permissionId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier assigned to the newly created permission.
                        Use this ID to reference the permission in role assignments, key operations, and other API calls.
                        Always begins with 'perm_' followed by a unique alphanumeric sequence.
                        Store this ID if you need to manage or reference this permission in future operations.
                    example: perm_1234567890abcdef
            required:
                - permissionId
            additionalProperties: false
        V2PermissionsCreateRoleResponseData:
            type: object
            properties:
                roleId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier assigned to the newly created role.
                        Use this ID to reference the role in permission assignments, key operations, and role management calls.
                        Always begins with 'role_' followed by a unique alphanumeric sequence.
                        Store this ID if you need to manage, modify, or assign this role in future operations.
                    example: role_1234567890abcdef
            required:
                - roleId
            additionalProperties: false
        V2PermissionsGetPermissionResponseData:
            type: object
            properties:
                permission:
                    "$ref": "#/components/schemas/Permission"
            required:
                - permission
            additionalProperties: false
            description: Complete permission details including ID, name, and metadata.
        Permission:
            type: object
            properties:
                id:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier for this permission within Unkey's system.
                        Generated automatically when the permission is created and used to reference this permission in API operations.
                        Always begins with 'perm_' followed by alphanumeric characters and underscores.
                    example: perm_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The human-readable name for this permission that describes its purpose.
                        Should be descriptive enough for developers to understand what access it grants.
                        Use clear, semantic names that reflect the resources or actions being permitted.
                        Names must be unique within your workspace to avoid confusion and conflicts.
                    example: "users.read"
                slug:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The URL-safe identifier when this permission was created.
                    example: users-read
                description:
                    type: string
                    maxLength: 2048
                    description: |
                        Optional detailed explanation of what this permission grants access to.
                        Helps team members understand the scope and implications of granting this permission.
                        Include information about what resources can be accessed and what actions can be performed.
                        Not visible to end users - this is for internal documentation and team clarity.
                    example: "Allows reading user profile information and account details"
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: |
                        Unix timestamp in milliseconds indicating when this permission was first created.
                        Useful for auditing and understanding the evolution of your permission structure.
                        Automatically set by the system and cannot be modified.
                    example: 1701425400000
            required:
                - id
                - name
                - slug
                - createdAt
        V2PermissionsGetRoleResponseData:
            type: object
            properties:
                role:
                    "$ref": "#/components/schemas/Role"
            required:
                - role
            additionalProperties: false
            description: Complete role details including assigned permissions.
        Role:
            type: object
            properties:
                id:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier for this role within Unkey's system.
                        Generated automatically when the role is created and used to reference this role in API operations.
                        Always begins with 'role_' followed by alphanumeric characters and underscores.
                    example: role_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The human-readable name for this role that describes its function.
                        Should be descriptive enough for administrators to understand what access this role provides.
                        Use clear, semantic names that reflect the job function or responsibility level.
                        Names must be unique within your workspace to avoid confusion during role assignment.
                    example: "support.readonly"
                description:
                    type: string
                    maxLength: 2048
                    description: |
                        Optional detailed explanation of what this role encompasses and what access it provides.
                        Helps team members understand the role's scope, intended use cases, and security implications.
                        Include information about what types of users should receive this role and what they can accomplish.
                        Not visible to end users - this is for internal documentation and access control audits.
                    example: "Provides read-only access for customer support representatives to view user accounts and support tickets"
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: |
                        Unix timestamp in milliseconds indicating when this role was first created.
                        Useful for auditing and understanding the evolution of your access control structure.
                        Automatically set by the system and cannot be modified.
                    example: 1701425400000
                permissions:
                    type: array
                    items:
                        "$ref": "#/components/schemas/Permission"
                    maxItems: 100
                    description: |
                        Complete list of permissions currently assigned to this role.
                        Each permission grants specific access rights that will be inherited by any keys or users assigned this role.
                        Use this list to understand the full scope of access provided by this role.
                        Permissions can be added or removed from roles without affecting the role's identity or other properties.
                        Empty array indicates a role with no permissions currently assigned.
            required:
                - id
                - name
                - permissions
                - createdAt
            additionalProperties: false
        V2PermissionsListPermissionsResponseData:
            type: array
            maxItems: 1000
            description: Array of permission objects with complete configuration details.
            items:
                "$ref": "#/components/schemas/Permission"
        V2PermissionsListRolesResponseData:
            type: array
            maxItems: 1000
            description: Array of roles with their assigned permissions.
            items:
                "$ref": "#/components/schemas/Role"
        V2RatelimitDeleteOverrideResponseData:
            type: object
            additionalProperties: false
            description: Empty response object. A successful response indicates the override was successfully deleted. The operation is immediate - as soon as this response is received, the override no longer exists and affected identifiers have reverted to using the default rate limit for the namespace. No other data is returned as part of the deletion operation.
        RatelimitOverride:
            type: object
            additionalProperties: false
            properties:
                namespaceId:
                    description: The unique identifier of the rate limit namespace this override belongs to. This links the override to a specific namespace context, ensuring the override only applies within that namespace.
                    type: string
                    minLength: 1
                    maxLength: 255
                overrideId:
                    description: The unique identifier of this specific rate limit override. This ID is generated when the override is created and can be used for management operations like updating or deleting the override.
                    type: string
                    minLength: 1
                    maxLength: 255
                duration:
                    description: The duration in milliseconds for this override's rate limit window. This may differ from the default duration for the namespace, allowing custom time windows for specific entities. After this duration elapses, the rate limit counter for affected identifiers resets to zero.
                    format: int64
                    type: integer
                    minimum: 1000
                identifier:
                    description: |-
                        The identifier pattern this override applies to. This determines which entities receive the custom rate limit.

                        This can be:
                        - An exact identifier for a specific entity
                        - A pattern with wildcards for matching multiple entities

                        Wildcard examples:
                        - 'admin_*' matches any identifier starting with 'admin_'
                        - '*_test' matches any identifier ending with '_test'
                        - '*premium*' matches any identifier containing 'premium'

                        More complex patterns can combine multiple wildcards. Detailed documentation on pattern matching rules is available at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
                    type: string
                    minLength: 1
                    maxLength: 255
                limit:
                    description: |-
                        The maximum number of requests allowed for entities matching this override. This replaces the default limit for the namespace when applied.

                        Common use cases:
                        - Higher limits for premium customers
                        - Reduced limits for abusive or suspicious entities
                        - Zero limit to completely block specific patterns
                        - Custom tier-based limits for different customer segments
                    format: int64
                    type: integer
                    minimum: 0
            required:
                - namespaceId
                - overrideId
                - duration
                - identifier
                - limit
        V2RatelimitLimitResponseData:
            type: object
            properties:
                limit:
                    description: |-
                        The maximum number of operations allowed within the time window. This reflects either the default limit specified in the request or an override limit if one exists for this identifier.

                        This value helps clients understand their total quota for the current window.
                    format: int64
                    type: integer
                remaining:
                    description: |-
                        The number of operations remaining in the current window before the rate limit is exceeded. Applications should use this value to:

                        - Implement client-side throttling before hitting limits
                        - Display usage information to end users
                        - Trigger alerts when approaching limits
                        - Adjust request patterns based on available capacity

                        When this reaches zero, requests will be rejected until the window resets.
                    format: int64
                    type: integer
                reset:
                    description: |-
                        The Unix timestamp in milliseconds when the rate limit window will reset and 'remaining' will return to 'limit'.

                        This timestamp enables clients to:
                        - Calculate and display wait times to users
                        - Implement intelligent retry mechanisms
                        - Schedule requests to resume after the reset
                        - Implement exponential backoff when needed

                        The reset time is based on a sliding window from the first request in the current window.
                    format: int64
                    type: integer
                success:
                    description: |-
                        Whether the request passed the rate limit check. If true, the request is allowed to proceed. If false, the request has exceeded the rate limit and should be blocked or rejected.

                        You MUST check this field to determine if the request should proceed, as the endpoint always returns `HTTP 200` even when rate limited.
                    type: boolean
                overrideId:
                    description: |-
                        If a rate limit override was applied for this identifier, this field contains the ID of the override that was used. Empty when no override is in effect.

                        This can be useful for:
                        - Debugging which override rule was matched
                        - Tracking the effects of specific overrides
                        - Understanding why limits differ from default values
                        - Audit logging of special rate limit rules
                    type: string
            required:
                - limit
                - remaining
                - reset
                - success
        V2RatelimitListOverridesResponseData:
            type: array
            items:
                "$ref": "#/components/schemas/RatelimitOverride"
        V2RatelimitSetOverrideResponseData:
            type: object
            properties:
                overrideId:
                    description: |-
                        The unique identifier for the newly created or updated rate limit override. This ID can be used to:

                        - Reference this specific override in subsequent API calls
                        - Delete or modify this override later
                        - Track which override is being applied in rate limit responses
                        - Associate override effects with specific rules in analytics

                        Store this ID if you need to manage the override in the future.
                    type: string
            required:
                - overrideId
info:
    description: |-
        Unkey's API provides programmatic access for all resources within our platform.


        ### Authentication
        #
        This API uses HTTP Bearer authentication with root keys. Most endpoints require specific permissions associated with your root key. When making requests, include your root key in the `Authorization` header:
        ```
        Authorization: Bearer unkey_xxxxxxxxxxx
        ```

        All responses follow a consistent envelope structure that separates operational metadata from actual data. This design provides several benefits:
        - Debugging: Every response includes a unique requestId for tracing issues
        - Consistency: Predictable response format across all endpoints
        - Extensibility: Easy to add new metadata without breaking existing integrations
        - Error Handling: Unified error format with actionable information

        ### Success Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_123456"
          },
          "data": {
            // Actual response data here
          }
        }
        ```

        The meta object contains operational information:
        - `requestId`: Unique identifier for this request (essential for support)

        The data object contains the actual response data specific to each endpoint.

        ### Paginated Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_123456"
          },
          "data": [
            // Array of results
          ],
          "pagination": {
            "cursor": "next_page_token",
            "hasMore": true
          }
        }
        ```

        The pagination object appears on list endpoints and contains:
        - `cursor`: Token for requesting the next page
        - `hasMore`: Whether more results are available

        ### Error Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_2c9a0jf23l4k567"
          },
          "error": {
            "detail": "The resource you are attempting to modify is protected and cannot be changed",
            "status": 403,
            "title": "Forbidden",
            "type": "https://unkey.com/docs/api-reference/errors-v2/unkey/application/protected_resource"
          }
        }
        ```

        Error responses include comprehensive diagnostic information:
        - `title`: Human-readable error summary
        - `detail`: Specific description of what went wrong
        - `status`: HTTP status code
        - `type`: Link to error documentation
        - `errors`: Array of validation errors (for 400 responses)

        This structure ensures you always have the context needed to debug issues and take corrective action.
    title: Unkey API
    version: 2.0.0
openapi: 3.0.0
paths:
    /_internal/chproxy/metrics:
        post:
            description: |-
                Internal endpoint for batching API request metric events to ClickHouse. This endpoint is used internally by the API to efficiently store request/response data for analytics and should not be used by external clients.

                This endpoint bypasses normal authentication and validation as it's intended for internal use only.
            operationId: chproxyMetrics
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChproxyMetricsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ChproxyMetricsResponseBody'
                    description: Events successfully queued for processing
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/badRequestErrorResponse'
                    description: Invalid request body or malformed events
                "529":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/internalServerErrorResponse'
                    description: Service overloaded, unable to process events
            security: []
            summary: Internal ClickHouse proxy for API request metrics
            tags:
                - chproxy
            x-speakeasy-ignore: "true"
    /_internal/chproxy/ratelimits:
        post:
            description: |-
                Internal endpoint for batching ratelimit events to ClickHouse. This endpoint is used internally by the API to efficiently store ratelimit data and should not be used by external clients.

                This endpoint bypasses normal authentication and validation as it's intended for internal use only.
            operationId: chproxyRatelimits
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChproxyRatelimitsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ChproxyRatelimitsResponseBody'
                    description: Events successfully queued for processing
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/badRequestErrorResponse'
                    description: Invalid request body or malformed events
                "529":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/internalServerErrorResponse'
                    description: Service overloaded, unable to process events
            security: []
            summary: Internal ClickHouse proxy for ratelimit events
            tags:
                - chproxy
            x-speakeasy-ignore: "true"
    /_internal/chproxy/verifications:
        post:
            description: |-
                Internal endpoint for batching key verification events to ClickHouse. This endpoint is used internally by the API to efficiently store verification data and should not be used by external clients.

                This endpoint bypasses normal authentication and validation as it's intended for internal use only. External clients should use the standard key verification endpoints instead.
            operationId: chproxyVerifications
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChproxyVerificationsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ChproxyVerificationsResponseBody'
                    description: Events successfully queued for processing
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/badRequestErrorResponse'
                    description: Invalid request body or malformed events
                "529":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/internalServerErrorResponse'
                    description: Service overloaded, unable to process events
            security: []
            summary: Internal ClickHouse proxy for verification events
            tags:
                - chproxy
            x-speakeasy-ignore: "true"
    /v2/apis.createApi:
        post:
            description: |-
                Creates a new API namespace that serves as a container for related API keys.

                APIs in Unkey provide important functionality:
                - They organize keys into logical groups for easier management
                - They isolate keys between different environments (dev/staging/production)
                - They enforce security boundaries between services or products
                - They provide a foundation for permission scoping and access control

                Common use cases for creating separate APIs include:
                - Separating development, staging, and production environments
                - Isolating different services or microservices from each other
                - Creating boundaries between different products or teams
                - Implementing multi-tenant isolation for SaaS applications

                You'll use the resulting API ID when creating keys to associate them with this API namespace.
                During key verification, you must provide the same API ID to ensure keys can't be used across different environments or services.
            operationId: createApi
            requestBody:
                content:
                    application/json:
                        examples:
                            production:
                                summary: Production API
                                value:
                                    name: payment-service-production
                            serviceSpecific:
                                summary: Service-specific API
                                value:
                                    name: analytics-service
                            staging:
                                summary: Staging environment
                                value:
                                    name: payment-service-staging
                        schema:
                            $ref: '#/components/schemas/V2ApisCreateApiRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                success:
                                    summary: Successfully created API
                                    value:
                                        data:
                                            apiId: api_2cGKbMxRjIzhCxo1IdjH3a
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2ApisCreateApiResponseBody'
                    description: Successfully created a new API namespace. The response includes the unique API ID that you'll need for creating keys within this namespace. This ID should be stored securely as it's required for all operations related to this API.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Create a new API namespace for organizing keys
            tags:
                - apis
            x-speakeasy-name-override: createApi
    /v2/apis.deleteApi:
        post:
            description: |-
                Permanently deletes an API namespace and invalidates all keys associated with it.

                WARNING: This is a destructive operation with significant consequences:
                - All keys associated with this API will be invalidated immediately
                - Verification attempts for these keys will fail with `code=NOT_FOUND`
                - Historical analytics data for the API and its keys will be preserved
                - This action cannot be undone

                Common reasons to delete an API include:
                - Removing test or development environments no longer needed
                - Retiring deprecated services or products
                - Cleaning up unused resources
                - Implementing security isolation after compromise

                Before deletion, ensure that:
                - You have the correct API ID (check the environment/service)
                - You have migrated any needed keys to a new API
                - You have updated all client applications to use new keys
                - You have backed up any important metadata or analytics
            operationId: deleteApi
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Delete an API
                                value:
                                    apiId: api_VNcuGfVjUkrVcWJmda0A
                        schema:
                            $ref: '#/components/schemas/V2ApisDeleteApiRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                success:
                                    summary: Successful deletion
                                    value:
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2ApisDeleteApiResponseBody'
                    description: API successfully deleted. All keys associated with this API have been invalidated and will no longer work for verification. The API ID can no longer be used for any operations, and new keys cannot be created with this API ID. This operation is immediate and cannot be undone.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "412":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreconditionFailedErrorResponse'
                    description: The API has api protection enabled, please disable it before deleting the API.
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Delete an API and invalidate all its associated keys
            tags:
                - apis
            x-speakeasy-name-override: deleteApi
    /v2/apis.getApi:
        post:
            description: |-
                Retrieves detailed information about a specific API namespace.
                This endpoint is useful for:
                - Verifying an API exists before attempting to use it
                - Retrieving the name of an API when you only have its ID
                - Checking if you have access to a particular API
                - Confirming API details before performing operations on it

                The information returned is minimal by design, as APIs are primarily organizational containers. Most of the valuable data lies in the keys associated with an API, which can be retrieved using the apis.listKeys endpoint.
            operationId: getApi
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Retrieve API by ID
                                value:
                                    apiId: api_1234
                        schema:
                            $ref: '#/components/schemas/V2ApisGetApiRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                standard:
                                    summary: API details response
                                    value:
                                        data:
                                            id: api_1234567890abcdef
                                            name: payment-service-production
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2ApisGetApiResponseBody'
                    description: ""
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Retrieve information about an API namespace
            tags:
                - apis
            x-speakeasy-name-override: getApi
    /v2/apis.listKeys:
        post:
            description: |-
                Retrieves a paginated list of all API keys associated with a specific API namespace. Returns detailed information about each key including metadata, permissions, and usage limits.

                Use this endpoint to build admin dashboards for API key management, audit active keys for security reviews, or find keys associated with specific users through the externalId filter. For large APIs with many keys, results are paginated and can be filtered to locate specific keys efficiently.

                For security reasons, full key values are never returned unless specifically requested with decrypt=true, and only for keys created with recoverable=true when the caller has sufficient permissions.
            operationId: listKeys
            requestBody:
                content:
                    application/json:
                        examples:
                            basicListing:
                                summary: List all keys for an API
                                value:
                                    apiId: api_1234
                            filteredListing:
                                summary: List keys for specific user
                                value:
                                    apiId: api_1234
                                    externalId: user_5bf93ab218e
                                    limit: 50
                            paginatedRequest:
                                summary: Fetch next page of results
                                value:
                                    apiId: api_1234
                                    cursor: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMjNld3MiLCJsYXN0Q3JlYXRlZEF0IjoxNjcyNTI0MjM0MDAwfQ==
                        schema:
                            $ref: '#/components/schemas/V2ApisListKeysRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                description: {}
                                standardResponse:
                                    summary: Successful key listing
                                    value:
                                        data:
                                            - createdAt: 1671048264000
                                              keyId: key_1a2b3c4d5e6f
                                              meta:
                                                department: Engineering
                                                owner: alice@example.com
                                              name: Production Admin Key
                                              permissions:
                                                - admin.read
                                                - admin.write
                                              start: prod_abc
                                            - createdAt: 1671135600000
                                              keyId: key_2b3c4d5e6f7g
                                              meta:
                                                owner: true
                                              name: CI/CD Pipeline Key
                                              permissions:
                                                - deploy.trigger
                                                - logs.read
                                              start: prod_def
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                        pagination:
                                            cursor: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMmIzYzRkNWU2ZjdnIiwibGFzdENyZWF0ZWRBdCI6MTY3MTEzNTYwMDAwMH0=
                                            hasMore: true
                            schema:
                                $ref: '#/components/schemas/V2ApisListKeysResponseBody'
                    description: ""
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: List all keys associated with an API namespace
            tags:
                - apis
            x-speakeasy-name-override: listKeys
    /v2/identities.createIdentity:
        post:
            description: |-
                Creates a new identity that can be associated with multiple API keys to enable resource sharing.
                Identities are a powerful concept in Unkey that allow multiple API keys to share resources like rate limits and to be associated with the same entity (user, organization, etc.). This is essential for:
                - Implementing consistent rate limiting across multiple API keys
                - Associating multiple keys with the same user or organization
                - Sharing metadata across all keys for an entity
                - Enabling user-based analytics across multiple keys
                - Simplifying key management for multi-device or multi-service users
                When you create keys with the same externalId, they'll share rate limits and appear grouped in analytics. This enables scenarios like letting users generate multiple API keys for different devices while still treating them as a single entity for usage limits.
                The identity concept creates a separation between your user entities and their authentication credentials (API keys), similar to how users can have multiple passwords or sessions.
            operationId: identities.createIdentity
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Basic identity creation
                                value:
                                    externalId: user_abc123
                            withMetadata:
                                summary: Identity with user metadata
                                value:
                                    externalId: user_abc123
                                    meta:
                                        accountCreated: "2023-01-15T08:30:00Z"
                                        email: alice@example.com
                                        name: Alice Smith
                                        plan: premium
                                        region: eu-west
                            withRatelimits:
                                summary: Identity with shared rate limits
                                value:
                                    externalId: org_xyz456
                                    meta:
                                        name: Acme Corporation
                                        planTier: enterprise
                                    ratelimits:
                                        - autoApply: true
                                          duration: 3600000
                                          limit: 10000
                                          name: requests
                                        - autoApply: false
                                          duration: 86400000
                                          limit: 100
                                          name: heavy_compute
                        schema:
                            $ref: '#/components/schemas/V2IdentitiesCreateIdentityRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                success:
                                    summary: Successfully created identity
                                    value:
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2IdentitiesCreateIdentityResponseBody'
                    description: ""
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "409":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConflictErrorResponse'
                    description: Identity already exists
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Create a new identity for resource sharing across keys
            tags:
                - identities
            x-speakeasy-name-override: createIdentity
    /v2/identities.deleteIdentity:
        post:
            description: |-
                Permanently removes an identity from your workspace. This operation cannot be undone.
                Deleting an identity has several important effects:
                - All metadata associated with the identity is permanently removed
                - Any rate limit history for this identity is cleared
                - The identity's externalId becomes available for reuse
                - Keys remain functional but lose their identity association
                Important notes:
                - This operation does NOT delete or disable any API keys associated with this identity
                - After deletion, keys previously linked to this identity will function independently
                - Rate limits that were shared across keys via this identity will no longer be shared
                - The externalId can be reused immediately after deletion
                Use this endpoint for compliance with data deletion requirements, cleaning up test data, or when an entity (user, organization) is permanently removed from your system.
            operationId: v2.identities.deleteIdentity
            requestBody:
                content:
                    application/json:
                        examples:
                            byExternalId:
                                description: Deleting using your system's identifier
                                summary: Delete by external ID
                                value:
                                    externalId: user_abc123
                        schema:
                            $ref: '#/components/schemas/V2IdentitiesDeleteIdentityRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                success:
                                    summary: Successful deletion
                                    value:
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2IdentitiesDeleteIdentityResponseBody'
                    description: OK
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Error
            security:
                - rootKey: []
            summary: Delete an existing identity
            tags:
                - identities
            x-speakeasy-name-override: deleteIdentity
    /v2/identities.getIdentity:
        post:
            description: |-
                Retrieves detailed information about a specific identity by its external ID.
                Identities in Unkey represent entities in your system (users, organizations, etc.) that can be associated with multiple API keys. This endpoint provides access to:
                - Identity metadata that was stored during creation
                - Rate limiting configurations that apply across all keys for this identity
                This endpoint is useful for:
                - Checking if an identity exists
                - Retrieving metadata associated with an identity
                - Viewing rate limit configurations
                You must provide the externalId parameter to identify which identity to retrieve.
            operationId: identities.getIdentity
            requestBody:
                content:
                    application/json:
                        examples:
                            byExternalId:
                                summary: Retrieve by external ID
                                value:
                                    externalId: user_abc123
                        schema:
                            $ref: '#/components/schemas/V2IdentitiesGetIdentityRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                standard:
                                    summary: Identity with metadata and rate limits
                                    value:
                                        data:
                                            externalId: user_abc123
                                            id: id_1234567890abcdef
                                            meta:
                                                companyId: company_xyz
                                                email: alice@example.com
                                                name: Alice Smith
                                                plan: premium
                                            ratelimits:
                                                - duration: 60000
                                                  limit: 1000
                                                  name: api_requests
                                                - duration: 3600000
                                                  limit: 100
                                                  name: heavy_operations
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2IdentitiesGetIdentityResponseBody'
                    description: Successfully retrieved the identity information
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden - Insufficient permissions to access this identity
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found - The specified identity doesn't exist
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Retrieve identity information
            tags:
                - identities
            x-speakeasy-name-override: getIdentity
    /v2/identities.listIdentities:
        post:
            description: |-
                Retrieves a paginated list of identities in your workspace. Identities represent entities in your system (users, organizations, etc.) that can be associated with multiple API keys for resource sharing.
                This endpoint allows you to:
                - Browse all identities in your workspace
                - Search for specific identities by environment
                - View rate limits configured for each identity
                - Implement identity management interfaces
                Results are paginated if there are more identities than the specified limit. Use the returned cursor to fetch subsequent pages.
            operationId: identities.listIdentities
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Basic identity listing
                                value:
                                    limit: 50
                            withPagination:
                                summary: Fetch next page with cursor
                                value:
                                    cursor: cursor_eyJrZXkiOiJrZXlfMTIzNCJ9
                                    limit: 50
                        schema:
                            $ref: '#/components/schemas/V2IdentitiesListIdentitiesRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                emptyList:
                                    summary: Empty identity list
                                    value:
                                        data:
                                            identities: []
                                            total: 0
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                                standard:
                                    summary: Identity listing with pagination
                                    value:
                                        data:
                                            cursor: cursor_eyJsYXN0SWQiOiJpZF8wMlpZUjNROU5QOEpNNFg4SFdTS1BXNDNKRiJ9
                                            identities:
                                                - externalId: user_abc123
                                                  id: id_01H9TQP8NP8JN3X8HWSKPW43JE
                                                  ratelimits:
                                                    - duration: 60000
                                                      limit: 1000
                                                      name: api_requests
                                                    - duration: 3600000
                                                      limit: 100
                                                      name: heavy_operations
                                                - externalId: user_def456
                                                  id: id_02ZYR3Q9NP8JM4X8HWSKPW43JF
                                                  ratelimits:
                                                    - duration: 60000
                                                      limit: 500
                                                      name: api_requests
                                            total: 247
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2IdentitiesListIdentitiesResponseBody'
                    description: Successfully retrieved the list of identities
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request - Invalid parameters
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized - Missing or invalid authentication
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden - Insufficient permissions
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: List identities in your workspace
            tags:
                - identities
            x-speakeasy-name-override: listIdentities
            x-speakeasy-pagination:
                inputs:
                    - in: parameters
                      name: cursor
                      type: cursor
                outputs:
                    nextCursor: $.data.cursor
                type: cursor
    /v2/identities.updateIdentity:
        post:
            description: |-
                Updates an existing identity's metadata and rate limits with support for partial updates. You can modify the metadata to reflect changes in user status, subscription plans, or other entity properties, and adjust rate limits to match new usage tiers or requirements.
                This endpoint supports flexible identification using either the Unkey identity ID or your external ID, making it easy to integrate with existing user management systems. Fields not included in the request remain unchanged, allowing for targeted updates without affecting other identity properties.
                Changes to rate limits take effect immediately for new API key verifications, though existing sessions may retain old limits briefly due to caching. When updating metadata, consider that this information is returned during key verification, so avoid storing sensitive data that shouldn't be exposed to client applications.
                Common use cases include updating user plan information after subscription changes, adjusting rate limits for different service tiers, and maintaining current contact or organizational information associated with the identity.
            operationId: v2.identities.updateIdentity
            requestBody:
                content:
                    application/json:
                        examples:
                            updateMetadata:
                                summary: Update identity metadata only
                                value:
                                    externalId: user_123
                                    meta:
                                        email: alice.updated@example.com
                                        name: Alice Smith
                                        plan: enterprise
                        schema:
                            $ref: '#/components/schemas/V2IdentitiesUpdateIdentityRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2IdentitiesUpdateIdentityResponseBody'
                    description: OK
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Update an existing identity
            tags:
                - identities
            x-speakeasy-name-override: updateIdentity
    /v2/keys.addPermissions:
        post:
            description: |-
                Adds one or more permissions to an existing API key without affecting existing permissions or roles. This is an additive operation that supplements the key's current permission set.
                Use this endpoint when you need to grant additional access rights to a key, such as upgrading user privileges, enabling new features, or implementing progressive permission models.
                Only direct permissions are affected - permissions granted through roles remain unchanged. Changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
            operationId: addPermissions
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                description: When you know the exact permission IDs, referencing them directly is the most precise approach. Permission IDs are guaranteed to be unique.
                                summary: Add permissions using IDs
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                        - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                            completeBilling:
                                description: Creating a structured set of permissions for a complete subsystem like billing
                                summary: Complete billing system permissions
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - create: true
                                          name: billing.invoices.create
                                        - create: true
                                          name: billing.invoices.view
                                        - create: true
                                          name: billing.invoices.update
                                        - create: true
                                          name: billing.payments.process
                                        - create: true
                                          name: billing.payments.refund
                                        - create: true
                                          name: billing.settings.view
                            hierarchical:
                                description: Permissions can use hierarchical naming with dots as separators. During verification, a request for 'billing.invoices.*' will match both 'billing.invoices.create' and 'billing.invoices.view'.
                                summary: Using hierarchical permission naming
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - create: true
                                          name: billing.invoices.create
                                        - create: true
                                          name: billing.invoices.view
                                        - create: true
                                          name: billing.payments.process
                            mixed:
                                description: You can combine ID references, name references, and creation in a single request. If both id and name are provided for any permission, the id takes precedence.
                                summary: Mix ID and name references
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                        - name: documents.publish
                                        - create: true
                                          name: analytics.view
                            withCreation:
                                description: Setting create=true dynamically creates permissions if they don't exist yet. This requires the `rbac.*.create_permission` permission on your root key.
                                summary: Add and create new permissions
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - create: true
                                          name: reports.export
                                        - create: true
                                          name: reports.schedule
                            withNames:
                                summary: Add permissions using names
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - name: documents.write
                                        - name: documents.delete
                        schema:
                            $ref: '#/components/schemas/V2KeysAddPermissionsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                empty:
                                    summary: Key with no permissions
                                    value:
                                        data: []
                                        meta:
                                            requestId: req_8sTu2vWxYzAbCdEfGhIjKl
                                hierarchical:
                                    summary: Key with hierarchical permissions
                                    value:
                                        data:
                                            - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                              name: billing.invoices.create
                                            - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                                              name: billing.invoices.view
                                            - id: perm_3qRsTu2vWxYzAbCdEfGhIj
                                              name: billing.payments.process
                                            - id: perm_4bVcWdXeYfZgHiJkLmNoPq
                                              name: billing.settings.read
                                            - id: perm_5sTu2vWxYzAbCdEfGhIjKl
                                              name: billing.settings.write
                                        meta:
                                            requestId: req_7zF4mNyP9BsRj2aQwDxVkT
                                standard:
                                    description: After adding new permissions, the response includes the full list of all permissions now assigned to the key, sorted alphabetically by name.
                                    summary: Complete list of permissions
                                    value:
                                        data:
                                            - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                              name: documents.write
                                            - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                                              name: documents.delete
                                            - id: perm_3qRsTu2vWxYzAbCdEfGhIj
                                              name: documents.read
                                            - id: perm_4bVcWdXeYfZgHiJkLmNoPq
                                              name: reports.export
                                            - id: perm_5sTu2vWxYzAbCdEfGhIjKl
                                              name: reports.schedule
                                        meta:
                                            requestId: req_2cGKbMxRyIzhCxo1Idjz8q
                            schema:
                                $ref: '#/components/schemas/V2KeysAddPermissionsResponseBody'
                    description: Permissions successfully added to the key
                "400":
                    content:
                        application/json:
                            examples:
                                emptyPermissions:
                                    summary: Empty permissions array
                                    value:
                                        error:
                                            detail: At least one permission must be specified
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_6aBcDeFgHiJkLmNoPqRsT
                                invalidKeyId:
                                    summary: Invalid keyId format
                                    value:
                                        error:
                                            detail: keyId must start with 'key_'
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_5zAbCdEfGhIjKlMnOpQrSt
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request - Invalid keyId format, missing required fields, or malformed permission entries
                "401":
                    content:
                        application/json:
                            examples:
                                invalidRootKey:
                                    summary: Invalid root key provided
                                    value:
                                        error:
                                            detail: The root key provided is invalid or has been revoked.
                                            status: 401
                                            title: Unauthorized
                                            type: unauthorized
                                        meta:
                                            requestId: req_9tUv3wXyZaAbCdEfGhIjKl
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized - Missing or invalid authentication credentials
                "403":
                    content:
                        application/json:
                            examples:
                                missingCreatePermission:
                                    summary: Cannot create new permissions
                                    value:
                                        error:
                                            detail: Your root key requires the 'rbac.*.create_permission' permission to create new permissions
                                            status: 403
                                            title: Forbidden
                                            type: forbidden
                                        meta:
                                            requestId: req_1vWxYzAbCdEfGhIjKlMnOp
                                missingPermission:
                                    summary: Missing required permission
                                    value:
                                        error:
                                            detail: Your root key requires the 'rbac.*.add_permission_to_key' permission to perform this operation
                                            status: 403
                                            title: Forbidden
                                            type: forbidden
                                        meta:
                                            requestId: req_0uVwX4yZaAbCdEfGhIjKl
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden - Insufficient permissions (requires `rbac.*.add_permission_to_key` and potentially `rbac.*.create_permission`)
                "404":
                    content:
                        application/json:
                            examples:
                                keyNotFound:
                                    summary: Key not found
                                    value:
                                        error:
                                            detail: Key key_2cGKbMxRyIzhCxo1Idjz8q not found
                                            status: 404
                                            title: Not Found
                                            type: not_found
                                        meta:
                                            requestId: req_2wXyZaAbCdEfGhIjKlMnOp
                                permissionNotFound:
                                    summary: Permission not found
                                    value:
                                        error:
                                            detail: Permission perm_1n9McEIBSqy44Qy7hzWyM5 not found
                                            status: 404
                                            title: Not Found
                                            type: not_found
                                        meta:
                                            requestId: req_3xYzAbCdEfGhIjKlMnOpQr
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found - Key not found or specified permission IDs don't exist
                "500":
                    content:
                        application/json:
                            examples:
                                cachingError:
                                    summary: Cache invalidation error
                                    value:
                                        error:
                                            detail: The permissions were successfully added but there was an error invalidating cached keys. Some systems may temporarily see stale data.
                                            status: 500
                                            title: Internal Server Error
                                            type: internal_server_error
                                        meta:
                                            requestId: req_5zAbCdEfGhIjKlMnOpQrSt
                                databaseError:
                                    summary: Database error
                                    value:
                                        error:
                                            detail: An unexpected error occurred while processing your request. Please try again later.
                                            status: 500
                                            title: Internal Server Error
                                            type: internal_server_error
                                        meta:
                                            requestId: req_4yZaAbCdEfGhIjKlMnOpQrS
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error - An unexpected error occurred while processing the request
            security:
                - rootKey: []
            summary: Add permissions to an API key
            tags:
                - keys
            x-speakeasy-name-override: addPermissions
    /v2/keys.addRoles:
        post:
            description: |-
                Adds one or more roles to an existing API key without affecting existing roles or permissions. This is an additive operation that supplements the key's current role assignments.
                Use this endpoint when you need to grant additional role-based access to a key, such as promoting user privileges or enabling new feature sets through role inheritance.
                Role assignments take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
            operationId: addRoles
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                description: Adding roles using their IDs is the most precise method, ensuring you're adding exactly the intended roles regardless of name changes.
                                summary: Adding roles by ID
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - id: role_1n9McEIBSqy44Qy7hzWyM5
                                        - id: role_2a8NdFJCTrz55Ry8Jdkz9r
                            mixed:
                                description: You can mix both ID and name references in a single request, using whichever is more convenient for each role.
                                summary: Adding roles by mixed identifiers
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - id: role_1n9McEIBSqy44Qy7hzWyM5
                                        - name: billing_manager
                            withNames:
                                description: Adding roles by name is more human-readable and convenient when working with well-known role names in your system.
                                summary: Adding roles by name
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - name: admin
                                        - name: billing_manager
                        schema:
                            $ref: '#/components/schemas/V2KeysAddRolesRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                empty:
                                    summary: No roles assigned
                                    value:
                                        data: []
                                        meta:
                                            requestId: req_1234567890abcdef
                                standard:
                                    summary: Complete list of roles
                                    value:
                                        data:
                                            - id: role_1n9McEIBSqy44Qy7hzWyM5
                                              name: admin
                                            - id: role_2a8NdFJCTrz55Ry8Jdkz9r
                                              name: billing_manager
                                            - id: role_3b9OeGKDUsy66Sz9Kelz0s
                                              name: developer
                                        meta:
                                            requestId: req_1234567890abcdef
                            schema:
                                $ref: '#/components/schemas/V2KeysAddRolesResponseBody'
                    description: Roles successfully added to the key
                "400":
                    content:
                        application/json:
                            examples:
                                invalidPrefix:
                                    summary: Invalid prefix format
                                    value:
                                        error:
                                            detail: Prefix must contain only alphanumeric characters, underscores, and hyphens
                                            errors:
                                                - location: body.prefix
                                                  message: Prefix must contain only alphanumeric characters, underscores, and hyphens
                                            status: 400
                                            title: Bad Request
                                            type: https://unkey.dev/errors/bad-request
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request - Invalid parameters or configuration
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found - Key doesn't exist or was deleted
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Add roles to an API key
            tags:
                - keys
            x-speakeasy-name-override: addRoles
    /v2/keys.createKey:
        post:
            description: |-
                Creates a new API key with configurable security properties, usage limits, and metadata. This endpoint generates a cryptographically secure key that you can distribute to your users for authenticating with your API.
                The key is only returned once in the response - Unkey stores only a secure hash of the key, not the key itself. You must provide this key directly to your end user; it cannot be retrieved later (unless created with `recoverable: true`, which is less secure).
                Keys are associated with a specific API (via `apiId`), which helps isolate environments (dev/staging/prod) and prevents keys from being used across different services. Keys can be further configured with:
                - Optional prefixes for visual identification
                - Expiration dates for temporary access
                - Usage limits (credits) for consumption-based APIs
                - Rate limits for abuse prevention
                - Permissions and roles for granular access control
                - Metadata for storing context with the key
                Best practices include using environment-specific API IDs, meaningful prefixes, appropriate byte length for security needs, and avoiding storing keys in your databases.
            operationId: createKey
            requestBody:
                content:
                    application/json:
                        examples:
                            simple:
                                summary: Basic key creation
                                value:
                                    apiId: api_1234567890abcdef
                                    prefix: prod
                            withLimits:
                                summary: Key with usage limits
                                value:
                                    apiId: api_1234567890abcdef
                                    credits:
                                        refill:
                                            amount: 1000
                                            interval: monthly
                                            refillDay: 1
                                        remaining: 1000
                                    expires: 1735689600000
                                    externalId: user_12345
                                    prefix: prod
                                    ratelimits:
                                        - duration: 60000
                                          limit: 100
                                          name: requests
                                        - duration: 3600000
                                          limit: 10
                                          name: heavy_operations
                            withMeta:
                                summary: Key with user-specific metadata
                                value:
                                    apiId: api_1234567890abcdef
                                    externalId: user_12345
                                    meta:
                                        features:
                                            analytics: true
                                            exports: true
                                        plan: premium
                                        teamId: team_abc123
                                    name: User API Key
                                    prefix: prod
                            withPermissions:
                                summary: Key with access control
                                value:
                                    apiId: api_1234567890abcdef
                                    externalId: user_12345
                                    permissions:
                                        - documents.read
                                        - documents.write
                                        - profile.view
                                    prefix: prod
                                    roles:
                                        - editor
                        schema:
                            $ref: '#/components/schemas/V2KeysCreateKeyRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                standard:
                                    summary: Successfully created key
                                    value:
                                        data:
                                            key: prod_f4cc2d765275c206b7d76ff0e92e583067c4e33603fb4055d7ba3031cd7ce36a
                                            keyId: key_01H9TQP8NP8JN3X8HWSKPW43JE
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/V2KeysCreateKeyResponseBody'
                    description: 'Successfully created a new API key. The response includes both the keyId (for reference in your system) and the full key string. IMPORTANT: This is the only time the complete key is available - it cannot be retrieved later. You must securely provide this key to your end user immediately.'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Create a new API key with customizable security features
            tags:
                - keys
            x-speakeasy-name-override: createKey
    /v2/keys.deleteKey:
        post:
            description: |-
                Permanently removes an API key from the system. Once deleted, the key becomes invalid immediately and cannot be used for any further authentication attempts.
                This operation is irreversible and will:
                - Immediately invalidate the key across all regions
                - Remove all associated permissions and roles
                - Clear any stored metadata
                - Stop any ongoing rate limit tracking
                - Remove the key from analytics and usage tracking
                Use this endpoint when deactivating user accounts, cleaning up test keys, or implementing key rotation policies. The key deletion is logged in the audit trail for security compliance.
            operationId: deleteKey
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2KeysDeleteKeyRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2KeysDeleteKeyResponseBody'
                    description: Successfully deleted key. The key will immediately fail verification in the current region, but it may take up to 30 seconds for deletion to propagate to all regions due to eventual consistency. After deletion, the key will no longer appear in key listings, and verification attempts will return `code=NOT_FOUND`. Soft-deleted keys (`permanent=false`) remain in the database but are marked as deleted, while permanently deleted keys are completely removed.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Delete an API key permanently
            tags:
                - keys
            x-speakeasy-name-override: deleteKey
    /v2/keys.getKey:
        post:
            description: |-
                Retrieves comprehensive information about an API key including its configuration, permissions, roles, metadata, and usage limits. This endpoint is essential for key management, debugging, and building administrative interfaces.
                The response includes all key properties such as expiration dates, credit balances, rate limits, assigned permissions and roles, and any metadata stored with the key. This information helps administrators understand a key's current state and troubleshoot access issues.
                Note: The actual key value is never returned for security reasons, only the key's metadata and configuration.
            operationId: getKey
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2KeysGetKeyRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2KeysGetKeyResponseBody'
                    description: Successfully retrieved key
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Retrieve detailed information about a specific API key
            tags:
                - keys
            x-speakeasy-name-override: getKey
    /v2/keys.removePermissions:
        post:
            description: |-
                Removes one or more permissions from an existing API key. This endpoint is used to selectively revoke access rights from a key without deleting it or affecting other permissions.
                Key features:
                - Selective removal - revoke specific permissions while leaving others intact
                - Direct permissions only - doesn't affect permissions granted through roles
                - Idempotent operation - removing permissions multiple times has no additional effect
                Use this endpoint when downgrading user access privileges, removing temporary elevated permissions, implementing granular permission adjustments, or revoking access to specific resources.
            operationId: removePermissions
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                description: Using permission IDs is the most precise way to remove permissions, guaranteeing you're removing exactly what you intend regardless of name changes.
                                summary: Remove permissions using IDs
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                        - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                            mixed:
                                description: You can combine ID-based and name-based references in a single request. This is useful when you have exact IDs for some permissions but only names for others.
                                summary: Mix of ID and name references
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                        - name: reports.export
                            removeAccessGroup:
                                description: A common pattern is removing all permissions related to a specific resource (e.g., 'documents') when revoking access to that resource type.
                                summary: Remove all permissions for a resource group
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - name: documents.read
                                        - name: documents.write
                                        - name: documents.delete
                                        - name: documents.share
                            removeAll:
                                description: Setting an empty permissions array removes all direct permissions from the key. This doesn't remove permissions granted through roles. The key remains valid but will have no direct permissions.
                                summary: Remove all permissions from key
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions: []
                            withNames:
                                description: Using permission names is more human-readable but requires exact name matches, including full path and correct case sensitivity.
                                summary: Remove permissions using names
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - name: documents.write
                                        - name: documents.delete
                        schema:
                            $ref: '#/components/schemas/V2KeysRemovePermissionsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                standard:
                                    description: The response body contains only metadata and an empty data object. This minimalist response structure is by design - if you receive a 200 status code, all requested permissions have been successfully removed (or weren't present to begin with).
                                    summary: Successful removal
                                    value:
                                        data: {}
                                        meta:
                                            requestId: req_2cGKbMxRyIzhCxo1Idjz8q
                            schema:
                                $ref: '#/components/schemas/V2KeysRemovePermissionsResponseBody'
                    description: Permissions successfully removed from the key. All requested permissions have been removed if they were present. Any permissions that weren't assigned to the key were simply ignored without causing an error.
                "400":
                    content:
                        application/json:
                            examples:
                                emptyPermissions:
                                    summary: Empty permissions array
                                    value:
                                        error:
                                            detail: At least one permission must be specified
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_6aBcDeFgHiJkLmNoPqRsT
                                invalidKeyId:
                                    summary: Invalid keyId format
                                    value:
                                        error:
                                            detail: keyId must start with 'key_'
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_5zAbCdEfGhIjKlMnOpQrSt
                                missingIdentifier:
                                    summary: Permission missing both id and name
                                    value:
                                        error:
                                            detail: Each permission must include either id or name
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_7bCdEfGhIjKlMnOpQrStUv
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request - Invalid keyId format, missing required fields, or malformed permission entries
                "401":
                    content:
                        application/json:
                            examples:
                                invalidRootKey:
                                    summary: Invalid root key provided
                                    value:
                                        error:
                                            detail: The root key provided is invalid or has been revoked.
                                            status: 401
                                            title: Unauthorized
                                            type: unauthorized
                                        meta:
                                            requestId: req_9tUv3wXyZaAbCdEfGhIjKl
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized - Missing or invalid authentication credentials
                "403":
                    content:
                        application/json:
                            examples:
                                missingPermission:
                                    summary: Missing required permission
                                    value:
                                        error:
                                            detail: Your root key requires the 'rbac.*.remove_permission_from_key' permission to perform this operation
                                            status: 403
                                            title: Forbidden
                                            type: forbidden
                                        meta:
                                            requestId: req_0uVwX4yZaAbCdEfGhIjKl
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden - Insufficient permissions (requires `rbac.*.remove_permission_from_key`)
                "404":
                    content:
                        application/json:
                            examples:
                                keyNotFound:
                                    summary: Key not found
                                    value:
                                        error:
                                            detail: Key key_2cGKbMxRyIzhCxo1Idjz8q not found
                                            status: 404
                                            title: Not Found
                                            type: not_found
                                        meta:
                                            requestId: req_2wXyZaAbCdEfGhIjKlMnOp
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found - Key not found
                "500":
                    content:
                        application/json:
                            examples:
                                cachingError:
                                    summary: Cache invalidation error
                                    value:
                                        error:
                                            detail: The permissions were successfully removed but there was an error invalidating cached keys. Some systems may temporarily see stale data.
                                            status: 500
                                            title: Internal Server Error
                                            type: internal_server_error
                                        meta:
                                            requestId: req_5zAbCdEfGhIjKlMnOpQrSt
                                databaseError:
                                    summary: Database error
                                    value:
                                        error:
                                            detail: An unexpected error occurred while processing your request. Please try again later.
                                            status: 500
                                            title: Internal Server Error
                                            type: internal_server_error
                                        meta:
                                            requestId: req_4yZaAbCdEfGhIjKlMnOpQrS
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error - An unexpected error occurred while processing the request
            security:
                - rootKey: []
            summary: Remove permissions from an API key
            tags:
                - keys
            x-speakeasy-name-override: removePermissions
    /v2/keys.removeRoles:
        post:
            description: |-
                Removes one or more roles from an existing API key. This endpoint is used to selectively revoke role-based access from a key without affecting direct permissions or other roles.
                Use this endpoint when downgrading user privileges, removing temporary role assignments, or implementing granular role management.
                Role changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
            operationId: removeRoles
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                description: Removing roles by their exact IDs ensures precision in revoking the exact intended roles, regardless of name changes.
                                summary: Removing roles by ID
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - id: role_1n9McEIBSqy44Qy7hzWyM5
                                        - id: role_2a8NdFJCTrz55Ry8Jdkz9r
                            mixed:
                                description: You can combine both ID and name references in a single request to remove multiple roles using whichever reference method is most convenient for each role.
                                summary: Removing roles by mixed identifiers
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - id: role_1n9McEIBSqy44Qy7hzWyM5
                                        - name: billing_manager
                            withNames:
                                description: Removing roles by name is more human-readable but requires exact name matches, including correct capitalization.
                                summary: Removing roles by name
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - name: admin
                                        - name: billing_manager
                        schema:
                            $ref: '#/components/schemas/V2KeysRemoveRolesRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                empty:
                                    summary: No roles remaining
                                    value:
                                        data: []
                                        meta:
                                            requestId: req_1234567890abcdef
                                standard:
                                    summary: Remaining roles after removal
                                    value:
                                        data:
                                            - id: role_3b9OeGKDUsy66Sz9Kelz0s
                                              name: developer
                                        meta:
                                            requestId: req_1234567890abcdef
                            schema:
                                $ref: '#/components/schemas/V2KeysRemoveRolesResponseBody'
                    description: Roles successfully removed from the key. The response shows all remaining roles still assigned to the key after the removal operation.
                "400":
                    content:
                        application/json:
                            examples:
                                invalidKeyId:
                                    summary: Invalid key ID format
                                    value:
                                        error:
                                            detail: keyId must be a valid key ID starting with 'key_'
                                            errors:
                                                - location: body.keyId
                                                  message: keyId must be a valid key ID starting with 'key_'
                                            status: 400
                                            title: Bad Request
                                            type: https://unkey.dev/errors/bad-request
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQZ
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request - Invalid parameters or configuration
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found - The specified identity doesn't exist. This error occurs when no identity matches the provided externalId. This might happen if the identity was already deleted, never existed, or if there's a typo in the identifier. Verify the identity exists before attempting deletion.
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Remove roles from an API key
            tags:
                - keys
            x-speakeasy-name-override: removeRoles
    /v2/keys.setPermissions:
        post:
            description: |-
                Sets the permissions for an existing API key by replacing all existing direct permissions with the provided set. This is a complete replacement operation - permissions not specified in the request will be removed.
                Use this endpoint when you want to:
                - Synchronize API key permissions with an external system
                - Reset a key's permissions to a known state
                - Apply a standardized permission template to a key
                - Remove all permissions from a key (by providing an empty array)
                - Fix over-permissioned keys by applying the precise set needed
                Key differences from other endpoints:
                - Unlike addPermissions, this replaces all permissions instead of just adding
                - Unlike removePermissions, this sets the complete state rather than removing specific permissions
                - The advantage is atomic replacement in a single operation versus multiple incremental changes
                Only direct permissions are affected - permissions granted through roles remain unchanged. Changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires (typically under 30 seconds).
            operationId: setPermissions
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                description: Using permission IDs is the most precise approach for setting permissions, especially in automation scripts where exact references are important.
                                summary: Set permissions using IDs
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                        - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                            mixed:
                                description: You can combine different reference methods in a single request - some permissions by ID, others by name, and even create new ones on the fly.
                                summary: Mix of ID and name references
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                        - slug: documents.delete
                                        - create: true
                                          slug: reports.view
                            removeAll:
                                description: This example won't work as expected! The permissions array must contain at least one permission to remove. To remove all permissions, use the setPermissions endpoint with an empty permissions array instead.
                                summary: Remove all permissions from key
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions: []
                            withCreation:
                                description: This example demonstrates setting permissions while simultaneously creating new ones that don't exist yet. Requires the `rbac.*.create_permission` permission on your root key.
                                summary: Set with permission creation
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - slug: documents.write
                                        - create: true
                                          slug: reports.export
                                        - create: true
                                          name: reports.schedule
                            withNames:
                                description: Using permission slugs is more readable and maintainable. Slugs must be unique within your workspace.
                                summary: Add permissions using slugs
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        - slug: documents.write
                                        - slug: documents.delete
                        schema:
                            $ref: '#/components/schemas/V2KeysSetPermissionsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                empty:
                                    summary: All permissions removed
                                    value:
                                        data: []
                                        meta:
                                            requestId: req_3qRsTu2vWxYzAbCdEfGhIj
                                standard:
                                    summary: Complete list of permissions
                                    value:
                                        data:
                                            - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                              name: documents.write
                                            - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                                              name: documents.delete
                                            - id: perm_3qRsTu2vWxYzAbCdEfGhIj
                                              name: reports.view
                                        meta:
                                            requestId: req_2cGKbMxRyIzhCxo1Idjz8q
                            schema:
                                $ref: '#/components/schemas/V2KeysSetPermissionsResponseBody'
                    description: Permissions successfully set on the key. The previous direct permission set has been completely replaced with the new set specified in the request.
                "400":
                    content:
                        application/json:
                            examples:
                                emptyPermissions:
                                    summary: Empty permissions array
                                    value:
                                        error:
                                            detail: At least one permission must be specified
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_6aBcDeFgHiJkLmNoPqRsT
                                invalidKeyId:
                                    summary: Invalid keyId format
                                    value:
                                        error:
                                            detail: keyId must start with 'key_'
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_5zAbCdEfGhIjKlMnOpQrSt
                                missingIdentifier:
                                    summary: Permission missing both id and name
                                    value:
                                        error:
                                            detail: Each permission must include either id or name
                                            status: 400
                                            title: Bad Request
                                            type: bad_request
                                        meta:
                                            requestId: req_7bCdEfGhIjKlMnOpQrStUv
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request - Invalid keyId format, missing required fields, or malformed permission entries
                "401":
                    content:
                        application/json:
                            examples:
                                invalidRootKey:
                                    summary: Invalid root key provided
                                    value:
                                        error:
                                            detail: The root key provided is invalid or has been revoked.
                                            status: 401
                                            title: Unauthorized
                                            type: unauthorized
                                        meta:
                                            requestId: req_9tUv3wXyZaAbCdEfGhIjKl
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized - Missing or invalid authentication credentials
                "403":
                    content:
                        application/json:
                            examples:
                                missingAddPermission:
                                    summary: Missing add permission
                                    value:
                                        error:
                                            detail: Your root key requires the 'rbac.*.add_permission_to_key' permission to perform this operation
                                            status: 403
                                            title: Forbidden
                                            type: forbidden
                                        meta:
                                            requestId: req_0uVwX4yZaAbCdEfGhIjKl
                                missingCreatePermission:
                                    summary: Cannot create new permissions
                                    value:
                                        error:
                                            detail: Your root key requires the 'rbac.*.create_permission' permission to create new permissions
                                            status: 403
                                            title: Forbidden
                                            type: forbidden
                                        meta:
                                            requestId: req_4bVcWdXeYfZgHiJkLmNoPq
                                missingRemovePermission:
                                    summary: Missing remove permission
                                    value:
                                        error:
                                            detail: Your root key requires the 'rbac.*.remove_permission_from_key' permission to perform this operation
                                            status: 403
                                            title: Forbidden
                                            type: forbidden
                                        meta:
                                            requestId: req_1vWxYzAbCdEfGhIjKlMnOp
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden - Insufficient permissions (requires `rbac.*.add_permission_to_key` and `rbac.*.remove_permission_from_key` and potentially `rbac.*.create_permission`)
                "404":
                    content:
                        application/json:
                            examples:
                                keyNotFound:
                                    summary: Key not found
                                    value:
                                        error:
                                            detail: Key key_2cGKbMxRyIzhCxo1Idjz8q not found
                                            status: 404
                                            title: Not Found
                                            type: not_found
                                        meta:
                                            requestId: req_2wXyZaAbCdEfGhIjKlMnOp
                                permissionNotFound:
                                    summary: Permission not found
                                    value:
                                        error:
                                            detail: Permission perm_1n9McEIBSqy44Qy7hzWyM5 not found and not allowed to create
                                            status: 404
                                            title: Not Found
                                            type: not_found
                                        meta:
                                            requestId: req_3xYzAbCdEfGhIjKlMnOpQr
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found - Key not found or specified permission IDs don't exist
                "500":
                    content:
                        application/json:
                            examples:
                                cachingError:
                                    summary: Cache invalidation error
                                    value:
                                        error:
                                            detail: The permissions were successfully set but there was an error invalidating cached keys. Some systems may temporarily see stale data.
                                            status: 500
                                            title: Internal Server Error
                                            type: internal_server_error
                                        meta:
                                            requestId: req_5zAbCdEfGhIjKlMnOpQrSt
                                databaseError:
                                    summary: Database error
                                    value:
                                        error:
                                            detail: An unexpected error occurred while processing your request. Please try again later.
                                            status: 500
                                            title: Internal Server Error
                                            type: internal_server_error
                                        meta:
                                            requestId: req_4yZaAbCdEfGhIjKlMnOpQrS
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error - An unexpected error occurred while processing the request
            security:
                - rootKey: []
            summary: Set (replace) all permissions on an API key
            tags:
                - keys
            x-speakeasy-name-override: setPermissions
    /v2/keys.setRoles:
        post:
            description: |-
                Sets the roles for an existing API key by replacing all existing role assignments with the provided set. This is a complete replacement operation - roles not specified in the request will be removed.
                Use this endpoint when you want to synchronize API key roles with an external system, reset a key's roles to a known state, or apply a standardized role template to a key.
                Role assignments take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
            operationId: setRoles
            requestBody:
                content:
                    application/json:
                        examples:
                            removeAll:
                                description: By providing an empty roles array, you can remove all direct role assignments from a key. This doesn't affect the key's validity, but removes all role-based permissions.
                                summary: Removing all roles
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles: []
                            standard:
                                description: This example shows setting a mix of roles by both ID and name. After this operation, the key will have exactly these two roles - any other roles previously assigned will be removed.
                                summary: Setting multiple roles
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - id: role_1n9McEIBSqy44Qy7hzWyM5
                                        - name: developer
                            standardTemplate:
                                description: A common pattern is applying a standard set of roles to maintain consistency across keys for users with similar access needs.
                                summary: Applying a standard role template
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        - name: basic_user
                                        - name: analytics_viewer
                                        - name: self_service
                        schema:
                            $ref: '#/components/schemas/V2KeysSetRolesRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                empty:
                                    summary: All roles removed
                                    value:
                                        data: []
                                        meta:
                                            requestId: req_1234567890abcdef
                                standard:
                                    summary: Roles after update
                                    value:
                                        data:
                                            - id: role_1n9McEIBSqy44Qy7hzWyM5
                                              name: admin
                                            - id: role_3b9OeGKDUsy66Sz9Kelz0s
                                              name: developer
                                        meta:
                                            requestId: req_1234567890abcdef
                            schema:
                                $ref: '#/components/schemas/V2KeysSetRolesResponseBody'
                    description: Roles successfully set for the key
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Set (replace) all roles on an API key
            tags:
                - keys
            x-speakeasy-name-override: setRoles
    /v2/keys.updateCredits:
        post:
            description: |-
                Updates the credit system configuration for an existing API key. Credits are used for usage-based billing and quota enforcement.
                This endpoint allows you to modify the remaining credit balance, refill settings, or completely change the credit configuration for a key.
                Use this endpoint for topping up user credits, changing subscription tiers, implementing promotional credits, or adjusting billing cycles.
                Credit changes take effect immediately for new verifications.
            operationId: updateCredits
            requestBody:
                content:
                    application/json:
                        examples:
                            decrementCredits:
                                description: To decrement credits to the existing balance, just specify the decrement operation and the amount to subtract.
                                summary: Decrement credits
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    operation: decrement
                                    value: 2500
                            incrementCredits:
                                description: To increment credits to the existing balance, just specify the increment operation and the amount to add.
                                summary: Increment credits
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    operation: increment
                                    value: 2500
                            setCredits:
                                description: To set credits, first get the current value using keys.getKey, then add the amount.
                                summary: Set credits
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    operation: set
                                    value: 2500
                            setUnlimited:
                                description: Setting remaining to null makes the key usable an unlimited number of times. This is useful for premium tiers, trusted partners, or internal applications where usage counting isn't needed. Any previous refill settings will be removed.
                                summary: Set unlimited usage
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    operation: set
                                    value: null
                        schema:
                            $ref: '#/components/schemas/V2KeysUpdateCreditsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                unlimited:
                                    summary: Set to unlimited usage
                                    value:
                                        data:
                                            refillSettings: null
                                            remaining: null
                                        meta:
                                            requestId: req_1234567890abcdef
                                withRefills:
                                    summary: Updated with refill settings preserved
                                    value:
                                        data:
                                            refillSettings:
                                                amount: 1000
                                                interval: monthly
                                                refillDay: 1
                                            remaining: 1000
                                        meta:
                                            requestId: req_1234567890abcdef
                                withoutRefills:
                                    summary: Updated with refills removed
                                    value:
                                        data:
                                            refillSettings: null
                                            remaining: 500
                                        meta:
                                            requestId: req_1234567890abcdef
                            schema:
                                $ref: '#/components/schemas/V2KeysUpdateCreditsResponseBody'
                    description: Remaining credits successfully updated
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request - Invalid or missing parameters. This error occurs when the request body is malformed, missing required fields, or contains invalid values. Verify that you've provided a valid externalId, and that the format of each field meets the requirements.
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Update credit configuration for an API key
            tags:
                - keys
            x-speakeasy-name-override: updateCredits
    /v2/keys.updateKey:
        post:
            description: |-
                Modifies the properties of an existing API key without changing the key string itself. This endpoint supports partial updates - you only need to include the fields you want to change.

                You can use this endpoint to:
                - Rename keys for better organization
                - Update metadata to reflect changes in user status, plan, or properties
                - Modify usage limits or rate limits
                - Enable or disable keys temporarily
                - Change key expiration dates
                - Add or update user identifiers

                To explicitly remove/disable a feature, set its field to null. Fields not included in the request remain unchanged. For managing permissions or roles, use the specialized endpoints (keys.addPermissions, keys.removePermissions, etc.) instead.

                Changes may take up to 30 seconds to propagate to all regions due to cache invalidation. For immediate effect in the current region, follow the update with a verification request.
            operationId: updateKey
            requestBody:
                content:
                    application/json:
                        examples:
                            changeExpiration:
                                summary: Change expiration date
                                value:
                                    expires: 1735689600000
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                            disableKey:
                                summary: Temporarily disable a key
                                value:
                                    enabled: false
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                            removeFeature:
                                summary: Remove a feature
                                value:
                                    expires: null
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    meta: null
                            updateLimits:
                                summary: Modify usage limits
                                value:
                                    credits:
                                        refill:
                                            amount: 5000
                                            interval: monthly
                                            refillDay: 1
                                        remaining: 5000
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    ratelimits:
                                        - duration: 60000
                                          limit: 200
                                          name: requests
                            updateMetadata:
                                summary: Update key metadata
                                value:
                                    keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                    meta:
                                        features:
                                            advancedAnalytics: true
                                            customReports: true
                                        plan: enterprise
                                        updatedAt: "2023-07-15T12:30:45Z"
                        schema:
                            $ref: '#/components/schemas/V2KeysUpdateKeyRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                success:
                                    summary: Successful update
                                    value:
                                        data: {}
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                            schema:
                                $ref: '#/components/schemas/V2KeysUpdateKeyResponseBody'
                    description: Key successfully updated. Changes may take up to 30 seconds to propagate to all regions due to cache invalidation. The response is empty by design - use keys.getKey to retrieve the current state if needed.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Update API key properties without changing the key itself
            tags:
                - keys
            x-speakeasy-name-override: updateKey
    /v2/keys.verifyKey:
        post:
            description: |-
                This is the core endpoint for authenticating and authorizing API key usage in your application. It checks if a key is valid, hasn't expired, has sufficient remaining credits, isn't rate limited, and has the required permissions.
                When a key is verified, several checks occur:
                - Key existence and format validation
                - Expiration check
                - Enabled/disabled status verification
                - Permission validation (if required)
                - Rate limit enforcement
                - Credit consumption (if configured)
                The response includes detailed information about the key's status, remaining resources, and metadata to help your application make authorization decisions.
            operationId: verifyKey
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2KeysVerifyKeyRequestBody'
                    examples: {}
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2KeysVerifyKeyResponseBody'
                    description: Key verification completed (check 'valid' field for success)
                "400":
                    content:
                        application/json:
                            examples:
                                permissionsQuerySyntaxError:
                                    summary: Invalid permissions query syntax
                                    value:
                                        error:
                                            detail: 'Syntax error in permission query: unexpected token ''AND'' at position 15. Expected permission name or opening parenthesis.'
                                            errors:
                                                - fix: Check your query syntax. AND/OR operators must be between permissions, not at the start or end
                                                  location: body.permissions
                                                  message: unexpected token 'AND' at position 15
                                            status: 400
                                            title: Bad Request
                                            type: https://unkey.com/docs/api-reference/errors-v2/user/bad_request/permissions_query_syntax_error
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Verify an API key's validity and permissions
            tags:
                - keys
            x-speakeasy-name-override: verifyKey
    /v2/liveness:
        get:
            description: |-
                Checks if the Unkey API service is functioning correctly and ready to handle requests. Returns a simple health status that load balancers, monitoring tools, and orchestration systems can use to verify service availability.

                This endpoint requires no authentication and has minimal processing overhead for fast health verification. The response indicates whether the service can process requests normally or if there are issues requiring attention. Monitor this endpoint to detect service degradation and implement automated failover or alerting when the service becomes unhealthy.
            operationId: liveness
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2LivenessResponseBody'
                    description: Service is healthy and ready to process requests. The response includes a simple 'OK' message indicating normal operation. Monitoring systems can use this as confirmation that the service is functioning properly.
                "412":
                    content:
                        application/json:
                            examples:
                                degraded:
                                    summary: Service in degraded state
                                    value:
                                        error:
                                            detail: Service is in a degraded state. Some functionality may be limited.
                                            status: 412
                                            title: Precondition Failed
                                            type: https://unkey.dev/errors/precondition-failed
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: ""
                "500":
                    content:
                        application/json:
                            examples:
                                unhealthy:
                                    summary: Service unhealthy
                                    value:
                                        error:
                                            detail: The service is currently experiencing issues and may not be fully operational.
                                            status: 500
                                            title: Internal Server Error
                                            type: https://unkey.dev/errors/internal-server-error
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Service is unhealthy and unable to process requests properly. This indicates a significant issue with the service that requires attention. Clients should refrain from making other API calls as they are likely to fail. Monitoring systems should trigger alerts when receiving this response.
            security: []
            summary: Check service health and availability
            tags:
                - liveness
            x-speakeasy-ignore: "true"
    /v2/permissions.createPermission:
        post:
            description: |-
                Creates a new permission in the workspace. Permissions are the fundamental building blocks of access control in Unkey's RBAC system, representing specific actions or capabilities that can be granted to API keys either directly or through roles.
                This endpoint allows you to:
                - Define new permissions with descriptive names and URL-safe slugs
                - Set up granular access control for your API keys
                - Build the foundation for role-based access control
                - Organize permissions with consistent naming patterns
                Best practices:
                - Use hierarchical naming (e.g., 'resource.action' or 'resource.subresource.action')
                - Choose descriptive but concise permission names
                - Use URL-safe slugs for easy reference in APIs
            operationId: createPermission
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Basic permission creation
                                value:
                                    description: Allows reading document resources
                                    name: documents.read
                                    slug: documents-read
                            complexPermission:
                                summary: Complex permission with detailed info
                                value:
                                    description: Grants full administrative access to delete user accounts. This is a high-privilege permission that should be used carefully.
                                    name: admin.users.delete
                                    slug: admin-users-delete
                            withoutDescription:
                                summary: Permission without description
                                value:
                                    name: files.upload
                                    slug: files-upload
                        schema:
                            $ref: '#/components/schemas/V2PermissionsCreatePermissionRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsCreatePermissionResponseBody'
                    description: Successfully created permission
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "409":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConflictErrorResponse'
                    description: Conflict - permission with that name already exists
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Create a new permission
            tags:
                - permissions
            x-speakeasy-name-override: CreatePermission
    /v2/permissions.createRole:
        post:
            description: |-
                Creates a new role in the workspace with optional permission assignments. Roles are collections of permissions that can be assigned to API keys, providing a convenient way to manage access control at scale.
                Roles enable you to group related permissions together for easier management, assign consistent permission sets to multiple API keys, and implement role-based access control patterns that simplify permission management as your system grows. When creating a role, you can optionally assign existing permissions to it immediately, and the role becomes available for assignment to API keys as soon as it's created.
                Use roles to establish standardized access patterns in your application, making it easier to maintain consistent security policies across many API keys while reducing the complexity of individual permission management.
            operationId: createRole
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Basic role creation
                                value:
                                    description: Can read and write content
                                    name: content.editor
                            withoutDescription:
                                summary: Role without description
                                value:
                                    name: api.reader
                        schema:
                            $ref: '#/components/schemas/V2PermissionsCreateRoleRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsCreateRoleResponseBody'
                    description: Successfully created role
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "409":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConflictErrorResponse'
                    description: Conflict - A role with this name already exists
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Create a new role with permissions
            tags:
                - permissions
            x-speakeasy-name-override: CreateRole
    /v2/permissions.deletePermission:
        post:
            description: |-
                Permanently removes a permission from the workspace. This endpoint is used when a permission is no longer needed or when cleaning up unused permissions.
                When a permission is deleted:
                - All direct assignments to API keys are removed
                - The permission is removed from any roles it was assigned to
                - The permission's name becomes available for reuse
                Important: This operation cannot be undone, and it immediately affects all API keys and roles that had this permission assigned. Consider carefully before deleting permissions that are actively in use.
            operationId: deletePermission
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Delete a permission
                                value:
                                    permissionId: perm_1234567890abcdef
                        schema:
                            $ref: '#/components/schemas/V2PermissionsDeletePermissionRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsDeletePermissionResponseBody'
                    description: Successfully deleted permission
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found - The specified permission does not exist
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Delete a permission
            tags:
                - permissions
            x-speakeasy-name-override: DeletePermission
    /v2/permissions.deleteRole:
        post:
            description: |-
                Permanently removes a role from the workspace. This endpoint is used when a role is no longer needed or needs to be replaced with a different role structure.
                When a role is deleted:
                - All keys that had this role assigned will lose the permissions granted by this role
                - The role will no longer appear in role listings
                - The role's name becomes available for reuse
                Important: This operation cannot be undone, and it immediately affects all API keys that had this role assigned. Consider carefully before deleting roles that are actively in use by many keys.
            operationId: deleteRole
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2PermissionsDeleteRoleRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsDeleteRoleResponseBody'
                    description: Successfully deleted role
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Delete a role
            tags:
                - permissions
            x-speakeasy-name-override: DeleteRole
    /v2/permissions.getPermission:
        post:
            description: |-
                Retrieves detailed information about a specific permission by its ID. This endpoint allows you to inspect a permission's properties, including its name, description, and workspace association.
                This is useful for:
                - Verifying a permission exists before assigning it
                - Retrieving permission details for display in administrative interfaces
                - Checking permission configuration before making updates
                - Building permission management tools
                Permissions are the fundamental building blocks of access control in Unkey's RBAC system, representing specific capabilities that can be granted to API keys either directly or through roles.
            operationId: getPermission
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2PermissionsGetPermissionRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsGetPermissionResponseBody'
                    description: Successfully retrieved permission
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Retrieve details about a specific permission
            tags:
                - permissions
            x-speakeasy-name-override: GetPermission
    /v2/permissions.getRole:
        post:
            description: |-
                Retrieves detailed information about a specific role by its ID, including all permissions assigned to the role. This endpoint allows you to inspect a role's properties and understand what permissions it grants.
                This is useful for:
                - Verifying a role exists before assigning it to API keys
                - Retrieving role details for display in administrative interfaces
                - Checking role configuration before making updates
                - Building role management tools
                - Understanding the complete permission set granted by a role
                Roles are collections of permissions that can be assigned to API keys, providing a convenient way to manage access control at scale in Unkey's RBAC system.
            operationId: getRole
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2PermissionsGetRoleRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsGetRoleResponseBody'
                    description: Successfully retrieved role
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Retrieve details about a specific role
            tags:
                - permissions
            x-speakeasy-name-override: GetRole
    /v2/permissions.listPermissions:
        post:
            description: |-
                Retrieves a paginated list of all permissions defined in the workspace. This endpoint is essential for permission management and RBAC administration.
                Permissions are the fundamental building blocks of access control in Unkey, representing specific actions or capabilities that can be granted to API keys either directly or through roles.
                This endpoint allows you to:
                - View all available permissions for assignment
                - Build permission management interfaces
                - Audit your RBAC configuration
                - Identify existing permissions before creating new ones
                Results are paginated and typically sorted alphabetically by permission name.
            operationId: listPermissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2PermissionsListPermissionsRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsListPermissionsResponseBody'
                    description: Successfully listed permissions
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: List all permissions in a workspace
            tags:
                - permissions
            x-speakeasy-name-override: ListPermissions
    /v2/permissions.listRoles:
        post:
            description: |-
                Retrieves a paginated list of all roles defined in the workspace, including their assigned permissions. This endpoint is essential for role-based access control (RBAC) administration.
                Roles are collections of permissions that can be assigned to API keys, providing a convenient way to manage access control at scale. This endpoint allows you to:
                - View all available roles for assignment
                - Inspect which permissions are granted by each role
                - Build role management interfaces
                - Audit your RBAC configuration
                Results are paginated and sorted alphabetically by role name. Each role includes its complete set of assigned permissions.
            operationId: listRoles
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/V2PermissionsListRolesRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2PermissionsListRolesResponseBody'
                    description: Successfully listed roles
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: List all roles in a workspace
            tags:
                - permissions
            x-speakeasy-name-override: ListRoles
    /v2/ratelimit.deleteOverride:
        post:
            description: |-
                Permanently removes a rate limit override from a namespace. Once deleted, the affected identifiers immediately revert to using the default rate limits for that namespace.
                Use this endpoint to remove temporary overrides that are no longer needed, reset entities back to standard rate limits, or clean up outdated rate limiting rules. The deletion operation is immediate and permanent - once an override is deleted, it cannot be recovered and must be recreated using the setOverride endpoint if needed again.
            operationId: ratelimit.deleteOverride
            requestBody:
                content:
                    application/json:
                        examples:
                            specificOverride:
                                summary: Delete specific identifier override
                                value:
                                    identifier: premium_user_123
                                    namespaceName: api.requests
                            wildcardPattern:
                                summary: Delete wildcard pattern override
                                value:
                                    identifier: premium_*
                                    namespaceId: ns_1234567890abcdef
                        schema:
                            $ref: '#/components/schemas/V2RatelimitDeleteOverrideRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2RatelimitDeleteOverrideResponseBody'
                    description: OK
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Delete a rate limit override
            tags:
                - ratelimit
            x-speakeasy-name-override: deleteOverride
    /v2/ratelimit.getOverride:
        post:
            description: |-
                Retrieves the details of a specific rate limit override by its identifier pattern. Returns the exact configuration including the identifier pattern, custom limit value, duration window, and namespace association.
                Use this endpoint to inspect override configurations before making modifications, audit your rate limiting policies, or debug rate limiting behavior. The identifier must match exactly as it was specified when creating the override, including any wildcard patterns.
                This endpoint is essential for understanding why certain identifiers receive different rate limits than the default. When troubleshooting rate limiting issues, this endpoint helps verify that overrides are configured correctly and matching the expected identifiers.
            operationId: ratelimit.getOverride
            requestBody:
                content:
                    application/json:
                        examples:
                            byNameAndId:
                                summary: Get specific override
                                value:
                                    identifier: premium_user_123
                                    namespaceName: api.requests
                            wildcardPattern:
                                summary: Get wildcard pattern override
                                value:
                                    identifier: premium_*
                                    namespaceId: ns_1234567890abcdef
                        schema:
                            $ref: '#/components/schemas/V2RatelimitGetOverrideRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2RatelimitGetOverrideResponseBody'
                    description: OK
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Retrieve a specific rate limit override
            tags:
                - ratelimit
            x-speakeasy-name-override: getOverride
    /v2/ratelimit.limit:
        post:
            description: |-
                Checks and enforces rate limits for any identifier in your application. This is the core rate limiting endpoint that provides flexible, namespace-based rate limiting for any entity in your system.
                Unlike API key-based rate limiting, this endpoint can be used to limit any identifiable entity:
                - Anonymous users by IP address
                - Authenticated users by user ID
                - Organizations by organization ID
                - API clients by client ID
                - Specific actions or resources by custom identifiers
                The endpoint is designed for high-performance rate limiting with predictable behavior. It returns information about limit status, remaining capacity, and reset times that can be communicated to consumers of your API or service.
                Features:
                - Namespace-based organization for different limit types
                - Custom costs for variable-weight operations
                - Flexible time windows (1 second to 24 hours)
                - Override support for custom limits for specific identifiers
                - Consistent sliding window implementation
                Implementation tips:
                - Always check the 'success' field to determine if the request should proceed
                - Use the 'reset' time to implement intelligent client-side retry logic
                - Leverage the 'remaining' count to display usage information to users
                - Store the namespaceId after first use to avoid name lookups in high-volume scenarios
                - Consider using smaller durations for security-critical operations
            operationId: ratelimit.limit
            requestBody:
                content:
                    application/json:
                        examples:
                            basic:
                                summary: Basic rate limit check
                                value:
                                    duration: 60000
                                    identifier: user_abc123
                                    limit: 100
                                    namespace: api.requests
                            ipLimit:
                                summary: IP-based rate limiting
                                value:
                                    duration: 60000
                                    identifier: 203.0.113.42
                                    limit: 5
                                    namespace: auth.login
                            weightedCost:
                                summary: Operation with variable cost
                                value:
                                    cost: 5
                                    duration: 3600000
                                    identifier: user_def456
                                    limit: 50
                                    namespace: api.heavy_operations
                        schema:
                            $ref: '#/components/schemas/V2RatelimitLimitRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                allowed:
                                    summary: Request allowed
                                    value:
                                        data:
                                            limit: 100
                                            remaining: 99
                                            reset: 1714582980000
                                            success: true
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                limitReached:
                                    summary: Rate limit exceeded
                                    value:
                                        data:
                                            limit: 100
                                            remaining: 0
                                            reset: 1714582980000
                                            success: false
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                                withOverride:
                                    summary: With custom override applied
                                    value:
                                        data:
                                            limit: 1000
                                            overrideId: ovr_2cGKbMxRyIzhCxo1Idjz8q
                                            remaining: 995
                                            reset: 1714582980000
                                            success: true
                                        meta:
                                            requestId: req_01H9TQPP77V5E48E9SH0BG0ZQZ
                            schema:
                                $ref: '#/components/schemas/V2RatelimitLimitResponseBody'
                    description: Rate limit check completed. Even when the rate limit is exceeded, this endpoint returns HTTP 200 OK - you must check the 'success' field in the response to determine if the request is allowed. When success=false, the client should be prevented from proceeding with their request.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal server error
            security:
                - rootKey: []
            summary: Apply rate limiting to any identifier
            tags:
                - ratelimit
            x-speakeasy-name-override: limit
    /v2/ratelimit.listOverrides:
        post:
            description: |-
                Retrieves a paginated list of all rate limit overrides defined for a specific namespace. Returns detailed information about each override including identifier patterns, limits, and durations.
                Use this endpoint to audit your rate limiting policies, build administrative dashboards, or manage and clean up override configurations. For namespaces with many overrides, results are paginated and can be retrieved in chunks using the cursor parameter.
                This endpoint is particularly useful when you need to review all custom rate limit rules for a namespace, find patterns in your override configurations, or implement management interfaces for rate limiting policies.
            operationId: ratelimit.listOverrides
            requestBody:
                content:
                    application/json:
                        examples:
                            byNamespaceId:
                                summary: List overrides by namespace ID
                                value:
                                    limit: 50
                                    namespaceId: ns_1234567890abcdef
                            byNamespaceName:
                                summary: List all overrides by namespace name
                                value:
                                    limit: 20
                                    namespaceName: api.requests
                            pagination:
                                summary: Fetch next page of results
                                value:
                                    cursor: cursor_eyJsYXN0SWQiOiJvdnJfM2RITGNOeVN6SnppRHlwMkpla2E5ciJ9
                                    namespaceId: ns_1234567890abcdef
                        schema:
                            $ref: '#/components/schemas/V2RatelimitListOverridesRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2RatelimitListOverridesResponseBody'
                    description: OK
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Error
            security:
                - rootKey: []
            summary: List all rate limit overrides for a namespace
            tags:
                - ratelimit
            x-speakeasy-name-override: listOverrides
    /v2/ratelimit.setOverride:
        post:
            description: |-
                Creates a new or updates an existing rate limit override for specific identifiers within a namespace.
                Overrides allow you to implement special rate limiting rules that differ from the default limits. This is essential for:
                - Creating tiered rate limits for different customer segments
                - Implementing premium tiers with higher limits
                - Applying stricter limits to suspicious or abusive users
                - Setting emergency limits during system stress
                - Creating customized rate limiting policies
                When an override exists, it completely replaces the default rate limit for matching identifiers. The override takes effect immediately and will be applied to the very next rate limit check that matches the identifier pattern.
                Wildcard patterns can be used to create powerful matching rules that apply to groups of identifiers without having to create individual overrides for each one.
            operationId: ratelimit.setOverride
            requestBody:
                content:
                    application/json:
                        examples:
                            blockAbusive:
                                summary: Block abusive user
                                value:
                                    duration: 3600000
                                    identifier: abusive_user_456
                                    limit: 0
                                    namespaceName: api.requests
                            premium:
                                summary: Higher limit for premium user
                                value:
                                    duration: 60000
                                    identifier: premium_user_123
                                    limit: 1000
                                    namespaceName: api.requests
                            wildcardPattern:
                                summary: Pattern matching with wildcard
                                value:
                                    duration: 60000
                                    identifier: premium_*
                                    limit: 500
                                    namespaceId: ns_1234567890abcdef
                        schema:
                            $ref: '#/components/schemas/V2RatelimitSetOverrideRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/V2RatelimitSetOverrideResponseBody'
                    description: Identity successfully deleted. The operation has permanently removed the identity from your workspace. Any API keys previously associated with this identity remain functional but no longer share resources through this identity. The externalId can now be reused for a new identity if needed.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BadRequestErrorResponse'
                    description: Bad request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedErrorResponse'
                    description: Unauthorized
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ForbiddenErrorResponse'
                    description: Forbidden
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotFoundErrorResponse'
                    description: Not Found
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InternalServerErrorResponse'
                    description: Internal Server Error
            security:
                - rootKey: []
            summary: Create or update a custom rate limit for specific identifiers
            tags:
                - ratelimit
            x-speakeasy-name-override: setOverride
security:
    - rootKey: []
servers:
    - url: https://api.unkey.com
x-speakeasy-retries:
    backoff:
        exponent: 1.5
        initialInterval: 50
        maxElapsedTime: 10000
        maxInterval: 1000
    retryConnectionErrors: true
    statusCodes:
        - 5XX
    strategy: backoff
