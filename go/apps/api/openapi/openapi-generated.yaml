# Code generated by generate_bundle.go; DO NOT EDIT.
# Generated at: 2025-07-21T08:04:35Z
# Source: openapi-split.yaml

openapi: 3.0.0
info:
    title: Unkey API
    version: 2.0.0
    description: |-
        Unkey's API provides programmatic access for all resources within our platform.


        ### Authentication
        #
        This API uses HTTP Bearer authentication with root keys. Most endpoints require specific permissions associated with your root key. When making requests, include your root key in the `Authorization` header:
        ```
        Authorization: Bearer unkey_xxxxxxxxxxx
        ```

        All responses follow a consistent envelope structure that separates operational metadata from actual data. This design provides several benefits:
        - Debugging: Every response includes a unique requestId for tracing issues
        - Consistency: Predictable response format across all endpoints
        - Extensibility: Easy to add new metadata without breaking existing integrations
        - Error Handling: Unified error format with actionable information

        ### Success Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_123456"
          },
          "data": {
            // Actual response data here
          }
        }
        ```

        The meta object contains operational information:
        - `requestId`: Unique identifier for this request (essential for support)

        The data object contains the actual response data specific to each endpoint.

        ### Paginated Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_123456"
          },
          "data": [
            // Array of results
          ],
          "pagination": {
            "cursor": "next_page_token",
            "hasMore": true
          }
        }
        ```

        The pagination object appears on list endpoints and contains:
        - `cursor`: Token for requesting the next page
        - `hasMore`: Whether more results are available

        ### Error Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_2c9a0jf23l4k567"
          },
          "error": {
            "detail": "The resource you are attempting to modify is protected and cannot be changed",
            "status": 403,
            "title": "Forbidden",
            "type": "https://unkey.com/docs/api-reference/errors-v2/unkey/application/protected_resource"
          }
        }
        ```

        Error responses include comprehensive diagnostic information:
        - `title`: Human-readable error summary
        - `detail`: Specific description of what went wrong
        - `status`: HTTP status code
        - `type`: Link to error documentation
        - `errors`: Array of validation errors (for 400 responses)

        This structure ensures you always have the context needed to debug issues and take corrective action.
servers:
    - url: https://api.unkey.com
x-speakeasy-retries:
    strategy: backoff
    backoff:
        initialInterval: 50
        maxInterval: 1000
        maxElapsedTime: 10000
        exponent: 1.5
    statusCodes:
        - 5XX
    retryConnectionErrors: true
security:
    - rootKey: []
paths:
    /v2/liveness:
        $ref: "#/components/pathItems/index"
    /v2/apis.createApi:
        $ref: "#/components/pathItems/index__createApi"
    /v2/apis.deleteApi:
        $ref: "#/components/pathItems/index__deleteApi"
    /v2/apis.getApi:
        $ref: "#/components/pathItems/index__getApi"
    /v2/apis.listKeys:
        $ref: "#/components/pathItems/index__listKeys"
    /v2/identities.createIdentity:
        $ref: "#/components/pathItems/index__createIdentity"
    /v2/identities.deleteIdentity:
        $ref: "#/components/pathItems/index__deleteIdentity"
    /v2/identities.getIdentity:
        $ref: "#/components/pathItems/index__getIdentity"
    /v2/identities.listIdentities:
        $ref: "#/components/pathItems/index__listIdentities"
    /v2/identities.updateIdentity:
        $ref: "#/components/pathItems/index__updateIdentity"
        # # Key Endpoints
        # /v2/keys.setPermissions:
        #   $ref: "./spec/paths/v2/keys/setPermissions/index.yaml"
        # /v2/keys.updateKey:
        #   $ref: "./spec/paths/v2/keys/updateKey/index.yaml"
        # /v2/keys.removePermissions:
        #   $ref: "./spec/paths/v2/keys/removePermissions/index.yaml"
        # /v2/keys.addRoles:
        #   $ref: "./spec/paths/v2/keys/addRoles/index.yaml"
        # /v2/keys.addPermissions:
        #   $ref: "./spec/paths/v2/keys/addPermissions/index.yaml"
        # /v2/keys.removeRoles:
        #   $ref: "./spec/paths/v2/keys/removeRoles/index.yaml"
        # /v2/keys.updateCredits:
        #   $ref: "./spec/paths/v2/keys/updateCredits/index.yaml"
        # /v2/keys.setRoles:
        #   $ref: "./spec/paths/v2/keys/setRoles/index.yaml"
        # /v2/keys.deleteKey:
        #   $ref: "./spec/paths/v2/keys/deleteKey/index.yaml"
        # /v2/keys.getKey:
        #   $ref: "./spec/paths/v2/keys/getKey/index.yaml"
        # /v2/keys.createKey:
        #   $ref: "./spec/paths/v2/keys/createKey/index.yaml"
        # /v2/keys.verifyKey:
        #   $ref: "./spec/paths/v2/keys/verifyKey/index.yaml"

        # # Ratelimit Endpoints
        # /v2/ratelimit.limit:
        #   $ref: "./spec/paths/v2/ratelimit/limit/index.yaml"
        # /v2/ratelimit.setOverride:
        #   $ref: "./spec/paths/v2/ratelimit/setOverride/index.yaml"
        # /v2/ratelimit.getOverride:
        #   $ref: "./spec/paths/v2/ratelimit/getOverride/index.yaml"
        # /v2/ratelimit.listOverrides:
        #   $ref: "./spec/paths/v2/ratelimit/listOverrides/index.yaml"
        # /v2/ratelimit.deleteOverride:
        #   $ref: "./spec/paths/v2/ratelimit/deleteOverride/index.yaml"

        # # Permissions Endpoints
        # /v2/permissions.listRoles:
        #   $ref: "./spec/paths/v2/permissions/listRoles/index.yaml"
        # /v2/permissions.createRole:
        #   $ref: "./spec/paths/v2/permissions/createRole/index.yaml"
        # /v2/permissions.createPermission:
        #   $ref: "./spec/paths/v2/permissions/createPermission/index.yaml"
        # /v2/permissions.getPermission:
        #   $ref: "./spec/paths/v2/permissions/getPermission/index.yaml"
        # /v2/permissions.listPermissions:
        #   $ref: "./spec/paths/v2/permissions/listPermissions/index.yaml"
        # /v2/permissions.deletePermission:
        #   $ref: "./spec/paths/v2/permissions/deletePermission/index.yaml"
        # /v2/permissions.deleteRole:
        #   $ref: "./spec/paths/v2/permissions/deleteRole/index.yaml"
        # /v2/permissions.getRole:
        #   $ref: "./spec/paths/v2/permissions/getRole/index.yaml"
components:
    securitySchemes:
        rootKey:
            type: http
            scheme: bearer
            bearerFormat: root key
            description: |-
                Unkey uses API keys (root keys) for authentication. These keys authorize access to management operations in the API.
                To authenticate, include your root key in the Authorization header of each request:
                ```
                Authorization: Bearer unkey_123
                ```
                Root keys have specific permissions attached to them, controlling what operations they can perform. Key permissions follow a hierarchical structure with patterns like `resource.resource_id.action` (e.g., `apis.*.create_key`, `apis.*.read_api`).
                Security best practices:
                - Keep root keys secure and never expose them in client-side code
                - Use different root keys for different environments
                - Rotate keys periodically, especially after team member departures
                - Create keys with minimal necessary permissions following least privilege principle
                - Monitor key usage with audit logs.
    schemas:
        V2LivenessResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2LivenessResponseData"
        InternalServerErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.

                When you encounter this error:
                - The request ID in the response can help Unkey support investigate the issue
                - The error is likely temporary and retrying may succeed
                - If the error persists, contact Unkey support with the request ID
        Meta:
            type: object
            required:
                - requestId
            properties:
                requestId:
                    description: A unique id for this request. Always include this ID when contacting support about a specific API request. This identifier allows Unkey's support team to trace the exact request through logs and diagnostic systems to provide faster assistance.
                    example: req_123
                    type: string
            additionalProperties: false
            description: Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
        V2LivenessResponseData:
            type: object
            properties:
                message:
                    description: Status message indicating the health of the service. A value of 'OK' indicates that the service is functioning properly and ready to accept requests. Any other value indicates a potential issue with the service health.
                    example: OK
                    type: string
            required:
                - message
            description: Response data for the liveness check endpoint. This provides a simple indication of whether the Unkey API service is running and able to process requests. Monitoring systems can use this endpoint to track service availability and trigger alerts if the service becomes unhealthy.
        BaseError:
            properties:
                detail:
                    description: A human-readable explanation specific to this occurrence of the problem. This provides detailed information about what went wrong and potential remediation steps. The message is intended to be helpful for developers troubleshooting the issue.
                    example: Property foo is required but is missing.
                    type: string
                status:
                    description: HTTP status code that corresponds to this error. This will match the status code in the HTTP response. Common codes include `400` (Bad Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict), and `500` (Internal Server Error).
                    example: 404
                    format: int
                    type: integer
                title:
                    description: A short, human-readable summary of the problem type. This remains constant from occurrence to occurrence of the same problem and should be used for programmatic handling.
                    example: Not Found
                    type: string
                type:
                    description: A URI reference that identifies the problem type. This provides a stable identifier for the error that can be used for documentation lookups and programmatic error handling. When followed, this URI should provide human-readable documentation for the problem type.
                    example: https://unkey.com/docs/api-reference/errors-v2/unkey/resource/not_found
                    type: string
            required:
                - title
                - detail
                - status
                - type
            type: object
            additionalProperties: false
            description: Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
        V2ApisCreateApiRequestBody:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                    description: |
                        Creates an API with this name as an internal identifier for organization and isolation.
                        APIs serve as containers for groups of keys and provide namespace separation between environments or services.
                        Names must be unique within your workspace and are not shown to end users.

                        Use descriptive names that clearly identify the API's purpose and environment:
                        - Include environment indicators like 'production', 'staging', 'development'
                        - Use service-based naming like 'payment-service', 'user-management', 'analytics'
                        - Follow consistent naming conventions across your organization
                        - Keep names concise but informative for easy identification

                        Must start with a letter and contain only letters, numbers, underscores, dots, and hyphens.
                        Avoid generic names like 'api' or 'main' that don't provide meaningful context.
                    example: payment-service-production
            additionalProperties: false
        V2ApisCreateApiResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                data:
                    $ref: "#/components/schemas/V2ApisCreateApiResponseData"
            additionalProperties: false
        BadRequestErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BadRequestErrorDetails"
            description: Error response for invalid requests that cannot be processed due to client-side errors. This typically occurs when request parameters are missing, malformed, or fail validation rules. The response includes detailed information about the specific errors in the request, including the location of each error and suggestions for fixing it. When receiving this error, check the 'errors' array in the response for specific validation issues that need to be addressed before retrying.
        UnauthorizedErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when authentication has failed or credentials are missing. This occurs when:
                - No authentication token is provided in the request
                - The provided token is invalid, expired, or malformed
                - The token format doesn't match expected patterns

                To resolve this error, ensure you're including a valid root key in the Authorization header.
        ForbiddenErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when the provided credentials are valid but lack sufficient permissions for the requested operation. This occurs when:
                - The root key doesn't have the required permissions for this endpoint
                - The operation requires elevated privileges that the current key lacks
                - Access to the requested resource is restricted based on workspace settings

                To resolve this error, ensure your root key has the necessary permissions or contact your workspace administrator.
        V2ApisCreateApiResponseData:
            type: object
            properties:
                apiId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier assigned to the newly created API.
                        Use this ID for all subsequent operations including key creation, verification, and API management.
                        Always begins with 'api_' followed by a unique alphanumeric sequence.

                        Store this ID securely as it's required when:
                        - Creating API keys within this namespace
                        - Verifying keys associated with this API
                        - Managing API settings and metadata
                        - Listing keys belonging to this API

                        This identifier is permanent and cannot be changed after creation.
                    example: api_2cGKbMxRjIzhCxo1IdjH3a
            required:
                - apiId
            additionalProperties: false
        BadRequestErrorDetails:
            allOf:
                - $ref: "#/components/schemas/BaseError"
                - type: object
                  properties:
                    errors:
                        description: List of individual validation errors that occurred in the request. Each error provides specific details about what failed validation, where the error occurred in the request, and suggestions for fixing it. This granular information helps developers quickly identify and resolve multiple issues in a single request without having to make repeated API calls.
                        items:
                            $ref: "#/components/schemas/ValidationError"
                        type: array
                  required:
                    - errors
            description: Extended error details specifically for bad request (400) errors. This builds on the BaseError structure by adding an array of individual validation errors, making it easy to identify and fix multiple issues at once.
        ValidationError:
            additionalProperties: false
            properties:
                location:
                    description: |-
                        JSON path indicating exactly where in the request the error occurred. This helps pinpoint the problematic field or parameter. Examples include:
                        - 'body.name' (field in request body)
                        - 'body.items[3].tags' (nested array element)
                        - 'path.apiId' (path parameter)
                        - 'query.limit' (query parameter)
                        Use this location to identify exactly which part of your request needs correction.
                    type: string
                    example: body.permissions[0].name
                message:
                    description: Detailed error message explaining what validation rule was violated. This provides specific information about why the field or parameter was rejected, such as format errors, invalid values, or constraint violations.
                    type: string
                    example: Must be at least 3 characters long
                fix:
                    description: A human-readable suggestion describing how to fix the error. This provides practical guidance on what changes would satisfy the validation requirements. Not all validation errors include fix suggestions, but when present, they offer specific remediation advice.
                    type: string
                    example: Ensure the name uses only alphanumeric characters, underscores, and hyphens
            required:
                - location
                - message
            type: object
            description: Individual validation error details. Each validation error provides precise information about what failed, where it failed, and how to fix it, enabling efficient error resolution.
        V2ApisDeleteApiRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which API to permanently delete from your workspace.
                        Must be a valid API ID that begins with 'api_' and exists within your workspace.

                        CRITICAL WARNING: Deletion is immediate and irreversible with severe consequences:
                        - ALL keys associated with this API become invalid instantly
                        - Verification requests for these keys will fail with `code=NOT_FOUND`
                        - Client applications using these keys will lose access immediately
                        - Analytics data and key metadata are permanently removed
                        - This operation cannot be undone under any circumstances

                        Before proceeding, ensure you have:
                        - Verified the correct API ID (double-check environment and service)
                        - Migrated all active keys to alternative APIs
                        - Updated all client applications to use replacement keys
                        - Backed up critical analytics data and key configurations
                        - Notified all stakeholders of the service interruption
                        - Tested replacement systems in non-production environments

                        Consider disabling keys first to test impact before permanent deletion.
                    example: api_VNcuGfVjUkrVcWJmda0A
            additionalProperties: false
        V2ApisDeleteApiResponseBody:
            type: object
            required:
                - meta
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
            additionalProperties: false
        NotFoundErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when the requested resource cannot be found. This occurs when:
                - The specified resource ID doesn't exist in your workspace
                - The resource has been deleted or moved
                - The resource exists but is not accessible with current permissions

                To resolve this error, verify the resource ID is correct and that you have access to it.
        PreconditionFailedErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when one or more conditions specified in the request headers are not met. This typically occurs when:
                - Using conditional requests with If-Match or If-None-Match headers
                - The resource version doesn't match the expected value
                - Optimistic concurrency control detects a conflict

                To resolve this error, fetch the latest version of the resource and retry with updated conditions.
        V2ApisGetApiRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        Specifies which API to retrieve by its unique identifier.
                        Must be a valid API ID that begins with 'api_' and exists within your workspace.

                        Use this endpoint to:
                        - Verify an API exists and is accessible
                        - Retrieve the API's current name and configuration
                        - Validate API IDs before performing key operations
                        - Check API status during debugging or troubleshooting

                        Returns complete API information including name, ID, and metadata.
                    example: api_1234567890abcdef
            additionalProperties: false
        V2ApisGetApiResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2ApisGetApiResponseData"
            additionalProperties: false
        V2ApisGetApiResponseData:
            type: object
            properties:
                id:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier of this API within Unkey's system.
                        Used in all operations related to this API including key creation, verification, and management.
                        Always begins with 'api_' followed by alphanumeric characters and underscores.
                        This identifier is permanent and never changes after API creation.
                    example: api_1234567890abcdef
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    description: |
                        The internal name of this API as specified during creation.
                        Used for organization and identification within your workspace.
                        Helps distinguish between different environments, services, or access tiers.
                        Not visible to end users - this is purely for administrative purposes.
                    example: payment-service-production
            required:
                - id
                - name
            additionalProperties: false
        V2ApisListKeysRequestBody:
            type: object
            required:
                - apiId
            properties:
                apiId:
                    type: string
                    minLength: 1
                    description: The ID of the API whose keys you want to list (begins with 'api_'). This endpoint returns all keys associated with this specific API, subject to pagination and any additional filters provided.
                    example: api_1234
                limit:
                    type: integer
                    description: The maximum number of keys to return in a single request. Use this to control response size and loading performance. Higher values return more keys but may increase response time. Lower values may require more pagination requests but provide faster initial loading.
                    default: 100
                    minimum: 1
                    maximum: 100
                cursor:
                    type: string
                    description: Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains hasMore=true. Each response containing additional results will include a new cursor value in the pagination object.
                    example: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMjNld3MiLCJsYXN0Q3JlYXRlZEF0IjoxNjcyNTI0MjM0MDAwfQ==
                externalId:
                    type: string
                    minLength: 3
                    description: Optional filter to return only keys associated with a specific external ID. This is useful when you need to find all keys belonging to a particular user, organization, or entity in your system. The value must exactly match the externalId set during key creation.
                    example: user_5bf93ab218e
                decrypt:
                    type: boolean
                    description: |-
                        When true, attempts to include the plaintext key value in the response. SECURITY WARNING:
                        - This requires special permissions on the calling root key
                        - Only works for keys created with 'recoverable: true'
                        - Exposes sensitive key material in the response
                        - Should only be used in secure administrative contexts
                        - Never enable this in user-facing applications
                    default: false
                revalidateKeysCache:
                    type: boolean
                    default: false
                    description: |-
                        EXPERIMENTAL: Skip the cache and fetch the keys directly from the database. This ensures you see the most recent state, including keys created moments ago. Use this when:
                        - You've just created a key and need to display it immediately
                        - You need absolute certainty about the current key state
                        - You're debugging cache consistency issues

                        This parameter comes with a performance cost and should be used sparingly.
            additionalProperties: false
        V2ApisListKeysResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2ApisListKeysResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
            additionalProperties: false
        V2ApisListKeysResponseData:
            type: array
            maxItems: 100
            items:
                "$ref": "#/components/schemas/KeyResponseData"
            description: Array of API keys with complete configuration and metadata.
        Pagination:
            type: object
            properties:
                cursor:
                    type: string
                    minLength: 1
                    maxLength: 1024
                    description: |
                        Opaque pagination token for retrieving the next page of results.
                        Include this exact value in the cursor field of subsequent requests.
                        Cursors are temporary and may expire after extended periods.
                    example: eyJrZXkiOiJrZXlfMTIzNCIsInRzIjoxNjk5Mzc4ODAwfQ==
                hasMore:
                    type: boolean
                    description: |
                        Indicates whether additional results exist beyond this page.
                        When true, use the cursor to fetch the next page.
                        When false, you have reached the end of the result set.
                    example: true
            required:
                - hasMore
            additionalProperties: false
            description: Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
        KeyResponseData:
            type: object
            properties:
                keyId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: Unique identifier for this key.
                    example: key_1234567890abcdef
                start:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: First few characters of the key for identification.
                    example: sk_test_abc123
                enabled:
                    type: boolean
                    description: Whether the key is enabled or disabled.
                    example: true
                name:
                    type: string
                    maxLength: 255
                    description: Human-readable name for this key.
                    example: Production API Key
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: Custom metadata associated with this key.
                    example:
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key was created.
                    example: 1701425400000
                updatedAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key was last updated.
                    example: 1701425400000
                expires:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key expires (if set).
                    example: 1735689600000
                externalId:
                    type: string
                    maxLength: 255
                    description: External identifier linking this key to an entity in your system.
                    example: user_12345
                permissions:
                    type: array
                    items:
                        type: string
                        description: List of permissions granted to this key.
                    example:
                        - documents.read
                        - documents.write
                roles:
                    type: array
                    items:
                        type: string
                        description: List of roles assigned to this key.
                    example:
                        - editor
                        - viewer
                credits:
                    "$ref": "#/components/schemas/KeyCreditsData"
                identity:
                    "$ref": "#/components/schemas/Identity"
                plaintext:
                    type: string
                    description: Decrypted key value (only when decrypt=true).
                    example: sk_test_abc123def456
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        "$ref": "#/components/schemas/RatelimitResponse"
                        description: Rate limit configurations for this key.
            required:
                - keyId
                - start
                - apiId
                - createdAt
                - enabled
            additionalProperties: false
        KeyCreditsData:
            type: object
            description: Credit configuration and remaining balance for this key.
            properties:
                remaining:
                    type: integer
                    format: int64
                    nullable: true
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Number of credits remaining (null for unlimited).
                    example: 1000
                refill:
                    "$ref": "#/components/schemas/KeyCreditsRefill"
            required:
                - remaining
            additionalProperties: false
        Identity:
            type: object
            properties:
                externalId:
                    type: string
                    description: External identity ID
                meta:
                    type: object
                    description: Identity metadata
                ratelimits:
                    type: array
                    items:
                        "$ref": "#/components/schemas/RatelimitResponse"
                description: {}
            required:
                - externalId
                - ratelimits
        RatelimitResponse:
            type: object
            properties:
                id:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^rl_[a-zA-Z0-9_]+$"
                    description: Unique identifier for this rate limit configuration.
                    example: rl_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 128
                    pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                    description: Human-readable name for this rate limit.
                    example: api_requests
                limit:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 1000000
                    description: Maximum requests allowed within the time window.
                    example: 1000
                duration:
                    type: integer
                    format: int64
                    minimum: 1000
                    maximum: 2592000000
                    description: Rate limit window duration in milliseconds.
                    example: 3600000
                autoApply:
                    type: boolean
                    description: Whether this rate limit was automatically applied when verifying the key.
                    example: true
            required:
                - id
                - name
                - limit
                - duration
                - autoApply
            additionalProperties: false
        KeyCreditsRefill:
            type: object
            description: Configuration for automatic credit refill behavior.
            properties:
                interval:
                    type: string
                    enum:
                        - daily
                        - monthly
                    description: How often credits are automatically refilled.
                    example: daily
                amount:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 9223372036854776000
                    description: Number of credits to add during each refill cycle.
                    example: 1000
                refillDay:
                    type: integer
                    minimum: 1
                    maximum: 31
                    description: |
                        Day of the month for monthly refills (1-31).
                        Only required when interval is 'monthly'.
                        For days beyond the month's length, refill occurs on the last day of the month.
                    example: 15
            required:
                - interval
                - amount
            additionalProperties: false
        V2IdentitiesCreateIdentityRequestBody:
            type: object
            required:
                - externalId
            properties:
                externalId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.-]+$"
                    description: |
                        Creates an identity using your system's unique identifier for a user, organization, or entity.
                        Must be stable and unique across your workspace - duplicate externalIds return CONFLICT errors.
                        This identifier links Unkey identities to your authentication system, database records, or tenant structure.

                        Avoid changing externalIds after creation as this breaks the link between your systems.
                        Use consistent identifier patterns across your application for easier management and debugging.
                        Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                        Essential for implementing proper multi-tenant isolation and user-specific rate limiting.
                    example: user_123
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: |
                        Stores arbitrary JSON metadata returned during key verification for contextual information.
                        Eliminates additional database lookups during verification, improving performance for stateless services.
                        Avoid storing sensitive data here as it's returned in verification responses.

                        Large metadata objects increase verification latency and should stay under 10KB total size.
                        Use this for subscription details, feature flags, user preferences, and organization information.
                        Metadata is returned as-is whenever keys associated with this identity are verified.
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        "$ref": "#/components/schemas/RatelimitRequest"
                    description: |
                        Defines shared rate limits that apply to all keys belonging to this identity.
                        Prevents abuse by users with multiple keys by enforcing consistent limits across their entire key portfolio.
                        Essential for implementing fair usage policies and tiered access levels in multi-tenant applications.

                        Rate limit counters are shared across all keys with this identity, regardless of how many keys the user creates.
                        During verification, specify which named limits to check for enforcement.
                        Identity rate limits supplement any key-specific rate limits that may also be configured.
                        - Each named limit can have different thresholds and windows

                        When verifying keys, you can specify which limits you want to use and all keys attached to this identity will share the limits, regardless of which specific key is used.
        V2IdentitiesCreateIdentityResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2IdentitiesCreateIdentityResponseData"
        ConflictErrorResponse:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/Meta"
                error:
                    $ref: "#/components/schemas/BaseError"
            description: |-
                Error response when the request conflicts with the current state of the resource. This occurs when:
                - Attempting to create a resource that already exists
                - Modifying a resource that has been changed by another operation
                - Violating unique constraints or business rules

                To resolve this error, check the current state of the resource and adjust your request accordingly.
        RatelimitRequest:
            type: object
            required:
                - name
                - limit
                - duration
                - autoApply
            properties:
                name:
                    description: |-
                        The name of this rate limit. This name is used to identify which limit to check during key verification.

                        Best practices for limit names:
                        - Use descriptive, semantic names like 'api_requests', 'heavy_operations', or 'downloads'
                        - Be consistent with naming conventions across your application
                        - Create separate limits for different resource types or operation costs
                        - Consider using namespaced names for better organization (e.g., 'files.downloads', 'compute.training')

                        You will reference this exact name when verifying keys to check against this specific limit.
                    type: string
                    example: api
                    minLength: 3
                    maxLength: 128
                limit:
                    description: |-
                        The maximum number of operations allowed within the specified time window.

                        When this limit is reached, verification requests will fail with `code=RATE_LIMITED` until the window resets. The limit should reflect:
                        - Your infrastructure capacity and scaling limitations
                        - Fair usage expectations for your service
                        - Different tier levels for various user types
                        - The relative cost of the operations being limited

                        Higher values allow more frequent access but may impact service performance.
                    type: integer
                    format: int64
                    minimum: 1
                duration:
                    description: |-
                        The duration for each ratelimit window in milliseconds.

                        This controls how long the rate limit counter accumulates before resetting. Common values include:
                        - 1000 (1 second): For strict per-second limits on high-frequency operations
                        - 60000 (1 minute): For moderate API usage control
                        - 3600000 (1 hour): For less frequent but costly operations
                        - 86400000 (24 hours): For daily quotas

                        Shorter windows provide more frequent resets but may allow large burst usage. Longer windows provide more consistent usage patterns but take longer to reset after limit exhaustion.
                    type: integer
                    format: int64
                    minimum: 1000
                autoApply:
                    description: |-
                        Whether this ratelimit should be automatically applied when verifying a key.
                    type: boolean
                    default: false
        V2IdentitiesCreateIdentityResponseData:
            type: object
        V2IdentitiesDeleteIdentityRequestBody:
            additionalProperties: false
            type: object
            properties:
                externalId:
                    type: string
                    minLength: 3
                    description: |
                        The id of this identity in your system.
                        This should match the externalId value you used when creating the identity.
                        This identifier typically comes from your authentication system and could be a userId, organizationId, or any other stable unique identifier in your application.
                    example: user_123
            required:
                - externalId
        V2IdentitiesDeleteIdentityResponseBody:
            type: object
            description: Empty response object. A successful response indicates the identity was deleted successfully.
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
            required:
                - meta
        V2IdentitiesGetIdentityRequestBody:
            type: object
            properties:
                externalId:
                    type: string
                    minLength: 1
                    description: The external ID of the identity to retrieve. This is the ID from your own system that was used during identity creation.
                    example: user_abc123
            additionalProperties: false
            required:
                - externalId
        V2IdentitiesGetIdentityResponseBody:
            type: object
            required:
                - meta
                - data
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2IdentitiesGetIdentityResponseData"
        V2IdentitiesGetIdentityResponseData:
            type: object
            required:
                - externalId
            properties:
                externalId:
                    type: string
                    description: The external identifier for this identity in your system. This is the ID you provided during identity creation.
                    example: user_abc123
                meta:
                    type: object
                    additionalProperties: true
                    description: Custom metadata associated with this identity. This can include any JSON-serializable data you stored with the identity during creation or updates.
                    example:
                        name: Alice Smith
                        email: alice@example.com
                        plan: premium
                ratelimits:
                    type: array
                    items:
                        $ref: "#/components/schemas/RatelimitResponse"
                    description: Rate limits associated with this identity. These limits are shared across all API keys linked to this identity, providing consistent rate limiting regardless of which key is used.
        V2IdentitiesListIdentitiesRequestBody:
            type: object
            properties:
                limit:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 100
                    description: The maximum number of identities to return in a single request. Use this to control response size and loading performance.
                    example: 50
                cursor:
                    type: string
                    description: Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains a cursor value.
                    example: cursor_eyJrZXkiOiJrZXlfMTIzNCJ9
            additionalProperties: false
        V2IdentitiesListIdentitiesResponseBody:
            type: object
            required:
                - meta
                - data
                - pagination
            properties:
                meta:
                    "$ref": "#/components/schemas/Meta"
                data:
                    "$ref": "#/components/schemas/V2IdentitiesListIdentitiesResponseData"
                pagination:
                    "$ref": "#/components/schemas/Pagination"
            additionalProperties: false
        V2IdentitiesListIdentitiesResponseData:
            type: array
            items:
                "$ref": "#/components/schemas/Identity"
            description: List of identities matching the specified criteria.
        V2IdentitiesUpdateIdentityRequestBody:
            type: object
            properties:
                externalId:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_.-]+$"
                    description: |
                        Specifies which identity to update using your system's identifier from identity creation.
                        Use this when you track identities by your own user IDs, organization IDs, or tenant identifiers.
                        Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                    example: user_abc123
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: |
                        Replaces all existing metadata with this new metadata object.
                        Omitting this field preserves existing metadata, while providing an empty object clears all metadata.
                        Avoid storing sensitive data here as it's returned in verification responses.
                        Large metadata objects increase verification latency and should stay under 10KB total size.
                    example:
                        name: Alice Smith
                        email: alice@example.com
                        plan: premium
                ratelimits:
                    type: array
                    maxItems: 50
                    items:
                        $ref: "#/components/schemas/RatelimitRequest"
                    description: |
                        Replaces all existing identity rate limits with this complete list of rate limits.
                        Omitting this field preserves existing rate limits, while providing an empty array removes all rate limits.
                        These limits are shared across all keys belonging to this identity, preventing abuse through multiple keys.
                        Rate limit changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                    example:
                        - name: requests
                          limit: 1000
                          duration: 3600000
            additionalProperties: false
            required:
                - externalId
        V2IdentitiesUpdateIdentityResponseBody:
            type: object
            required:
                - data
                - meta
            properties:
                data:
                    "$ref": "#/components/schemas/Identity"
                meta:
                    "$ref": "#/components/schemas/Meta"
    pathItems:
        index:
            get:
                x-speakeasy-ignore: "true"
                tags:
                    - liveness
                security: []
                operationId: liveness
                summary: Check service health and availability
                description: |-
                    Checks if the Unkey API service is functioning correctly and ready to handle requests. Returns a simple health status that load balancers, monitoring tools, and orchestration systems can use to verify service availability.

                    This endpoint requires no authentication and has minimal processing overhead for fast health verification. The response indicates whether the service can process requests normally or if there are issues requiring attention. Monitor this endpoint to detect service degradation and implement automated failover or alerting when the service becomes unhealthy.
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2LivenessResponseBody"
                        description: Service is healthy and ready to process requests. The response includes a simple 'OK' message indicating normal operation. Monitoring systems can use this as confirmation that the service is functioning properly.
                    "412":
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
                                examples:
                                    degraded:
                                        summary: Service in degraded state
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            error:
                                                title: Precondition Failed
                                                detail: Service is in a degraded state. Some functionality may be limited.
                                                status: 412
                                                type: https://unkey.dev/errors/precondition-failed
                        description: ""
                    "500":
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
                                examples:
                                    unhealthy:
                                        summary: Service unhealthy
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                                            error:
                                                title: Internal Server Error
                                                detail: The service is currently experiencing issues and may not be fully operational.
                                                status: 500
                                                type: https://unkey.dev/errors/internal-server-error
                        description: Service is unhealthy and unable to process requests properly. This indicates a significant issue with the service that requires attention. Clients should refrain from making other API calls as they are likely to fail. Monitoring systems should trigger alerts when receiving this response.
        index__createApi:
            post:
                tags:
                    - apis
                summary: Create a new API namespace for organizing keys
                description: |-
                    Creates a new API namespace that serves as a container for related API keys.

                    APIs in Unkey provide important functionality:
                    - They organize keys into logical groups for easier management
                    - They isolate keys between different environments (dev/staging/production)
                    - They enforce security boundaries between services or products
                    - They provide a foundation for permission scoping and access control

                    Common use cases for creating separate APIs include:
                    - Separating development, staging, and production environments
                    - Isolating different services or microservices from each other
                    - Creating boundaries between different products or teams
                    - Implementing multi-tenant isolation for SaaS applications

                    You'll use the resulting API ID when creating keys to associate them with this API namespace.
                    During key verification, you must provide the same API ID to ensure keys can't be used across different environments or services.
                operationId: createApi
                x-speakeasy-name-override: createApi
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2ApisCreateApiRequestBody"
                            examples:
                                production:
                                    summary: Production API
                                    value:
                                        name: payment-service-production
                                staging:
                                    summary: Staging environment
                                    value:
                                        name: payment-service-staging
                                serviceSpecific:
                                    summary: Service-specific API
                                    value:
                                        name: analytics-service
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2ApisCreateApiResponseBody"
                                examples:
                                    success:
                                        summary: Successfully created API
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                apiId: api_2cGKbMxRjIzhCxo1IdjH3a
                        description: Successfully created a new API namespace. The response includes the unique API ID that you'll need for creating keys within this namespace. This ID should be stored securely as it's required for all operations related to this API.
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/ForbiddenErrorResponse"
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/InternalServerErrorResponse"
        index__deleteApi:
            post:
                tags:
                    - apis
                summary: Delete an API and invalidate all its associated keys
                description: |-
                    Permanently deletes an API namespace and invalidates all keys associated with it.

                    WARNING: This is a destructive operation with significant consequences:
                    - All keys associated with this API will be invalidated immediately
                    - Verification attempts for these keys will fail with `code=NOT_FOUND`
                    - Historical analytics data for the API and its keys will be preserved
                    - This action cannot be undone

                    Common reasons to delete an API include:
                    - Removing test or development environments no longer needed
                    - Retiring deprecated services or products
                    - Cleaning up unused resources
                    - Implementing security isolation after compromise

                    Before deletion, ensure that:
                    - You have the correct API ID (check the environment/service)
                    - You have migrated any needed keys to a new API
                    - You have updated all client applications to use new keys
                    - You have backed up any important metadata or analytics
                operationId: deleteApi
                x-speakeasy-name-override: deleteApi
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2ApisDeleteApiRequestBody"
                            examples:
                                basic:
                                    summary: Delete an API
                                    value:
                                        apiId: api_VNcuGfVjUkrVcWJmda0A
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2ApisDeleteApiResponseBody"
                                examples:
                                    success:
                                        summary: Successful deletion
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                        description: API successfully deleted. All keys associated with this API have been invalidated and will no longer work for verification. The API ID can no longer be used for any operations, and new keys cannot be created with this API ID. This operation is immediate and cannot be undone.
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/ForbiddenErrorResponse"
                    "404":
                        description: Not Found
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/NotFoundErrorResponse"
                    "412":
                        description: The API has api protection enabled, please disable it before deleting the API.
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/PreconditionFailedErrorResponse"
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
        index__getApi:
            post:
                tags:
                    - apis
                summary: Retrieve information about an API namespace
                description: |-
                    Retrieves detailed information about a specific API namespace.
                    This endpoint is useful for:
                    - Verifying an API exists before attempting to use it
                    - Retrieving the name of an API when you only have its ID
                    - Checking if you have access to a particular API
                    - Confirming API details before performing operations on it

                    The information returned is minimal by design, as APIs are primarily organizational containers. Most of the valuable data lies in the keys associated with an API, which can be retrieved using the apis.listKeys endpoint.
                operationId: getApi
                x-speakeasy-name-override: getApi
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2ApisGetApiRequestBody"
                            examples:
                                basic:
                                    summary: Retrieve API by ID
                                    value:
                                        apiId: api_1234
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2ApisGetApiResponseBody"
                                examples:
                                    standard:
                                        summary: API details response
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                id: api_1234567890abcdef
                                                name: payment-service-production
                        description: ""
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/ForbiddenErrorResponse"
                    "404":
                        description: Not Found
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/NotFoundErrorResponse"
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
        index__listKeys:
            post:
                tags:
                    - apis
                summary: List all keys associated with an API namespace
                description: |-
                    Retrieves a paginated list of all API keys associated with a specific API namespace. Returns detailed information about each key including metadata, permissions, and usage limits.

                    Use this endpoint to build admin dashboards for API key management, audit active keys for security reviews, or find keys associated with specific users through the externalId filter. For large APIs with many keys, results are paginated and can be filtered to locate specific keys efficiently.

                    For security reasons, full key values are never returned unless specifically requested with decrypt=true, and only for keys created with recoverable=true when the caller has sufficient permissions.
                operationId: listKeys
                x-speakeasy-name-override: listKeys
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2ApisListKeysRequestBody"
                            examples:
                                basicListing:
                                    summary: List all keys for an API
                                    value:
                                        apiId: api_1234
                                filteredListing:
                                    summary: List keys for specific user
                                    value:
                                        apiId: api_1234
                                        externalId: user_5bf93ab218e
                                        limit: 50
                                paginatedRequest:
                                    summary: Fetch next page of results
                                    value:
                                        apiId: api_1234
                                        cursor: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMjNld3MiLCJsYXN0Q3JlYXRlZEF0IjoxNjcyNTI0MjM0MDAwfQ==
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2ApisListKeysResponseBody"
                                examples:
                                    standardResponse:
                                        summary: Successful key listing
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                - keyId: key_1a2b3c4d5e6f
                                                  start: prod_abc
                                                  name: Production Admin Key
                                                  createdAt: 1671048264000
                                                  permissions:
                                                    - admin.read
                                                    - admin.write
                                                  meta:
                                                    owner: alice@example.com
                                                    department: Engineering
                                                - keyId: key_2b3c4d5e6f7g
                                                  start: prod_def
                                                  name: CI/CD Pipeline Key
                                                  createdAt: 1671135600000
                                                  permissions:
                                                    - deploy.trigger
                                                    - logs.read
                                                  meta:
                                                    owner: true
                                            pagination:
                                                cursor: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMmIzYzRkNWU2ZjdnIiwibGFzdENyZWF0ZWRBdCI6MTY3MTEzNTYwMDAwMH0=
                                                hasMore: true
                                    description: {}
                        description: ""
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/ForbiddenErrorResponse"
                    "404":
                        description: ""
                    description:
                        description: ""
                    content:
                        description: ""
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
        index__createIdentity:
            post:
                tags:
                    - identities
                summary: Create a new identity for resource sharing across keys
                description: |-
                    Creates a new identity that can be associated with multiple API keys to enable resource sharing.
                    Identities are a powerful concept in Unkey that allow multiple API keys to share resources like rate limits and to be associated with the same entity (user, organization, etc.). This is essential for:
                    - Implementing consistent rate limiting across multiple API keys
                    - Associating multiple keys with the same user or organization
                    - Sharing metadata across all keys for an entity
                    - Enabling user-based analytics across multiple keys
                    - Simplifying key management for multi-device or multi-service users
                    When you create keys with the same externalId, they'll share rate limits and appear grouped in analytics. This enables scenarios like letting users generate multiple API keys for different devices while still treating them as a single entity for usage limits.
                    The identity concept creates a separation between your user entities and their authentication credentials (API keys), similar to how users can have multiple passwords or sessions.
                operationId: identities.createIdentity
                x-speakeasy-name-override: createIdentity
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2IdentitiesCreateIdentityRequestBody"
                            examples:
                                basic:
                                    summary: Basic identity creation
                                    value:
                                        externalId: user_abc123
                                withMetadata:
                                    summary: Identity with user metadata
                                    value:
                                        externalId: user_abc123
                                        meta:
                                            name: Alice Smith
                                            email: alice@example.com
                                            plan: premium
                                            accountCreated: "2023-01-15T08:30:00Z"
                                            region: eu-west
                                withRatelimits:
                                    summary: Identity with shared rate limits
                                    value:
                                        externalId: org_xyz456
                                        meta:
                                            name: Acme Corporation
                                            planTier: enterprise
                                        ratelimits:
                                            - name: requests
                                              limit: 10000
                                              duration: 3600000
                                              autoApply: true
                                            - name: heavy_compute
                                              limit: 100
                                              duration: 86400000
                                              autoApply: false
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2IdentitiesCreateIdentityResponseBody"
                                examples:
                                    success:
                                        summary: Successfully created identity
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                        description: ""
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/ForbiddenErrorResponse"
                    "409":
                        description: Identity already exists
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/ConflictErrorResponse"
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
        index__deleteIdentity:
            post:
                tags:
                    - identities
                summary: Delete an existing identity
                description: |-
                    Permanently removes an identity from your workspace. This operation cannot be undone.
                    Deleting an identity has several important effects:
                    - All metadata associated with the identity is permanently removed
                    - Any rate limit history for this identity is cleared
                    - The identity's externalId becomes available for reuse
                    - Keys remain functional but lose their identity association
                    Important notes:
                    - This operation does NOT delete or disable any API keys associated with this identity
                    - After deletion, keys previously linked to this identity will function independently
                    - Rate limits that were shared across keys via this identity will no longer be shared
                    - The externalId can be reused immediately after deletion
                    Use this endpoint for compliance with data deletion requirements, cleaning up test data, or when an entity (user, organization) is permanently removed from your system.
                operationId: v2.identities.deleteIdentity
                x-speakeasy-name-override: deleteIdentity
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2IdentitiesDeleteIdentityRequestBody"
                            examples:
                                byExternalId:
                                    summary: Delete by external ID
                                    description: Deleting using your system's identifier
                                    value:
                                        externalId: user_abc123
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2IdentitiesDeleteIdentityResponseBody"
                                examples:
                                    success:
                                        summary: Successful deletion
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                        description: OK
                    "400":
                        description: Bad request
                        content:
                            application/problem+json:
                                schema:
                                    $ref: "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/problem+json:
                                schema:
                                    "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/problem+json:
                                schema:
                                    "$ref": "#/components/schemas/ForbiddenErrorResponse"
                    "404":
                        description: Not found
                        content:
                            application/problem+json:
                                schema:
                                    "$ref": "#/components/schemas/NotFoundErrorResponse"
                    "500":
                        content:
                            application/problem+json:
                                schema:
                                    "$ref": "#/components/schemas/InternalServerErrorResponse"
                        description: Error
        index__getIdentity:
            post:
                tags:
                    - identities
                summary: Retrieve identity information
                description: |-
                    Retrieves detailed information about a specific identity by its external ID.
                    Identities in Unkey represent entities in your system (users, organizations, etc.) that can be associated with multiple API keys. This endpoint provides access to:
                    - Identity metadata that was stored during creation
                    - Rate limiting configurations that apply across all keys for this identity
                    This endpoint is useful for:
                    - Checking if an identity exists
                    - Retrieving metadata associated with an identity
                    - Viewing rate limit configurations
                    You must provide the externalId parameter to identify which identity to retrieve.
                operationId: identities.getIdentity
                x-speakeasy-name-override: getIdentity
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2IdentitiesGetIdentityRequestBody"
                            examples:
                                byExternalId:
                                    summary: Retrieve by external ID
                                    value:
                                        externalId: user_abc123
                    required: true
                responses:
                    "200":
                        description: Successfully retrieved the identity information
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2IdentitiesGetIdentityResponseBody"
                                examples:
                                    standard:
                                        summary: Identity with metadata and rate limits
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                id: id_1234567890abcdef
                                                externalId: user_abc123
                                                meta:
                                                    name: Alice Smith
                                                    email: alice@example.com
                                                    plan: premium
                                                    companyId: company_xyz
                                                ratelimits:
                                                    - name: api_requests
                                                      limit: 1000
                                                      duration: 60000
                                                    - name: heavy_operations
                                                      limit: 100
                                                      duration: 3600000
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden - Insufficient permissions to access this identity
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/ForbiddenErrorResponse"
                    "404":
                        description: Not found - The specified identity doesn't exist
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/NotFoundErrorResponse"
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/InternalServerErrorResponse"
        index__listIdentities:
            post:
                tags:
                    - identities
                summary: List identities in your workspace
                description: |-
                    Retrieves a paginated list of identities in your workspace. Identities represent entities in your system (users, organizations, etc.) that can be associated with multiple API keys for resource sharing.
                    This endpoint allows you to:
                    - Browse all identities in your workspace
                    - Search for specific identities by environment
                    - View rate limits configured for each identity
                    - Implement identity management interfaces
                    Results are paginated if there are more identities than the specified limit. Use the returned cursor to fetch subsequent pages.
                operationId: identities.listIdentities
                x-speakeasy-name-override: listIdentities
                x-speakeasy-pagination:
                    type: cursor
                    inputs:
                        - name: cursor
                          in: parameters
                          type: cursor
                    outputs:
                        nextCursor: "$.data.cursor"
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2IdentitiesListIdentitiesRequestBody"
                            examples:
                                basic:
                                    summary: Basic identity listing
                                    value:
                                        limit: 50
                                withPagination:
                                    summary: Fetch next page with cursor
                                    value:
                                        limit: 50
                                        cursor: cursor_eyJrZXkiOiJrZXlfMTIzNCJ9
                    required: true
                responses:
                    "200":
                        description: Successfully retrieved the list of identities
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2IdentitiesListIdentitiesResponseBody"
                                examples:
                                    standard:
                                        summary: Identity listing with pagination
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                identities:
                                                    - id: id_01H9TQP8NP8JN3X8HWSKPW43JE
                                                      externalId: user_abc123
                                                      ratelimits:
                                                        - name: api_requests
                                                          limit: 1000
                                                          duration: 60000
                                                        - name: heavy_operations
                                                          limit: 100
                                                          duration: 3600000
                                                    - id: id_02ZYR3Q9NP8JM4X8HWSKPW43JF
                                                      externalId: user_def456
                                                      ratelimits:
                                                        - name: api_requests
                                                          limit: 500
                                                          duration: 60000
                                                cursor: cursor_eyJsYXN0SWQiOiJpZF8wMlpZUjNROU5QOEpNNFg4SFdTS1BXNDNKRiJ9
                                                total: 247
                                    emptyList:
                                        summary: Empty identity list
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                                            data:
                                                identities: []
                                                total: 0
                    "400":
                        description: Bad Request - Invalid parameters
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized - Missing or invalid authentication
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden - Insufficient permissions
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/ForbiddenErrorResponse"
                    "500":
                        description: Internal Server Error
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/InternalServerErrorResponse"
        index__updateIdentity:
            post:
                tags:
                    - identities
                summary: Update an existing identity
                description: |-
                    Updates an existing identity's metadata and rate limits with support for partial updates. You can modify the metadata to reflect changes in user status, subscription plans, or other entity properties, and adjust rate limits to match new usage tiers or requirements.
                    This endpoint supports flexible identification using either the Unkey identity ID or your external ID, making it easy to integrate with existing user management systems. Fields not included in the request remain unchanged, allowing for targeted updates without affecting other identity properties.
                    Changes to rate limits take effect immediately for new API key verifications, though existing sessions may retain old limits briefly due to caching. When updating metadata, consider that this information is returned during key verification, so avoid storing sensitive data that shouldn't be exposed to client applications.
                    Common use cases include updating user plan information after subscription changes, adjusting rate limits for different service tiers, and maintaining current contact or organizational information associated with the identity.
                operationId: v2.identities.updateIdentity
                x-speakeasy-name-override: updateIdentity
                security:
                    - rootKey: []
                requestBody:
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/V2IdentitiesUpdateIdentityRequestBody"
                            examples:
                                updateMetadata:
                                    summary: Update identity metadata only
                                    value:
                                        externalId: user_123
                                        meta:
                                            name: Alice Smith
                                            email: alice.updated@example.com
                                            plan: enterprise
                    required: true
                responses:
                    "200":
                        content:
                            application/json:
                                schema:
                                    "$ref": "#/components/schemas/V2IdentitiesUpdateIdentityResponseBody"
                        description: OK
                    "400":
                        description: Bad request
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/BadRequestErrorResponse"
                    "401":
                        description: Unauthorized
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/UnauthorizedErrorResponse"
                    "403":
                        description: Forbidden
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/ForbiddenErrorResponse"
                    "404":
                        description: ""
                    description:
                        description: ""
                    content:
                        description: ""
                    "500":
                        description: Internal server error
                        content:
                            application/json:
                                schema:
                                    $ref: "#/components/schemas/InternalServerErrorResponse"
