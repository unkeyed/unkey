# Code generated by generate_bundle.go; DO NOT EDIT.
# Generated at: 2025-07-18T13:48:01Z
# Source: openapi-split.yaml

openapi: 3.0.0
info:
    title: Unkey API
    version: 2.0.0
    description: |-
        Unkey's API provides programmatic access for all resources within our platform.


        ### Authentication
        #
        This API uses HTTP Bearer authentication with root keys. Most endpoints require specific permissions associated with your root key. When making requests, include your root key in the `Authorization` header:
        ```
        Authorization: Bearer unkey_xxxxxxxxxxx
        ```

        All responses follow a consistent envelope structure that separates operational metadata from actual data. This design provides several benefits:
        - Debugging: Every response includes a unique requestId for tracing issues
        - Consistency: Predictable response format across all endpoints
        - Extensibility: Easy to add new metadata without breaking existing integrations
        - Error Handling: Unified error format with actionable information

        ### Success Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_123456"
          },
          "data": {
            // Actual response data here
          }
        }
        ```

        The meta object contains operational information:
        - `requestId`: Unique identifier for this request (essential for support)

        The data object contains the actual response data specific to each endpoint.

        ### Paginated Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_123456"
          },
          "data": [
            // Array of results
          ],
          "pagination": {
            "cursor": "next_page_token",
            "hasMore": true
          }
        }
        ```

        The pagination object appears on list endpoints and contains:
        - `cursor`: Token for requesting the next page
        - `hasMore`: Whether more results are available

        ### Error Response Format:
        ```json
        {
          "meta": {
            "requestId": "req_2c9a0jf23l4k567"
          },
          "error": {
            "detail": "The resource you are attempting to modify is protected and cannot be changed",
            "status": 403,
            "title": "Forbidden",
            "type": "https://unkey.com/docs/api-reference/errors-v2/unkey/application/protected_resource"
          }
        }
        ```

        Error responses include comprehensive diagnostic information:
        - `title`: Human-readable error summary
        - `detail`: Specific description of what went wrong
        - `status`: HTTP status code
        - `type`: Link to error documentation
        - `errors`: Array of validation errors (for 400 responses)

        This structure ensures you always have the context needed to debug issues and take corrective action.
servers:
    - url: https://api.unkey.com
x-speakeasy-retries:
    strategy: backoff
    backoff:
        initialInterval: 50
        maxInterval: 1000
        maxElapsedTime: 10000
        exponent: 1.5
    statusCodes:
        - 5XX
    retryConnectionErrors: true
security:
    - rootKey: []
paths:
    /v2/keys.setPermissions:
        $ref: "#/components/pathItems/index"
    /v2/keys.updateKey:
        $ref: "#/components/pathItems/index__updateKey"
    /v2/keys.removePermissions:
        $ref: "#/components/pathItems/index__removePermissions"
    /v2/keys.addRoles:
        $ref: "#/components/pathItems/index__addRoles"
    /v2/keys.addPermissions:
        $ref: "#/components/pathItems/index__addPermissions"
    /v2/keys.removeRoles:
        $ref: "#/components/pathItems/index__removeRoles"
    /v2/keys.updateCredits:
        $ref: "#/components/pathItems/index__updateCredits"
    /v2/keys.setRoles:
        $ref: "#/components/pathItems/index__setRoles"
    /v2/keys.deleteKey:
        $ref: "#/components/pathItems/index__deleteKey"
    /v2/keys.getKey:
        $ref: "#/components/pathItems/index__getKey"
    /v2/keys.createKey:
        $ref: "#/components/pathItems/index__createKey"
    /v2/keys.verifyKey:
        $ref: "#/components/pathItems/index__verifyKey"
    /v2/apis.createApi:
        $ref: "#/components/pathItems/index__createApi"
    /v2/apis.deleteApi:
        $ref: "#/components/pathItems/index__deleteApi"
    /v2/apis.getApi:
        $ref: "#/components/pathItems/index__getApi"
    /v2/apis.listKeys:
        $ref: "#/components/pathItems/index__listKeys"
    /v2/identities.createIdentity:
        $ref: "#/components/pathItems/index__createIdentity"
    /v2/identities.getIdentity:
        $ref: "#/components/pathItems/index__getIdentity"
    /v2/identities.listIdentities:
        $ref: "#/components/pathItems/index__listIdentities"
    /v2/identities.deleteIdentity:
        $ref: "#/components/pathItems/index__deleteIdentity"
    /v2/identities.updateIdentity:
        $ref: "#/components/pathItems/index__updateIdentity"
    /v2/ratelimit.limit:
        $ref: "#/components/pathItems/index__limit"
    /v2/ratelimit.setOverride:
        $ref: "#/components/pathItems/index__setOverride"
    /v2/ratelimit.getOverride:
        $ref: "#/components/pathItems/index__getOverride"
    /v2/ratelimit.listOverrides:
        $ref: "#/components/pathItems/index__listOverrides"
    /v2/ratelimit.deleteOverride:
        $ref: "#/components/pathItems/index__deleteOverride"
    /v2/permissions.listRoles:
        $ref: "#/components/pathItems/index__listRoles"
    /v2/permissions.createRole:
        $ref: "#/components/pathItems/index__createRole"
    /v2/permissions.createPermission:
        $ref: "#/components/pathItems/index__createPermission"
    /v2/permissions.getPermission:
        $ref: "#/components/pathItems/index__getPermission"
    /v2/permissions.listPermissions:
        $ref: "#/components/pathItems/index__listPermissions"
    /v2/permissions.deletePermission:
        $ref: "#/components/pathItems/index__deletePermission"
    /v2/permissions.deleteRole:
        $ref: "#/components/pathItems/index__deleteRole"
    /v2/permissions.getRole:
        $ref: "#/components/pathItems/index__getRole"
components:
    securitySchemes:
        rootKey:
            type: http
            scheme: bearer
            bearerFormat: root key
            description: |-
                Unkey uses API keys (root keys) for authentication. These keys authorize access to management operations in the API.
                To authenticate, include your root key in the Authorization header of each request:
                ```
                Authorization: Bearer unkey_123
                ```
                Root keys have specific permissions attached to them, controlling what operations they can perform. Key permissions follow a hierarchical structure with patterns like `resource.resource_id.action` (e.g., `apis.*.create_key`, `apis.*.read_api`).
                Security best practices:
                - Keep root keys secure and never expose them in client-side code
                - Use different root keys for different environments
                - Rotate keys periodically, especially after team member departures
                - Create keys with minimal necessary permissions following least privilege principle
                - Monitor key usage with audit logs.
    schemas:
        meta:
            type: object
            required:
                - requestId
            properties:
                requestId:
                    description: A unique id for this request. Always include this ID when contacting support about a specific API request. This identifier allows Unkey's support team to trace the exact request through logs and diagnostic systems to provide faster assistance.
                    example: req_123
                    type: string
            additionalProperties: false
            description: Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
        badRequestError:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/meta"
                error:
                    $ref: "#/components/schemas/badRequestErrorDetails"
            description: Error response for invalid requests that cannot be processed due to client-side errors. This typically occurs when request parameters are missing, malformed, or fail validation rules. The response includes detailed information about the specific errors in the request, including the location of each error and suggestions for fixing it. When receiving this error, check the 'errors' array in the response for specific validation issues that need to be addressed before retrying.
        badRequestErrorDetails:
            allOf:
                - $ref: "#/components/schemas/baseError"
                - type: object
                  properties:
                    errors:
                        description: List of individual validation errors that occurred in the request. Each error provides specific details about what failed validation, where the error occurred in the request, and suggestions for fixing it. This granular information helps developers quickly identify and resolve multiple issues in a single request without having to make repeated API calls.
                        items:
                            $ref: "#/components/schemas/validationError"
                        type: array
                  required:
                    - errors
            description: Extended error details specifically for bad request (400) errors. This builds on the BaseError structure by adding an array of individual validation errors, making it easy to identify and fix multiple issues at once.
        baseError:
            properties:
                detail:
                    description: A human-readable explanation specific to this occurrence of the problem. This provides detailed information about what went wrong and potential remediation steps. The message is intended to be helpful for developers troubleshooting the issue.
                    example: Property foo is required but is missing.
                    type: string
                status:
                    description: HTTP status code that corresponds to this error. This will match the status code in the HTTP response. Common codes include `400` (Bad Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict), and `500` (Internal Server Error).
                    example: 404
                    format: int
                    type: integer
                title:
                    description: A short, human-readable summary of the problem type. This remains constant from occurrence to occurrence of the same problem and should be used for programmatic handling.
                    example: Not Found
                    type: string
                type:
                    description: A URI reference that identifies the problem type. This provides a stable identifier for the error that can be used for documentation lookups and programmatic error handling. When followed, this URI should provide human-readable documentation for the problem type.
                    example: https://unkey.com/docs/api-reference/errors-v2/unkey/resource/not_found
                    type: string
            required:
                - title
                - detail
                - status
                - type
            type: object
            additionalProperties: false
            description: Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
        validationError:
            additionalProperties: false
            properties:
                location:
                    description: |-
                        JSON path indicating exactly where in the request the error occurred. This helps pinpoint the problematic field or parameter. Examples include:
                        - 'body.name' (field in request body)
                        - 'body.items[3].tags' (nested array element)
                        - 'path.apiId' (path parameter)
                        - 'query.limit' (query parameter)
                        Use this location to identify exactly which part of your request needs correction.
                    type: string
                    example: body.permissions[0].name
                message:
                    description: Detailed error message explaining what validation rule was violated. This provides specific information about why the field or parameter was rejected, such as format errors, invalid values, or constraint violations.
                    type: string
                    example: Must be at least 3 characters long
                fix:
                    description: A human-readable suggestion describing how to fix the error. This provides practical guidance on what changes would satisfy the validation requirements. Not all validation errors include fix suggestions, but when present, they offer specific remediation advice.
                    type: string
                    example: Ensure the name uses only alphanumeric characters, underscores, and hyphens
            required:
                - location
                - message
            type: object
            description: Individual validation error details. Each validation error provides precise information about what failed, where it failed, and how to fix it, enabling efficient error resolution.
        unauthorizedError:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/meta"
                error:
                    $ref: "#/components/schemas/baseError"
            description: |-
                Error response when authentication has failed or credentials are missing. This occurs when:
                - No authentication token is provided in the request
                - The provided token is invalid, expired, or malformed
                - The token format doesn't match expected patterns

                To resolve this error, ensure you're including a valid root key in the Authorization header.
        forbiddenError:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/meta"
                error:
                    $ref: "#/components/schemas/baseError"
            description: |-
                Error response when the provided credentials are valid but lack sufficient permissions for the requested operation. This occurs when:
                - The root key doesn't have the required permissions for this endpoint
                - The operation requires elevated privileges that the current key lacks
                - Access to the requested resource is restricted based on workspace settings

                To resolve this error, ensure your root key has the necessary permissions or contact your workspace administrator.
        notFoundError:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/meta"
                error:
                    $ref: "#/components/schemas/baseError"
            description: |-
                Error response when the requested resource cannot be found. This occurs when:
                - The specified resource ID doesn't exist in your workspace
                - The resource has been deleted or moved
                - The resource exists but is not accessible with current permissions

                To resolve this error, verify the resource ID is correct and that you have access to it.
        internalServerError:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/meta"
                error:
                    $ref: "#/components/schemas/baseError"
            description: |-
                Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.

                When you encounter this error:
                - The request ID in the response can help Unkey support investigate the issue
                - The error is likely temporary and retrying may succeed
                - If the error persists, contact Unkey support with the request ID
        RatelimitRequest:
            type: object
            required:
                - name
                - limit
                - duration
                - autoApply
            properties:
                name:
                    description: |-
                        The name of this rate limit. This name is used to identify which limit to check during key verification.

                        Best practices for limit names:
                        - Use descriptive, semantic names like 'api_requests', 'heavy_operations', or 'downloads'
                        - Be consistent with naming conventions across your application
                        - Create separate limits for different resource types or operation costs
                        - Consider using namespaced names for better organization (e.g., 'files.downloads', 'compute.training')

                        You will reference this exact name when verifying keys to check against this specific limit.
                    type: string
                    example: api
                    minLength: 3
                    maxLength: 128
                limit:
                    description: |-
                        The maximum number of operations allowed within the specified time window.

                        When this limit is reached, verification requests will fail with `code=RATE_LIMITED` until the window resets. The limit should reflect:
                        - Your infrastructure capacity and scaling limitations
                        - Fair usage expectations for your service
                        - Different tier levels for various user types
                        - The relative cost of the operations being limited

                        Higher values allow more frequent access but may impact service performance.
                    type: integer
                    format: int64
                    minimum: 1
                duration:
                    description: |-
                        The duration for each ratelimit window in milliseconds.

                        This controls how long the rate limit counter accumulates before resetting. Common values include:
                        - 1000 (1 second): For strict per-second limits on high-frequency operations
                        - 60000 (1 minute): For moderate API usage control
                        - 3600000 (1 hour): For less frequent but costly operations
                        - 86400000 (24 hours): For daily quotas

                        Shorter windows provide more frequent resets but may allow large burst usage. Longer windows provide more consistent usage patterns but take longer to reset after limit exhaustion.
                    type: integer
                    format: int64
                    minimum: 1000
                autoApply:
                    description: |-
                        Whether this ratelimit should be automatically applied when verifying a key.
                    type: boolean
                    default: false
        pagination:
            type: object
            properties:
                cursor:
                    type: string
                    minLength: 1
                    maxLength: 1024
                    description: |
                        Opaque pagination token for retrieving the next page of results.
                        Include this exact value in the cursor field of subsequent requests.
                        Cursors are temporary and may expire after extended periods.
                    example: eyJrZXkiOiJrZXlfMTIzNCIsInRzIjoxNjk5Mzc4ODAwfQ==
                hasMore:
                    type: boolean
                    description: |
                        Indicates whether additional results exist beyond this page.
                        When true, use the cursor to fetch the next page.
                        When false, you have reached the end of the result set.
                    example: true
            required:
                - hasMore
            additionalProperties: false
            description: Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
        key:
            type: object
            properties:
                keyId:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: Unique identifier for this key.
                    example: key_1234567890abcdef
                start:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: First few characters of the key for identification.
                    example: sk_test_abc123
                enabled:
                    type: boolean
                    description: Whether the key is enabled or disabled.
                    example: true
                name:
                    type: string
                    maxLength: 255
                    description: Human-readable name for this key.
                    example: Production API Key
                meta:
                    type: object
                    additionalProperties: true
                    maxProperties: 100
                    description: Custom metadata associated with this key.
                    example:
                        plan: premium
                        region: us-east-1
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key was created.
                    example: 1701425400000
                updatedAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key was last updated.
                    example: 1701425400000
                expires:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: Unix timestamp in milliseconds when key expires (if set).
                    example: 1735689600000
                externalId:
                    type: string
                    maxLength: 255
                    description: External identifier linking this key to an entity in your system.
                    example: user_12345
                permissions:
                    type: array
                    items:
                        type: string
                    description: List of permissions granted to this key.
                    example:
                        - documents.read
                        - documents.write
                roles:
                    type: array
                    items:
                        type: string
                    description: List of roles assigned to this key.
                    example:
                        - editor
                        - viewer
                credits:
                    type: object
                    properties:
                        remaining:
                            type: integer
                            format: int64
                            description: Number of credits remaining for this key.
                        refill:
                            type: object
                            properties:
                                interval:
                                    type: string
                                    enum:
                                        - daily
                                        - monthly
                                    description: How often credits are refilled.
                                amount:
                                    type: integer
                                    format: int64
                                    description: Number of credits added during refill.
                                refillDay:
                                    type: integer
                                    minimum: 1
                                    maximum: 31
                                    description: Day of month for monthly refills.
                    description: Credit system information for this key.
                ratelimits:
                    type: array
                    items:
                        type: object
                        properties:
                            name:
                                type: string
                                description: Name of the rate limit.
                            limit:
                                type: integer
                                description: Maximum requests allowed.
                            duration:
                                type: integer
                                description: Duration in milliseconds.
                    description: Rate limit configuration for this key.
            required:
                - keyId
                - enabled
                - createdAt
            additionalProperties: false
        conflictError:
            type: object
            required:
                - meta
                - error
            properties:
                meta:
                    $ref: "#/components/schemas/meta"
                error:
                    $ref: "#/components/schemas/baseError"
            description: |-
                Error response when the request conflicts with the current state of the resource. This occurs when:
                - Attempting to create a resource that already exists
                - Modifying a resource that has been changed by another operation
                - Violating unique constraints or business rules

                To resolve this error, check the current state of the resource and adjust your request accordingly.
        RatelimitResponse:
            type: object
            properties:
                id:
                    type: string
                    minLength: 8
                    maxLength: 255
                    pattern: "^rl_[a-zA-Z0-9_]+$"
                    description: Unique identifier for this rate limit configuration.
                    example: rl_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 128
                    pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                    description: Human-readable name for this rate limit.
                    example: api_requests
                limit:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 1000000
                    description: Maximum requests allowed within the time window.
                    example: 1000
                duration:
                    type: integer
                    format: int64
                    minimum: 1000
                    maximum: 2592000000
                    description: Rate limit window duration in milliseconds.
                    example: 3600000
                autoApply:
                    type: boolean
                    description: Whether this rate limit was automatically applied when verifying the key.
                    example: true
            required:
                - id
                - name
                - limit
                - duration
                - autoApply
            additionalProperties: false
        RatelimitOverride:
            type: object
            additionalProperties: false
            properties:
                namespaceId:
                    description: The unique identifier of the rate limit namespace this override belongs to. This links the override to a specific namespace context, ensuring the override only applies within that namespace.
                    type: string
                    minLength: 1
                    maxLength: 255
                overrideId:
                    description: The unique identifier of this specific rate limit override. This ID is generated when the override is created and can be used for management operations like updating or deleting the override.
                    type: string
                    minLength: 1
                    maxLength: 255
                duration:
                    description: The duration in milliseconds for this override's rate limit window. This may differ from the default duration for the namespace, allowing custom time windows for specific entities. After this duration elapses, the rate limit counter for affected identifiers resets to zero.
                    format: int64
                    type: integer
                    minimum: 1000
                identifier:
                    description: |-
                        The identifier pattern this override applies to. This determines which entities receive the custom rate limit.

                        This can be:
                        - An exact identifier for a specific entity
                        - A pattern with wildcards for matching multiple entities

                        Wildcard examples:
                        - 'admin_*' matches any identifier starting with 'admin_'
                        - '*_test' matches any identifier ending with '_test'
                        - '*premium*' matches any identifier containing 'premium'

                        More complex patterns can combine multiple wildcards. Detailed documentation on pattern matching rules is available at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
                    type: string
                    minLength: 1
                    maxLength: 255
                limit:
                    description: |-
                        The maximum number of requests allowed for entities matching this override. This replaces the default limit for the namespace when applied.

                        Common use cases:
                        - Higher limits for premium customers
                        - Reduced limits for abusive or suspicious entities
                        - Zero limit to completely block specific patterns
                        - Custom tier-based limits for different customer segments
                    format: int64
                    type: integer
                    minimum: 0
            required:
                - namespaceId
                - overrideId
                - duration
                - identifier
                - limit
        Role:
            type: object
            properties:
                id:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier for this role within Unkey's system.
                        Generated automatically when the role is created and used to reference this role in API operations.
                        Always begins with 'role_' followed by alphanumeric characters and underscores.
                    example: role_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The human-readable name for this role that describes its function.
                        Should be descriptive enough for administrators to understand what access this role provides.
                        Use clear, semantic names that reflect the job function or responsibility level.
                        Names must be unique within your workspace to avoid confusion during role assignment.
                    example: "support.readonly"
                description:
                    type: string
                    maxLength: 2048
                    description: |
                        Optional detailed explanation of what this role encompasses and what access it provides.
                        Helps team members understand the role's scope, intended use cases, and security implications.
                        Include information about what types of users should receive this role and what they can accomplish.
                        Not visible to end users - this is for internal documentation and access control audits.
                    example: "Provides read-only access for customer support representatives to view user accounts and support tickets"
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: |
                        Unix timestamp in milliseconds indicating when this role was first created.
                        Useful for auditing and understanding the evolution of your access control structure.
                        Automatically set by the system and cannot be modified.
                    example: 1701425400000
                permissions:
                    type: array
                    items:
                        "$ref": "#/components/schemas/Permission"
                    maxItems: 100
                    description: |
                        Complete list of permissions currently assigned to this role.
                        Each permission grants specific access rights that will be inherited by any keys or users assigned this role.
                        Use this list to understand the full scope of access provided by this role.
                        Permissions can be added or removed from roles without affecting the role's identity or other properties.
                        Empty array indicates a role with no permissions currently assigned.
            required:
                - id
                - name
                - permissions
                - createdAt
            additionalProperties: false
        Permission:
            type: object
            properties:
                id:
                    type: string
                    minLength: 3
                    maxLength: 255
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: |
                        The unique identifier for this permission within Unkey's system.
                        Generated automatically when the permission is created and used to reference this permission in API operations.
                        Always begins with 'perm_' followed by alphanumeric characters and underscores.
                    example: perm_1234567890abcdef
                name:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The human-readable name for this permission that describes its purpose.
                        Should be descriptive enough for developers to understand what access it grants.
                        Use clear, semantic names that reflect the resources or actions being permitted.
                        Names must be unique within your workspace to avoid confusion and conflicts.
                    example: "users.read"
                slug:
                    type: string
                    minLength: 1
                    maxLength: 512
                    description: |
                        The URL-safe identifier when this permission was created.
                    example: users-read
                description:
                    type: string
                    maxLength: 2048
                    description: |
                        Optional detailed explanation of what this permission grants access to.
                        Helps team members understand the scope and implications of granting this permission.
                        Include information about what resources can be accessed and what actions can be performed.
                        Not visible to end users - this is for internal documentation and team clarity.
                    example: "Allows reading user profile information and account details"
                createdAt:
                    type: integer
                    format: int64
                    minimum: 0
                    maximum: 9223372036854776000
                    description: |
                        Unix timestamp in milliseconds indicating when this permission was first created.
                        Useful for auditing and understanding the evolution of your permission structure.
                        Automatically set by the system and cannot be modified.
                    example: 1701425400000
            required:
                - id
                - name
                - slug
                - createdAt
    responses:
        badRequestErrorResponse:
            description: |-
                Bad Request - Invalid request format, missing required fields, or validation errors
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/badRequestError"
                    examples:
                        validationError:
                            summary: Validation error example
                            value:
                                meta:
                                    requestId: req_2c9a0jf23l4k567
                                error:
                                    detail: Request failed validation due to invalid field values
                                    status: 400
                                    title: Bad Request
                                    type: https://unkey.com/docs/api-reference/errors-v2/unkey/client/validation_error
                                    errors:
                                        - location: body.permissions[0].name
                                          message: Must be at least 3 characters long
                                          fix: Ensure the name uses only alphanumeric characters, underscores, and hyphens
        unauthorizedErrorResponse:
            description: |-
                Unauthorized - Missing or invalid authentication credentials
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/unauthorizedError"
                    examples:
                        invalidToken:
                            summary: Invalid authentication token
                            value:
                                meta:
                                    requestId: req_2c9a0jf23l4k567
                                error:
                                    detail: The provided authentication token is invalid or has expired
                                    status: 401
                                    title: Unauthorized
                                    type: https://unkey.com/docs/api-reference/errors-v2/unkey/auth/invalid_token
        forbiddenErrorResponse:
            description: |-
                Forbidden - Insufficient permissions to access the requested resource
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/forbiddenError"
                    examples:
                        insufficientPermissions:
                            summary: Insufficient permissions
                            value:
                                meta:
                                    requestId: req_2c9a0jf23l4k567
                                error:
                                    detail: Your root key lacks the required permissions for this operation
                                    status: 403
                                    title: Forbidden
                                    type: https://unkey.com/docs/api-reference/errors-v2/unkey/auth/insufficient_permissions
        notFoundErrorResponse:
            description: |-
                Not Found - The requested resource does not exist
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/notFoundError"
                    examples:
                        resourceNotFound:
                            summary: Resource not found
                            value:
                                meta:
                                    requestId: req_2c9a0jf23l4k567
                                error:
                                    detail: The requested resource could not be found
                                    status: 404
                                    title: Not Found
                                    type: https://unkey.com/docs/api-reference/errors-v2/unkey/resource/not_found
        internalServerErrorResponse:
            description: |-
                Internal Server Error - An unexpected error occurred on the server
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/internalServerError"
                    examples:
                        serverError:
                            summary: Internal server error
                            value:
                                meta:
                                    requestId: req_2c9a0jf23l4k567
                                error:
                                    detail: An unexpected error occurred while processing your request
                                    status: 500
                                    title: Internal Server Error
                                    type: https://unkey.com/docs/api-reference/errors-v2/unkey/server/internal_error
        conflictErrorResponse:
            description: |-
                Conflict - The request conflicts with the current state of the resource
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/conflictError"
                    examples:
                        duplicateResource:
                            summary: Duplicate resource
                            value:
                                meta:
                                    requestId: req_2c9a0jf23l4k567
                                error:
                                    detail: A resource with this identifier already exists
                                    status: 409
                                    title: Conflict
                                    type: https://unkey.com/docs/api-reference/errors-v2/unkey/resource/conflict
    pathItems:
        index:
            post:
                tags:
                    - keys
                summary: Set (replace) all permissions on an API key
                description: |-
                    Sets the permissions for an existing API key by replacing all existing direct permissions with the provided set. This is a complete replacement operation - permissions not specified in the request will be removed.
                    Use this endpoint when you want to:
                    - Synchronize API key permissions with an external system
                    - Reset a key's permissions to a known state
                    - Apply a standardized permission template to a key
                    - Remove all permissions from a key (by providing an empty array)
                    - Fix over-permissioned keys by applying the precise set needed
                    Key differences from other endpoints:
                    - Unlike addPermissions, this replaces all permissions instead of just adding
                    - Unlike removePermissions, this sets the complete state rather than removing specific permissions
                    - The advantage is atomic replacement in a single operation versus multiple incremental changes
                    Only direct permissions are affected - permissions granted through roles remain unchanged. Changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires (typically under 30 seconds).
                operationId: setPermissions
                x-speakeasy-name-override: setPermissions
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                    - permissions
                                properties:
                                    keyId:
                                        type: string
                                        description: The unique identifier of the key to set permissions on (begins with 'key_'). This ID comes from the createKey response and identifies which key will have its permissions replaced. This is the database ID, not the actual API key string that users authenticate with.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                        minLength: 3
                                    permissions:
                                        type: array
                                        description: |-
                                            The permissions to set for this key. This is a complete replacement operation - it overwrites all existing direct permissions with this new set.
                                            Key behaviors:
                                            - Providing an empty array removes all direct permissions from the key
                                            - This only affects direct permissions - permissions granted through roles are not affected
                                            - All existing direct permissions not included in this list will be removed
                                            - The complete list approach allows synchronizing permissions with external systems
                                            - Permission changes take effect immediately for new verifications
                                            Unlike addPermissions (which only adds) or removePermissions (which only removes), this endpoint performs a wholesale replacement of the permission set.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: The ID of an existing permission (begins with `perm_`). Provide either ID or slug for each permission, not both. Using ID is more precise and guarantees you're referencing the exact permission intended, regardless of slug changes or duplicates. IDs are particularly useful in automation scripts and when migrating permissions between environments.
                                                    example: perm_1n9McEIBSqy44Qy7hzWyM5
                                                    minLength: 3
                                                slug:
                                                    type: string
                                                    description: The slug of the permission. Provide either ID or slug for each permission, not both. Slugs must match exactly as defined in your permission system - including case sensitivity and the complete hierarchical path. Slugs are generally more human-readable but can be ambiguous if not carefully managed across your workspace.
                                                    example: documents.write
                                                    minLength: 1
                                                create:
                                                    type: boolean
                                                    description: |-
                                                        When true, if a permission with this slug doesn't exist, it will be automatically created on-the-fly. Only works when specifying slug, not ID.
                                                        SECURITY CONSIDERATIONS:
                                                        - Requires the `rbac.*.create_permission` permission on your root key
                                                        - Created permissions are permanent and visible throughout your workspace
                                                        - Use carefully to avoid permission proliferation and inconsistency
                                                        - Consider using a controlled process for permission creation instead
                                                        - Typos with `create=true` will create unintended permissions that persist in your system
                                                    default: false
                                            additionalProperties: false
                                additionalProperties: false
                            examples:
                                removeAll:
                                    summary: Remove all permissions from key
                                    description: This example won't work as expected! The permissions array must contain at least one permission to remove. To remove all permissions, use the setPermissions endpoint with an empty permissions array instead.
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions: []
                                basic:
                                    summary: Set permissions using IDs
                                    description: Using permission IDs is the most precise approach for setting permissions, especially in automation scripts where exact references are important.
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions:
                                            - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                            - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                                withNames:
                                    summary: Add permissions using slugs
                                    description: Using permission slugs is more readable and maintainable. Slugs must be unique within your workspace.
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions:
                                            - slug: documents.write
                                            - slug: documents.delete
                                withCreation:
                                    summary: Set with permission creation
                                    description: This example demonstrates setting permissions while simultaneously creating new ones that don't exist yet. Requires the `rbac.*.create_permission` permission on your root key.
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions:
                                            - slug: documents.write
                                            - slug: reports.export
                                              create: true
                                            - name: reports.schedule
                                              create: true
                                mixed:
                                    summary: Mix of ID and name references
                                    description: You can combine different reference methods in a single request - some permissions by ID, others by name, and even create new ones on the fly.
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions:
                                            - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                            - slug: documents.delete
                                            - slug: reports.view
                                              create: true
                responses:
                    "200":
                        description: Permissions successfully set on the key. The previous direct permission set has been completely replaced with the new set specified in the request.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            description: |-
                                                Complete list of all permissions now directly assigned to the key after the set operation has completed.
                                                The response includes:
                                                - The comprehensive, updated set of direct permissions (reflecting the complete replacement)
                                                - Both ID and name for each permission for easy reference
                                                - Permissions sorted alphabetically by name for consistent response format
                                                Important notes:
                                                - This only shows direct permissions, not those granted through roles
                                                - An empty array means the key has no direct permissions assigned
                                                - For a complete permission picture including roles, use keys.getKey instead
                                                - All permission changes are logged in the audit log for security tracking
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The unique identifier of the permission
                                                        example: perm_1n9McEIBSqy44Qy7hzWyM5
                                                    name:
                                                        type: string
                                                        description: The name of the permission
                                                        example: documents.write
                                examples:
                                    standard:
                                        summary: Complete list of permissions
                                        value:
                                            meta:
                                                requestId: req_2cGKbMxRyIzhCxo1Idjz8q
                                            data:
                                                - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                                  name: documents.write
                                                - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                                                  name: documents.delete
                                                - id: perm_3qRsTu2vWxYzAbCdEfGhIj
                                                  name: reports.view
                                    empty:
                                        summary: All permissions removed
                                        value:
                                            meta:
                                                requestId: req_3qRsTu2vWxYzAbCdEfGhIj
                                            data: []
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__updateKey:
            post:
                tags:
                    - keys
                summary: Update API key properties without changing the key itself
                description: |-
                    Modifies the properties of an existing API key without changing the key string itself. This endpoint supports partial updates - you only need to include the fields you want to change.

                    You can use this endpoint to:
                    - Rename keys for better organization
                    - Update metadata to reflect changes in user status, plan, or properties
                    - Modify usage limits or rate limits
                    - Enable or disable keys temporarily
                    - Change key expiration dates
                    - Add or update user identifiers

                    To explicitly remove/disable a feature, set its field to null. Fields not included in the request remain unchanged. For managing permissions or roles, use the specialized endpoints (keys.addPermissions, keys.removePermissions, etc.) instead.

                    Changes may take up to 30 seconds to propagate to all regions due to cache invalidation. For immediate effect in the current region, follow the update with a verification request.
                operationId: updateKey
                x-speakeasy-name-override: updateKey
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                properties:
                                    keyId:
                                        type: string
                                        description: The unique identifier of the key to update
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                        minLength: 3
                                    name:
                                        type: string
                                        nullable: true
                                        description: Human-readable name for the key
                                        example: Updated API Key
                                    externalId:
                                        type: string
                                        nullable: true
                                        minLength: 1
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_.-]+$"
                                        description: External identifier for linking to your system
                                        example: user_12345
                                    meta:
                                        type: object
                                        nullable: true
                                        description: Additional metadata for the key
                                        additionalProperties: true
                                    expires:
                                        type: integer
                                        nullable: true
                                        format: int64
                                        minimum: 0
                                        maximum: 4102444800000 # January 1, 2100 - reasonable future limit
                                        description: |
                                            Sets when this key automatically expires as a Unix timestamp in milliseconds.
                                            Verification fails with code=EXPIRED immediately after this time passes.
                                            Omitting this field preserves the current expiration, while setting null makes the key permanent.

                                            Avoid setting timestamps in the past as they immediately invalidate the key.
                                            Keys expire based on server time, not client time, which prevents timezone-related issues.
                                            Active sessions continue until their next verification attempt after expiry.
                                        example: 1704067200000
                                    credits:
                                        type: object
                                        description: Credit configuration and remaining balance for this key.
                                        properties:
                                            remaining:
                                                type: integer
                                                format: int64
                                                nullable: true
                                                minimum: 0
                                                maximum: 9223372036854775807
                                                description: Number of credits remaining (null for unlimited).
                                                example: 1000
                                            refill:
                                                type: object
                                                description: Configuration for automatic credit refill behavior.
                                                properties:
                                                    interval:
                                                        type: string
                                                        enum: [daily, monthly]
                                                        description: How often credits are automatically refilled.
                                                        example: monthly
                                                    amount:
                                                        type: integer
                                                        format: int64
                                                        minimum: 1
                                                        maximum: 9223372036854775807
                                                        description: Number of credits to add during each refill cycle.
                                                        example: 1000
                                                    refillDay:
                                                        type: integer
                                                        minimum: 1
                                                        maximum: 31
                                                        description: |
                                                            Day of the month for monthly refills (1-31).
                                                            Only required when interval is 'monthly'.
                                                            For days beyond the month's length, refill occurs on the last day of the month.
                                                        example: 15
                                                required:
                                                    - interval
                                                    - amount
                                                additionalProperties: false
                                        required:
                                            - remaining
                                        additionalProperties: false
                                    ratelimits:
                                        type: array
                                        maxItems: 50 # Reasonable limit for rate limit configurations per key
                                        items:
                                            "$ref": "#/components/schemas/RatelimitRequest"
                                        description: |
                                            Defines time-based rate limits that protect against abuse by controlling request frequency.
                                            Omitting this field preserves existing rate limits, while setting null removes all rate limits.
                                            Unlike credits which track total usage, rate limits reset automatically after each window expires.
                                            Multiple rate limits can control different operation types with separate thresholds and windows.
                                    enabled:
                                        type: boolean
                                        description: |
                                            Controls whether the key is currently active for verification requests.
                                            When set to `false`, all verification attempts fail with `code=DISABLED` regardless of other settings.
                                            Omitting this field preserves the current enabled status.
                                            Useful for temporarily suspending access during billing issues, security incidents, or maintenance windows without losing key configuration.
                                        example: true
                                    roles:
                                        type: array
                                        maxItems: 100 # Reasonable limit for role assignments per key
                                        items:
                                            type: string
                                            minLength: 1
                                            maxLength: 100 # Keep role names concise and readable
                                            pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
                                            description: |
                                                Assigns existing roles to this key for permission management through role-based access control.
                                                Roles must already exist in your workspace before assignment.
                                                During verification, all permissions from assigned roles are checked against requested permissions.
                                                Roles provide a convenient way to group permissions and apply consistent access patterns across multiple keys.
                                        example:
                                            - api_admin
                                            - billing_reader
                                    permissions:
                                        type: array
                                        maxItems: 1000 # Allow extensive permission sets for complex applications
                                        items:
                                            type: string
                                            minLength: 1
                                            maxLength: 100 # Keep permission names concise and readable
                                            pattern: "^[a-zA-Z0-9_]+$"
                                            description: |
                                                Grants specific permissions directly to this key without requiring role membership.
                                                Wildcard permissions like `documents.*` grant access to all sub-permissions including `documents.read` and `documents.write`.
                                                Direct permissions supplement any permissions inherited from assigned roles.
                                        example:
                                            - documents.read
                                            - documents.write
                                            - settings.view
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Update key name and external ID
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        name: Updated API Key
                                        externalId: user_12345
                                withMeta:
                                    summary: Update key with metadata
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        name: Production API Key
                                        meta:
                                            environment: production
                                            team: backend
                responses:
                    "200":
                        description: Key successfully updated with the new values
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            required:
                                                - keyId
                                            properties:
                                                keyId:
                                                    type: string
                                                    description: The unique identifier of the updated key
                                                    example: key_2cGKbMxRyIzhCxo1Idjz8q
                                                name:
                                                    type: string
                                                    nullable: true
                                                    description: The updated name of the key
                                                    example: Updated API Key
                                                externalId:
                                                    type: string
                                                    nullable: true
                                                    description: The updated external identifier
                                                    example: user_12345
                                examples:
                                    standard:
                                        summary: Key updated successfully
                                        value:
                                            meta:
                                                requestId: req_2cGKbMxRyIzhCxo1Idjz8q
                                            data:
                                                keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                                name: Updated API Key
                                                externalId: user_12345
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__removePermissions:
            post:
                tags:
                    - keys
                summary: Remove permissions from an API key
                description: |-
                    Removes one or more permissions from an existing API key. This endpoint is used to selectively revoke access rights from a key without deleting it or affecting other permissions.
                    Key features:
                    - Selective removal - revoke specific permissions while leaving others intact
                    - Direct permissions only - doesn't affect permissions granted through roles
                    - Idempotent operation - removing permissions multiple times has no additional effect
                    Use this endpoint when downgrading user access privileges, removing temporary elevated permissions, implementing granular permission adjustments, or revoking access to specific resources.
                operationId: removePermissions
                x-speakeasy-name-override: removePermissions
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                    - permissions
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to remove permissions from (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key will lose permissions.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        type: array
                                        minItems: 1
                                        maxItems: 1000
                                        description: |
                                            The permissions to remove from this key.
                                            Operations are idempotent - removing non-existent permissions has no effect.
                                            Permission changes take effect immediately for new verifications.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: |
                                                        The ID of an existing permission (begins with 'perm_').
                                                        Provide either ID or slug for each permission, not both.
                                                    example: perm_1n9McEIBSqy44Qy7hzWyM5
                                                slug:
                                                    type: string
                                                    description: |
                                                        The slug of the permission.
                                                        Provide either ID or slug for each permission, not both.
                                                    example: documents.write
                                            oneOf:
                                                - required: [id]
                                                - required: [slug]
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully removed permissions from the key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            description: |
                                                Complete list of all permissions still directly assigned to the key after removing the specified permissions.
                                                This shows the remaining permissions after the removal operation.
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The unique identifier of the permission
                                                        example: perm_1n9McEIBSqy44Qy7hzWyM5
                                                    name:
                                                        type: string
                                                        description: The name of the permission
                                                        example: documents.write
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__addRoles:
            post:
                tags:
                    - keys
                summary: Add roles to an API key
                description: |-
                    Adds one or more roles to an existing API key without affecting existing roles or permissions. This is an additive operation that supplements the key's current role assignments.
                    Use this endpoint when you need to grant additional role-based access to a key, such as promoting user privileges or enabling new feature sets through role inheritance.
                    Role assignments take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
                operationId: addRoles
                x-speakeasy-name-override: addRoles
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                    - roles
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to add roles to (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key will receive additional roles.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        type: array
                                        minItems: 1
                                        maxItems: 100
                                        description: |
                                            The roles to add to this key.
                                            Operations are idempotent - adding existing roles has no effect and causes no errors.
                                            All roles must already exist in the workspace.
                                            Role assignments take effect immediately for new verifications.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: |
                                                        The ID of an existing role (begins with 'role_').
                                                        Provide either ID or name for each role, not both.
                                                    example: role_1n9McEIBSqy44Qy7hzWyM5
                                                name:
                                                    type: string
                                                    description: |
                                                        The name of the role.
                                                        Provide either ID or name for each role, not both.
                                                    example: editor
                                            oneOf:
                                                - required: [id]
                                                - required: [name]
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully added roles to the key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            description: |
                                                Complete list of all roles now assigned to the key after adding the new roles.
                                                This includes both previously existing roles and the newly added ones.
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The unique identifier of the role
                                                        example: role_1n9McEIBSqy44Qy7hzWyM5
                                                    name:
                                                        type: string
                                                        description: The name of the role
                                                        example: editor
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__addPermissions:
            post:
                tags:
                    - keys
                summary: Add permissions to an API key
                description: |-
                    Adds one or more permissions to an existing API key without affecting existing permissions or roles. This is an additive operation that supplements the key's current permission set.
                    Use this endpoint when you need to grant additional access rights to a key, such as upgrading user privileges, enabling new features, or implementing progressive permission models.
                    Only direct permissions are affected - permissions granted through roles remain unchanged. Changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
                operationId: addPermissions
                x-speakeasy-name-override: addPermissions
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                    - permissions
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to add permissions to (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key will receive additional permissions.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                    permissions:
                                        type: array
                                        minItems: 1
                                        maxItems: 1000
                                        description: |
                                            The permissions to add to this key. This is an additive operation that supplements existing permissions.
                                            Operations are idempotent - adding existing permissions has no effect and causes no errors.
                                            Permission changes take effect immediately for new verifications.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: |
                                                        The ID of an existing permission (begins with 'perm_').
                                                        Provide either ID or slug for each permission, not both.
                                                    example: perm_1n9McEIBSqy44Qy7hzWyM5
                                                slug:
                                                    type: string
                                                    description: |
                                                        The slug of the permission.
                                                        Provide either ID or slug for each permission, not both.
                                                    example: documents.write
                                                name:
                                                    type: string
                                                    description: |
                                                        The name of the permission to create if it doesn't exist.
                                                        Requires the 'create' flag to be true.
                                                    example: reports.export
                                                create:
                                                    type: boolean
                                                    description: |
                                                        Whether to create the permission if it doesn't exist.
                                                        Requires appropriate permissions on your root key.
                                                    example: true
                                            oneOf:
                                                - required: [id]
                                                - required: [slug]
                                                - required: [name, create]
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Add permissions using IDs
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions:
                                            - id: perm_1n9McEIBSqy44Qy7hzWyM5
                                            - id: perm_2zF4mNyP9BsRj2aQwDxVkT
                                withSlugs:
                                    summary: Add permissions using slugs
                                    value:
                                        keyId: key_2cGKbMxRyIzhCxo1Idjz8q
                                        permissions:
                                            - slug: documents.write
                                            - slug: documents.delete
                responses:
                    "200":
                        description: Successfully added permissions to the key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            description: |
                                                Complete list of all permissions now directly assigned to the key after adding the new permissions.
                                                This includes both previously existing permissions and the newly added ones.
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The unique identifier of the permission
                                                        example: perm_1n9McEIBSqy44Qy7hzWyM5
                                                    name:
                                                        type: string
                                                        description: The name of the permission
                                                        example: documents.write
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__removeRoles:
            post:
                tags:
                    - keys
                summary: Remove roles from an API key
                description: |-
                    Removes one or more roles from an existing API key. This endpoint is used to selectively revoke role-based access from a key without affecting direct permissions or other roles.
                    Use this endpoint when downgrading user privileges, removing temporary role assignments, or implementing granular role management.
                    Role changes take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
                operationId: removeRoles
                x-speakeasy-name-override: removeRoles
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                    - roles
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to remove roles from (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key will lose roles.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        type: array
                                        minItems: 1
                                        maxItems: 100
                                        description: |
                                            The roles to remove from this key.
                                            Operations are idempotent - removing non-assigned roles has no effect.
                                            Role changes take effect immediately for new verifications.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: |
                                                        The ID of an existing role (begins with 'role_').
                                                        Provide either ID or name for each role, not both.
                                                    example: role_1n9McEIBSqy44Qy7hzWyM5
                                                name:
                                                    type: string
                                                    description: |
                                                        The name of the role.
                                                        Provide either ID or name for each role, not both.
                                                    example: editor
                                            oneOf:
                                                - required: [id]
                                                - required: [name]
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully removed roles from the key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            description: |
                                                Complete list of all roles still assigned to the key after removing the specified roles.
                                                This shows the remaining roles after the removal operation.
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The unique identifier of the role
                                                        example: role_1n9McEIBSqy44Qy7hzWyM5
                                                    name:
                                                        type: string
                                                        description: The name of the role
                                                        example: editor
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__updateCredits:
            post:
                tags:
                    - keys
                summary: Update credit configuration for an API key
                description: |-
                    Updates the credit system configuration for an existing API key. Credits are used for usage-based billing and quota enforcement.
                    This endpoint allows you to modify the remaining credit balance, refill settings, or completely change the credit configuration for a key.
                    Use this endpoint for topping up user credits, changing subscription tiers, implementing promotional credits, or adjusting billing cycles.
                    Credit changes take effect immediately for new verifications.
                operationId: updateCredits
                x-speakeasy-name-override: updateCredits
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to update credits for (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key will have its credits updated.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                    credits:
                                        type: object
                                        properties:
                                            remaining:
                                                type: integer
                                                format: int64
                                                minimum: 0
                                                maximum: 9223372036854775807
                                                description: |
                                                    Sets the number of credits remaining for this key.
                                                    This completely replaces the current credit balance.
                                                    Use this for topping up credits or adjusting balances.
                                                example: 1000
                                            refill:
                                                type: object
                                                properties:
                                                    interval:
                                                        type: string
                                                        enum: [daily, monthly]
                                                        description: |
                                                            How often credits are automatically refilled.
                                                            'daily' refills every 24 hours, 'monthly' refills on the specified day of month.
                                                        example: monthly
                                                    amount:
                                                        type: integer
                                                        format: int64
                                                        minimum: 0
                                                        maximum: 9223372036854775807
                                                        description: |
                                                            Number of credits to add during each refill cycle.
                                                            This amount is added to the current balance, not replacing it.
                                                        example: 1000
                                                    refillDay:
                                                        type: integer
                                                        minimum: 1
                                                        maximum: 31
                                                        description: |
                                                            Day of the month for monthly refills (1-31).
                                                            Only applicable when interval is 'monthly'.
                                                            If the day doesn't exist in a month (e.g., 31st in February), refill occurs on the last day of that month.
                                                        example: 1
                                                required:
                                                    - interval
                                                    - amount
                                                additionalProperties: false
                                                description: |
                                                    Automatic refill configuration for credits.
                                                    Omit this field to disable automatic refills.
                                        additionalProperties: false
                                        description: |
                                            Credit system configuration for this key.
                                            Omit this field to disable the credit system entirely for this key.
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully updated credits for the key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                remaining:
                                                    type: integer
                                                    format: int64
                                                    description: |
                                                        The current number of credits remaining for this key after the update.
                                                        This reflects the new balance after applying the credit update.
                                                    example: 1000
                                                refill:
                                                    type: object
                                                    properties:
                                                        interval:
                                                            type: string
                                                            enum: [daily, monthly]
                                                            description: How often credits are automatically refilled
                                                            example: monthly
                                                        amount:
                                                            type: integer
                                                            format: int64
                                                            description: Number of credits added during each refill cycle
                                                            example: 1000
                                                        refillDay:
                                                            type: integer
                                                            minimum: 1
                                                            maximum: 31
                                                            description: Day of the month for monthly refills
                                                            example: 1
                                                    description: |
                                                        Automatic refill configuration for credits.
                                                        Only present if refill is enabled for this key.
                                            description: |
                                                Current credit configuration for the key after the update.
                                                This shows the effective credit settings now in place.
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__setRoles:
            post:
                tags:
                    - keys
                summary: Set (replace) all roles on an API key
                description: |-
                    Sets the roles for an existing API key by replacing all existing role assignments with the provided set. This is a complete replacement operation - roles not specified in the request will be removed.
                    Use this endpoint when you want to synchronize API key roles with an external system, reset a key's roles to a known state, or apply a standardized role template to a key.
                    Role assignments take effect immediately for new verifications, though existing authorized sessions may continue until their cache expires.
                operationId: setRoles
                x-speakeasy-name-override: setRoles
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                    - roles
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to set roles on (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key will have its roles replaced.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                    roles:
                                        type: array
                                        maxItems: 100
                                        description: |
                                            The roles to set for this key. This is a complete replacement operation.
                                            Providing an empty array removes all role assignments from the key.
                                            All roles must already exist in the workspace.
                                            Role assignments take effect immediately for new verifications.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: |
                                                        The ID of an existing role (begins with 'role_').
                                                        Provide either ID or name for each role, not both.
                                                    example: role_1n9McEIBSqy44Qy7hzWyM5
                                                name:
                                                    type: string
                                                    description: |
                                                        The name of the role.
                                                        Provide either ID or name for each role, not both.
                                                    example: editor
                                            oneOf:
                                                - required: [id]
                                                - required: [name]
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully set roles on the key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            description: |
                                                Complete list of all roles now assigned to the key after the set operation.
                                                This reflects the complete replacement of the previous role assignments.
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The unique identifier of the role
                                                        example: role_1n9McEIBSqy44Qy7hzWyM5
                                                    name:
                                                        type: string
                                                        description: The name of the role
                                                        example: editor
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__deleteKey:
            post:
                tags:
                    - keys
                summary: Delete an API key permanently
                description: |-
                    Permanently removes an API key from the system. Once deleted, the key becomes invalid immediately and cannot be used for any further authentication attempts.
                    This operation is irreversible and will:
                    - Immediately invalidate the key across all regions
                    - Remove all associated permissions and roles
                    - Clear any stored metadata
                    - Stop any ongoing rate limit tracking
                    - Remove the key from analytics and usage tracking
                    Use this endpoint when deactivating user accounts, cleaning up test keys, or implementing key rotation policies. The key deletion is logged in the audit trail for security compliance.
                operationId: deleteKey
                x-speakeasy-name-override: deleteKey
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to delete (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key to permanently remove.
                                            This is the database ID, not the actual API key string.
                                            WARNING: This operation is irreversible and will immediately invalidate the key.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully deleted key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__getKey:
            post:
                tags:
                    - keys
                summary: Retrieve detailed information about a specific API key
                description: |-
                    Retrieves comprehensive information about an API key including its configuration, permissions, roles, metadata, and usage limits. This endpoint is essential for key management, debugging, and building administrative interfaces.
                    The response includes all key properties such as expiration dates, credit balances, rate limits, assigned permissions and roles, and any metadata stored with the key. This information helps administrators understand a key's current state and troubleshoot access issues.
                    Note: The actual key value is never returned for security reasons, only the key's metadata and configuration.
                operationId: getKey
                x-speakeasy-name-override: getKey
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - keyId
                                properties:
                                    keyId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            The unique identifier of the key to retrieve (begins with 'key_').
                                            This ID comes from the createKey response and identifies which key's information to return.
                                            This is the database ID, not the actual API key string.
                                        example: key_2cGKbMxRyIzhCxo1Idjz8q
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully retrieved key information
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                keyId:
                                                    type: string
                                                    description: The unique identifier for this key
                                                    example: key_1234567890abcdef
                                                name:
                                                    type: string
                                                    description: The human-readable name assigned to this key
                                                    example: User API Key
                                                externalId:
                                                    type: string
                                                    description: The external identifier associated with this key
                                                    example: user_12345
                                                meta:
                                                    type: object
                                                    additionalProperties: true
                                                    description: Arbitrary metadata stored with the key
                                                    example:
                                                        plan: premium
                                                        features:
                                                            analytics: true
                                                            exports: true
                                                expires:
                                                    type: integer
                                                    format: int64
                                                    description: Unix timestamp in milliseconds when the key expires
                                                    example: 1735689600000
                                                credits:
                                                    type: object
                                                    properties:
                                                        remaining:
                                                            type: integer
                                                            format: int64
                                                            description: Number of credits remaining
                                                        refill:
                                                            type: object
                                                            properties:
                                                                interval:
                                                                    type: string
                                                                    enum: [daily, monthly]
                                                                    description: How often credits are refilled
                                                                amount:
                                                                    type: integer
                                                                    format: int64
                                                                    description: Number of credits added during refill
                                                                refillDay:
                                                                    type: integer
                                                                    minimum: 1
                                                                    maximum: 31
                                                                    description: Day of month for monthly refills
                                                    description: Credit system configuration and current balance
                                                ratelimits:
                                                    type: array
                                                    items:
                                                        type: object
                                                        properties:
                                                            name:
                                                                type: string
                                                                description: Name of the rate limit
                                                            limit:
                                                                type: integer
                                                                description: Maximum requests allowed
                                                            duration:
                                                                type: integer
                                                                description: Duration in milliseconds
                                                    description: Rate limit configuration for this key
                                                permissions:
                                                    type: array
                                                    items:
                                                        type: object
                                                        properties:
                                                            id:
                                                                type: string
                                                                description: The unique identifier of the permission
                                                            name:
                                                                type: string
                                                                description: The name of the permission
                                                    description: List of all permissions granted to this key
                                                roles:
                                                    type: array
                                                    items:
                                                        type: object
                                                        properties:
                                                            id:
                                                                type: string
                                                                description: The unique identifier of the role
                                                            name:
                                                                type: string
                                                                description: The name of the role
                                                    description: List of all roles assigned to this key
                                                enabled:
                                                    type: boolean
                                                    description: Whether the key is currently enabled
                                                    example: true
                                                createdAt:
                                                    type: integer
                                                    format: int64
                                                    description: Unix timestamp when the key was created
                                                    example: 1701425400000
                                                updatedAt:
                                                    type: integer
                                                    format: int64
                                                    description: Unix timestamp when the key was last updated
                                                    example: 1701425400000
                                            required:
                                                - keyId
                                                - enabled
                                                - createdAt
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__createKey:
            post:
                tags:
                    - keys
                summary: Create a new API key with customizable security features
                description: |-
                    Creates a new API key with configurable security properties, usage limits, and metadata. This endpoint generates a cryptographically secure key that you can distribute to your users for authenticating with your API.
                    The key is only returned once in the response - Unkey stores only a secure hash of the key, not the key itself. You must provide this key directly to your end user; it cannot be retrieved later (unless created with `recoverable: true`, which is less secure).
                    Keys are associated with a specific API (via `apiId`), which helps isolate environments (dev/staging/prod) and prevents keys from being used across different services. Keys can be further configured with:
                    - Optional prefixes for visual identification
                    - Expiration dates for temporary access
                    - Usage limits (credits) for consumption-based APIs
                    - Rate limits for abuse prevention
                    - Permissions and roles for granular access control
                    - Metadata for storing context with the key
                    Best practices include using environment-specific API IDs, meaningful prefixes, appropriate byte length for security needs, and avoiding storing keys in your databases.
                operationId: createKey
                x-speakeasy-name-override: createKey
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - apiId
                                properties:
                                    apiId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Specifies which API this key belongs to, providing complete isolation between environments.
                                            Keys from one API cannot be used to access another API, preventing cross-environment access.
                                            Create separate APIs for different environments (development, staging, production) and services.
                                        example: api_2cGKbMxRjIzhCxo1IdjH3a
                                    prefix:
                                        type: string
                                        minLength: 1
                                        maxLength: 16
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Adds a visual identifier to the beginning of the generated key for easier recognition in logs and dashboards.
                                            The prefix becomes part of the actual key string (e.g., `prod_xxxxxxxxx`).
                                            Avoid using sensitive information in prefixes as they may appear in logs and error messages.
                                        example: prod
                                    name:
                                        type: string
                                        minLength: 1
                                        maxLength: 200
                                        description: |
                                            Sets a human-readable identifier for internal organization and dashboard display.
                                            Never exposed to end users, only visible in management interfaces and API responses.
                                            Avoid generic names like "API Key" when managing multiple keys for the same user or service.
                                        example: Payment Service Production Key
                                    byteLength:
                                        type: integer
                                        minimum: 16
                                        maximum: 255
                                        default: 16
                                        description: |
                                            Controls the cryptographic strength of the generated key in bytes.
                                            Higher values increase security but result in longer keys that may be harder to handle.
                                            The default 16 bytes provides 2^128 possible combinations, sufficient for most applications.
                                            Consider 32 bytes for highly sensitive APIs, but avoid values above 64 bytes unless specifically required.
                                        example: 24
                                    externalId:
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_.-]+$"
                                        description: |
                                            Associates this key with an entity in your system for tracking and management.
                                            Use consistent identifiers across your application for easy key-to-user mapping.
                                            Helps with analytics, support, and automated key management workflows.
                                        example: user_12345
                                    meta:
                                        type: object
                                        additionalProperties: true
                                        maxProperties: 100
                                        description: |
                                            Stores arbitrary metadata with the key for application-specific context.
                                            Returned in verification responses and getKey calls for contextual information.
                                            Avoid storing sensitive data as metadata is returned in API responses.
                                        example:
                                            plan: premium
                                            features:
                                                analytics: true
                                                exports: true
                                            teamId: team_abc123
                                    expires:
                                        type: integer
                                        format: int64
                                        minimum: 0
                                        maximum: 9223372036854775807
                                        description: |
                                            Unix timestamp in milliseconds when the key expires and becomes invalid.
                                            Useful for temporary access, trial periods, or scheduled key rotation.
                                            Omit for keys that never expire.
                                        example: 1735689600000
                                    credits:
                                        type: object
                                        properties:
                                            remaining:
                                                type: integer
                                                format: int64
                                                minimum: 0
                                                maximum: 9223372036854775807
                                                description: Initial number of credits available for this key
                                            refill:
                                                type: object
                                                properties:
                                                    interval:
                                                        type: string
                                                        enum: [daily, monthly]
                                                        description: How often credits are refilled
                                                    amount:
                                                        type: integer
                                                        format: int64
                                                        minimum: 0
                                                        description: Number of credits to add during refill
                                                    refillDay:
                                                        type: integer
                                                        minimum: 1
                                                        maximum: 31
                                                        description: Day of month for monthly refills
                                        description: Credit system configuration for usage-based billing
                                    ratelimits:
                                        type: array
                                        maxItems: 10
                                        items:
                                            type: object
                                            properties:
                                                name:
                                                    type: string
                                                    minLength: 1
                                                    maxLength: 100
                                                    description: Name of the rate limit
                                                limit:
                                                    type: integer
                                                    minimum: 1
                                                    description: Maximum requests allowed
                                                duration:
                                                    type: integer
                                                    minimum: 1000
                                                    description: Duration in milliseconds
                                    permissions:
                                        type: array
                                        maxItems: 1000
                                        items:
                                            type: string
                                            minLength: 1
                                            maxLength: 512
                                        description: List of permission names to assign to this key
                                    roles:
                                        type: array
                                        maxItems: 100
                                        items:
                                            type: string
                                            minLength: 1
                                            maxLength: 512
                                        description: List of role names to assign to this key
                                    recoverable:
                                        type: boolean
                                        default: false
                                        description: |
                                            Whether the key can be retrieved later (less secure).
                                            Set to true only if absolutely necessary for your use case.
                                    enabled:
                                        type: boolean
                                        default: true
                                        description: Whether the key is enabled and can be used for verification
                                additionalProperties: false
                            examples:
                                simple:
                                    summary: Basic key creation
                                    value:
                                        apiId: api_1234567890abcdef
                                        prefix: prod
                                withMeta:
                                    summary: Key with user-specific metadata
                                    value:
                                        apiId: api_1234567890abcdef
                                        prefix: prod
                                        name: User API Key
                                        externalId: user_12345
                                        meta:
                                            plan: premium
                                            features:
                                                analytics: true
                                                exports: true
                                            teamId: team_abc123
                                withLimits:
                                    summary: Key with usage limits
                                    value:
                                        apiId: api_1234567890abcdef
                                        prefix: prod
                                        externalId: user_12345
                                        expires: 1735689600000
                                        credits:
                                            remaining: 1000
                                            refill:
                                                interval: monthly
                                                amount: 1000
                                                refillDay: 1
                                        ratelimits:
                                            - name: requests
                                              limit: 100
                                              duration: 60000
                                            - name: heavy_operations
                                              limit: 10
                                              duration: 3600000
                responses:
                    "200":
                        description: Successfully created API key
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                keyId:
                                                    type: string
                                                    minLength: 3
                                                    maxLength: 255
                                                    pattern: "^[a-zA-Z0-9_]+$"
                                                    description: |
                                                        The unique identifier for the newly created key within Unkey's system.
                                                        Use this ID for subsequent operations like updating, deleting, or retrieving the key.
                                                        Always begins with 'key_' followed by alphanumeric characters and underscores.
                                                    example: key_1234567890abcdef
                                                key:
                                                    type: string
                                                    minLength: 1
                                                    description: |
                                                        The actual API key string that your users will use for authentication.
                                                        IMPORTANT: This is the only time you'll see the full key value - it cannot be retrieved later unless created with recoverable=true.
                                                        Store this securely and provide it directly to your end user.
                                                        The key includes any prefix you specified during creation.
                                                    example: prod_1234567890abcdef1234567890abcdef
                                            required:
                                                - keyId
                                                - key
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__verifyKey:
            post:
                tags:
                    - keys
                summary: Verify an API key's validity and permissions
                description: |-
                    This is the core endpoint for authenticating and authorizing API key usage in your application. It checks if a key is valid, hasn't expired, has sufficient remaining credits, isn't rate limited, and has the required permissions.
                    When a key is verified, several checks occur:
                    - Key existence and format validation
                    - Expiration check
                    - Enabled/disabled status verification
                    - Permission validation (if required)
                    - Rate limit enforcement
                    - Credit consumption (if configured)
                    The response includes detailed information about the key's status, remaining resources, and metadata to help your application make authorization decisions.
                operationId: verifyKey
                x-speakeasy-name-override: verifyKey
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - key
                                properties:
                                    key:
                                        type: string
                                        minLength: 1
                                        description: |
                                            The API key to verify. This is the actual key string that your users authenticate with.
                                            Can include prefixes (e.g., 'prod_xxxxx') and should be provided exactly as given to the user.
                                        example: prod_1234567890abcdef1234567890abcdef
                                    permissions:
                                        type: string
                                        minLength: 1
                                        maxLength: 1000 # Allow for complex permission queries
                                        pattern: "^[a-zA-Z0-9_.()\\s-]+$"
                                        description: |
                                            Checks if the key has the specified permission(s) using a query syntax.
                                            Supports single permissions, logical operators (AND, OR), and parentheses for grouping.
                                            Examples:
                                            - Single permission: "documents.read"
                                            - Multiple permissions: "documents.read AND documents.write"
                                            - Complex queries: "(documents.read OR documents.write) AND users.view"
                                            Verification fails if the key lacks the required permissions through direct assignment or role inheritance.
                                        example: "documents.read AND users.view"
                                    credits:
                                        type: object
                                        properties:
                                            cost:
                                                type: integer
                                                format: int64
                                                minimum: 0
                                                maximum: 1000000000
                                                description: |
                                                    Sets how many credits to deduct for this verification request.
                                                    Use 0 for read-only operations or free tier access, higher values for premium features.
                                                    Credits are deducted immediately upon verification, even if the key lacks required permissions.
                                                    Essential for implementing usage-based pricing with different operation costs.
                                                example: 5
                                        description: |
                                            Controls credit consumption for usage-based billing and quota enforcement.
                                            When specified, the cost is deducted from the key's remaining credits.
                                            Verification fails if the key doesn't have sufficient credits remaining.
                                additionalProperties: false
                            examples:
                                simple:
                                    summary: Basic key verification
                                    value:
                                        key: prod_1234567890abcdef1234567890abcdef
                                withPermissions:
                                    summary: Verify key with permission check
                                    value:
                                        key: prod_1234567890abcdef1234567890abcdef
                                        permissions:
                                            type: and
                                            permissions:
                                                - documents.read
                                                - documents.write
                                withCredits:
                                    summary: Verify key and consume credits
                                    value:
                                        key: prod_1234567890abcdef1234567890abcdef
                                        credits:
                                            cost: 5
                responses:
                    "200":
                        description: Key verification completed (check 'valid' field for success)
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                valid:
                                                    type: boolean
                                                    description: |
                                                        Whether the key is valid and the request should be allowed to proceed.
                                                        This is the primary field to check - true means the key passed all verification checks.
                                                        False indicates the key is invalid, expired, disabled, lacks permissions, or exceeded limits.
                                                    example: true
                                                keyId:
                                                    type: string
                                                    description: |
                                                        The unique identifier for this key within Unkey's system.
                                                        Useful for logging, analytics, and correlating with other API operations.
                                                        Only present when the key is valid and found in the system.
                                                    example: key_1234567890abcdef
                                                name:
                                                    type: string
                                                    description: |
                                                        The human-readable name assigned to this key during creation.
                                                        Useful for displaying context in logs or user interfaces.
                                                        Only present when the key is valid and has a name assigned.
                                                    example: User API Key
                                                externalId:
                                                    type: string
                                                    description: |
                                                        The external identifier associated with this key, typically linking to a user or entity in your system.
                                                        Useful for correlating API usage with specific users or accounts.
                                                        Only present when the key is valid and has an external ID assigned.
                                                    example: user_12345
                                                meta:
                                                    type: object
                                                    additionalProperties: true
                                                    description: |
                                                        Arbitrary metadata stored with the key during creation.
                                                        Useful for passing application-specific context to your authorization logic.
                                                        Only present when the key is valid and has metadata assigned.
                                                    example:
                                                        plan: premium
                                                        features:
                                                            analytics: true
                                                            exports: true
                                                        teamId: team_abc123
                                                expires:
                                                    type: integer
                                                    format: int64
                                                    description: |
                                                        Unix timestamp in milliseconds when the key expires.
                                                        Useful for displaying expiration warnings to users.
                                                        Only present when the key is valid and has an expiration date set.
                                                    example: 1735689600000
                                                credits:
                                                    type: object
                                                    properties:
                                                        remaining:
                                                            type: integer
                                                            format: int64
                                                            description: Number of credits remaining after this verification
                                                        refill:
                                                            type: object
                                                            properties:
                                                                interval:
                                                                    type: string
                                                                    enum: [daily, monthly]
                                                                    description: How often credits are refilled
                                                                amount:
                                                                    type: integer
                                                                    format: int64
                                                                    description: Number of credits added during refill
                                                                refillDay:
                                                                    type: integer
                                                                    minimum: 1
                                                                    maximum: 31
                                                                    description: Day of month for monthly refills
                                                    description: |
                                                        Credit information for usage-based billing and quota tracking.
                                                        Only present when the key is valid and has credits configured.
                                                ratelimits:
                                                    type: array
                                                    items:
                                                        type: object
                                                        properties:
                                                            name:
                                                                type: string
                                                                description: Name of the rate limit
                                                            limit:
                                                                type: integer
                                                                description: Maximum requests allowed in the window
                                                            remaining:
                                                                type: integer
                                                                description: Remaining requests in the current window
                                                            reset:
                                                                type: integer
                                                                format: int64
                                                                description: Unix timestamp when the window resets
                                                    description: |
                                                        Rate limit status for this key.
                                                        Shows current usage and remaining capacity for each configured rate limit.
                                                        Only present when the key is valid and has rate limits configured.
                                                permissions:
                                                    type: array
                                                    items:
                                                        type: string
                                                    description: |
                                                        List of all permissions granted to this key (both direct and through roles).
                                                        Useful for implementing client-side authorization logic.
                                                        Only present when the key is valid and has permissions assigned.
                                                    example:
                                                        - documents.read
                                                        - documents.write
                                                        - profile.view
                                                roles:
                                                    type: array
                                                    items:
                                                        type: string
                                                    description: |
                                                        List of all roles assigned to this key.
                                                        Useful for displaying user roles in interfaces.
                                                        Only present when the key is valid and has roles assigned.
                                                    example:
                                                        - editor
                                                        - viewer
                                                code:
                                                    type: string
                                                    enum: [VALID, INVALID, EXPIRED, DISABLED, INSUFFICIENT_CREDITS, RATE_LIMITED, FORBIDDEN]
                                                    description: |
                                                        Specific reason code for the verification result.
                                                        Provides detailed information about why verification succeeded or failed.
                                                        Useful for implementing specific error handling and user messaging.
                                                    example: VALID
                                                enabled:
                                                    type: boolean
                                                    description: |
                                                        Whether the key is currently enabled and allowed to be used.
                                                        Disabled keys always fail verification regardless of other factors.
                                                        Only present when the key is found in the system.
                                                    example: true
                                            required:
                                                - valid
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                        examples:
                            permissionsQuerySyntaxError:
                                summary: Invalid permissions query syntax
                                value:
                                    meta:
                                        requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                    error:
                                        title: Bad Request
                                        detail: "Syntax error in permission query: unexpected token 'AND' at position 15. Expected permission name or opening parenthesis."
                                        status: 400
                                        type: "https://unkey.com/docs/api-reference/errors-v2/user/bad_request/permissions_query_syntax_error"
                                        errors:
                                            - location: "body.permissions"
                                              message: "unexpected token 'AND' at position 15"
                                              fix: "Check your query syntax. AND/OR operators must be between permissions, not at the start or end"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__createApi:
            post:
                tags:
                    - apis
                summary: Create a new API namespace for organizing keys
                description: |-
                    Creates a new API namespace that serves as a container for related API keys.

                    APIs in Unkey provide important functionality:
                    - They organize keys into logical groups for easier management
                    - They isolate keys between different environments (dev/staging/production)
                    - They enforce security boundaries between services or products
                    - They provide a foundation for permission scoping and access control

                    Common use cases for creating separate APIs include:
                    - Separating development, staging, and production environments
                    - Isolating different services or microservices from each other
                    - Creating boundaries between different products or teams
                    - Implementing multi-tenant isolation for SaaS applications

                    You'll use the resulting API ID when creating keys to associate them with this API namespace.
                    During key verification, you must provide the same API ID to ensure keys can't be used across different environments or services.
                operationId: createApi
                x-speakeasy-name-override: createApi
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - name
                                properties:
                                    name:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                                        description: |
                                            Creates an API with this name as an internal identifier for organization and isolation.
                                            APIs serve as containers for groups of keys and provide namespace separation between environments or services.
                                            Names must be unique within your workspace and are not shown to end users.

                                            Use descriptive names that clearly identify the API's purpose and environment:
                                            - Include environment indicators like 'production', 'staging', 'development'
                                            - Use service-based naming like 'payment-service', 'user-management', 'analytics'
                                            - Follow consistent naming conventions across your organization
                                            - Keep names concise but informative for easy identification

                                            Must start with a letter and contain only letters, numbers, underscores, dots, and hyphens.
                                            Avoid generic names like 'api' or 'main' that don't provide meaningful context.
                                        example: payment-service-production
                                additionalProperties: false
                            examples:
                                production:
                                    summary: Production API
                                    value:
                                        name: payment-service-production
                                staging:
                                    summary: Staging environment
                                    value:
                                        name: payment-service-staging
                                serviceSpecific:
                                    summary: Service-specific API
                                    value:
                                        name: analytics-service
                responses:
                    "200":
                        description: Successfully created a new API namespace. The response includes the unique API ID that you'll need for creating keys within this namespace. This ID should be stored securely as it's required for all operations related to this API.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                    meta:
                                        $ref: "#/components/schemas/meta"
                                    data:
                                        type: object
                                        properties:
                                            apiId:
                                                type: string
                                                minLength: 8
                                                maxLength: 255
                                                pattern: "^[a-zA-Z0-9_]+$"
                                                description: |
                                                    The unique identifier assigned to the newly created API.
                                                    Use this ID for all subsequent operations including key creation, verification, and API management.
                                                    Always begins with 'api_' followed by a unique alphanumeric sequence.

                                                    Store this ID securely as it's required when:
                                                    - Creating API keys within this namespace
                                                    - Verifying keys associated with this API
                                                    - Managing API settings and metadata
                                                    - Listing keys belonging to this API

                                                    This identifier is permanent and cannot be changed after creation.
                                                    example: api_2cGKbMxRjIzhCxo1IdjH3a
                                        required:
                                            - apiId
                                        additionalProperties: false
                                    additionalProperties: false
                                examples:
                                    success:
                                        summary: Successfully created API
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                apiId: api_2cGKbMxRjIzhCxo1IdjH3a
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__deleteApi:
            post:
                tags:
                    - apis
                summary: Delete an API and invalidate all its associated keys
                description: |-
                    Permanently deletes an API namespace and invalidates all keys associated with it.
                    WARNING: This is a destructive operation with significant consequences:
                    - All keys associated with this API will be invalidated immediately
                    - Verification attempts for these keys will fail with `code=NOT_FOUND`
                    - Historical analytics data for the API and its keys will be preserved
                    - This action cannot be undone
                    Common reasons to delete an API include:
                    - Removing test or development environments no longer needed
                    - Retiring deprecated services or products
                    - Cleaning up unused resources
                    - Implementing security isolation after compromise
                    Before deletion, ensure that:
                    - You have the correct API ID (check the environment/service)
                    - You have migrated any needed keys to a new API
                    - You have updated all client applications to use new keys
                    - You have backed up any important metadata or analytics
                operationId: deleteApi
                x-speakeasy-name-override: deleteApi
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - apiId
                                properties:
                                    apiId:
                                        type: string
                                        minLength: 8
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Specifies which API to permanently delete from your workspace.
                                            Must be a valid API ID that begins with 'api_' and exists within your workspace.
                                            CRITICAL WARNING: Deletion is immediate and irreversible with severe consequences:
                                            - ALL keys associated with this API become invalid instantly
                                            - Verification requests for these keys will fail with `code=NOT_FOUND`
                                            - Client applications using these keys will lose access immediately
                                            - Analytics data and key metadata are permanently removed
                                            - This operation cannot be undone under any circumstances

                                            Before proceeding, ensure that:
                                            - You have identified the correct API (verify the ID and environment)
                                            - All necessary keys have been migrated to another API
                                            - All client applications have been updated with new keys
                                            - Any important metadata has been exported or backed up

                                            Common mistakes to avoid:
                                            - Deleting the wrong environment (production instead of staging)
                                            - Not updating client applications before deletion
                                            - Assuming deletion can be reversed (it cannot)

                                            For safety, consider using getApi first to verify the API name matches your expectations.
                                        example: api_VNcuGfVjUkrVcWJmda0A
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Delete an API
                                    value:
                                        apiId: api_VNcuGfVjUkrVcWJmda0A
                responses:
                    "200":
                        description: "API successfully deleted. All keys associated with this API have been invalidated and will no longer work for verification. \nThe API ID can no longer be used for any operations, and new keys cannot be created with this API ID. \nThis operation is immediate and cannot be undone."
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                    additionalProperties: false
                                examples:
                                    success:
                                        summary: Successful deletion
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__getApi:
            post:
                tags:
                    - apis
                summary: Retrieve information about an API namespace
                description: |-
                    Retrieves detailed information about a specific API namespace.
                    This endpoint is useful for:
                    - Verifying an API exists before attempting to use it
                    - Retrieving the name of an API when you only have its ID
                    - Checking if you have access to a particular API
                    - Confirming API details before performing operations on it
                    The information returned is minimal by design, as APIs are primarily organizational containers. Most of the valuable data lies in the keys associated with an API, which can be retrieved using the apis.listKeys endpoint.
                operationId: getApi
                x-speakeasy-name-override: getApi
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - apiId
                                properties:
                                    apiId:
                                        type: string
                                        minLength: 8
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Specifies which API to retrieve by its unique identifier.
                                            Must be a valid API ID that begins with 'api_' and exists within your workspace.
                                            Use this endpoint to:
                                            - Verify an API exists and is accessible
                                            - Retrieve the API's current name and configuration
                                            - Validate API IDs before performing key operations
                                            - Check API status during debugging or troubleshooting
                                            Returns complete API information including name, ID, and metadata.
                                        example: api_1234567890abcdef
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Retrieve API by ID
                                    value:
                                        apiId: api_1234
                responses:
                    "200":
                        description: "Successfully retrieved API information. The response includes the API's unique identifier and its name. \nThis confirms the API exists and provides its basic details."
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    minLength: 8
                                                    maxLength: 255
                                                    pattern: "^[a-zA-Z0-9_]+$"
                                                    description: |
                                                        The unique identifier of this API within Unkey's system.
                                                        Used in all operations related to this API including key creation, verification, and management.
                                                        Always begins with 'api_' followed by alphanumeric characters and underscores.
                                                        This identifier is permanent and never changes after API creation.
                                                    example: api_1234567890abcdef
                                                name:
                                                    type: string
                                                    minLength: 3
                                                    maxLength: 255
                                                    description: |
                                                        The internal name of this API as specified during creation.
                                                        Used for organization and identification within your workspace.
                                                        Helps distinguish between different environments, services, or access tiers.
                                                        Not visible to end users - this is purely for administrative purposes.
                                                    example: payment-service-production
                                            required:
                                                - id
                                                - name
                                            additionalProperties: false
                                    additionalProperties: false
                                examples:
                                    standard:
                                        summary: API details response
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                id: api_1234567890abcdef
                                                name: payment-service-production
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__listKeys:
            post:
                tags:
                    - apis
                summary: List all keys associated with an API namespace
                description: |-
                    Retrieves a paginated list of all API keys associated with a specific API namespace. Returns detailed information about each key including metadata, permissions, and usage limits.
                    Use this endpoint to build admin dashboards for API key management, audit active keys for security reviews, or find keys associated with specific users through the externalId filter. For large APIs with many keys, results are paginated and can be filtered to locate specific keys efficiently.
                    For security reasons, full key values are never returned unless specifically requested with decrypt=true, and only for keys created with recoverable=true when the caller has sufficient permissions.
                operationId: listKeys
                x-speakeasy-name-override: listKeys
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - apiId
                                properties:
                                    apiId:
                                        type: string
                                        minLength: 1
                                        description: "The ID of the API whose keys you want to list (begins with 'api_'). \nThis endpoint returns all keys associated with this specific API, subject to pagination and any additional filters provided."
                                        example: api_1234
                                    limit:
                                        type: integer
                                        description: "The maximum number of keys to return in a single request. \nUse this to control response size and loading performance. Higher values return more keys but may increase response time. \nLower values may require more pagination requests but provide faster initial loading."
                                        default: 100
                                        minimum: 1
                                        maximum: 100
                                    cursor:
                                        type: string
                                        description: "Pagination cursor from a previous response. \nUse this to fetch subsequent pages of results when the response contains hasMore=true. \nEach response containing additional results will include a new cursor value in the pagination object."
                                        example: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMjNld3MiLCJsYXN0Q3JlYXRlZEF0IjoxNjcyNTI0MjM0MDAwfQ==
                                    externalId:
                                        type: string
                                        minLength: 3
                                        description: "Optional filter to return only keys associated with a specific external ID. \nThis is useful when you need to find all keys belonging to a particular user, organization, or entity in your system. \nThe value must exactly match the externalId set during key creation."
                                        example: user_5bf93ab218e
                                    decrypt:
                                        type: boolean
                                        description: |-
                                            When true, attempts to include the plaintext key value in the response. SECURITY WARNING:
                                            - This requires special permissions on the calling root key
                                            - Only works for keys created with 'recoverable: true'
                                            - Exposes sensitive key material in the response
                                            - Should only be used in secure administrative contexts
                                            - Never enable this in user-facing applications
                                        default: false
                                    revalidateKeysCache:
                                        type: boolean
                                        default: false
                                        description: |-
                                            EXPERIMENTAL: Skip the cache and fetch the keys directly from the database. This ensures you see the most recent state, including keys created moments ago. Use this when:
                                            - You've just created a key and need to display it immediately
                                            - You need absolute certainty about the current key state
                                            - You're debugging cache consistency issues
                                            This parameter comes with a performance cost and should be used sparingly.
                                additionalProperties: false
                            examples:
                                basicListing:
                                    summary: List all keys for an API
                                    value:
                                        apiId: api_1234
                                filteredListing:
                                    summary: List keys for specific user
                                    value:
                                        apiId: api_1234
                                        externalId: user_5bf93ab218e
                                        limit: 50
                                paginatedRequest:
                                    summary: Fetch next page of results
                                    value:
                                        apiId: api_1234
                                        cursor: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMjNld3MiLCJsYXN0Q3JlYXRlZEF0IjoxNjcyNTI0MjM0MDAwfQ==
                responses:
                    "200":
                        description: "Successfully retrieved the list of keys for this API. The response includes key details such as IDs, names, creation dates, and associated metadata. \nFor security, the actual key values are not included unless specifically requested with decrypt=true. \nIf there are more keys than the requested limit, the pagination object will include a cursor for fetching the next page and hasMore=true."
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            maxItems: 100 # DoS protection matching request limit
                                            items:
                                                "$ref": "#/components/schemas/key"
                                            description: Array of API keys with complete configuration and metadata.
                                        pagination:
                                            "$ref": "#/components/schemas/pagination"
                                    additionalProperties: false
                                examples:
                                    standardResponse:
                                        summary: Successful key listing
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                - keyId: key_1a2b3c4d5e6f
                                                  start: prod_abc
                                                  name: Production Admin Key
                                                  createdAt: 1671048264000
                                                  permissions:
                                                    - admin.read
                                                    - admin.write
                                                  meta:
                                                    owner: alice@example.com
                                                    department: Engineering
                                                - keyId: key_2b3c4d5e6f7g
                                                  start: prod_def
                                                  name: CI/CD Pipeline Key
                                                  createdAt: 1671135600000
                                                  permissions:
                                                    - deploy.trigger
                                                    - logs.read
                                            pagination:
                                                cursor: cursor_eyJsYXN0S2V5SWQiOiJrZXlfMmIzYzRkNWU2ZjdnIiwibGFzdENyZWF0ZWRBdCI6MTY3MTEzNTYwMDAwMH0=
                                                hasMore: true
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__createIdentity:
            post:
                tags:
                    - identities
                summary: Create a new identity for resource sharing across keys
                description: |-
                    Creates a new identity that can be associated with multiple API keys to enable resource sharing.
                    Identities are a powerful concept in Unkey that allow multiple API keys to share resources like rate limits and to be associated with the same entity (user, organization, etc.). This is essential for:
                    - Implementing consistent rate limiting across multiple API keys
                    - Associating multiple keys with the same user or organization
                    - Sharing metadata across all keys for an entity
                    - Enabling user-based analytics across multiple keys
                    - Simplifying key management for multi-device or multi-service users
                    When you create keys with the same externalId, they'll share rate limits and appear grouped in analytics. This enables scenarios like letting users generate multiple API keys for different devices while still treating them as a single entity for usage limits.
                    The identity concept creates a separation between your user entities and their authentication credentials (API keys), similar to how users can have multiple passwords or sessions.
                operationId: identities.createIdentity
                x-speakeasy-name-override: createIdentity
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - externalId
                                properties:
                                    externalId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_.-]+$"
                                        description: |
                                            Creates an identity using your system's unique identifier for a user, organization, or entity.
                                            Must be stable and unique across your workspace - duplicate externalIds return CONFLICT errors.
                                            This identifier links Unkey identities to your authentication system, database records, or tenant structure.
                                            Avoid changing externalIds after creation as this breaks the link between your systems.
                                            Use consistent identifier patterns across your application for easier management and debugging.
                                            Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                                            Essential for implementing proper multi-tenant isolation and user-specific rate limiting.
                                        example: user_123
                                    meta:
                                        type: object
                                        additionalProperties: true
                                        maxProperties: 100
                                        description: |
                                            Stores arbitrary JSON metadata returned during key verification for contextual information.
                                            Eliminates additional database lookups during verification, improving performance for stateless services.
                                            Avoid storing sensitive data here as it's returned in verification responses.
                                            Large metadata objects increase verification latency and should stay under 10KB total size.
                                            Use this for subscription details, feature flags, user preferences, and organization information.
                                            Metadata is returned as-is whenever keys associated with this identity are verified.
                                    ratelimits:
                                        type: array
                                        maxItems: 50
                                        items:
                                            $ref: "#/components/schemas/RatelimitRequest"
                                        description: |
                                            Defines shared rate limits that apply to all keys belonging to this identity.
                                            Prevents abuse by users with multiple keys by enforcing consistent limits across their entire key portfolio.
                                            Essential for implementing fair usage policies and tiered access levels in multi-tenant applications.
                                            Rate limit counters are shared across all keys with this identity, regardless of how many keys the user creates.
                                            During verification, specify which named limits to check for enforcement.
                                            Identity rate limits supplement any key-specific rate limits that may also be configured.
                                            - Each named limit can have different thresholds and windows
                                            When verifying keys, you can specify which limits you want to use and all keys attached to this identity will share the limits, regardless of which specific key is used.
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Basic identity creation
                                    value:
                                        externalId: user_abc123
                                withMetadata:
                                    summary: Identity with user metadata
                                    value:
                                        externalId: user_abc123
                                        meta:
                                            name: Alice Smith
                                            email: alice@example.com
                                            plan: premium
                                            accountCreated: "2023-01-15T08:30:00Z"
                                            region: eu-west
                                withRatelimits:
                                    summary: Identity with shared rate limits
                                    value:
                                        externalId: org_xyz456
                                        meta:
                                            name: Acme Corporation
                                            planTier: enterprise
                                        ratelimits:
                                            - name: requests
                                              limit: 10000
                                              duration: 3600000
                                              autoApply: true
                                            - name: heavy_compute
                                              limit: 100
                                              duration: 86400000
                                              autoApply: false
                responses:
                    "200":
                        description: |-
                            Successfully created a new identity. The identity can now be associated with API keys to enable resource sharing and consistent rate limiting.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            additionalProperties: false
                                    additionalProperties: false
                                examples:
                                    success:
                                        summary: Successfully created identity
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "409":
                        $ref: "#/components/responses/conflictErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__getIdentity:
            post:
                tags:
                    - identities
                summary: Retrieve identity information
                description: |-
                    Retrieves detailed information about a specific identity by its external ID.
                    Identities in Unkey represent entities in your system (users, organizations, etc.) that can be associated with multiple API keys. This endpoint provides access to:
                    - Identity metadata that was stored during creation
                    - Rate limiting configurations that apply across all keys for this identity
                    This endpoint is useful for:
                    - Checking if an identity exists
                    - Retrieving metadata associated with an identity
                    - Viewing rate limit configurations
                    You must provide the externalId parameter to identify which identity to retrieve.
                operationId: identities.getIdentity
                x-speakeasy-name-override: getIdentity
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    externalId:
                                        type: string
                                        minLength: 1
                                        description: |-
                                            The external ID of the identity to retrieve. This is the ID from your own system that was used during identity creation.
                                        example: user_abc123
                                additionalProperties: false
                            examples:
                                byExternalId:
                                    summary: Retrieve by external ID
                                    value:
                                        externalId: user_abc123
                responses:
                    "200":
                        description: |-
                            Successfully retrieved the identity information including metadata and rate limiting configurations.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            required:
                                                - externalId
                                            properties:
                                                externalId:
                                                    type: string
                                                    description: |-
                                                        The external identifier for this identity in your system. This is the ID you provided during identity creation.
                                                    example: user_abc123
                                                meta:
                                                    type: object
                                                    additionalProperties: true
                                                    description: |-
                                                        Custom metadata associated with this identity. This can include any JSON-serializable data you stored with the identity during creation or updates.
                                                    example:
                                                        name: Alice Smith
                                                        email: alice@example.com
                                                        plan: premium
                                                ratelimits:
                                                    type: array
                                                    items:
                                                        $ref: "#/components/schemas/RatelimitResponse"
                                                    description: |-
                                                        Rate limits associated with this identity. These limits are shared across all API keys linked to this identity, providing consistent rate limiting regardless of which key is used.
                                            additionalProperties: false
                                    additionalProperties: false
                                examples:
                                    standard:
                                        summary: Identity with metadata and rate limits
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                id: id_1234567890abcdef
                                                externalId: user_abc123
                                                meta:
                                                    name: Alice Smith
                                                    email: alice@example.com
                                                    plan: premium
                                                    companyId: company_xyz
                                                ratelimits:
                                                    - name: api_requests
                                                      limit: 1000
                                                      duration: 60000
                                                    - name: heavy_operations
                                                      limit: 100
                                                      duration: 3600000
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__listIdentities:
            post:
                tags:
                    - identities
                summary: List identities in your workspace
                description: |-
                    Retrieves a paginated list of identities in your workspace. Identities represent entities in your system (users, organizations, etc.) that can be associated with multiple API keys for resource sharing.
                    This endpoint allows you to:
                    - Browse all identities in your workspace
                    - Search for specific identities by environment
                    - View rate limits configured for each identity
                    - Implement identity management interfaces
                    Results are paginated if there are more identities than the specified limit. Use the returned cursor to fetch subsequent pages.
                operationId: identities.listIdentities
                x-speakeasy-name-override: listIdentities
                x-speakeasy-pagination:
                    type: cursor
                    inputs:
                        - name: cursor
                          in: parameters
                          type: cursor
                    outputs:
                        nextCursor: "$.data.cursor"
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    limit:
                                        type: integer
                                        minimum: 1
                                        maximum: 100
                                        default: 100
                                        description: |-
                                            The maximum number of identities to return in a single request.
                                            Use this to control response size and loading performance.
                                        example: 50
                                    cursor:
                                        type: string
                                        description: |-
                                            Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains a cursor value.
                                        example: cursor_eyJrZXkiOiJrZXlfMTIzNCJ9
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Basic identity listing
                                    value:
                                        limit: 50
                                withPagination:
                                    summary: Fetch next page with cursor
                                    value:
                                        limit: 50
                                        cursor: cursor_eyJrZXkiOiJrZXlfMTIzNCJ9
                responses:
                    "200":
                        description: |-
                            Successfully retrieved the list of identities with pagination information.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                        - pagination
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            items:
                                                type: object
                                                properties:
                                                    externalId:
                                                        type: string
                                                        description: External identity ID
                                                    meta:
                                                        type: object
                                                        description: Identity metadata
                                                    ratelimits:
                                                        type: array
                                                        items:
                                                            "$ref": "#/components/schemas/RatelimitResponse"
                                                        description: Identity ratelimits
                                                required:
                                                    - externalId
                                                    - ratelimits
                                                additionalProperties: false
                                            description: List of identities matching the specified criteria.
                                        pagination:
                                            "$ref": "#/components/schemas/pagination"
                                    additionalProperties: false
                                examples:
                                    standard:
                                        summary: Identity listing with pagination
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                identities:
                                                    - id: id_01H9TQP8NP8JN3X8HWSKPW43JE
                                                      externalId: user_abc123
                                                      ratelimits:
                                                        - name: api_requests
                                                          limit: 1000
                                                          duration: 60000
                                                        - name: heavy_operations
                                                          limit: 100
                                                          duration: 3600000
                                                    - id: id_02ZYR3Q9NP8JM4X8HWSKPW43JF
                                                      externalId: user_def456
                                                      ratelimits:
                                                        - name: api_requests
                                                          limit: 500
                                                          duration: 60000
                                                cursor: cursor_eyJsYXN0SWQiOiJpZF8wMlpZUjNROU5QOEpNNFg4SFdTS1BXNDNKRiJ9
                                                total: 247
                                    emptyList:
                                        summary: Empty identity list
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                                            data:
                                                identities: []
                                                total: 0
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__deleteIdentity:
            post:
                tags:
                    - identities
                summary: Delete an existing identity
                description: |-
                    Permanently removes an identity from your workspace. This operation cannot be undone.
                    Deleting an identity has several important effects:
                    - All metadata associated with the identity is permanently removed
                    - Any rate limit history for this identity is cleared
                    - The identity's externalId becomes available for reuse
                    - Keys remain functional but lose their identity association
                    Important notes:
                    - This operation does NOT delete or disable any API keys associated with this identity
                    - After deletion, keys previously linked to this identity will function independently
                    - Rate limits that were shared across keys via this identity will no longer be shared
                    - The externalId can be reused immediately after deletion
                    Use this endpoint for compliance with data deletion requirements, cleaning up test data, or when an entity (user, organization) is permanently removed from your system.
                operationId: v2.identities.deleteIdentity
                x-speakeasy-name-override: deleteIdentity
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    externalId:
                                        type: string
                                        minLength: 3
                                        description: |
                                            The id of this identity in your system.
                                            This should match the externalId value you used when creating the identity.
                                            This identifier typically comes from your authentication system and could be a userId, organizationId, or any other stable unique identifier in your application.
                                        example: user_123
                                required:
                                    - externalId
                                additionalProperties: false
                            examples:
                                byExternalId:
                                    summary: Delete by external ID
                                    description: Deleting using your system's identifier
                                    value:
                                        externalId: user_abc123
                responses:
                    "200":
                        description: |-
                            Successfully deleted the identity. The operation is complete and cannot be undone.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    description: |-
                                        Empty response object. A successful response indicates the identity was deleted successfully.
                                    required:
                                        - meta
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                    additionalProperties: false
                                examples:
                                    success:
                                        summary: Successful deletion
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__updateIdentity:
            post:
                tags:
                    - identities
                summary: Update an existing identity
                description: |-
                    Updates an existing identity's metadata and rate limits with support for partial updates. You can modify the metadata to reflect changes in user status, subscription plans, or other entity properties, and adjust rate limits to match new usage tiers or requirements.
                    This endpoint supports flexible identification using either the Unkey identity ID or your external ID, making it easy to integrate with existing user management systems. Fields not included in the request remain unchanged, allowing for targeted updates without affecting other identity properties.
                    Changes to rate limits take effect immediately for new API key verifications, though existing sessions may retain old limits briefly due to caching. When updating metadata, consider that this information is returned during key verification, so avoid storing sensitive data that shouldn't be exposed to client applications.
                    Common use cases include updating user plan information after subscription changes, adjusting rate limits for different service tiers, and maintaining current contact or organizational information associated with the identity.
                operationId: v2.identities.updateIdentity
                x-speakeasy-name-override: updateIdentity
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    externalId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_.-]+$"
                                        description: |
                                            Specifies which identity to update using your system's identifier from identity creation.
                                            Use this when you track identities by your own user IDs, organization IDs, or tenant identifiers.
                                            Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
                                        example: user_abc123
                                    meta:
                                        type: object
                                        additionalProperties: true
                                        maxProperties: 100
                                        description: |
                                            Replaces all existing metadata with this new metadata object.
                                            Omitting this field preserves existing metadata, while providing an empty object clears all metadata.
                                            Avoid storing sensitive data here as it's returned in verification responses.
                                            Large metadata objects increase verification latency and should stay under 10KB total size.
                                        example:
                                            name: Alice Smith
                                            email: alice@example.com
                                            plan: premium
                                    ratelimits:
                                        type: array
                                        maxItems: 50
                                        items:
                                            "$ref": "#/components/schemas/RatelimitRequest"
                                        description: |
                                            Replaces all existing identity rate limits with this complete list of rate limits.
                                            Omitting this field preserves existing rate limits, while providing an empty array removes all rate limits.
                                            These limits are shared across all keys belonging to this identity, preventing abuse through multiple keys.
                                            Rate limit changes take effect immediately but may take up to 30 seconds to propagate across all regions.
                                        example:
                                            - name: requests
                                              limit: 1000
                                              duration: 3600000
                                additionalProperties: false
                                required:
                                    - externalId
                            examples:
                                updateMetadata:
                                    summary: Update identity metadata only
                                    value:
                                        externalId: user_123
                                        meta:
                                            name: Alice Smith
                                            email: alice.updated@example.com
                                            plan: enterprise
                responses:
                    "200":
                        description: |-
                            Successfully updated the identity with the new information.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - data
                                        - meta
                                    properties:
                                        data:
                                            type: object
                                            required:
                                                - externalId
                                            properties:
                                                externalId:
                                                    type: string
                                                    description: The external identifier for this identity in your system.
                                            additionalProperties: false
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__limit:
            post:
                tags:
                    - ratelimit
                summary: Apply rate limiting to any identifier
                description: |-
                    Checks and enforces rate limits for any identifier in your application. This is the core rate limiting endpoint that provides flexible, namespace-based rate limiting for any entity in your system.
                    Unlike API key-based rate limiting, this endpoint can be used to limit any identifiable entity:
                    - Anonymous users by IP address
                    - Authenticated users by user ID
                    - Organizations by organization ID
                    - API clients by client ID
                    - Specific actions or resources by custom identifiers
                    The endpoint is designed for high-performance rate limiting with predictable behavior. It returns information about limit status, remaining capacity, and reset times that can be communicated to consumers of your API or service.
                    Features:
                    - Namespace-based organization for different limit types
                    - Custom costs for variable-weight operations
                    - Flexible time windows (1 second to 24 hours)
                    - Override support for custom limits for specific identifiers
                    - Consistent sliding window implementation
                    Implementation tips:
                    - Always check the 'success' field to determine if the request should proceed
                    - Use the 'reset' time to implement intelligent client-side retry logic
                    - Leverage the 'remaining' count to display usage information to users
                    - Store the namespaceId after first use to avoid name lookups in high-volume scenarios
                    - Consider using smaller durations for security-critical operations
                operationId: ratelimit.limit
                x-speakeasy-name-override: limit
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties: false
                                properties:
                                    namespace:
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                        pattern: "^[a-zA-Z][a-zA-Z0-9_./-]*$"
                                        description: |
                                            Identifies the rate limit category using hierarchical naming for organization and monitoring.
                                            Namespaces must start with a letter and can contain letters, numbers, underscores, dots, slashes, or hyphens.
                                            Use descriptive, hierarchical names like 'auth.login', 'api.requests', or 'media.uploads' for clear categorization.
                                            Namespaces must be unique within your workspace and support segmentation of different API operations.
                                            Consistent naming conventions across your application improve monitoring and debugging capabilities.
                                        example: sms.sign_up
                                    cost:
                                        type: integer
                                        format: int64
                                        minimum: 0
                                        maximum: 1000
                                        default: 1
                                        description: |
                                            Sets how much of the rate limit quota this request consumes, enabling weighted rate limiting.
                                            Use higher values for resource-intensive operations and 0 for tracking without limiting.
                                            When accumulated cost exceeds the limit within the duration window, subsequent requests are rejected.
                                            Essential for implementing fair usage policies and preventing resource abuse through expensive operations.
                                        example: 5
                                    duration:
                                        type: integer
                                        format: int64
                                        minimum: 1000
                                        maximum: 2592000000
                                        description: |
                                            Sets the rate limit window duration in milliseconds after which the counter resets.
                                            Shorter durations enable faster recovery but may be less effective against sustained abuse.
                                            Common values include 60000 (1 minute), 3600000 (1 hour), and 86400000 (24 hours).
                                            Balance user experience with protection needs when choosing window sizes.
                                        example: 60000
                                    identifier:
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_.:/-]+$"
                                        description: |
                                            Defines the scope of rate limiting by identifying the entity being limited.
                                            Use user IDs for per-user limits, IP addresses for anonymous limiting, or API key IDs for per-key limits.
                                            Accepts letters, numbers, underscores, dots, colons, slashes, and hyphens for flexible identifier formats.
                                            The same identifier can be used across different namespaces to apply multiple rate limit types.
                                            Choose identifiers that provide appropriate granularity for your rate limiting strategy.
                                        example: "user_12345"
                                    limit:
                                        type: integer
                                        format: int64
                                        minimum: 1
                                        maximum: 1000000
                                        description: |
                                            Sets the maximum operations allowed within the duration window before requests are rejected.
                                            When this limit is reached, subsequent requests fail with `RATE_LIMITED` until the window resets.
                                            Balance user experience with resource protection when setting limits for different user tiers.
                                            Consider system capacity, business requirements, and fair usage policies in limit determination.
                                        example: 1000
                                required:
                                    - namespace
                                    - identifier
                                    - limit
                                    - duration
                            examples:
                                basic:
                                    summary: Basic rate limit check
                                    value:
                                        namespace: api.requests
                                        identifier: user_abc123
                                        limit: 100
                                        duration: 60000
                                ipLimit:
                                    summary: IP-based rate limiting
                                    value:
                                        namespace: auth.login
                                        identifier: 203.0.113.42
                                        limit: 5
                                        duration: 60000
                                weightedCost:
                                    summary: Operation with variable cost
                                    value:
                                        namespace: api.heavy_operations
                                        identifier: user_def456
                                        limit: 50
                                        duration: 3600000
                                        cost: 5
                responses:
                    "200":
                        description: |-
                            Rate limit check completed. Even when the rate limit is exceeded,
                            this endpoint returns HTTP 200 OK - you must check the 'success' field
                            in the response to determine if the request is allowed. When success=false,
                            the client should be prevented from proceeding with their request.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                limit:
                                                    description: |-
                                                        The maximum number of operations allowed within the time window. This reflects either the default limit specified in the request or an override limit if one exists for this identifier.
                                                        This value helps clients understand their total quota for the current window.
                                                    format: int64
                                                    type: integer
                                                remaining:
                                                    description: |-
                                                        The number of operations remaining in the current window before the rate limit is exceeded. Applications should use this value to:
                                                        - Implement client-side throttling before hitting limits
                                                        - Display usage information to end users
                                                        - Trigger alerts when approaching limits
                                                        - Adjust request patterns based on available capacity
                                                        When this reaches zero, requests will be rejected until the window resets.
                                                    format: int64
                                                    type: integer
                                                reset:
                                                    description: |-
                                                        The Unix timestamp in milliseconds when the rate limit window will reset and 'remaining' will return to 'limit'.
                                                        This timestamp enables clients to:
                                                        - Calculate and display wait times to users
                                                        - Implement intelligent retry mechanisms
                                                        - Schedule requests to resume after the reset
                                                        - Implement exponential backoff when needed
                                                        The reset time is based on a sliding window from the first request in the current window.
                                                    format: int64
                                                    type: integer
                                                success:
                                                    description: |-
                                                        Whether the request passed the rate limit check. If true, the request is allowed to proceed. If false, the request has exceeded the rate limit and should be blocked or rejected.
                                                        You MUST check this field to determine if the request should proceed, as the endpoint always returns `HTTP 200` even when rate limited.
                                                    type: boolean
                                                overrideId:
                                                    description: |-
                                                        If a rate limit override was applied for this identifier, this field contains the ID of the override that was used. Empty when no override is in effect.
                                                        This can be useful for:
                                                        - Debugging which override rule was matched
                                                        - Tracking the effects of specific overrides
                                                        - Understanding why limits differ from default values
                                                        - Audit logging of special rate limit rules
                                                    type: string
                                            additionalProperties: false
                                    additionalProperties: false
                                examples:
                                    allowed:
                                        summary: Request allowed
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                                            data:
                                                limit: 100
                                                remaining: 99
                                                reset: 1714582980000
                                                success: true
                                    limitReached:
                                        summary: Rate limit exceeded
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                                            data:
                                                limit: 100
                                                remaining: 0
                                                reset: 1714582980000
                                                success: false
                                    withOverride:
                                        summary: With custom override applied
                                        value:
                                            meta:
                                                requestId: req_01H9TQPP77V5E48E9SH0BG0ZQZ
                                            data:
                                                limit: 1000
                                                remaining: 995
                                                reset: 1714582980000
                                                success: true
                                                overrideId: ovr_2cGKbMxRyIzhCxo1Idjz8q
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__setOverride:
            post:
                tags:
                    - ratelimit
                summary: Create or update a custom rate limit for specific identifiers
                description: |-
                    Creates a new or updates an existing rate limit override for specific identifiers within a namespace.
                    Overrides allow you to implement special rate limiting rules that differ from the default limits. This is essential for:
                    - Creating tiered rate limits for different customer segments
                    - Implementing premium tiers with higher limits
                    - Applying stricter limits to suspicious or abusive users
                    - Setting emergency limits during system stress
                    - Creating customized rate limiting policies
                    When an override exists, it completely replaces the default rate limit for matching identifiers. The override takes effect immediately and will be applied to the very next rate limit check that matches the identifier pattern.
                    Wildcard patterns can be used to create powerful matching rules that apply to groups of identifiers without having to create individual overrides for each one.
                operationId: ratelimit.setOverride
                x-speakeasy-name-override: setOverride
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                description: |-
                                    Sets a new or overwrites an existing rate limit override. Overrides allow you to apply special rate limit rules to specific identifiers, providing custom limits that differ from the default.
                                    Overrides are useful for:
                                    - Granting higher limits to premium users or trusted partners
                                    - Implementing stricter limits for suspicious or abusive users
                                    - Creating tiered access levels with different quotas
                                    - Implementing temporary rate limit adjustments
                                    - Prioritizing important clients with higher limits
                                additionalProperties: false
                                properties:
                                    namespaceId:
                                        description: The unique ID of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` guarantees you're targeting the exact namespace intended, even if names change, making it ideal for automation and scripts.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    namespaceName:
                                        description: The name of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and convenient for manual operations and configurations.
                                        type: string
                                    duration:
                                        description: |-
                                            The duration in milliseconds for the rate limit window. This defines how long the rate limit counter accumulates before resetting to zero.
                                            Considerations:
                                            - This can differ from the default duration for the namespace
                                            - Longer durations create stricter limits that take longer to reset
                                            - Shorter durations allow more frequent bursts of activity
                                            - Common values: 60000 (1 minute), 3600000 (1 hour), 86400000 (1 day)
                                        format: int64
                                        type: integer
                                        minimum: 1000
                                    identifier:
                                        description: |-
                                            Identifier of the entity receiving this custom rate limit. This can be:
                                            - A specific user ID for individual custom limits
                                            - An IP address for location-based rules
                                            - An email domain for organization-wide policies
                                            - Any other string that identifies the target entity
                                            Wildcards (*) can be used to create pattern-matching rules that apply to multiple identifiers. For example:
                                            - 'premium_*' would match all identifiers starting with 'premium_'
                                            - '*_admin' would match all identifiers ending with '_admin'
                                            - '*suspicious*' would match any identifier containing 'suspicious'
                                            More detailed information on wildcard pattern rules is available at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    limit:
                                        description: |-
                                            The maximum number of requests allowed for this override. This defines the custom quota for the specified identifier(s).
                                            Special values:
                                            - Higher than default: For premium or trusted entities
                                            - Lower than default: For suspicious or abusive entities
                                            - 0: To completely block access (useful for ban implementation)
                                            This limit entirely replaces the default limit for matching identifiers.
                                        format: int64
                                        type: integer
                                        minimum: 0
                                required:
                                    - identifier
                                    - limit
                                    - duration
                                type: object
                            examples:
                                premium:
                                    summary: Higher limit for premium user
                                    value:
                                        namespaceName: api.requests
                                        identifier: premium_user_123
                                        limit: 1000
                                        duration: 60000
                                wildcardPattern:
                                    summary: Pattern matching with wildcard
                                    value:
                                        namespaceId: ns_1234567890abcdef
                                        identifier: premium_*
                                        limit: 500
                                        duration: 60000
                                blockAbusive:
                                    summary: Block abusive user
                                    value:
                                        namespaceName: api.requests
                                        identifier: abusive_user_456
                                        limit: 0
                                        duration: 3600000
                responses:
                    "200":
                        description: |-
                            Rate limit override successfully created or updated. The override now applies to all matching identifiers.
                            The override takes effect immediately and will be applied to the very next rate limit check that matches the identifier pattern.
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                overrideId:
                                                    description: |-
                                                        The unique identifier for the newly created or updated rate limit override. This ID can be used to:
                                                        - Reference this specific override in subsequent API calls
                                                        - Delete or modify this override later
                                                        - Track which override is being applied in rate limit responses
                                                        - Associate override effects with specific rules in analytics
                                                        Store this ID if you need to manage the override in the future.
                                                    type: string
                                            required:
                                                - overrideId
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__getOverride:
            post:
                tags:
                    - ratelimit
                summary: Retrieve a specific rate limit override
                description: |-
                    Retrieves the details of a specific rate limit override by its identifier pattern. Returns the exact configuration including the identifier pattern, custom limit value, duration window, and namespace association.
                    Use this endpoint to inspect override configurations before making modifications, audit your rate limiting policies, or debug rate limiting behavior. The identifier must match exactly as it was specified when creating the override, including any wildcard patterns.
                    This endpoint is essential for understanding why certain identifiers receive different rate limits than the default. When troubleshooting rate limiting issues, this endpoint helps verify that overrides are configured correctly and matching the expected identifiers.
                operationId: ratelimit.getOverride
                x-speakeasy-name-override: getOverride
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                description: |-
                                    Gets the configuration of an existing rate limit override. Use this to retrieve details about custom rate limit rules that have been created for specific identifiers within a namespace.
                                    This endpoint is useful for:
                                    - Verifying override configurations
                                    - Checking current limits for specific entities
                                    - Auditing rate limit policies
                                    - Debugging rate limiting behavior
                                    - Retrieving override settings for modification
                                additionalProperties: false
                                properties:
                                    namespaceId:
                                        description: The unique ID of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` is more precise and less prone to naming conflicts, making it ideal for scripts and automated operations.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    namespaceName:
                                        description: The name of the rate limit namespace. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and easier to work with for manual operations and configurations.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    identifier:
                                        description: |-
                                            The exact identifier pattern for the override you want to retrieve. This must match exactly as it was specified when creating the override.
                                            Important notes:
                                            - This is case-sensitive and must match exactly
                                            - Include any wildcards (*) that were part of the original pattern
                                            - For example, if the override was created for 'premium_*', you must use 'premium_*' here, not a specific ID like 'premium_user1'
                                            This field is used to look up the specific override configuration for this pattern.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                required:
                                    - identifier
                                type: object
                                oneOf:
                                    - required:
                                        - namespaceName
                                        - identifier
                                    - required:
                                        - namespaceId
                                        - identifier
                            examples:
                                byNameAndId:
                                    summary: Get specific override
                                    value:
                                        namespaceName: api.requests
                                        identifier: premium_user_123
                                wildcardPattern:
                                    summary: Get wildcard pattern override
                                    value:
                                        namespaceId: ns_1234567890abcdef
                                        identifier: premium_*
                responses:
                    "200":
                        description: Override configuration retrieved successfully
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            "$ref": "#/components/schemas/RatelimitOverride"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__listOverrides:
            post:
                tags:
                    - ratelimit
                summary: List all rate limit overrides for a namespace
                description: |-
                    Retrieves a paginated list of all rate limit overrides defined for a specific namespace. Returns detailed information about each override including identifier patterns, limits, and durations.
                    Use this endpoint to audit your rate limiting policies, build administrative dashboards, or manage and clean up override configurations. For namespaces with many overrides, results are paginated and can be retrieved in chunks using the cursor parameter.
                    This endpoint is particularly useful when you need to review all custom rate limit rules for a namespace, find patterns in your override configurations, or implement management interfaces for rate limiting policies.
                operationId: ratelimit.listOverrides
                x-speakeasy-name-override: listOverrides
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                additionalProperties: false
                                properties:
                                    namespaceId:
                                        description: The unique ID of the rate limit namespace to list overrides for. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` guarantees you're targeting the exact namespace intended, even if names change over time.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    namespaceName:
                                        description: The name of the rate limit namespace to list overrides for. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and convenient for manual operations and dashboards.
                                        type: string
                                    cursor:
                                        description: Pagination cursor from a previous response. Include this when fetching subsequent pages of results. Each response containing more results than the requested limit will include a cursor value in the pagination object that can be used here.
                                        type: string
                                    limit:
                                        description: |-
                                            Maximum number of override entries to return in a single response. Use this to control response size and loading performance.
                                            - Lower values (10-20): Better for UI displays and faster response times
                                            - Higher values (50-100): Better for data exports or bulk operations
                                            - Default (10): Suitable for most dashboard views
                                            Results exceeding this limit will be paginated, with a cursor provided for fetching subsequent pages.
                                        type: integer
                                        default: 10
                                        minimum: 1
                                        maximum: 100
                                type: object
                            examples:
                                byNamespaceName:
                                    summary: List all overrides by namespace name
                                    value:
                                        namespaceName: api.requests
                                        limit: 20
                                byNamespaceId:
                                    summary: List overrides by namespace ID
                                    value:
                                        namespaceId: ns_1234567890abcdef
                                        limit: 50
                                pagination:
                                    summary: Fetch next page of results
                                    value:
                                        namespaceId: ns_1234567890abcdef
                                        cursor: cursor_eyJsYXN0SWQiOiJvdnJfM2RITGNOeVN6SnppRHlwMkpla2E5ciJ9
                responses:
                    "200":
                        description: List of rate limit overrides for the namespace
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            items:
                                                "$ref": "#/components/schemas/RatelimitOverride"
                                        pagination:
                                            $ref: "#/components/schemas/pagination"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__deleteOverride:
            post:
                tags:
                    - ratelimit
                summary: Delete a rate limit override
                description: |-
                    Permanently removes a rate limit override from a namespace. Once deleted, the affected identifiers immediately revert to using the default rate limits for that namespace.
                    Use this endpoint to remove temporary overrides that are no longer needed, reset entities back to standard rate limits, or clean up outdated rate limiting rules. The deletion operation is immediate and permanent - once an override is deleted, it cannot be recovered and must be recreated using the setOverride endpoint if needed again.
                operationId: ratelimit.deleteOverride
                x-speakeasy-name-override: deleteOverride
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                description: |-
                                    Deletes an existing rate limit override. This permanently removes a custom rate limit rule, reverting affected identifiers back to the default rate limits for the namespace.
                                    Use this endpoint when you need to:
                                    - Remove special rate limit rules that are no longer needed
                                    - Reset entities back to standard rate limits
                                    - Clean up temporary overrides
                                    - Remove outdated tiering or custom limit rules
                                    - Fix misconfigured overrides
                                    Once deleted, the override cannot be recovered, and the operation takes effect immediately.
                                additionalProperties: false
                                properties:
                                    namespaceId:
                                        description: The unique ID of the rate limit namespace containing the override. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceId` is more precise and less prone to naming conflicts, making it ideal for automation and scripts.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    namespaceName:
                                        description: The name of the rate limit namespace containing the override. Either `namespaceId` or `namespaceName` must be provided, but not both. Using `namespaceName` is more human-readable and convenient for manual operations and configurations.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                    identifier:
                                        description: |-
                                            The exact identifier pattern of the override to delete. This must match exactly as it was specified when creating the override.
                                            Important notes:
                                            - This is case-sensitive and must match exactly
                                            - Include any wildcards (*) that were part of the original pattern
                                            - For example, if the override was created for 'premium_*', you must use 'premium_*' here, not a specific ID
                                            After deletion, any identifiers previously affected by this override will immediately revert to using the default rate limit for the namespace.
                                        type: string
                                        minLength: 1
                                        maxLength: 255
                                required:
                                    - identifier
                                type: object
                            examples:
                                specificOverride:
                                    summary: Delete specific identifier override
                                    value:
                                        namespaceName: api.requests
                                        identifier: premium_user_123
                                wildcardPattern:
                                    summary: Delete wildcard pattern override
                                    value:
                                        namespaceId: ns_1234567890abcdef
                                        identifier: premium_*
                responses:
                    "200":
                        description: Override successfully deleted
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__listRoles:
            post:
                tags:
                    - permissions
                summary: List all roles in a workspace
                description: |-
                    Retrieves a paginated list of all roles defined in the workspace, including their assigned permissions. This endpoint is essential for role-based access control (RBAC) administration.
                    Roles are collections of permissions that can be assigned to API keys, providing a convenient way to manage access control at scale. This endpoint allows you to:
                    - View all available roles for assignment
                    - Inspect which permissions are granted by each role
                    - Build role management interfaces
                    - Audit your RBAC configuration
                    Results are paginated and sorted alphabetically by role name. Each role includes its complete set of assigned permissions.
                operationId: listRoles
                x-speakeasy-name-override: ListRoles
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    limit:
                                        type: integer
                                        minimum: 1
                                        maximum: 100
                                        default: 100
                                        description: |
                                            Maximum number of roles to return in a single response.
                                            Use smaller values for faster response times and better UI performance.
                                            Use larger values when you need to process many roles efficiently.
                                            Results exceeding this limit will be paginated with a cursor for continuation.
                                        example: 50
                                    cursor:
                                        type: string
                                        maxLength: 1024
                                        description: |
                                            Pagination cursor from a previous response to fetch the next page of roles.
                                            Include this when you need to retrieve additional roles beyond the first page.
                                            Each response containing more results will include a cursor value that can be used here.
                                            Leave empty or omit this field to start from the beginning of the role list.
                                        example: "eyJrZXkiOiJyb2xlXzEyMzQifQ=="
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully listed roles
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            maxItems: 1000
                                            items:
                                                "$ref": "#/components/schemas/Role"
                                            description: Array of roles with their assigned permissions.
                                        pagination:
                                            $ref: "#/components/schemas/pagination"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__createRole:
            post:
                tags:
                    - permissions
                summary: Create a new role with permissions
                description: |-
                    Creates a new role in the workspace with optional permission assignments. Roles are collections of permissions that can be assigned to API keys, providing a convenient way to manage access control at scale.
                    Roles enable you to group related permissions together for easier management, assign consistent permission sets to multiple API keys, and implement role-based access control patterns that simplify permission management as your system grows. When creating a role, you can optionally assign existing permissions to it immediately, and the role becomes available for assignment to API keys as soon as it's created.
                    Use roles to establish standardized access patterns in your application, making it easier to maintain consistent security policies across many API keys while reducing the complexity of individual permission management.
                operationId: createRole
                x-speakeasy-name-override: CreateRole
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - name
                                properties:
                                    name:
                                        type: string
                                        minLength: 1
                                        maxLength: 512
                                        pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                                        description: |
                                            Creates a role with this unique name that groups related permissions together.
                                            Names must be unique within your workspace to prevent conflicts during assignment.
                                            Use descriptive names that clearly indicate the role's purpose and scope of access.
                                            Consider hierarchical naming conventions like 'department.function' for better organization.
                                            Role names should be:
                                            - Descriptive enough to understand their purpose
                                            - Consistent with your organization's naming conventions
                                            - Unique to avoid confusion during role assignment
                                            - Focused on a specific function or responsibility
                                            Examples: 'admin.billing', 'support.readonly', 'developer.api', 'manager.analytics'
                                        example: "support.readonly"
                                    description:
                                        type: string
                                        maxLength: 2048
                                        description: |
                                            Provides comprehensive documentation of what this role encompasses and what access it grants.
                                            Include information about the intended use case, what permissions should be assigned, and any important considerations.
                                            This internal documentation helps team members understand role boundaries and security implications.
                                            Not visible to end users - designed for administration teams and access control audits.
                                            Consider documenting:
                                            - The role's intended purpose and scope
                                            - What types of users should receive this role
                                            - What permissions are typically associated with it
                                            - Any security considerations or limitations
                                            - Related roles that might be used together
                                        example: "Provides read-only access for customer support representatives. Includes permissions to view user accounts, support tickets, and basic analytics. Does not include access to billing, admin functions, or data modification capabilities."
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Basic role creation
                                    value:
                                        name: content.editor
                                        description: Can read and write content
                                withoutDescription:
                                    summary: Role without description
                                    value:
                                        name: api.reader
                responses:
                    "200":
                        description: Successfully created role
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                roleId:
                                                    type: string
                                                    minLength: 3
                                                    maxLength: 255
                                                    pattern: "^[a-zA-Z0-9_]+$"
                                                    description: |
                                                        The unique identifier assigned to the newly created role.
                                                        Use this ID to reference the role in subsequent API operations like assignment to keys, deletion, or modification.
                                                        Always begins with 'role_' followed by alphanumeric characters and underscores.
                                                        Store this ID if you need to manage the role programmatically in the future.
                                                    example: role_1234567890abcdef
                                            required:
                                                - roleId
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "409":
                        $ref: "#/components/responses/conflictErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__createPermission:
            post:
                tags:
                    - permissions
                summary: Create a new permission
                description: |-
                    Creates a new permission in the workspace. Permissions are the fundamental building blocks of access control in Unkey's RBAC system, representing specific actions or capabilities that can be granted to API keys either directly or through roles.
                    This endpoint allows you to:
                    - Define new permissions with descriptive names and URL-safe slugs
                    - Set up granular access control for your API keys
                    - Build the foundation for role-based access control
                    - Organize permissions with consistent naming patterns
                    Best practices:
                    - Use hierarchical naming (e.g., 'resource.action' or 'resource.subresource.action')
                    - Choose descriptive but concise permission names
                    - Use URL-safe slugs for easy reference in APIs
                operationId: createPermission
                x-speakeasy-name-override: CreatePermission
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - name
                                    - slug
                                properties:
                                    name:
                                        type: string
                                        minLength: 1
                                        maxLength: 512
                                        description: |
                                            Creates a permission with this human-readable name that describes its purpose.
                                            Names must be unique within your workspace to prevent conflicts during assignment.
                                            Use clear, semantic names that developers can easily understand when building authorization logic.
                                            Consider using hierarchical naming conventions like 'resource.action' for better organization.
                                            Examples: 'users.read', 'billing.write', 'analytics.view', 'admin.manage'
                                        example: "users.read"
                                    slug:
                                        type: string
                                        minLength: 1
                                        maxLength: 128
                                        pattern: "^[a-zA-Z][a-zA-Z0-9._-]*$"
                                        description: |
                                            Creates a URL-safe identifier for this permission that can be used in APIs and integrations.
                                            Must start with a letter and contain only letters, numbers, periods, underscores, and hyphens.
                                            Slugs are often used in REST endpoints, configuration files, and external integrations.
                                            Should closely match the name but in a format suitable for technical usage.
                                            Must be unique within your workspace to ensure reliable permission lookups.
                                            Keep slugs concise but descriptive for better developer experience.
                                        example: "users-read"
                                    description:
                                        type: string
                                        maxLength: 128
                                        description: |
                                            Provides detailed documentation of what this permission grants access to.
                                            Include information about affected resources, allowed actions, and any important limitations.
                                            This internal documentation helps team members understand permission scope and security implications.
                                            Not visible to end users - designed for development teams and security audits.
                                            Consider documenting:
                                            - What resources can be accessed
                                            - What operations are permitted
                                            - Any conditions or limitations
                                            - Related permissions that might be needed
                                        example: "Grants read-only access to user profile information, account settings, and subscription status. Does not include access to payment methods or billing history."
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Basic permission creation
                                    value:
                                        name: documents.read
                                        slug: documents-read
                                        description: Allows reading document resources
                                withoutDescription:
                                    summary: Permission without description
                                    value:
                                        name: files.upload
                                        slug: files-upload
                                complexPermission:
                                    summary: Complex permission with detailed info
                                    value:
                                        name: admin.users.delete
                                        slug: admin-users-delete
                                        description: Grants full administrative access to delete user accounts. This is a high-privilege permission that should be used carefully.
                responses:
                    "200":
                        description: Successfully created permission
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                permissionId:
                                                    type: string
                                                    minLength: 3
                                                    maxLength: 255
                                                    pattern: "^[a-zA-Z0-9_]+$"
                                                    description: |
                                                        The unique identifier assigned to the newly created permission.
                                                        Use this ID to reference the permission in subsequent API operations like assignment to keys/roles, deletion, or modification.
                                                        Always begins with 'perm_' followed by alphanumeric characters and underscores.
                                                        Store this ID if you need to manage the permission programmatically in the future.
                                                    example: perm_1234567890abcdef
                                            required:
                                                - permissionId
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "409":
                        $ref: "#/components/responses/conflictErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__getPermission:
            post:
                tags:
                    - permissions
                summary: Retrieve details about a specific permission
                description: |-
                    Retrieves detailed information about a specific permission by its ID. This endpoint allows you to inspect a permission's properties, including its name, description, and workspace association.
                    This is useful for:
                    - Verifying a permission exists before assigning it
                    - Retrieving permission details for display in administrative interfaces
                    - Checking permission configuration before making updates
                    - Building permission management tools
                    Permissions are the fundamental building blocks of access control in Unkey's RBAC system, representing specific capabilities that can be granted to API keys either directly or through roles.
                operationId: getPermission
                x-speakeasy-name-override: GetPermission
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - permissionId
                                properties:
                                    permissionId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Specifies which permission to retrieve by its unique identifier.
                                            Must be a valid permission ID that begins with 'perm_' and exists within your workspace.
                                            Use this endpoint to verify permission details, check its current configuration, or retrieve metadata.
                                            Returns detailed information including name, description, and workspace association.
                                        example: perm_1234567890abcdef
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully retrieved permission
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                permission:
                                                    "$ref": "#/components/schemas/Permission"
                                            required:
                                                - permission
                                            additionalProperties: false
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__listPermissions:
            post:
                tags:
                    - permissions
                summary: List all permissions in a workspace
                description: |-
                    Retrieves a paginated list of all permissions defined in the workspace. This endpoint is essential for permission management and RBAC administration.
                    Permissions are the fundamental building blocks of access control in Unkey, representing specific actions or capabilities that can be granted to API keys either directly or through roles.
                    This endpoint allows you to:
                    - View all available permissions for assignment
                    - Build permission management interfaces
                    - Audit your RBAC configuration
                    - Identify existing permissions before creating new ones
                    Results are paginated and typically sorted alphabetically by permission name.
                operationId: listPermissions
                x-speakeasy-name-override: ListPermissions
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    cursor:
                                        type: string
                                        maxLength: 1024
                                        description: |
                                            Pagination cursor from a previous response to fetch the next page of permissions.
                                            Include this value when you need to retrieve additional permissions beyond the initial response.
                                            Each response containing more results than the requested limit includes a cursor for subsequent pages.
                                            Leave empty or omit this field to start from the beginning of the permission list.
                                            Cursors are temporary and may expire - always handle cases where a cursor becomes invalid.
                                        example: "eyJrZXkiOiJwZXJtXzEyMzQifQ=="
                                    limit:
                                        type: integer
                                        minimum: 1
                                        maximum: 100
                                        default: 100
                                        description: Maximum number of permissions to return in a single response.
                                        example: 50
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully listed permissions
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: array
                                            maxItems: 1000
                                            items:
                                                "$ref": "#/components/schemas/Permission"
                                            description: Array of permission objects with complete configuration details.
                                        pagination:
                                            $ref: "#/components/schemas/pagination"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__deletePermission:
            post:
                tags:
                    - permissions
                summary: Delete a permission
                description: |-
                    Permanently removes a permission from the workspace. This endpoint is used when a permission is no longer needed or when cleaning up unused permissions.
                    When a permission is deleted:
                    - All direct assignments to API keys are removed
                    - The permission is removed from any roles it was assigned to
                    - The permission's name becomes available for reuse
                    Important: This operation cannot be undone, and it immediately affects all API keys and roles that had this permission assigned. Consider carefully before deleting permissions that are actively in use.
                operationId: deletePermission
                x-speakeasy-name-override: DeletePermission
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - permissionId
                                properties:
                                    permissionId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Specifies which permission to permanently delete from your workspace.
                                            WARNING: Deleting a permission has immediate and irreversible consequences:
                                            - All API keys with this permission will lose that access immediately
                                            - All roles containing this permission will have it removed
                                            - Any verification requests checking for this permission will fail
                                            - This action cannot be undone
                                            Before deletion, ensure you:
                                            - Have updated any keys or roles that depend on this permission
                                            - Have migrated to alternative permissions if needed
                                            - Have notified affected users about the access changes
                                            - Have the correct permission ID (double-check against your permission list)
                                        example: perm_1234567890abcdef
                                additionalProperties: false
                            examples:
                                basic:
                                    summary: Delete a permission
                                    value:
                                        permissionId: perm_1234567890abcdef
                responses:
                    "200":
                        description: Successfully deleted permission
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__deleteRole:
            post:
                tags:
                    - permissions
                summary: Delete a role
                description: |-
                    Permanently removes a role from the workspace. This endpoint is used when a role is no longer needed or needs to be replaced with a different role structure.
                    When a role is deleted:
                    - All keys that had this role assigned will lose the permissions granted by this role
                    - The role will no longer appear in role listings
                    - The role's name becomes available for reuse
                    Important: This operation cannot be undone, and it immediately affects all API keys that had this role assigned. Consider carefully before deleting roles that are actively in use by many keys.
                operationId: deleteRole
                x-speakeasy-name-override: DeleteRole
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - roleId
                                properties:
                                    roleId:
                                        type: string
                                        minLength: 8
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Unique identifier of the role to permanently delete from your workspace.
                                            Must be a valid role ID that begins with 'role_' and exists within your workspace.
                                            WARNING: Deletion is immediate and irreversible with significant consequences:
                                            - All API keys assigned this role will lose the associated permissions
                                            - Access to resources protected by this role's permissions will be denied
                                            - Any authorization logic depending on this role will start failing
                                            - Historical analytics and audit logs referencing this role remain intact
                                            Before deletion, ensure:
                                            - You have the correct role ID (verify the role name and permissions)
                                            - You've updated any dependent authorization logic or code
                                            - You've migrated any keys to use alternative roles or direct permissions
                                            - You've notified relevant team members of the access changes
                                        example: role_dns_manager
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully deleted role
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "409":
                        $ref: "#/components/responses/conflictErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
        index__getRole:
            post:
                tags:
                    - permissions
                summary: Retrieve details about a specific role
                description: |-
                    Retrieves detailed information about a specific role by its ID, including all permissions assigned to the role. This endpoint allows you to inspect a role's properties and understand what permissions it grants.
                    This is useful for:
                    - Verifying a role exists before assigning it to API keys
                    - Retrieving role details for display in administrative interfaces
                    - Checking role configuration before making updates
                    - Building role management tools
                    - Understanding the complete permission set granted by a role
                    Roles are collections of permissions that can be assigned to API keys, providing a convenient way to manage access control at scale in Unkey's RBAC system.
                operationId: getRole
                x-speakeasy-name-override: GetRole
                security:
                    - rootKey: []
                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - roleId
                                properties:
                                    roleId:
                                        type: string
                                        minLength: 3
                                        maxLength: 255
                                        pattern: "^[a-zA-Z0-9_]+$"
                                        description: |
                                            Specifies which role to retrieve by its unique identifier.
                                            Must be a valid role ID that begins with 'role_' and exists within your workspace.
                                            Use this endpoint to verify role details, check its current permissions, or retrieve metadata.
                                            Returns complete role information including all assigned permissions for comprehensive access review.
                                        example: role_1234567890abcdef
                                additionalProperties: false
                responses:
                    "200":
                        description: Successfully retrieved role
                        content:
                            application/json:
                                schema:
                                    type: object
                                    required:
                                        - meta
                                        - data
                                    properties:
                                        meta:
                                            $ref: "#/components/schemas/meta"
                                        data:
                                            type: object
                                            properties:
                                                role:
                                                    "$ref": "#/components/schemas/Role"
                                            required:
                                                - role
                                            additionalProperties: false
                                            description: Complete role details including assigned permissions.
                                    additionalProperties: false
                    "400":
                        $ref: "#/components/responses/badRequestErrorResponse"
                    "401":
                        $ref: "#/components/responses/unauthorizedErrorResponse"
                    "403":
                        $ref: "#/components/responses/forbiddenErrorResponse"
                    "404":
                        $ref: "#/components/responses/notFoundErrorResponse"
                    "500":
                        $ref: "#/components/responses/internalServerErrorResponse"
