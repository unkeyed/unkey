BaseError:
  properties:
    detail:
      description: A human-readable explanation specific to this occurrence of
        the problem. This provides detailed information about what went wrong
        and potential remediation steps. The message is intended to be helpful
        for developers troubleshooting the issue.
      example: Property foo is required but is missing.
      type: string
    status:
      description: HTTP status code that corresponds to this error. This will
        match the status code in the HTTP response. Common codes include `400` (Bad
        Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict),
        and `500` (Internal Server Error).
      example: 404
      format: int
      type: integer
    title:
      description:
        A short, human-readable summary of the problem type. This remains
        constant from occurrence to occurrence of the same problem and should be
        used for programmatic handling.
      example: Not Found
      type: string
    type:
      description:
        A URI reference that identifies the problem type. This provides
        a stable identifier for the error that can be used for documentation lookups
        and programmatic error handling. When followed, this URI should provide human-readable
        documentation for the problem type.
      example: https://unkey.com/docs/api-reference/errors-v2/unkey/resource/not_found
      type: string
  required:
    - title
    - detail
    - status
    - type
  type: object
  additionalProperties: false
  description: Base error structure following Problem Details for HTTP APIs (RFC
    7807). This provides a standardized way to carry machine-readable details of
    errors in HTTP response content.

BadRequestErrorDetails:
  allOf:
    - $ref: "#/BaseError"
    - type: object
      properties:
        errors:
          description: List of individual validation errors that occurred in the
            request. Each error provides specific details about what failed validation,
            where the error occurred in the request, and suggestions for fixing
            it. This granular information helps developers quickly identify and
            resolve multiple issues in a single request without having to make repeated
            API calls.
          items:
            $ref: "#/ValidationError"
          type: array
      required:
        - errors
  description: Extended error details specifically for bad request (400) errors.
    This builds on the BaseError structure by adding an array of individual validation
    errors, making it easy to identify and fix multiple issues at once.

ValidationError:
  additionalProperties: false
  properties:
    location:
      description: |-
        JSON path indicating exactly where in the request the error occurred. This helps pinpoint the problematic field or parameter. Examples include:
        - 'body.name' (field in request body)
        - 'body.items[3].tags' (nested array element)
        - 'path.apiId' (path parameter)
        - 'query.limit' (query parameter)
        Use this location to identify exactly which part of your request needs correction.
      type: string
      example: body.permissions[0].name
    message:
      description: Detailed error message explaining what validation rule was
        violated. This provides specific information about why the field or parameter
        was rejected, such as format errors, invalid values, or constraint violations.
      type: string
      example: Must be at least 3 characters long
    fix:
      description: A human-readable suggestion describing how to fix the error.
        This provides practical guidance on what changes would satisfy the validation
        requirements. Not all validation errors include fix suggestions, but when
        present, they offer specific remediation advice.
      type: string
      example: Ensure the name uses only alphanumeric characters, underscores,
        and hyphens
  required:
    - location
    - message
  type: object
  description:
    Individual validation error details. Each validation error provides
    precise information about what failed, where it failed, and how to fix it,
    enabling efficient error resolution.
