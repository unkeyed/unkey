Request:
  required: true
  content:
    application/json:
      schema:
        "$ref": "#/V2KeysCreateKeyRequestBody"
      examples:
        simple:
          summary: Basic key creation
          value:
            apiId: api_1234567890abcdef
            prefix: prod
        withMeta:
          summary: Key with user-specific metadata
          value:
            apiId: api_1234567890abcdef
            prefix: prod
            name: User API Key
            externalId: user_12345
            meta:
              plan: premium
              features:
                analytics: true
                exports: true
              teamId: team_abc123
        withLimits:
          summary: Key with usage limits
          value:
            apiId: api_1234567890abcdef
            prefix: prod
            externalId: user_12345
            expires: 1735689600000
            credits:
              remaining: 1000
              refill:
                interval: monthly
                amount: 1000
                refillDay: 1
            ratelimits:
              - name: requests
                limit: 100
                duration: 60000
              - name: heavy_operations
                limit: 10
                duration: 3600000

V2KeysCreateKeyRequestBody:
  type: object
  required:
    - apiId
  properties:
    apiId:
      type: string
      minLength: 3
      maxLength: 255
      pattern: "^[a-zA-Z0-9_]+$"
      description: |
        Specifies which API this key belongs to, providing complete isolation between environments.
        Keys from one API cannot be used to access another API, preventing cross-environment access.
        Create separate APIs for different environments (development, staging, production) and services.
      example: api_2cGKbMxRjIzhCxo1IdjH3a
    prefix:
      type: string
      minLength: 1
      maxLength: 16
      pattern: "^[a-zA-Z0-9_]+$"
      description: |
        Adds a visual identifier to the beginning of the generated key for easier recognition in logs and dashboards.
        The prefix becomes part of the actual key string (e.g., `prod_xxxxxxxxx`).
        Avoid using sensitive information in prefixes as they may appear in logs and error messages.
      example: prod
    name:
      type: string
      minLength: 1
      maxLength: 200
      description: |
        Sets a human-readable identifier for internal organization and dashboard display.
        Never exposed to end users, only visible in management interfaces and API responses.
        Avoid generic names like "API Key" when managing multiple keys for the same user or service.
      example: Payment Service Production Key
    byteLength:
      type: integer
      minimum: 16
      maximum: 255
      default: 16
      description: |
        Controls the cryptographic strength of the generated key in bytes.
        Higher values increase security but result in longer keys that may be harder to handle.
        The default 16 bytes provides 2^128 possible combinations, sufficient for most applications.
        Consider 32 bytes for highly sensitive APIs, but avoid values above 64 bytes unless specifically required.
      example: 24
    externalId:
      type: string
      minLength: 1
      maxLength: 255
      pattern: "^[a-zA-Z0-9_.-]+$"
      description: |
        Associates this key with an entity in your system for tracking and management.
        Use consistent identifiers across your application for easy key-to-user mapping.
        Helps with analytics, support, and automated key management workflows.
      example: user_12345
    meta:
      type: object
      additionalProperties: true
      maxProperties: 100
      description: |
        Stores arbitrary metadata with the key for application-specific context.
        Returned in verification responses and getKey calls for contextual information.
        Avoid storing sensitive data as metadata is returned in API responses.
      example:
        plan: premium
        features:
          analytics: true
          exports: true
        teamId: team_abc123
    expires:
      type: integer
      format: int64
      minimum: 0
      maximum: 9223372036854775807
      description: |
        Unix timestamp in milliseconds when the key expires and becomes invalid.
        Useful for temporary access, trial periods, or scheduled key rotation.
        Omit for keys that never expire.
      example: 1735689600000
    credits:
      type: object
      properties:
        remaining:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          description: Initial number of credits available for this key
        refill:
          type: object
          properties:
            interval:
              type: string
              enum: [daily, monthly]
              description: How often credits are refilled
            amount:
              type: integer
              format: int64
              minimum: 0
              description: Number of credits to add during refill
            refillDay:
              type: integer
              minimum: 1
              maximum: 31
              description: Day of month for monthly refills
      description: Credit system configuration for usage-based billing
    ratelimits:
      type: array
      maxItems: 10
      items:
        type: object
        properties:
          name:
            type: string
            minLength: 1
            maxLength: 100
            description: Name of the rate limit
          limit:
            type: integer
            minimum: 1
            description: Maximum requests allowed
          duration:
            type: integer
            minimum: 1000
            description: Duration in milliseconds
    permissions:
      type: array
      maxItems: 1000
      items:
        type: string
        minLength: 1
        maxLength: 512
      description: List of permission names to assign to this key
    roles:
      type: array
      maxItems: 100
      items:
        type: string
        minLength: 1
        maxLength: 512
      description: List of role names to assign to this key
    recoverable:
      type: boolean
      default: false
      description: |
        Whether the key can be retrieved later (less secure).
        Set to true only if absolutely necessary for your use case.
    enabled:
      type: boolean
      default: true
      description: Whether the key is enabled and can be used for verification
  additionalProperties: false