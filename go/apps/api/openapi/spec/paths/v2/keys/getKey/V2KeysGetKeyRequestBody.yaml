type: object
properties:
  keyId:
    type: string
    minLength: 3
    maxLength: 255 # Reasonable upper bound for database identifiers
    pattern: "^[a-zA-Z0-9_]+$"
    description: |
      Specifies which key to retrieve using the database identifier returned from `keys.createKey`.
      Do not confuse this with the actual API key string that users include in requests.
      Key data includes metadata, permissions, usage statistics, and configuration but never the plaintext key value unless `decrypt=true`.
      Find this ID in creation responses, key listings, dashboard, or verification responses.
    example: key_2cGKbMxRyIzhCxo1Idjz8q
  decrypt:
    type: boolean
    default: false
    description: |
      Controls whether to include the plaintext key value in the response for recovery purposes.
      Only works for keys created with `recoverable=true` and requires the `decrypt_key` permission.
      Returned keys must be handled securely, never logged, cached, or stored insecurely.

      Use only for legitimate recovery scenarios like user password resets or emergency access.
      Most applications should keep this false to maintain security best practices and avoid accidental key exposure.
      Decryption requests are audited and may trigger security alerts in enterprise environments.
  key:
    type: string
    minLength: 1
    maxLength: 512 # Reasonable upper bound for API key strings
    description: |
      The complete API key string provided by you, including any prefix.
      Never log, cache, or store API keys in your system as they provide full access to user resources.
      Include the full key exactly as provided - even minor modifications will cause a not found error.
    example: prefix_f4cc2d765275c206b7d76ff0e92e583067c4e33603fb4055d7ba3031cd7ce36a
additionalProperties: false
oneOf:
  - required:
      - keyId
  - required:
      - key
