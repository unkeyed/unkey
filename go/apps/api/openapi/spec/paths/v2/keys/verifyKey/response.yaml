Response:
  description: Key verification completed (check 'valid' field for success)
  content:
    application/json:
      schema:
        "$ref": "#/V2KeysVerifyKeyResponseBody"

V2KeysVerifyKeyResponseBody:
  type: object
  required:
    - meta
    - data
  properties:
    meta:
      $ref: "../../../../common/meta.yaml"
    data:
      "$ref": "#/KeysVerifyKeyResponseData"
  additionalProperties: false

KeysVerifyKeyResponseData:
  type: object
  properties:
    valid:
      type: boolean
      description: |
        Whether the key is valid and the request should be allowed to proceed.
        This is the primary field to check - true means the key passed all verification checks.
        False indicates the key is invalid, expired, disabled, lacks permissions, or exceeded limits.
      example: true
    keyId:
      type: string
      description: |
        The unique identifier for this key within Unkey's system.
        Useful for logging, analytics, and correlating with other API operations.
        Only present when the key is valid and found in the system.
      example: key_1234567890abcdef
    name:
      type: string
      description: |
        The human-readable name assigned to this key during creation.
        Useful for displaying context in logs or user interfaces.
        Only present when the key is valid and has a name assigned.
      example: User API Key
    externalId:
      type: string
      description: |
        The external identifier associated with this key, typically linking to a user or entity in your system.
        Useful for correlating API usage with specific users or accounts.
        Only present when the key is valid and has an external ID assigned.
      example: user_12345
    meta:
      type: object
      additionalProperties: true
      description: |
        Arbitrary metadata stored with the key during creation.
        Useful for passing application-specific context to your authorization logic.
        Only present when the key is valid and has metadata assigned.
      example:
        plan: premium
        features:
          analytics: true
          exports: true
        teamId: team_abc123
    expires:
      type: integer
      format: int64
      description: |
        Unix timestamp in milliseconds when the key expires.
        Useful for displaying expiration warnings to users.
        Only present when the key is valid and has an expiration date set.
      example: 1735689600000
    credits:
      type: object
      properties:
        remaining:
          type: integer
          format: int64
          description: Number of credits remaining after this verification
        refill:
          type: object
          properties:
            interval:
              type: string
              enum: [daily, monthly]
              description: How often credits are refilled
            amount:
              type: integer
              format: int64
              description: Number of credits added during refill
            refillDay:
              type: integer
              minimum: 1
              maximum: 31
              description: Day of month for monthly refills
      description: |
        Credit information for usage-based billing and quota tracking.
        Only present when the key is valid and has credits configured.
    ratelimits:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            description: Name of the rate limit
          limit:
            type: integer
            description: Maximum requests allowed in the window
          remaining:
            type: integer
            description: Remaining requests in the current window
          reset:
            type: integer
            format: int64
            description: Unix timestamp when the window resets
      description: |
        Rate limit status for this key.
        Shows current usage and remaining capacity for each configured rate limit.
        Only present when the key is valid and has rate limits configured.
    permissions:
      type: array
      items:
        type: string
      description: |
        List of all permissions granted to this key (both direct and through roles).
        Useful for implementing client-side authorization logic.
        Only present when the key is valid and has permissions assigned.
      example:
        - documents.read
        - documents.write
        - profile.view
    roles:
      type: array
      items:
        type: string
      description: |
        List of all roles assigned to this key.
        Useful for displaying user roles in interfaces.
        Only present when the key is valid and has roles assigned.
      example:
        - editor
        - viewer
    code:
      type: string
      enum: [VALID, INVALID, EXPIRED, DISABLED, INSUFFICIENT_CREDITS, RATE_LIMITED, FORBIDDEN]
      description: |
        Specific reason code for the verification result.
        Provides detailed information about why verification succeeded or failed.
        Useful for implementing specific error handling and user messaging.
      example: VALID
    enabled:
      type: boolean
      description: |
        Whether the key is currently enabled and allowed to be used.
        Disabled keys always fail verification regardless of other factors.
        Only present when the key is found in the system.
      example: true
  required:
    - valid
  additionalProperties: false