V2KeysUpdateKeyRequestBody:
  type: object
  required:
    - keyId
  properties:
    keyId:
      type: string
      description: The unique identifier of the key to update
      example: key_2cGKbMxRyIzhCxo1Idjz8q
      minLength: 3
    name:
      type: string
      nullable: true
      description: Human-readable name for the key
      example: Updated API Key
    externalId:
      type: string
      nullable: true
      minLength: 1
      maxLength: 255
      pattern: "^[a-zA-Z0-9_.-]+$"
      description: External identifier for linking to your system
      example: user_12345
    meta:
      type: object
      nullable: true
      description: Additional metadata for the key
      additionalProperties: true
    expires:
      type: integer
      nullable: true
      format: int64
      minimum: 0
      maximum: 4102444800000 # January 1, 2100 - reasonable future limit
      description: |
        Sets when this key automatically expires as a Unix timestamp in milliseconds.
        Verification fails with code=EXPIRED immediately after this time passes.
        Omitting this field preserves the current expiration, while setting null makes the key permanent.

        Avoid setting timestamps in the past as they immediately invalidate the key.
        Keys expire based on server time, not client time, which prevents timezone-related issues.
        Active sessions continue until their next verification attempt after expiry.
      example: 1704067200000

    credits:
      "$ref": "../../../../common/keyCredits.yaml#/KeyCreditsData"
      description: |
        Controls usage-based limits for this key through credit consumption.
        Omitting this field preserves current credit settings, while setting null enables unlimited usage.
        Cannot configure refill settings when credits is null, and refillDay requires monthly interval.
        Essential for implementing usage-based pricing and subscription quotas.
    ratelimits:
      type: array
      maxItems: 50 # Reasonable limit for rate limit configurations per key
      items:
        "$ref": "../../../../common/RatelimitRequest.yaml"
      description: |
        Defines time-based rate limits that protect against abuse by controlling request frequency.
        Omitting this field preserves existing rate limits, while setting null removes all rate limits.
        Unlike credits which track total usage, rate limits reset automatically after each window expires.
        Multiple rate limits can control different operation types with separate thresholds and windows.
    enabled:
      type: boolean
      description: |
        Controls whether the key is currently active for verification requests.
        When set to `false`, all verification attempts fail with `code=DISABLED` regardless of other settings.
        Omitting this field preserves the current enabled status.
        Useful for temporarily suspending access during billing issues, security incidents, or maintenance windows without losing key configuration.
      example: true
    roles:
      type: array
      maxItems: 100 # Reasonable limit for role assignments per key
      items:
        type: string
        minLength: 1
        maxLength: 100 # Keep role names concise and readable
        pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
        description: |
          Assigns existing roles to this key for permission management through role-based access control.
          Roles must already exist in your workspace before assignment.
          During verification, all permissions from assigned roles are checked against requested permissions.
          Roles provide a convenient way to group permissions and apply consistent access patterns across multiple keys.
      example:
        - api_admin
        - billing_reader
    permissions:
      type: array
      maxItems: 1000 # Allow extensive permission sets for complex applications
      items:
        type: string
        minLength: 1
        maxLength: 100 # Keep permission names concise and readable
        pattern: "^[a-zA-Z0-9_]+$"
        description: |
          Grants specific permissions directly to this key without requiring role membership.
          Wildcard permissions like `documents.*` grant access to all sub-permissions including `documents.read` and `documents.write`.
          Direct permissions supplement any permissions inherited from assigned roles.
      example:
        - documents.read
        - documents.write
        - settings.view
  additionalProperties: false

Request:
  required: true
  content:
    application/json:
      schema:
        $ref: "#/V2KeysUpdateKeyRequestBody"
      examples:
        basic:
          summary: Update key name and external ID
          value:
            keyId: key_2cGKbMxRyIzhCxo1Idjz8q
            name: Updated API Key
            externalId: user_12345
        withMeta:
          summary: Update key with metadata
          value:
            keyId: key_2cGKbMxRyIzhCxo1Idjz8q
            name: Production API Key
            meta:
              environment: production
              team: backend
