type: object
required:
  - keyId
properties:
  keyId:
    type: string
    minLength: 3
    maxLength: 255 # Reasonable upper bound for database identifiers
    pattern: "^[a-zA-Z0-9_]+$"
    description: |
      Specifies which key to update using the database identifier returned from `createKey`.
      Do not confuse this with the actual API key string that users include in requests.
    example: key_2cGKbMxRyIzhCxo1Idjz8q
  name:
    type: string
    minLength: 1
    maxLength: 255
    nullable: true
    description: |
      Sets a human-readable name for internal organization and identification.
      Omitting this field leaves the current name unchanged, while setting null removes it entirely.
      Avoid generic names like "API Key" when managing multiple keys per user or service.
    example: Payment Service Production Key
  externalId:
    type: string
    nullable: true
    minLength: 1
    maxLength: 255
    pattern: "^[a-zA-Z0-9_.-]+$"
    description: |
      Links this key to a user or entity in your system for ownership tracking during verification.
      Omitting this field preserves the current association, while setting null disconnects the key from any identity.
      Essential for user-specific analytics, billing, and key management across multiple users.
      Supports letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
    example: user_912a841d
  meta:
    type: object
    nullable: true
    additionalProperties: true
    maxProperties: 100 # Prevent DoS while allowing rich metadata
    description: |
      Stores arbitrary JSON metadata returned during key verification.
      Omitting this field preserves existing metadata, while setting null removes all metadata entirely.
      Avoid storing sensitive data here as it's returned in verification responses.
      Large metadata objects increase verification latency and should stay under 10KB total size.
    example:
      plan: enterprise
      limits:
        storage: 500GB
        compute: 1000 minutes/month
      features: [analytics, exports, webhooks]
      hasAcceptedTerms: true
      billing:
        cycle: monthly
        next_billing: "2024-01-15"
      preferences:
        timezone: "UTC"
        notifications: true
      lastBillingDate: "2023-10-15"
  expires:
    type: integer
    nullable: true
    format: int64
    minimum: 0
    maximum: 4102444800000 # January 1, 2100 - reasonable future limit
    description: |
      Sets when this key automatically expires as a Unix timestamp in milliseconds.
      Verification fails with code=EXPIRED immediately after this time passes.
      Omitting this field preserves the current expiration, while setting null makes the key permanent.

      Avoid setting timestamps in the past as they immediately invalidate the key.
      Keys expire based on server time, not client time, which prevents timezone-related issues.
      Active sessions continue until their next verification attempt after expiry.
    example: 1704067200000
  credits:
    "$ref": "../../../../common/KeyCreditsData.yaml"
    description: |
      Controls usage-based limits for this key through credit consumption.
      Omitting this field preserves current credit settings, while setting null enables unlimited usage.
      Cannot configure refill settings when credits is null, and refillDay requires monthly interval.
      Essential for implementing usage-based pricing and subscription quotas.
  ratelimits:
    type: array
    maxItems: 50 # Reasonable limit for rate limit configurations per key
    items:
      "$ref": "../../../../common/RatelimitRequest.yaml"
    description: |
      Defines time-based rate limits that protect against abuse by controlling request frequency.
      Omitting this field preserves existing rate limits, while setting null removes all rate limits.
      Unlike credits which track total usage, rate limits reset automatically after each window expires.
      Multiple rate limits can control different operation types with separate thresholds and windows.
  enabled:
    type: boolean
    description: |
      Controls whether the key is currently active for verification requests.
      When set to `false`, all verification attempts fail with `code=DISABLED` regardless of other settings.
      Omitting this field preserves the current enabled status.
      Useful for temporarily suspending access during billing issues, security incidents, or maintenance windows without losing key configuration.
    example: true
  roles:
    type: array
    maxItems: 100 # Reasonable limit for role assignments per key
    items:
      type: string
      minLength: 1
      maxLength: 100 # Keep role names concise and readable
      pattern: "^[a-zA-Z][a-zA-Z0-9_-]*$"
      description: |
        Assigns existing roles to this key for permission management through role-based access control.
        Roles must already exist in your workspace before assignment.
        During verification, all permissions from assigned roles are checked against requested permissions.
        Roles provide a convenient way to group permissions and apply consistent access patterns across multiple keys.
    example:
      - api_admin
      - billing_reader
  permissions:
    type: array
    maxItems: 1000 # Allow extensive permission sets for complex applications
    items:
      type: string
      minLength: 3
      maxLength: 100
      pattern: ^[a-zA-Z0-9_:\-\.\*]+$
      description: |
        Grants specific permissions directly to this key without requiring role membership.
        Wildcard permissions like `documents.*` grant access to all sub-permissions including `documents.read` and `documents.write`.
        Direct permissions supplement any permissions inherited from assigned roles.
    example:
      - documents.read
      - documents.write
      - settings.view
additionalProperties: false
examples:
  planUpgrade:
    summary: Upgrade user from free to paid plan
    description: Update key when user upgrades to paid plan with higher limits
    value:
      keyId: key_1234abcd
      meta:
        plan: paid
        billingCycle: monthly
        upgradeDate: "2024-01-15T10:30:00Z"
      credits:
        remaining: 10000
        refill:
          interval: monthly
          amount: 10000
          refillDay: 15
      ratelimits:
        - name: requests
          limit: 1000
          duration: 60000
          autoApply: true
  planDowngrade:
    summary: Downgrade user to free tier
    description: Reduce limits when user cancels paid subscription
    value:
      keyId: key_5678efgh
      meta:
        plan: free
        downgradeDate: "2024-01-15T10:30:00Z"
        reason: subscription_cancelled
      credits:
        remaining: 1000
        refill:
          interval: monthly
          amount: 1000
          refillDay: 1
      ratelimits:
        - name: requests
          limit: 100
          duration: 60000
          autoApply: true
  roleChange:
    summary: Update user permissions after role change
    description: Modify key permissions when user's role changes in your system
    value:
      keyId: key_9876wxyz
      externalId: user_admin_456
      meta:
        role: admin
        promotedDate: "2024-01-15T10:30:00Z"
      permissions:
        - users.read
        - users.write
        - admin.dashboard
        - billing.view
      roles:
        - admin
  suspendAccount:
    summary: Temporarily disable key for suspended account
    description: Disable key when user account is suspended for policy violations
    value:
      keyId: key_suspended_123
      enabled: false
      meta:
        status: suspended
        suspendedDate: "2024-01-15T10:30:00Z"
        reason: policy_violation
        suspendedBy: support_agent_789
  updateIdentity:
    summary: Link key to different user identity
    description: Update key association when user changes their identifier
    value:
      keyId: key_identity_456
      externalId: new_user_id_789
      name: "Production API Key - New User"
      meta:
        previousId: old_user_id_123
        transferredDate: "2024-01-15T10:30:00Z"
  removeExpiration:
    summary: Make temporary key permanent
    description: Remove expiration from a key that was initially created with time limits
    value:
      keyId: key_temp_789
      expires: null
      meta:
        status: permanent
        convertedDate: "2024-01-15T10:30:00Z"
        originalExpiry: "2024-02-15T10:30:00Z"
