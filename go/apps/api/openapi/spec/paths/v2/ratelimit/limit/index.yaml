post:
  tags:
    - ratelimit
  summary: Apply rate limiting to any identifier
  description: |-
    Checks and enforces rate limits for any identifier in your application. This is the core rate limiting endpoint that provides flexible, namespace-based rate limiting for any entity in your system.
    Unlike API key-based rate limiting, this endpoint can be used to limit any identifiable entity:
    - Anonymous users by IP address
    - Authenticated users by user ID
    - Organizations by organization ID
    - API clients by client ID
    - Specific actions or resources by custom identifiers
    The endpoint is designed for high-performance rate limiting with predictable behavior. It returns information about limit status, remaining capacity, and reset times that can be communicated to consumers of your API or service.
    Features:
    - Namespace-based organization for different limit types
    - Custom costs for variable-weight operations
    - Flexible time windows (1 second to 24 hours)
    - Override support for custom limits for specific identifiers
    - Consistent sliding window implementation
    Implementation tips:
    - Always check the 'success' field to determine if the request should proceed
    - Use the 'reset' time to implement intelligent client-side retry logic
    - Leverage the 'remaining' count to display usage information to users
    - Store the namespaceId after first use to avoid name lookups in high-volume scenarios
    - Consider using smaller durations for security-critical operations
  operationId: ratelimit.limit
  x-speakeasy-name-override: limit
  security:
    - rootKey: []
  requestBody:
    content:
      application/json:
        schema:
          "$ref": "./V2RatelimitLimitRequestBody.yaml"
        examples:
          basic:
            summary: Basic rate limit check
            value:
              namespace: api.requests
              identifier: user_abc123
              limit: 100
              duration: 60000
          ipLimit:
            summary: IP-based rate limiting
            value:
              namespace: auth.login
              identifier: 203.0.113.42
              limit: 5
              duration: 60000
          weightedCost:
            summary: Operation with variable cost
            value:
              namespace: api.heavy_operations
              identifier: user_def456
              limit: 50
              duration: 3600000
              cost: 5
    required: true
  responses:
    "200":
      content:
        application/json:
          schema:
            "$ref": "./V2RatelimitLimitResponseBody.yaml"
          examples:
            allowed:
              summary: Request allowed
              value:
                meta:
                  requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                data:
                  limit: 100
                  remaining: 99
                  reset: 1714582980000
                  success: true
            limitReached:
              summary: Rate limit exceeded
              value:
                meta:
                  requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                data:
                  limit: 100
                  remaining: 0
                  reset: 1714582980000
                  success: false
            withOverride:
              summary: With custom override applied
              value:
                meta:
                  requestId: req_01H9TQPP77V5E48E9SH0BG0ZQZ
                data:
                  limit: 1000
                  remaining: 995
                  reset: 1714582980000
                  success: true
                  overrideId: ovr_2cGKbMxRyIzhCxo1Idjz8q
      description:
        Rate limit check completed. Even when the rate limit is exceeded,
        this endpoint returns HTTP 200 OK - you must check the 'success' field
        in the response to determine if the request is allowed. When success=false,
        the client should be prevented from proceeding with their request.
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            "$ref": "../../../../error/BadRequestErrorResponse.yaml"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            "$ref": "../../../../error/UnauthorizedErrorResponse.yaml"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            "$ref": "../../../../error/ForbiddenErrorResponse.yaml"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "../../../../error/NotFoundErrorResponse.yaml"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            "$ref": "../../../../error/InternalServerErrorResponse.yaml"
