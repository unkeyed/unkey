post:
  tags:
    - ratelimit
  summary: Apply rate limiting
  description: |
    Check and enforce rate limits for any identifier (user ID, IP address, API client, etc.).

    Use this for rate limiting beyond API keys - limit users by ID, IPs by address, or any custom identifier. Supports namespace organization, variable costs, and custom overrides.

    **Important**: Always returns HTTP 200. Check the `success` field to determine if the request should proceed.

    **Required Permissions**

    Your root key must have one of the following permissions:
    - `ratelimit.*.limit` (to check limits in any namespace)
    - `ratelimit.<namespace_id>.limit` (to check limits in a specific namespace)

    **Side Effects**

    Records rate limit metrics for analytics and monitoring, updates rate limit counters with sliding window algorithm, and optionally triggers override matching for custom limits.
  operationId: ratelimit.limit
  x-speakeasy-name-override: limit
  security:
    - rootKey: []
  requestBody:
    content:
      application/json:
        schema:
          "$ref": "./V2RatelimitLimitRequestBody.yaml"
        examples:
          basic:
            summary: Basic rate limit check
            value:
              namespace: api.requests
              identifier: user_abc123
              limit: 100
              duration: 60000
          ipLimit:
            summary: IP-based rate limiting
            value:
              namespace: auth.login
              identifier: 203.0.113.42
              limit: 5
              duration: 60000
          weightedCost:
            summary: Operation with variable cost
            value:
              namespace: api.heavy_operations
              identifier: user_def456
              limit: 50
              duration: 3600000
              cost: 5
    required: true
  responses:
    "200":
      content:
        application/json:
          schema:
            "$ref": "./V2RatelimitLimitResponseBody.yaml"
          examples:
            allowed:
              summary: Request allowed
              value:
                meta:
                  requestId: req_01H9TQPP77V5E48E9SH0BG0ZQX
                data:
                  limit: 100
                  remaining: 99
                  reset: 1714582980000
                  success: true
            limitReached:
              summary: Rate limit exceeded
              value:
                meta:
                  requestId: req_01H9TQPP77V5E48E9SH0BG0ZQY
                data:
                  limit: 100
                  remaining: 0
                  reset: 1714582980000
                  success: false
            withOverride:
              summary: With custom override applied
              value:
                meta:
                  requestId: req_01H9TQPP77V5E48E9SH0BG0ZQZ
                data:
                  limit: 1000
                  remaining: 995
                  reset: 1714582980000
                  success: true
                  overrideId: ovr_2cGKbMxRyIzhCxo1Idjz8q
      description: |
        Rate limit check completed. Always returns HTTP 200 - check the `success` field to determine if the request is allowed.
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            "$ref": "../../../../error/BadRequestErrorResponse.yaml"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            "$ref": "../../../../error/UnauthorizedErrorResponse.yaml"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            "$ref": "../../../../error/ForbiddenErrorResponse.yaml"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "../../../../error/NotFoundErrorResponse.yaml"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            "$ref": "../../../../error/InternalServerErrorResponse.yaml"
