// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"github.com/oapi-codegen/nullable"
)

const (
	RootKeyScopes = "rootKey.Scopes"
)

// Defines values for KeyCreditsRefillInterval.
const (
	Daily   KeyCreditsRefillInterval = "daily"
	Monthly KeyCreditsRefillInterval = "monthly"
)

// BadRequestErrorDetails defines model for BadRequestErrorDetails.
type BadRequestErrorDetails struct {
	// Detail A human-readable explanation specific to this occurrence of the problem. This provides detailed information about what went wrong and potential remediation steps. The message is intended to be helpful for developers troubleshooting the issue.
	Detail string `json:"detail"`

	// Errors List of individual validation errors that occurred in the request. Each error provides specific details about what failed validation, where the error occurred in the request, and suggestions for fixing it. This granular information helps developers quickly identify and resolve multiple issues in a single request without having to make repeated API calls.
	Errors []ValidationError `json:"errors"`

	// Status HTTP status code that corresponds to this error. This will match the status code in the HTTP response. Common codes include `400` (Bad Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict), and `500` (Internal Server Error).
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This remains constant from occurrence to occurrence of the same problem and should be used for programmatic handling.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type. This provides a stable identifier for the error that can be used for documentation lookups and programmatic error handling. When followed, this URI should provide human-readable documentation for the problem type.
	Type string `json:"type"`
}

// BadRequestErrorResponse Error response for invalid requests that cannot be processed due to client-side errors. This typically occurs when request parameters are missing, malformed, or fail validation rules. The response includes detailed information about the specific errors in the request, including the location of each error and suggestions for fixing it. When receiving this error, check the 'errors' array in the response for specific validation issues that need to be addressed before retrying.
type BadRequestErrorResponse struct {
	// Error Extended error details specifically for bad request (400) errors. This builds on the BaseError structure by adding an array of individual validation errors, making it easy to identify and fix multiple issues at once.
	Error BadRequestErrorDetails `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// BaseError Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
type BaseError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem. This provides detailed information about what went wrong and potential remediation steps. The message is intended to be helpful for developers troubleshooting the issue.
	Detail string `json:"detail"`

	// Status HTTP status code that corresponds to this error. This will match the status code in the HTTP response. Common codes include `400` (Bad Request), `401` (Unauthorized), `403` (Forbidden), `404` (Not Found), `409` (Conflict), and `500` (Internal Server Error).
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This remains constant from occurrence to occurrence of the same problem and should be used for programmatic handling.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type. This provides a stable identifier for the error that can be used for documentation lookups and programmatic error handling. When followed, this URI should provide human-readable documentation for the problem type.
	Type string `json:"type"`
}

// ConflictErrorResponse Error response when the request conflicts with the current state of the resource. This occurs when:
// - Attempting to create a resource that already exists
// - Modifying a resource that has been changed by another operation
// - Violating unique constraints or business rules
//
// To resolve this error, check the current state of the resource and adjust your request accordingly.
type ConflictErrorResponse struct {
	// Error Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
	Error BaseError `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// ForbiddenErrorResponse Error response when the provided credentials are valid but lack sufficient permissions for the requested operation. This occurs when:
// - The root key doesn't have the required permissions for this endpoint
// - The operation requires elevated privileges that the current key lacks
// - Access to the requested resource is restricted based on workspace settings
//
// To resolve this error, ensure your root key has the necessary permissions or contact your workspace administrator.
type ForbiddenErrorResponse struct {
	// Error Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
	Error BaseError `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// Identity defines model for Identity.
type Identity struct {
	Description *interface{} `json:"description,omitempty"`

	// ExternalId External identity ID
	ExternalId string `json:"externalId"`

	// Meta Identity metadata
	Meta       *map[string]interface{} `json:"meta,omitempty"`
	Ratelimits []RatelimitResponse     `json:"ratelimits"`
}

// InternalServerErrorResponse Error response when an unexpected error occurs on the server. This indicates a problem with Unkey's systems rather than your request.
//
// When you encounter this error:
// - The request ID in the response can help Unkey support investigate the issue
// - The error is likely temporary and retrying may succeed
// - If the error persists, contact Unkey support with the request ID
type InternalServerErrorResponse struct {
	// Error Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
	Error BaseError `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// KeyCreditsData Credit configuration and remaining balance for this key.
type KeyCreditsData struct {
	// Refill Configuration for automatic credit refill behavior.
	Refill *KeyCreditsRefill `json:"refill,omitempty"`

	// Remaining Number of credits remaining (null for unlimited).
	Remaining nullable.Nullable[int64] `json:"remaining"`
}

// KeyCreditsRefill Configuration for automatic credit refill behavior.
type KeyCreditsRefill struct {
	// Amount Number of credits to add during each refill cycle.
	Amount int64 `json:"amount"`

	// Interval How often credits are automatically refilled.
	Interval KeyCreditsRefillInterval `json:"interval"`

	// RefillDay Day of the month for monthly refills (1-31).
	// Only required when interval is 'monthly'.
	// For days beyond the month's length, refill occurs on the last day of the month.
	RefillDay *int `json:"refillDay,omitempty"`
}

// KeyCreditsRefillInterval How often credits are automatically refilled.
type KeyCreditsRefillInterval string

// KeyResponseData defines model for KeyResponseData.
type KeyResponseData struct {
	// CreatedAt Unix timestamp in milliseconds when key was created.
	CreatedAt int64 `json:"createdAt"`

	// Credits Credit configuration and remaining balance for this key.
	Credits *KeyCreditsData `json:"credits,omitempty"`

	// Enabled Whether the key is enabled or disabled.
	Enabled bool `json:"enabled"`

	// Expires Unix timestamp in milliseconds when key expires (if set).
	Expires *int64 `json:"expires,omitempty"`

	// ExternalId External identifier linking this key to an entity in your system.
	ExternalId *string   `json:"externalId,omitempty"`
	Identity   *Identity `json:"identity,omitempty"`

	// KeyId Unique identifier for this key.
	KeyId string `json:"keyId"`

	// Meta Custom metadata associated with this key.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Name Human-readable name for this key.
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`

	// Plaintext Decrypted key value (only when decrypt=true).
	Plaintext  *string              `json:"plaintext,omitempty"`
	Ratelimits *[]RatelimitResponse `json:"ratelimits,omitempty"`
	Roles      *[]string            `json:"roles,omitempty"`

	// Start First few characters of the key for identification.
	Start string `json:"start"`

	// UpdatedAt Unix timestamp in milliseconds when key was last updated.
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
}

// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
type Meta struct {
	// RequestId A unique id for this request. Always include this ID when contacting support about a specific API request. This identifier allows Unkey's support team to trace the exact request through logs and diagnostic systems to provide faster assistance.
	RequestId string `json:"requestId"`
}

// NotFoundErrorResponse Error response when the requested resource cannot be found. This occurs when:
// - The specified resource ID doesn't exist in your workspace
// - The resource has been deleted or moved
// - The resource exists but is not accessible with current permissions
//
// To resolve this error, verify the resource ID is correct and that you have access to it.
type NotFoundErrorResponse struct {
	// Error Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
	Error BaseError `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// Pagination Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
type Pagination struct {
	// Cursor Opaque pagination token for retrieving the next page of results.
	// Include this exact value in the cursor field of subsequent requests.
	// Cursors are temporary and may expire after extended periods.
	Cursor *string `json:"cursor,omitempty"`

	// HasMore Indicates whether additional results exist beyond this page.
	// When true, use the cursor to fetch the next page.
	// When false, you have reached the end of the result set.
	HasMore bool `json:"hasMore"`
}

// PreconditionFailedErrorResponse Error response when one or more conditions specified in the request headers are not met. This typically occurs when:
// - Using conditional requests with If-Match or If-None-Match headers
// - The resource version doesn't match the expected value
// - Optimistic concurrency control detects a conflict
//
// To resolve this error, fetch the latest version of the resource and retry with updated conditions.
type PreconditionFailedErrorResponse struct {
	// Error Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
	Error BaseError `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// RatelimitRequest defines model for RatelimitRequest.
type RatelimitRequest struct {
	// AutoApply Whether this ratelimit should be automatically applied when verifying a key.
	AutoApply bool `json:"autoApply"`

	// Duration The duration for each ratelimit window in milliseconds.
	//
	// This controls how long the rate limit counter accumulates before resetting. Common values include:
	// - 1000 (1 second): For strict per-second limits on high-frequency operations
	// - 60000 (1 minute): For moderate API usage control
	// - 3600000 (1 hour): For less frequent but costly operations
	// - 86400000 (24 hours): For daily quotas
	//
	// Shorter windows provide more frequent resets but may allow large burst usage. Longer windows provide more consistent usage patterns but take longer to reset after limit exhaustion.
	Duration int64 `json:"duration"`

	// Limit The maximum number of operations allowed within the specified time window.
	//
	// When this limit is reached, verification requests will fail with `code=RATE_LIMITED` until the window resets. The limit should reflect:
	// - Your infrastructure capacity and scaling limitations
	// - Fair usage expectations for your service
	// - Different tier levels for various user types
	// - The relative cost of the operations being limited
	//
	// Higher values allow more frequent access but may impact service performance.
	Limit int64 `json:"limit"`

	// Name The name of this rate limit. This name is used to identify which limit to check during key verification.
	//
	// Best practices for limit names:
	// - Use descriptive, semantic names like 'api_requests', 'heavy_operations', or 'downloads'
	// - Be consistent with naming conventions across your application
	// - Create separate limits for different resource types or operation costs
	// - Consider using namespaced names for better organization (e.g., 'files.downloads', 'compute.training')
	//
	// You will reference this exact name when verifying keys to check against this specific limit.
	Name string `json:"name"`
}

// RatelimitResponse defines model for RatelimitResponse.
type RatelimitResponse struct {
	// AutoApply Whether this rate limit was automatically applied when verifying the key.
	AutoApply bool `json:"autoApply"`

	// Duration Rate limit window duration in milliseconds.
	Duration int64 `json:"duration"`

	// Id Unique identifier for this rate limit configuration.
	Id string `json:"id"`

	// Limit Maximum requests allowed within the time window.
	Limit int64 `json:"limit"`

	// Name Human-readable name for this rate limit.
	Name string `json:"name"`
}

// UnauthorizedErrorResponse Error response when authentication has failed or credentials are missing. This occurs when:
// - No authentication token is provided in the request
// - The provided token is invalid, expired, or malformed
// - The token format doesn't match expected patterns
//
// To resolve this error, ensure you're including a valid root key in the Authorization header.
type UnauthorizedErrorResponse struct {
	// Error Base error structure following Problem Details for HTTP APIs (RFC 7807). This provides a standardized way to carry machine-readable details of errors in HTTP response content.
	Error BaseError `json:"error"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2ApisCreateApiRequestBody defines model for V2ApisCreateApiRequestBody.
type V2ApisCreateApiRequestBody struct {
	// Name Creates an API with this name as an internal identifier for organization and isolation.
	// APIs serve as containers for groups of keys and provide namespace separation between environments or services.
	// Names must be unique within your workspace and are not shown to end users.
	//
	// Use descriptive names that clearly identify the API's purpose and environment:
	// - Include environment indicators like 'production', 'staging', 'development'
	// - Use service-based naming like 'payment-service', 'user-management', 'analytics'
	// - Follow consistent naming conventions across your organization
	// - Keep names concise but informative for easy identification
	//
	// Must start with a letter and contain only letters, numbers, underscores, dots, and hyphens.
	// Avoid generic names like 'api' or 'main' that don't provide meaningful context.
	Name string `json:"name"`
}

// V2ApisCreateApiResponseBody defines model for V2ApisCreateApiResponseBody.
type V2ApisCreateApiResponseBody struct {
	Data V2ApisCreateApiResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2ApisCreateApiResponseData defines model for V2ApisCreateApiResponseData.
type V2ApisCreateApiResponseData struct {
	// ApiId The unique identifier assigned to the newly created API.
	// Use this ID for all subsequent operations including key creation, verification, and API management.
	// Always begins with 'api_' followed by a unique alphanumeric sequence.
	//
	// Store this ID securely as it's required when:
	// - Creating API keys within this namespace
	// - Verifying keys associated with this API
	// - Managing API settings and metadata
	// - Listing keys belonging to this API
	//
	// This identifier is permanent and cannot be changed after creation.
	ApiId string `json:"apiId"`
}

// V2ApisDeleteApiRequestBody defines model for V2ApisDeleteApiRequestBody.
type V2ApisDeleteApiRequestBody struct {
	// ApiId Specifies which API to permanently delete from your workspace.
	// Must be a valid API ID that begins with 'api_' and exists within your workspace.
	//
	// CRITICAL WARNING: Deletion is immediate and irreversible with severe consequences:
	// - ALL keys associated with this API become invalid instantly
	// - Verification requests for these keys will fail with `code=NOT_FOUND`
	// - Client applications using these keys will lose access immediately
	// - Analytics data and key metadata are permanently removed
	// - This operation cannot be undone under any circumstances
	//
	// Before proceeding, ensure you have:
	// - Verified the correct API ID (double-check environment and service)
	// - Migrated all active keys to alternative APIs
	// - Updated all client applications to use replacement keys
	// - Backed up critical analytics data and key configurations
	// - Notified all stakeholders of the service interruption
	// - Tested replacement systems in non-production environments
	//
	// Consider disabling keys first to test impact before permanent deletion.
	ApiId string `json:"apiId"`
}

// V2ApisDeleteApiResponseBody defines model for V2ApisDeleteApiResponseBody.
type V2ApisDeleteApiResponseBody struct {
	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2ApisGetApiRequestBody defines model for V2ApisGetApiRequestBody.
type V2ApisGetApiRequestBody struct {
	// ApiId Specifies which API to retrieve by its unique identifier.
	// Must be a valid API ID that begins with 'api_' and exists within your workspace.
	//
	// Use this endpoint to:
	// - Verify an API exists and is accessible
	// - Retrieve the API's current name and configuration
	// - Validate API IDs before performing key operations
	// - Check API status during debugging or troubleshooting
	//
	// Returns complete API information including name, ID, and metadata.
	ApiId string `json:"apiId"`
}

// V2ApisGetApiResponseBody defines model for V2ApisGetApiResponseBody.
type V2ApisGetApiResponseBody struct {
	Data V2ApisGetApiResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2ApisGetApiResponseData defines model for V2ApisGetApiResponseData.
type V2ApisGetApiResponseData struct {
	// Id The unique identifier of this API within Unkey's system.
	// Used in all operations related to this API including key creation, verification, and management.
	// Always begins with 'api_' followed by alphanumeric characters and underscores.
	// This identifier is permanent and never changes after API creation.
	Id string `json:"id"`

	// Name The internal name of this API as specified during creation.
	// Used for organization and identification within your workspace.
	// Helps distinguish between different environments, services, or access tiers.
	// Not visible to end users - this is purely for administrative purposes.
	Name string `json:"name"`
}

// V2ApisListKeysRequestBody defines model for V2ApisListKeysRequestBody.
type V2ApisListKeysRequestBody struct {
	// ApiId The ID of the API whose keys you want to list (begins with 'api_'). This endpoint returns all keys associated with this specific API, subject to pagination and any additional filters provided.
	ApiId string `json:"apiId"`

	// Cursor Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains hasMore=true. Each response containing additional results will include a new cursor value in the pagination object.
	Cursor *string `json:"cursor,omitempty"`

	// Decrypt When true, attempts to include the plaintext key value in the response. SECURITY WARNING:
	// - This requires special permissions on the calling root key
	// - Only works for keys created with 'recoverable: true'
	// - Exposes sensitive key material in the response
	// - Should only be used in secure administrative contexts
	// - Never enable this in user-facing applications
	Decrypt *bool `json:"decrypt,omitempty"`

	// ExternalId Optional filter to return only keys associated with a specific external ID. This is useful when you need to find all keys belonging to a particular user, organization, or entity in your system. The value must exactly match the externalId set during key creation.
	ExternalId *string `json:"externalId,omitempty"`

	// Limit The maximum number of keys to return in a single request. Use this to control response size and loading performance. Higher values return more keys but may increase response time. Lower values may require more pagination requests but provide faster initial loading.
	Limit *int `json:"limit,omitempty"`

	// RevalidateKeysCache EXPERIMENTAL: Skip the cache and fetch the keys directly from the database. This ensures you see the most recent state, including keys created moments ago. Use this when:
	// - You've just created a key and need to display it immediately
	// - You need absolute certainty about the current key state
	// - You're debugging cache consistency issues
	//
	// This parameter comes with a performance cost and should be used sparingly.
	RevalidateKeysCache *bool `json:"revalidateKeysCache,omitempty"`
}

// V2ApisListKeysResponseBody defines model for V2ApisListKeysResponseBody.
type V2ApisListKeysResponseBody struct {
	// Data Array of API keys with complete configuration and metadata.
	Data V2ApisListKeysResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`

	// Pagination Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
	Pagination *Pagination `json:"pagination,omitempty"`
}

// V2ApisListKeysResponseData Array of API keys with complete configuration and metadata.
type V2ApisListKeysResponseData = []KeyResponseData

// V2IdentitiesCreateIdentityRequestBody defines model for V2IdentitiesCreateIdentityRequestBody.
type V2IdentitiesCreateIdentityRequestBody struct {
	// ExternalId Creates an identity using your system's unique identifier for a user, organization, or entity.
	// Must be stable and unique across your workspace - duplicate externalIds return CONFLICT errors.
	// This identifier links Unkey identities to your authentication system, database records, or tenant structure.
	//
	// Avoid changing externalIds after creation as this breaks the link between your systems.
	// Use consistent identifier patterns across your application for easier management and debugging.
	// Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
	// Essential for implementing proper multi-tenant isolation and user-specific rate limiting.
	ExternalId string `json:"externalId"`

	// Meta Stores arbitrary JSON metadata returned during key verification for contextual information.
	// Eliminates additional database lookups during verification, improving performance for stateless services.
	// Avoid storing sensitive data here as it's returned in verification responses.
	//
	// Large metadata objects increase verification latency and should stay under 10KB total size.
	// Use this for subscription details, feature flags, user preferences, and organization information.
	// Metadata is returned as-is whenever keys associated with this identity are verified.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Ratelimits Defines shared rate limits that apply to all keys belonging to this identity.
	// Prevents abuse by users with multiple keys by enforcing consistent limits across their entire key portfolio.
	// Essential for implementing fair usage policies and tiered access levels in multi-tenant applications.
	//
	// Rate limit counters are shared across all keys with this identity, regardless of how many keys the user creates.
	// During verification, specify which named limits to check for enforcement.
	// Identity rate limits supplement any key-specific rate limits that may also be configured.
	// - Each named limit can have different thresholds and windows
	//
	// When verifying keys, you can specify which limits you want to use and all keys attached to this identity will share the limits, regardless of which specific key is used.
	Ratelimits *[]RatelimitRequest `json:"ratelimits,omitempty"`
}

// V2IdentitiesCreateIdentityResponseBody defines model for V2IdentitiesCreateIdentityResponseBody.
type V2IdentitiesCreateIdentityResponseBody struct {
	Data V2IdentitiesCreateIdentityResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2IdentitiesCreateIdentityResponseData defines model for V2IdentitiesCreateIdentityResponseData.
type V2IdentitiesCreateIdentityResponseData = map[string]interface{}

// V2IdentitiesDeleteIdentityRequestBody defines model for V2IdentitiesDeleteIdentityRequestBody.
type V2IdentitiesDeleteIdentityRequestBody struct {
	// ExternalId The id of this identity in your system.
	// This should match the externalId value you used when creating the identity.
	// This identifier typically comes from your authentication system and could be a userId, organizationId, or any other stable unique identifier in your application.
	ExternalId string `json:"externalId"`
}

// V2IdentitiesDeleteIdentityResponseBody Empty response object. A successful response indicates the identity was deleted successfully.
type V2IdentitiesDeleteIdentityResponseBody struct {
	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2IdentitiesGetIdentityRequestBody defines model for V2IdentitiesGetIdentityRequestBody.
type V2IdentitiesGetIdentityRequestBody struct {
	// ExternalId The external ID of the identity to retrieve. This is the ID from your own system that was used during identity creation.
	ExternalId string `json:"externalId"`
}

// V2IdentitiesGetIdentityResponseBody defines model for V2IdentitiesGetIdentityResponseBody.
type V2IdentitiesGetIdentityResponseBody struct {
	Data V2IdentitiesGetIdentityResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2IdentitiesGetIdentityResponseData defines model for V2IdentitiesGetIdentityResponseData.
type V2IdentitiesGetIdentityResponseData struct {
	// ExternalId The external identifier for this identity in your system. This is the ID you provided during identity creation.
	ExternalId string `json:"externalId"`

	// Meta Custom metadata associated with this identity. This can include any JSON-serializable data you stored with the identity during creation or updates.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Ratelimits Rate limits associated with this identity. These limits are shared across all API keys linked to this identity, providing consistent rate limiting regardless of which key is used.
	Ratelimits *[]RatelimitResponse `json:"ratelimits,omitempty"`
}

// V2IdentitiesListIdentitiesRequestBody defines model for V2IdentitiesListIdentitiesRequestBody.
type V2IdentitiesListIdentitiesRequestBody struct {
	// Cursor Pagination cursor from a previous response. Use this to fetch subsequent pages of results when the response contains a cursor value.
	Cursor *string `json:"cursor,omitempty"`

	// Limit The maximum number of identities to return in a single request. Use this to control response size and loading performance.
	Limit *int `json:"limit,omitempty"`
}

// V2IdentitiesListIdentitiesResponseBody defines model for V2IdentitiesListIdentitiesResponseBody.
type V2IdentitiesListIdentitiesResponseBody struct {
	// Data List of identities matching the specified criteria.
	Data V2IdentitiesListIdentitiesResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`

	// Pagination Pagination metadata for list endpoints. Provides information necessary to traverse through large result sets efficiently using cursor-based pagination.
	Pagination Pagination `json:"pagination"`
}

// V2IdentitiesListIdentitiesResponseData List of identities matching the specified criteria.
type V2IdentitiesListIdentitiesResponseData = []Identity

// V2IdentitiesUpdateIdentityRequestBody defines model for V2IdentitiesUpdateIdentityRequestBody.
type V2IdentitiesUpdateIdentityRequestBody struct {
	// ExternalId Specifies which identity to update using your system's identifier from identity creation.
	// Use this when you track identities by your own user IDs, organization IDs, or tenant identifiers.
	// Accepts letters, numbers, underscores, dots, and hyphens for flexible identifier formats.
	ExternalId string `json:"externalId"`

	// Meta Replaces all existing metadata with this new metadata object.
	// Omitting this field preserves existing metadata, while providing an empty object clears all metadata.
	// Avoid storing sensitive data here as it's returned in verification responses.
	// Large metadata objects increase verification latency and should stay under 10KB total size.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Ratelimits Replaces all existing identity rate limits with this complete list of rate limits.
	// Omitting this field preserves existing rate limits, while providing an empty array removes all rate limits.
	// These limits are shared across all keys belonging to this identity, preventing abuse through multiple keys.
	// Rate limit changes take effect immediately but may take up to 30 seconds to propagate across all regions.
	Ratelimits *[]RatelimitRequest `json:"ratelimits,omitempty"`
}

// V2IdentitiesUpdateIdentityResponseBody defines model for V2IdentitiesUpdateIdentityResponseBody.
type V2IdentitiesUpdateIdentityResponseBody struct {
	Data Identity `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2LivenessResponseBody defines model for V2LivenessResponseBody.
type V2LivenessResponseBody struct {
	// Data Response data for the liveness check endpoint. This provides a simple indication of whether the Unkey API service is running and able to process requests. Monitoring systems can use this endpoint to track service availability and trigger alerts if the service becomes unhealthy.
	Data V2LivenessResponseData `json:"data"`

	// Meta Metadata object included in every API response. This provides context about the request and is essential for debugging, audit trails, and support inquiries. The `requestId` is particularly important when troubleshooting issues with the Unkey support team.
	Meta Meta `json:"meta"`
}

// V2LivenessResponseData Response data for the liveness check endpoint. This provides a simple indication of whether the Unkey API service is running and able to process requests. Monitoring systems can use this endpoint to track service availability and trigger alerts if the service becomes unhealthy.
type V2LivenessResponseData struct {
	// Message Status message indicating the health of the service. A value of 'OK' indicates that the service is functioning properly and ready to accept requests. Any other value indicates a potential issue with the service health.
	Message string `json:"message"`
}

// ValidationError Individual validation error details. Each validation error provides precise information about what failed, where it failed, and how to fix it, enabling efficient error resolution.
type ValidationError struct {
	// Fix A human-readable suggestion describing how to fix the error. This provides practical guidance on what changes would satisfy the validation requirements. Not all validation errors include fix suggestions, but when present, they offer specific remediation advice.
	Fix *string `json:"fix,omitempty"`

	// Location JSON path indicating exactly where in the request the error occurred. This helps pinpoint the problematic field or parameter. Examples include:
	// - 'body.name' (field in request body)
	// - 'body.items[3].tags' (nested array element)
	// - 'path.apiId' (path parameter)
	// - 'query.limit' (query parameter)
	// Use this location to identify exactly which part of your request needs correction.
	Location string `json:"location"`

	// Message Detailed error message explaining what validation rule was violated. This provides specific information about why the field or parameter was rejected, such as format errors, invalid values, or constraint violations.
	Message string `json:"message"`
}

// CreateApiJSONRequestBody defines body for CreateApi for application/json ContentType.
type CreateApiJSONRequestBody = V2ApisCreateApiRequestBody

// DeleteApiJSONRequestBody defines body for DeleteApi for application/json ContentType.
type DeleteApiJSONRequestBody = V2ApisDeleteApiRequestBody

// GetApiJSONRequestBody defines body for GetApi for application/json ContentType.
type GetApiJSONRequestBody = V2ApisGetApiRequestBody

// ListKeysJSONRequestBody defines body for ListKeys for application/json ContentType.
type ListKeysJSONRequestBody = V2ApisListKeysRequestBody

// IdentitiesCreateIdentityJSONRequestBody defines body for IdentitiesCreateIdentity for application/json ContentType.
type IdentitiesCreateIdentityJSONRequestBody = V2IdentitiesCreateIdentityRequestBody

// V2IdentitiesDeleteIdentityJSONRequestBody defines body for V2IdentitiesDeleteIdentity for application/json ContentType.
type V2IdentitiesDeleteIdentityJSONRequestBody = V2IdentitiesDeleteIdentityRequestBody

// IdentitiesGetIdentityJSONRequestBody defines body for IdentitiesGetIdentity for application/json ContentType.
type IdentitiesGetIdentityJSONRequestBody = V2IdentitiesGetIdentityRequestBody

// IdentitiesListIdentitiesJSONRequestBody defines body for IdentitiesListIdentities for application/json ContentType.
type IdentitiesListIdentitiesJSONRequestBody = V2IdentitiesListIdentitiesRequestBody

// V2IdentitiesUpdateIdentityJSONRequestBody defines body for V2IdentitiesUpdateIdentity for application/json ContentType.
type V2IdentitiesUpdateIdentityJSONRequestBody = V2IdentitiesUpdateIdentityRequestBody
