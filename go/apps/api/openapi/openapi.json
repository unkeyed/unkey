{
  "info": {
    "title": "Unkey API",
    "version": "2.0.0"
  },
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "https://api.unkey.com"
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 50,
      "maxInterval": 1000,
      "maxElapsedTime": 10000,
      "exponent": 1.5
    },
    "statusCodes": ["5XX"],
    "retryConnectionErrors": true
  },
  "components": {
    "securitySchemes": {
      "rootKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "root key",
        "x-speakeasy-example": "UNKEY_ROOT_KEY"
      }
    },
    "schemas": {
      "Meta": {
        "type": "object",
        "required": ["requestId"],
        "properties": {
          "requestId": {
            "description": "A unique id for this request. Please always provide this to support.",
            "example": "req_123",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "cursor": {
            "description": "Opaque token for retrieving the next set of results",
            "example": "cursor_xyz123",
            "type": "string"
          },
          "hasMore": {
            "description": "Indicates if more results exist beyond this page",
            "example": true,
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BaseError": {
        "properties": {
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Property foo is required but is missing.",
            "type": "string"
          },
          "instance": {
            "description": "A URI reference that identifies the specific occurrence of the problem.",
            "example": "https://example.com/error-log/abc123",
            "format": "uri",
            "type": "string"
          },
          "status": {
            "description": "HTTP status code",
            "example": 404,
            "format": "int",
            "type": "integer"
          },
          "title": {
            "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
            "type": "string"
          },
          "type": {
            "description": "A URI reference to human-readable documentation for the error.",
            "example": "https://example.com/errors/example",
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object",
        "required": ["detail", "status", "title", "type"]
      },
      "ValidationError": {
        "additionalProperties": false,
        "properties": {
          "location": {
            "description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
            "type": "string"
          },
          "message": {
            "description": "Error message text",
            "type": "string"
          },
          "fix": {
            "description": "A human-readable message describing how to fix the error.",
            "type": "string"
          }
        },
        "type": "object",
        "required": ["message", "location"]
      },
      "BadRequestErrorDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "description": "Optional list of individual error details",
                "items": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "type": "array"
              }
            },
            "required": ["errors"]
          }
        ]
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "ConflictErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "ForbiddenErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "PreconditionFailedErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "BadRequestErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BadRequestErrorDetails"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "required": ["meta", "error"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "error": {
            "$ref": "#/components/schemas/BaseError"
          }
        }
      },
      "LivenessResponseData": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Whether we're alive or not",
            "example": "OK",
            "type": "string"
          }
        },
        "required": ["message"]
      },
      "V2LivenessResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/LivenessResponseData"
          }
        }
      },
      "V2RatelimitSetOverrideRequestBody": {
        "description": "Sets a new or overwrites an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string"
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": ["identifier", "limit", "duration"],
        "type": "object"
      },
      "RatelimitSetOverrideResponseData": {
        "type": "object",
        "properties": {
          "overrideId": {
            "description": "The id of the override. This is used internally.",
            "type": "string"
          }
        },
        "required": ["overrideId"]
      },
      "V2RatelimitSetOverrideResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitSetOverrideResponseData"
          }
        }
      },
      "V2RatelimitGetOverrideRequestBody": {
        "description": "Gets the configuration of an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": ["identifier"],
        "type": "object"
      },
      "V2RatelimitGetOverrideResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitOverride"
          }
        }
      },
      "V2RatelimitListOverridesRequestBody": {
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace to list overrides for.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace to list overrides for.",
            "type": "string"
          },
          "cursor": {
            "description": "Pagination cursor from a previous response",
            "type": "string"
          },
          "limit": {
            "description": "Maximum number of results to return",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          }
        },
        "type": "object"
      },
      "RatelimitListOverridesResponseData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RatelimitOverride"
        }
      },
      "V2RatelimitListOverridesResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitListOverridesResponseData"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "V2RatelimitLimitRequestBody": {
        "additionalProperties": false,
        "properties": {
          "namespace": {
            "description": "The namespace name for the rate limit.",
            "type": "string",
            "example": "sms.sign_up",
            "minLength": 1,
            "maxLength": 255
          },
          "cost": {
            "description": "The cost of the request. Defaults to 1 if not provided.",
            "format": "int64",
            "type": "integer",
            "default": 1,
            "minimum": 0
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000,
            "maximum": 86400000
          },
          "identifier": {
            "description": "The identifier for the rate limit.",
            "type": "string"
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": ["namespace", "identifier", "limit", "duration"],
        "type": "object"
      },
      "RatelimitLimitResponseData": {
        "type": "object",
        "properties": {
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer"
          },
          "remaining": {
            "description": "The number of requests remaining in the current window.",
            "format": "int64",
            "type": "integer"
          },
          "reset": {
            "description": "The time in milliseconds when the rate limit will reset.",
            "format": "int64",
            "type": "integer"
          },
          "success": {
            "description": "Whether the request passed the ratelimit. If false, the request must be blocked.",
            "type": "boolean"
          },
          "overrideId": {
            "description": "The override that was used. May be empty",
            "type": "string"
          }
        },
        "required": ["limit", "remaining", "reset", "success"]
      },
      "V2RatelimitLimitResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitLimitResponseData"
          }
        }
      },
      "V2RatelimitDeleteOverrideRequestBody": {
        "description": "Deletes an existing override.",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "namespaceName": {
            "description": "The name of the namespace. Either namespaceId or namespaceName must be provided",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "identifier": {
            "description": "Identifier of the override to delete",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": ["identifier"],
        "type": "object"
      },
      "RatelimitDeleteOverrideResponseData": {
        "type": "object",
        "additionalProperties": false
      },
      "V2RatelimitDeleteOverrideResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/RatelimitDeleteOverrideResponseData"
          }
        }
      },
      "V2IdentitiesCreateIdentityRequestBody": {
        "type": "object",
        "required": ["externalId"],
        "properties": {
          "externalId": {
            "type": "string",
            "minLength": 3,
            "description": "The id of this identity in your system.\n\nThis usually comes from your authentication provider and could be a userId, organisationId or even an email.\nIt does not matter what you use, as long as it uniquely identifies something in your application.\n\n`externalId`s are unique across your workspace and therefore a `CONFLICT` error is returned when you try to create duplicates.\n",
            "example": "user_123"
          },
          "meta": {
            "type": "object",
            "description": "Attach metadata to this identity that you need to have access to when verifying a key.\n\nThis will be returned as part of the `verifyKey` response.\n"
          },
          "ratelimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2Ratelimit"
            },
            "description": "Attach ratelimits to this identity.\n\nWhen verifying keys, you can specify which limits you want to use and all keys attached to this identity, will share the limits."
          }
        }
      },
      "V2Ratelimit": {
        "type": "object",
        "required": ["name", "limit", "duration"],
        "properties": {
          "name": {
            "description": "The name of this limit. You will need to use this again when verifying a key.",
            "type": "string",
            "minLength": 3,
            "maxLength": 128
          },
          "limit": {
            "description": "How many requests may pass within a given window before requests are rejected.",
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "description": "The duration for each ratelimit window in milliseconds.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "IdentitiesCreateIdentityResponseData": {
        "type": "object",
        "properties": {
          "identityId": {
            "description": "The id of the identity. Used internally, you do not need to store this.",
            "type": "string"
          }
        },
        "required": ["identityId"]
      },
      "V2IdentitiesCreateIdentityResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/IdentitiesCreateIdentityResponseData"
          }
        }
      },
      "V2ApisCreateApiRequestBody": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "The name for your API. This is not customer facing.",
            "example": "my-api"
          }
        },
        "additionalProperties": false
      },
      "ApisCreateApiResponseData": {
        "type": "object",
        "properties": {
          "apiId": {
            "description": "The id of the API",
            "type": "string"
          },
          "name": {
            "description": "The name of the API",
            "type": "string"
          }
        },
        "required": ["apiId", "name"]
      },
      "V2ApisCreateApiResponseBody": {
        "type": "object",
        "required": ["meta", "data"],
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "$ref": "#/components/schemas/ApisCreateApiResponseData"
          }
        }
      },
      "RatelimitOverride": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "namespaceId": {
            "description": "The id of the namespace.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "overrideId": {
            "description": "The id of the override.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "duration": {
            "description": "The duration in milliseconds for the rate limit window.",
            "format": "int64",
            "type": "integer",
            "minimum": 1000
          },
          "identifier": {
            "description": "Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "limit": {
            "description": "The maximum number of requests allowed.",
            "format": "int64",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": ["namespaceId", "overrideId", "duration", "identifier", "limit"]
      }
    }
  },
  "paths": {
    "/v2/ratelimit.limit": {
      "post": {
        "tags": ["ratelimit"],
        "operationId": "v1.ratelimit.limit",
        "summary": "TODO",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitLimitRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitLimitResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.setOverride": {
      "post": {
        "tags": ["ratelimit"],
        "operationId": "ratelimit.setOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitSetOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitSetOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.getOverride": {
      "post": {
        "tags": ["ratelimit"],
        "operationId": "ratelimit.getOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitGetOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitGetOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.listOverrides": {
      "post": {
        "tags": ["ratelimit"],
        "operationId": "ratelimit.listOverrides",
        "summary": "List rate limit overrides",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitListOverridesRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitListOverridesResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/ratelimit.deleteOverride": {
      "post": {
        "tags": ["ratelimit"],
        "operationId": "ratelimit.deleteOverride",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2RatelimitDeleteOverrideRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2RatelimitDeleteOverrideResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/identities.createIdentity": {
      "post": {
        "tags": ["identities"],
        "operationId": "v2.identities.createIdentity",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2IdentitiesCreateIdentityRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2IdentitiesCreateIdentityResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "This response is sent when a request conflicts with the current state of the server.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/v2/apis.createApi": {
      "post": {
        "tags": ["apis"],
        "operationId": "createApi",
        "security": [
          {
            "rootKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2ApisCreateApiRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2ApisCreateApiResponseBody"
                }
              }
            },
            "description": "Successfully created API"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/liveness": {
      "get": {
        "tags": ["liveness"],
        "operationId": "liveness",
        "description": "This endpoint checks if the service is alive.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2LivenessResponseBody"
                }
              }
            },
            "description": "OK"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Liveness check"
      }
    }
  }
}
