//go:build ignore

package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/pb33f/libopenapi"
	"github.com/pb33f/libopenapi/bundler"
	"github.com/pb33f/libopenapi/datamodel"
)

var (
	input  = flag.String("input", "openapi-split.yaml", "Input OpenAPI file")
	output = flag.String("output", "openapi-generated.yaml", "Output bundled OpenAPI file")
)

func main() {
	flag.Parse()

	bytes, err := os.ReadFile(*input)
	if err != nil {
		log.Fatalf("Failed to read input file %s: %v", *input, err)
	}

	config := datamodel.NewDocumentConfiguration()
	config.BasePath = "."
	config.ExtractRefsSequentially = false
	config.BundleInlineRefs = false

	document, err := libopenapi.NewDocumentWithConfiguration(bytes, config)
	if err != nil {
		log.Fatalf("Failed to parse OpenAPI document: %v", err)
	}

	v3Model, errs := document.BuildV3Model()
	if len(errs) > 0 {
		for _, e := range errs {
			log.Printf("Error building model: %v", e)
		}

		log.Fatal("Failed to build v3 model")
	}

	bundledBytes, err := bundler.BundleDocumentComposed(&v3Model.Model, &bundler.BundleCompositionConfig{})
	if err != nil {
		log.Fatalf("Failed to bundle document: %v", err)
	}

	// Add auto-generated comment header
	header := fmt.Sprintf(`# Code generated by generate_bundle.go; DO NOT EDIT.
# Generated at: %s
# Source: %s

`, time.Now().UTC().Format(time.RFC3339), *input)

	// Prepend header to bundled content
	finalContent := append([]byte(header), bundledBytes...)

	err = os.WriteFile(*output, finalContent, 0644)
	if err != nil {
		log.Fatalf("Failed to write output file %s: %v", *output, err)
	}

	fmt.Printf("âœ… Successfully bundled OpenAPI spec to %s\n", *output)
}
