//go:build go1.22

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Errors Optional list of individual error details
	Errors []ValidationError `json:"errors"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// RequestId A unique id for this request. Please always provide this to support.
	RequestId string `json:"requestId"`

	// Status HTTP status code
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title string `json:"title"`

	// Type A URI reference to human-readable documentation for the error.
	Type string `json:"type"`
}

// BaseError defines model for BaseError.
type BaseError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// RequestId A unique id for this request. Please always provide this to support.
	RequestId string `json:"requestId"`

	// Status HTTP status code
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title string `json:"title"`

	// Type A URI reference to human-readable documentation for the error.
	Type string `json:"type"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = BaseError

// NotFoundError defines model for NotFoundError.
type NotFoundError = BaseError

// V2LivenessResponseBody defines model for V2LivenessResponseBody.
type V2LivenessResponseBody struct {
	// Message Whether we're alive or not
	Message string `json:"message"`
}

// V2RatelimitLimitRequestBody defines model for V2RatelimitLimitRequestBody.
type V2RatelimitLimitRequestBody struct {
	// Cost The cost of the request. Defaults to 1 if not provided.
	Cost *int64 `json:"cost,omitempty"`

	// Duration The duration in milliseconds for the rate limit window.
	Duration int64 `json:"duration"`

	// Identifier The identifier for the rate limit.
	Identifier string `json:"identifier"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`
}

// V2RatelimitLimitResponseBody defines model for V2RatelimitLimitResponseBody.
type V2RatelimitLimitResponseBody struct {
	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`

	// Remaining The number of requests remaining in the current window.
	Remaining int64 `json:"remaining"`

	// Reset The time in milliseconds when the rate limit will reset.
	Reset int64 `json:"reset"`

	// Success Whether the request passed the ratelimit. If false, the request must be blocked.
	Success bool `json:"success"`
}

// V2RatelimitSetOverrideRequestBody Sets a new or overwrites an existing override.
type V2RatelimitSetOverrideRequestBody struct {
	// Duration The duration in milliseconds for the rate limit window.
	Duration int64 `json:"duration"`

	// Identifier Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
	Identifier string `json:"identifier"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`

	// NamespaceId The id of the namespace. Either namespaceId or namespaceName must be provided
	NamespaceId *string `json:"namespaceId,omitempty"`

	// NamespaceName xThe name of the namespace. Either namespaceId or namespaceName must be provided
	NamespaceName *string `json:"namespaceName,omitempty"`
}

// V2RatelimitSetOverrideResponseBody defines model for V2RatelimitSetOverrideResponseBody.
type V2RatelimitSetOverrideResponseBody struct {
	// OverrideId The id of the override. This is used internally.
	OverrideId string `json:"overrideId"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Fix A human-readable message describing how to fix the error.
	Fix *string `json:"fix,omitempty"`

	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location string `json:"location"`

	// Message Error message text
	Message string `json:"message"`
}

// V1RatelimitLimitParams defines parameters for V1RatelimitLimit.
type V1RatelimitLimitParams struct {
	// Xxx xxx
	Xxx *int `form:"xxx,omitempty" json:"xxx,omitempty"`

	// Yyy yyy
	Yyy string `form:"yyy" json:"yyy"`
}

// V1RatelimitLimitJSONRequestBody defines body for V1RatelimitLimit for application/json ContentType.
type V1RatelimitLimitJSONRequestBody = V2RatelimitLimitRequestBody

// V2RatelimitSetOverrideJSONRequestBody defines body for V2RatelimitSetOverride for application/json ContentType.
type V2RatelimitSetOverrideJSONRequestBody = V2RatelimitSetOverrideRequestBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Liveness check
	// (GET /v2/liveness)
	Liveness(w http.ResponseWriter, r *http.Request)

	// (POST /v2/ratelimit.limit)
	V1RatelimitLimit(w http.ResponseWriter, r *http.Request, params V1RatelimitLimitParams)

	// (POST /v2/ratelimit.setOverride)
	V2RatelimitSetOverride(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Liveness operation middleware
func (siw *ServerInterfaceWrapper) Liveness(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Liveness(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// V1RatelimitLimit operation middleware
func (siw *ServerInterfaceWrapper) V1RatelimitLimit(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1RatelimitLimitParams

	// ------------- Optional query parameter "xxx" -------------

	err = runtime.BindQueryParameter("form", true, false, "xxx", r.URL.Query(), &params.Xxx)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "xxx", Err: err})
		return
	}

	// ------------- Required query parameter "yyy" -------------

	if paramValue := r.URL.Query().Get("yyy"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "yyy"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "yyy", r.URL.Query(), &params.Yyy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "yyy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V1RatelimitLimit(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// V2RatelimitSetOverride operation middleware
func (siw *ServerInterfaceWrapper) V2RatelimitSetOverride(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.V2RatelimitSetOverride(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v2/liveness", wrapper.Liveness)
	m.HandleFunc("POST "+options.BaseURL+"/v2/ratelimit.limit", wrapper.V1RatelimitLimit)
	m.HandleFunc("POST "+options.BaseURL+"/v2/ratelimit.setOverride", wrapper.V2RatelimitSetOverride)

	return m
}

type LivenessRequestObject struct {
}

type LivenessResponseObject interface {
	VisitLivenessResponse(w http.ResponseWriter) error
}

type Liveness200JSONResponse V2LivenessResponseBody

func (response Liveness200JSONResponse) VisitLivenessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Liveness500JSONResponse InternalServerError

func (response Liveness500JSONResponse) VisitLivenessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V1RatelimitLimitRequestObject struct {
	Params V1RatelimitLimitParams
	Body   *V1RatelimitLimitJSONRequestBody
}

type V1RatelimitLimitResponseObject interface {
	VisitV1RatelimitLimitResponse(w http.ResponseWriter) error
}

type V1RatelimitLimit200JSONResponse V2RatelimitLimitResponseBody

func (response V1RatelimitLimit200JSONResponse) VisitV1RatelimitLimitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V1RatelimitLimit400JSONResponse BadRequestError

func (response V1RatelimitLimit400JSONResponse) VisitV1RatelimitLimitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V1RatelimitLimit404JSONResponse NotFoundError

func (response V1RatelimitLimit404JSONResponse) VisitV1RatelimitLimitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V1RatelimitLimit500JSONResponse InternalServerError

func (response V1RatelimitLimit500JSONResponse) VisitV1RatelimitLimitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type V2RatelimitSetOverrideRequestObject struct {
	Body *V2RatelimitSetOverrideJSONRequestBody
}

type V2RatelimitSetOverrideResponseObject interface {
	VisitV2RatelimitSetOverrideResponse(w http.ResponseWriter) error
}

type V2RatelimitSetOverride200JSONResponse V2RatelimitSetOverrideResponseBody

func (response V2RatelimitSetOverride200JSONResponse) VisitV2RatelimitSetOverrideResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V2RatelimitSetOverride400JSONResponse BadRequestError

func (response V2RatelimitSetOverride400JSONResponse) VisitV2RatelimitSetOverrideResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type V2RatelimitSetOverride404JSONResponse NotFoundError

func (response V2RatelimitSetOverride404JSONResponse) VisitV2RatelimitSetOverrideResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V2RatelimitSetOverride500JSONResponse InternalServerError

func (response V2RatelimitSetOverride500JSONResponse) VisitV2RatelimitSetOverrideResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Liveness check
	// (GET /v2/liveness)
	Liveness(ctx context.Context, request LivenessRequestObject) (LivenessResponseObject, error)

	// (POST /v2/ratelimit.limit)
	V1RatelimitLimit(ctx context.Context, request V1RatelimitLimitRequestObject) (V1RatelimitLimitResponseObject, error)

	// (POST /v2/ratelimit.setOverride)
	V2RatelimitSetOverride(ctx context.Context, request V2RatelimitSetOverrideRequestObject) (V2RatelimitSetOverrideResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Liveness operation middleware
func (sh *strictHandler) Liveness(w http.ResponseWriter, r *http.Request) {
	var request LivenessRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Liveness(ctx, request.(LivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Liveness")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LivenessResponseObject); ok {
		if err := validResponse.VisitLivenessResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V1RatelimitLimit operation middleware
func (sh *strictHandler) V1RatelimitLimit(w http.ResponseWriter, r *http.Request, params V1RatelimitLimitParams) {
	var request V1RatelimitLimitRequestObject

	request.Params = params

	var body V1RatelimitLimitJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V1RatelimitLimit(ctx, request.(V1RatelimitLimitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1RatelimitLimit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V1RatelimitLimitResponseObject); ok {
		if err := validResponse.VisitV1RatelimitLimitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// V2RatelimitSetOverride operation middleware
func (sh *strictHandler) V2RatelimitSetOverride(w http.ResponseWriter, r *http.Request) {
	var request V2RatelimitSetOverrideRequestObject

	var body V2RatelimitSetOverrideJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.V2RatelimitSetOverride(ctx, request.(V2RatelimitSetOverrideRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V2RatelimitSetOverride")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(V2RatelimitSetOverrideResponseObject); ok {
		if err := validResponse.VisitV2RatelimitSetOverrideResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
