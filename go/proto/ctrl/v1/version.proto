syntax = "proto3";

package ctrl.v1;

option go_package = "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1;ctrlv1";

// Version status enum
enum VersionStatus {
  VERSION_STATUS_UNSPECIFIED = 0;
  VERSION_STATUS_PENDING = 1;
  VERSION_STATUS_BUILDING = 2;
  VERSION_STATUS_DEPLOYING = 3;
  VERSION_STATUS_ACTIVE = 4;
  VERSION_STATUS_FAILED = 5;
  VERSION_STATUS_ARCHIVED = 6;
}

// Source type for version creation
enum SourceType {
  SOURCE_TYPE_UNSPECIFIED = 0;
  SOURCE_TYPE_GIT = 1;
  SOURCE_TYPE_CLI_UPLOAD = 2;
}

message CreateVersionRequest {
  string workspace_id = 1;
  string project_id = 2;
  string branch = 3;
  
  // Source information
  SourceType source_type = 4;
  string git_commit_sha = 5;  // For git sources
  
  // Optional environment override (defaults based on branch)
  string environment_id = 7;
  
  // Docker image support
  string docker_image_tag = 8;  // e.g. "ghcr.io/user/app:sha256..."
}

message CreateVersionResponse {
  string version_id = 1;
  VersionStatus status = 2;  // Will be PENDING or BUILDING
}

message GetVersionRequest {
  string version_id = 1;
}

message GetVersionResponse {
  Version version = 1;
}


message Version {
  string id = 1;
  string workspace_id = 2;
  string project_id = 3;
  string environment_id = 4;
  
  // Source information
  string git_commit_sha = 5;
  string git_branch = 6;
  
  // Status and lifecycle
  VersionStatus status = 7;
  string error_message = 8;  // For failed versions
  
  // Configuration snapshot (resolved at creation time)
  map<string, string> environment_variables = 9;
  
  // Topology configuration
  Topology topology = 10;
  
  // Timestamps
  int64 created_at = 11;
  int64 updated_at = 12;
  
  // Associated hostnames for this version
  repeated string hostnames = 13;
  
  // Build information
  string rootfs_image_id = 14;
  string build_id = 15;
  
  // Deployment steps
  repeated VersionStep steps = 16;
}

message VersionStep {
  string status = 1;
  string message = 2;
  string error_message = 3;
  int64 created_at = 4;
}

message Topology {
  int32 cpu_millicores = 1;
  int32 memory_mb = 2;
  
  // Regional configuration
  repeated RegionalConfig regions = 3;
  
  // Runtime settings
  int32 idle_timeout_seconds = 4;  // 0 means no timeout
  string health_check_path = 5;
  int32 port = 6;
}

message RegionalConfig {
  string region = 1;
  int32 min_instances = 2;
  int32 max_instances = 3;
}

service VersionService {
  // Create a new version
  rpc CreateVersion(CreateVersionRequest) returns (CreateVersionResponse) {}
  
  // Get version details
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
}
