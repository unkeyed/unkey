syntax = "proto3";

package ctrl.v1;

option go_package = "github.com/unkeyed/unkey/go/gen/proto/ctrl/v1;ctrlv1";

import "google/protobuf/timestamp.proto";

message SetRouteRequest {
  string hostname = 1;
  string version_id = 2;
  
  // Optional: for blue-green deployments
  int32 weight = 3;  // 0-100, defaults to 100 for full cutover
}

message SetRouteResponse {
  string previous_version_id = 1;  // What was previously active
  google.protobuf.Timestamp effective_at = 2;
}

message GetRouteRequest {
  string hostname = 1;
}

message GetRouteResponse {
  Route route = 1;
}

message ListRoutesRequest {
  string workspace_id = 1;
  string project_id = 2;
  
  // Optional filters
  string environment_id = 3;
  bool include_preview = 4;  // Include preview/branch routes
  
  // Pagination
  int32 page_size = 10;
  string page_token = 11;
}

message ListRoutesResponse {
  repeated Route routes = 1;
  string next_page_token = 2;
}

message Route {
  string hostname = 1;
  string version_id = 2;
  string workspace_id = 3;
  string project_id = 4;
  string environment_id = 5;
  
  // Traffic configuration
  int32 weight = 6;  // For blue-green deployments
  
  // Metadata
  bool is_custom_domain = 7;
  bool is_enabled = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  
  // TLS info
  bool has_certificate = 11;
  google.protobuf.Timestamp certificate_expires_at = 12;
}

// Convenience messages for common operations
message RollbackRequest {
  string hostname = 1;
  string target_version_id = 2;
}

message RollbackResponse {
  string previous_version_id = 1;
  string new_version_id = 2;
  google.protobuf.Timestamp effective_at = 3;
}

service RoutingService {
  // Update routing for a hostname
  rpc SetRoute(SetRouteRequest) returns (SetRouteResponse) {}
  
  // Get current routing for a hostname
  rpc GetRoute(GetRouteRequest) returns (GetRouteResponse) {}
  
  // List all routes for a workspace/project
  rpc ListRoutes(ListRoutesRequest) returns (ListRoutesResponse) {}
  
  // Convenience method for rollback (just calls SetRoute internally)
  rpc Rollback(RollbackRequest) returns (RollbackResponse) {}
}