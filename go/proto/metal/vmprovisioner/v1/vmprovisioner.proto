syntax = "proto3";

package metal.vmprovisioner.v1;

option go_package = "github.com/unkeyed/unkey/go/gen/proto/metal/vmprovisioner/v1;vmprovisionerv1";

// VmService provides unified VM management across different hypervisor backends
service VmService {
  // CreateVm creates a new virtual machine instance
  rpc CreateVm(CreateVmRequest) returns (CreateVmResponse);

  // DeleteVm removes a virtual machine instance
  rpc DeleteVm(DeleteVmRequest) returns (DeleteVmResponse);

  // BootVm starts a created virtual machine
  rpc BootVm(BootVmRequest) returns (BootVmResponse);

  // ShutdownVm gracefully stops a running virtual machine
  rpc ShutdownVm(ShutdownVmRequest) returns (ShutdownVmResponse);

  // PauseVm pauses a running virtual machine
  rpc PauseVm(PauseVmRequest) returns (PauseVmResponse);

  // ResumeVm resumes a paused virtual machine
  rpc ResumeVm(ResumeVmRequest) returns (ResumeVmResponse);

  // RebootVm restarts a running virtual machine
  rpc RebootVm(RebootVmRequest) returns (RebootVmResponse);

  // GetVmInfo retrieves virtual machine status and configuration
  rpc GetVmInfo(GetVmInfoRequest) returns (GetVmInfoResponse);

  // ListVms lists all virtual machines managed by this service
  rpc ListVms(ListVmsRequest) returns (ListVmsResponse);
}

// VM lifecycle states
enum VmState {
  VM_STATE_UNSPECIFIED = 0;
  VM_STATE_CREATED = 1;
  VM_STATE_RUNNING = 2;
  VM_STATE_PAUSED = 3;
  VM_STATE_SHUTDOWN = 4;
}

// Unified VM configuration that works across different hypervisors
message VmConfig {
  // CPU configuration
  CpuConfig cpu = 1;

  // Memory configuration
  MemoryConfig memory = 2;

  // Boot configuration
  BootConfig boot = 3;

  // Storage devices
  repeated StorageDevice storage = 4;

  // Network interfaces
  repeated NetworkInterface network = 5;

  // Console configuration
  ConsoleConfig console = 6;

  // Metadata and labels
  map<string, string> metadata = 7;
}

message CpuConfig {
  // Number of virtual CPUs to allocate at boot
  int32 vcpu_count = 1;

  // Maximum number of virtual CPUs (for hotplug)
  int32 max_vcpu_count = 2;

  // CPU topology (optional)
  CpuTopology topology = 3;

  // CPU features and model (backend-specific)
  map<string, string> features = 4;
}

message CpuTopology {
  int32 sockets = 1;
  int32 cores_per_socket = 2;
  int32 threads_per_core = 3;
}

message MemoryConfig {
  // Memory size in bytes
  int64 size_bytes = 1;

  // Whether memory hotplug is enabled
  bool hotplug_enabled = 2;

  // Maximum memory size for hotplug (bytes)
  int64 max_size_bytes = 3;

  // Memory backing options (hugepages, etc.)
  map<string, string> backing = 4;
}

message BootConfig {
  // Path to kernel image
  string kernel_path = 1;

  // Path to initial ramdisk (optional)
  string initrd_path = 2;

  // Kernel command line arguments
  string kernel_args = 3;

  // Boot order and options
  map<string, string> boot_options = 4;
}

message StorageDevice {
  // Unique identifier for this storage device
  string id = 1;

  // Path to the backing file or block device
  string path = 2;

  // Whether this device is read-only
  bool read_only = 3;

  // Whether this is the root/boot device
  bool is_root_device = 4;

  // Storage interface type (virtio-blk, nvme, etc.)
  string interface_type = 5;

  // Additional storage options
  map<string, string> options = 6;
}

message NetworkInterface {
  // Unique identifier for this network interface
  string id = 1;

  // MAC address (optional, will be generated if not provided)
  string mac_address = 2;

  // Host-side TAP device name
  string tap_device = 3;

  // Network interface type (virtio-net, e1000, etc.)
  string interface_type = 4;

  // Additional network options
  map<string, string> options = 5;
  
  // IPv4 configuration (optional)
  IPv4Config ipv4_config = 6;
  
  // IPv6 configuration (optional)
  IPv6Config ipv6_config = 7;
  
  // Network mode
  NetworkMode mode = 8;
  
  // Rate limiting
  RateLimit rx_rate_limit = 10;  // Receive rate limit
  RateLimit tx_rate_limit = 11; // Transmit rate limit
}

// IPv4 network configuration
message IPv4Config {
  string address = 1;          // IPv4 address (e.g., "10.100.1.2")
  string netmask = 2;          // Network mask (e.g., "255.255.255.0")
  string gateway = 3;          // Default gateway
  repeated string dns_servers = 4; // DNS servers
  bool dhcp = 5;               // Use DHCP instead of static config
}

// IPv6 network configuration  
message IPv6Config {
  string address = 1;          // IPv6 address (e.g., "fd00::1:2")
  int32 prefix_length = 2;     // Prefix length (e.g., 64)
  string gateway = 3;          // Default gateway
  repeated string dns_servers = 4; // DNS servers (IPv6 addresses)
  bool slaac = 5;              // Use SLAAC (Stateless Address Autoconfiguration)
  bool privacy_extensions = 6;  // Enable privacy extensions
  string link_local = 7;       // Link-local address (auto-generated if empty)
}

// Network mode for the interface
enum NetworkMode {
  NETWORK_MODE_UNSPECIFIED = 0;
  NETWORK_MODE_DUAL_STACK = 1;  // Both IPv4 and IPv6
  NETWORK_MODE_IPV4_ONLY = 2;   // IPv4 only
  NETWORK_MODE_IPV6_ONLY = 3;   // IPv6 only
}

// Rate limiting configuration
message RateLimit {
  int64 bandwidth = 1;    // Bandwidth in bytes/second
  int64 refill_time = 2;  // Token bucket refill time in milliseconds
  int64 burst = 3;        // Burst size in bytes
}

message ConsoleConfig {
  // Whether console is enabled
  bool enabled = 1;

  // Console output destination (file path, pty, etc.)
  string output = 2;

  // Console input source (optional)
  string input = 3;

  // Console type (serial, virtio-console, etc.)
  string console_type = 4;
}

// Request/Response messages
message CreateVmRequest {
  // Unique identifier for the VM (optional, will be generated if not provided)
  string vm_id = 1;

  // VM configuration
  VmConfig config = 2;

  // Customer identifier for billing and isolation
  string customer_id = 3;
}

message CreateVmResponse {
  // Assigned VM identifier
  string vm_id = 1;

  // Current VM state after creation
  VmState state = 2;
}

message DeleteVmRequest {
  string vm_id = 1;

  // Whether to force deletion even if VM is running
  bool force = 2;
}

message DeleteVmResponse { bool success = 1; }

message BootVmRequest { string vm_id = 1; }

message BootVmResponse {
  bool success = 1;
  VmState state = 2;
}

message ShutdownVmRequest {
  string vm_id = 1;

  // Whether to force shutdown (vs graceful)
  bool force = 2;

  // Timeout for graceful shutdown (seconds)
  int32 timeout_seconds = 3;
}

message ShutdownVmResponse {
  bool success = 1;
  VmState state = 2;
}

message PauseVmRequest { string vm_id = 1; }

message PauseVmResponse {
  bool success = 1;
  VmState state = 2;
}

message ResumeVmRequest { string vm_id = 1; }

message ResumeVmResponse {
  bool success = 1;
  VmState state = 2;
}

message RebootVmRequest {
  string vm_id = 1;

  // Whether to force reboot (vs graceful)
  bool force = 2;
}

message RebootVmResponse {
  bool success = 1;
  VmState state = 2;
}

message GetVmInfoRequest { string vm_id = 1; }

message GetVmInfoResponse {
  string vm_id = 1;
  VmConfig config = 2;
  VmState state = 3;
  VmMetrics metrics = 4;

  // Backend-specific information
  map<string, string> backend_info = 5;
  
  // Network information if available
  VmNetworkInfo network_info = 6;
}

// Port mapping for VM network forwarding
message PortMapping {
  int32 container_port = 1;  // Port inside the VM
  int32 host_port = 2;       // Port on the host system
  string protocol = 3;       // Protocol (tcp, udp)
}

// Network information for a VM
message VmNetworkInfo {
  string ip_address = 1;
  string mac_address = 2;
  string tap_device = 3;
  string network_namespace = 4;
  string gateway = 5;
  repeated string dns_servers = 6;
  repeated PortMapping port_mappings = 7;  // Port forwards from host to VM
}

message VmMetrics {
  // CPU usage percentage (0-100)
  double cpu_usage_percent = 1;

  // Memory usage in bytes
  int64 memory_usage_bytes = 2;

  // Network I/O statistics
  NetworkStats network_stats = 3;

  // Storage I/O statistics
  StorageStats storage_stats = 4;

  // VM uptime in seconds
  int64 uptime_seconds = 5;
}

message NetworkStats {
  int64 bytes_received = 1;
  int64 bytes_transmitted = 2;
  int64 packets_received = 3;
  int64 packets_transmitted = 4;
}

message StorageStats {
  int64 bytes_read = 1;
  int64 bytes_written = 2;
  int64 read_operations = 3;
  int64 write_operations = 4;
}

message ListVmsRequest {
  // Optional filter by state
  repeated VmState state_filter = 1;

  // Pagination
  int32 page_size = 2;
  string page_token = 3;
}

message ListVmsResponse {
  repeated VmInfo vms = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message VmInfo {
  string vm_id = 1;
  VmState state = 2;

  // Basic config info (subset of full config)
  int32 vcpu_count = 3;
  int64 memory_size_bytes = 4;

  // Creation and modification timestamps
  int64 created_timestamp = 5;
  int64 modified_timestamp = 6;

  // Metadata
  map<string, string> metadata = 7;

  // Customer identifier
  string customer_id = 8;
}