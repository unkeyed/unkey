syntax = "proto3";

package krane.v1;

option go_package = "github.com/unkeyed/unkey/go/gen/proto/krane/v1;kranev1";

service DeploymentService {
  // CreateDeployment
  rpc CreateDeployment(CreateDeploymentRequest) returns (CreateDeploymentResponse);

  // GetDeployment
  rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse);

  // DeleteDeployment
  rpc DeleteDeployment(DeleteDeploymentRequest) returns (DeleteDeploymentResponse);
}

message DeploymentRequest {
  string namespace = 1;
  string deployment_id = 2;

  string image = 3;

  uint32 replicas = 4;
  uint32 cpu_millicores = 5;
  uint64 memory_size_mib = 6;
}

message CreateDeploymentRequest {
  DeploymentRequest deployment = 1;
}

message CreateDeploymentResponse {
  DeploymentStatus status = 1;
}

message UpdateDeploymentRequest {
  DeploymentRequest deployment = 1;
}
message UpdateDeploymentResponse {
  repeated string pod_ids = 1;
}

message DeleteDeploymentRequest {
  string namespace = 1;
  string deployment_id = 2;
}

message DeleteDeploymentResponse {}

message GetDeploymentRequest {
  string namespace = 1;
  string deployment_id = 2;
}

message GetDeploymentResponse {
  repeated Instance instances = 2;
}

enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  DEPLOYMENT_STATUS_PENDING = 1; // Deployment request accepted, container/pod creation in progress
  DEPLOYMENT_STATUS_RUNNING = 2; // Container/pod is running and healthy
  DEPLOYMENT_STATUS_TERMINATING = 3; // Container/pod is being terminated
}

message Instance {
  string id = 1;
  string address = 2;
  DeploymentStatus status = 3;
}
