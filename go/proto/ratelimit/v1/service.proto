syntax = "proto3";

package ratelimit.v1;

option go_package = "github.com/unkeyed/unkey/go/gen/proto/ratelimit/v1;ratelimitv1";

// RatelimitRequest represents a request to check or consume rate limit tokens.
// This is typically the first point of contact when a client wants to verify
// if they are allowed to perform an action under the rate limit constraints.
message RatelimitRequest {
  // Unique identifier for the rate limit subject.
  // This could be:
  // - A user ID
  // - An API key
  // - An IP address
  // - Any other unique identifier that needs rate limiting
  string identifier = 1;

  // Maximum number of tokens allowed within the duration.
  // Once this limit is reached, subsequent requests will be denied
  // until there is more capacity.
  int64 limit = 2;

  // Duration of the rate limit window in milliseconds.
  // After this duration, a new window begins.
  // Common values might be:
  // - 1000 (1 second)
  // - 60000 (1 minute)
  // - 3600000 (1 hour)
  int64 duration = 3;

  // Number of tokens to consume in this request.
  // Higher values can be used for operations that should count more heavily
  // against the rate limit (e.g., batch operations).
  int64 cost = 4;
}

// RatelimitResponse contains the result of a rate limit check.
// This response includes all necessary information for clients to understand
// their current rate limit status and when they can retry if limited.
message RatelimitResponse {
  // Total limit configured for this window.
  // This matches the limit specified in the request and is included
  // for convenience in client implementations.
  int64 limit = 1;

  // Number of tokens remaining in the current window.
  // Clients can use this to implement progressive backoff or
  // warn users when they're close to their limit.
  int64 remaining = 2;

  // Unix timestamp (in milliseconds) when the current window expires.
  // Clients can use this to:
  // - Display time until reset to users
  // - Implement automatic retry after window reset
  // - Schedule future requests optimally
  int64 reset = 3;

  // Whether the rate limit check was successful.
  // true = request is allowed
  // false = request is denied due to rate limit exceeded
  bool success = 4;

  // Current token count in this window.
  // This represents how many tokens have been consumed so far,
  // useful for monitoring and debugging purposes.
  int64 current = 5;
}

// Window represents a rate limiting time window with its state.
// The system uses a sliding window approach to provide smooth
// rate limiting behavior across window boundaries.
message Window {
  // Monotonically increasing sequence number for window ordering.
  // The sequence is calculated as follows:
  // sequence = time.Now().UnixMilli() / duration
  int64 sequence = 1;

  // Duration of the window in milliseconds.
  // This matches the duration from the original request and defines
  // how long this window remains active.
  int64 duration = 2;

  // Current token count in this window.
  // This is the actual count of tokens consumed during this window's
  // lifetime. It must never exceed the configured limit.
  int64 counter = 3;

  // Start time of the window (Unix timestamp in milliseconds).
  // Used to:
  // - Calculate window expiration
  // - Determine if a window is still active
  // - Handle sliding window calculations between current and previous windows
  int64 start = 4;
}

// ReplayRequest is used to synchronize rate limit state between nodes.
// This is a crucial part of maintaining consistency in a distributed
// rate limiting system.
message ReplayRequest {
  // Original rate limit request that triggered the replay.
  // Contains all the parameters needed to evaluate the rate limit
  // on the origin server.
  RatelimitRequest request = 1;

  // Time at which the request was received by the edge node.
  // This is used to calculate the sequence number and determine
  // the window in which the request falls.
  int64 time = 2;

  // Indicates if the edge node denied the request.
  // When false: The origin must increment the counter regardless of its own evaluation
  // When true: The origin can evaluate the request fresh
  // This field is crucial for maintaining consistency when edge nodes
  // make defensive denials due to network issues or uncertainty.
  bool denied = 3;

}

// ReplayResponse contains the synchronized rate limit state that
// should be used to update both the origin and edge nodes.
message ReplayResponse {
  // Current active window state.
  // This represents the authoritative state of the current window
  // as determined by the origin server.
  Window current = 1;

  // Previous window state for sliding window calculations.
  // Used to smooth out rate limiting across window boundaries and
  // prevent sharp cliffs in availability during window transitions.
  Window previous = 2;

  // Rate limit response that should be used by the edge node.
  // This is the authoritative response that should be returned to
  // the client and used to update edge state.
  RatelimitResponse response = 3;
}

// RatelimitService provides rate limiting functionality in a distributed system.
// The service is designed to work in a multi-node environment where consistency
// and reliability are crucial.
service RatelimitService {

  // Replay synchronizes rate limit state between nodes using consistent hashing.
  //
  // Key behaviors:
  // - Each identifier maps to exactly one origin server via consistent hashing
  // - Edge nodes replay their local rate limit decisions to the origin
  // - Origin maintains the source of truth for rate limit state
  // - Edge nodes must update their state based on origin responses
  //
  // Flow:
  // 1. Edge node receives rate limit request
  // 2. Edge makes local decision (may be defensive)
  // 3. Edge replays decision to origin
  // 4. Origin processes and returns authoritative state
  // 5. Edge updates local state and returns result to client
  //
  // This approach ensures eventual consistency while allowing for
  // fast local decisions at the edge.
  rpc Replay(ReplayRequest) returns (ReplayResponse) {}
}
