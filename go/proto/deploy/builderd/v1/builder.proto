syntax = "proto3";

package deploy.builderd.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/unkeyed/unkey/go/gen/proto/deploy/builderd/v1;builderdv1";

// BuilderService provides multi-tenant build execution for various source types
service BuilderService {
  // Create a new build job
  rpc CreateBuild(CreateBuildRequest) returns (CreateBuildResponse);

  // Get build status and progress
  rpc GetBuild(GetBuildRequest) returns (GetBuildResponse);

  // List builds with filtering (tenant-scoped)
  rpc ListBuilds(ListBuildsRequest) returns (ListBuildsResponse);

  // Cancel a running build
  rpc CancelBuild(CancelBuildRequest) returns (CancelBuildResponse);

  // Delete a build and its artifacts
  rpc DeleteBuild(DeleteBuildRequest) returns (DeleteBuildResponse);

  // Stream build logs in real-time
  rpc StreamBuildLogs(StreamBuildLogsRequest)
      returns (stream StreamBuildLogsResponse);

  // Get tenant quotas and usage
  rpc GetTenantQuotas(GetTenantQuotasRequest) returns (GetTenantQuotasResponse);

  // Get build statistics
  rpc GetBuildStats(GetBuildStatsRequest) returns (GetBuildStatsResponse);
}

// Build job lifecycle states
enum BuildState {
  BUILD_STATE_UNSPECIFIED = 0;
  BUILD_STATE_PENDING = 1;    // Job queued
  BUILD_STATE_PULLING = 2;    // Pulling Docker image or source
  BUILD_STATE_EXTRACTING = 3; // Extracting/preparing source
  BUILD_STATE_BUILDING = 4;   // Building rootfs
  BUILD_STATE_OPTIMIZING = 5; // Applying optimizations
  BUILD_STATE_COMPLETED = 6;  // Build successful
  BUILD_STATE_FAILED = 7;     // Build failed
  BUILD_STATE_CANCELLED = 8;  // Build cancelled
  BUILD_STATE_CLEANING = 9;   // Cleaning up resources
}

// Tenant service tiers
enum TenantTier {
  TENANT_TIER_UNSPECIFIED = 0;
  TENANT_TIER_FREE = 1;       // Limited resources
  TENANT_TIER_PRO = 2;        // Standard resources
  TENANT_TIER_ENTERPRISE = 3; // Higher limits + isolation
  TENANT_TIER_DEDICATED = 4;  // Dedicated infrastructure
}

// Init process strategies for microVMs
enum InitStrategy {
  INIT_STRATEGY_UNSPECIFIED = 0;
  INIT_STRATEGY_TINI = 1;   // Use tini as init (recommended)
  INIT_STRATEGY_DIRECT = 2; // Direct exec (risky)
  INIT_STRATEGY_CUSTOM = 3; // Custom init script
}

// Multi-tenant context
message TenantContext {
  string tenant_id = 1;             // Primary tenant identifier
  string customer_id = 2;           // Customer within tenant (for billing)
  string organization_id = 3;       // Organization (for enterprise)
  TenantTier tier = 4;              // Service tier
  repeated string permissions = 5;  // Build permissions
  map<string, string> metadata = 6; // Tenant metadata
}

// Build source types - extensible for future build types
message BuildSource {
  oneof source_type {
    DockerImageSource docker_image = 1;
    GitRepositorySource git_repository = 2;
    ArchiveSource archive = 3;
    // Future: nix_flake = 4, buildpack = 5, etc.
  }
}

// Docker image extraction (first implementation)
message DockerImageSource {
  string image_uri = 1;          // "ghcr.io/unkeyed/unkey:f4cfee5"
  DockerAuth auth = 2;           // Registry authentication
  repeated string pull_tags = 3; // Additional tags to consider
}

message DockerAuth {
  string username = 1;
  string password = 2;
  string token = 3;
  string registry = 4;
}

// Git repository builds (future)
message GitRepositorySource {
  string repository_url = 1; // "https://github.com/unkeyed/unkey"
  string ref = 2;            // branch/tag/commit
  string build_context = 3;  // subdirectory if needed
  GitAuth auth = 4;
}

message GitAuth {
  string username = 1;
  string password = 2;
  string ssh_key = 3;
  string token = 4;
}

// Archive builds (future)
message ArchiveSource {
  string archive_url = 1;   // URL to tar.gz, zip, etc.
  string archive_type = 2;  // "tar.gz", "zip"
  string build_context = 3; // subdirectory in archive
}

// Build target types - extensible
message BuildTarget {
  oneof target_type {
    MicroVMRootfs microvm_rootfs = 1;
    ContainerImage container_image = 2;
    // Future: wasm_module = 3, lambda_layer = 4, etc.
  }
}

// MicroVM rootfs (our focus)
message MicroVMRootfs {
  InitStrategy init_strategy = 1;
  RuntimeConfig runtime_config = 2;
  OptimizationSettings optimization = 3;
  repeated string preserve_paths = 4;
}

// Container image (future)
message ContainerImage {
  string base_image = 1;
  repeated string layers = 2;
}

message RuntimeConfig {
  repeated string command = 1;         // Override CMD
  repeated string entrypoint = 2;      // Override ENTRYPOINT
  string working_dir = 3;              // Override WORKDIR
  map<string, string> environment = 4; // Environment variables
  repeated string exposed_ports = 5;   // Ports to expose
}

message OptimizationSettings {
  bool strip_debug_symbols = 1;         // Strip debug info
  bool compress_binaries = 2;           // Compress with UPX
  bool remove_docs = 3;                 // Remove documentation
  bool remove_cache = 4;                // Remove package caches
  repeated string preserve_paths = 5;   // Paths to always keep
  repeated string exclude_patterns = 6; // Files to exclude
}

// Build strategies - how to build from source to target
message BuildStrategy {
  oneof strategy_type {
    DockerExtractStrategy docker_extract = 1;
    GoApiStrategy go_api = 2;
    SinatraStrategy sinatra = 3;
    NodejsStrategy nodejs = 4;
    // Future: python_wsgi = 5, rust_binary = 6, etc.
  }
}

// Docker extraction strategy (first implementation)
message DockerExtractStrategy {
  bool preserve_layers = 1;             // Keep layer structure
  bool flatten_filesystem = 2;          // Merge all layers
  repeated string exclude_patterns = 3; // Files to exclude
}

// Go API strategy (future)
message GoApiStrategy {
  string go_version = 1;           // "1.21", "latest"
  repeated string build_flags = 2; // "-ldflags", "-tags"
  string main_package = 3;         // "./cmd/api"
  bool enable_cgo = 4;
}

// Sinatra strategy (future)
message SinatraStrategy {
  string ruby_version = 1;             // "3.2", "latest"
  string gemfile_path = 2;             // "Gemfile"
  string rack_server = 3;              // "puma", "unicorn"
  map<string, string> rack_config = 4; // Server-specific config
}

// Node.js strategy (future)
message NodejsStrategy {
  string node_version = 1;    // "18", "20", "latest"
  string package_manager = 2; // "npm", "yarn", "pnpm"
  string start_script = 3;    // "start", "server"
  bool enable_production = 4; // NODE_ENV=production
}

// Tenant-aware resource limits
message TenantResourceLimits {
  // Per-build limits
  int64 max_memory_bytes = 1;
  int32 max_cpu_cores = 2;
  int64 max_disk_bytes = 3;
  int32 timeout_seconds = 4;

  // Tenant-wide quotas
  int32 max_concurrent_builds = 5;  // Concurrent builds per tenant
  int32 max_daily_builds = 6;       // Daily build quota
  int64 max_storage_bytes = 7;      // Total storage quota
  int32 max_build_time_minutes = 8; // Max time per build

  // Network restrictions
  repeated string allowed_registries = 9; // Docker registries
  repeated string allowed_git_hosts = 10; // Git hosts
  bool allow_external_network = 11;       // External network access

  // Security restrictions
  bool allow_privileged_builds = 12;     // Privileged containers
  repeated string blocked_commands = 13; // Forbidden commands
  int32 sandbox_level = 14;              // Isolation level (0-3)
}

// Main build configuration
message BuildConfig {
  // Tenant identification
  TenantContext tenant = 1;

  // What we're building from
  BuildSource source = 2;

  // What we're building to
  BuildTarget target = 3;

  // How to build it
  BuildStrategy strategy = 4;

  // Build constraints (tenant-aware)
  TenantResourceLimits limits = 5;

  // Build metadata
  string build_name = 6;          // Human-readable name
  map<string, string> labels = 7; // Custom labels
  
  // Suggested asset ID to use when registering the built artifact
  // This allows the caller to pre-generate the asset ID
  string suggested_asset_id = 8;
}

// Build isolation metadata
message BuildIsolation {
  string sandbox_id = 1;                 // Unique sandbox identifier
  string network_namespace = 2;          // Network isolation
  string filesystem_namespace = 3;       // Filesystem isolation
  repeated string security_contexts = 4; // SELinux/AppArmor contexts
  string cgroup_path = 5;                // Resource cgroup
}

// Image metadata extracted from Docker images
message ImageMetadata {
  string original_image = 1;         // Original Docker image
  string image_digest = 2;           // Docker image SHA256
  repeated string layers = 3;        // Layer digests
  map<string, string> labels = 4;    // Docker labels
  repeated string command = 5;       // Original CMD
  repeated string entrypoint = 6;    // Original ENTRYPOINT
  string working_dir = 7;            // WORKDIR
  map<string, string> env = 8;       // Environment variables
  repeated string exposed_ports = 9; // EXPOSE ports
  string user = 10;                  // USER directive
  repeated string volumes = 11;      // VOLUME directives
}

// Build performance metrics
message BuildMetrics {
  int64 pull_duration_ms = 1;     // Time to pull image/source
  int64 extract_duration_ms = 2;  // Time to extract layers
  int64 build_duration_ms = 3;    // Time to build rootfs
  int64 optimize_duration_ms = 4; // Time for optimizations
  int64 total_duration_ms = 5;    // Total build time

  int64 original_size_bytes = 6; // Original image/source size
  int64 rootfs_size_bytes = 7;   // Final rootfs size
  int64 compression_ratio = 8;   // Size reduction percentage

  int64 memory_peak_bytes = 9; // Peak memory usage
  int64 disk_usage_bytes = 10; // Temporary disk usage
  int32 cpu_cores_used = 11;   // CPU cores utilized
}

// Complete build job information
message BuildJob {
  string build_id = 1;    // Unique build identifier
  BuildConfig config = 2; // Build configuration
  BuildState state = 3;   // Current build state

  // Timestamps
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;

  // Results
  string rootfs_path = 7;      // Path to built rootfs
  int64 rootfs_size_bytes = 8; // Size of rootfs
  string rootfs_checksum = 9;  // SHA256 of rootfs

  // Build metadata
  ImageMetadata image_metadata = 10;
  BuildMetrics metrics = 11;
  BuildIsolation isolation = 12;

  // Error information
  string error_message = 13;
  repeated string build_logs = 14;

  // Progress information
  int32 progress_percent = 15; // 0-100
  string current_step = 16;    // Current build step
}

// Build log entry for streaming
message StreamBuildLogsResponse {
  google.protobuf.Timestamp timestamp = 1;
  string level = 2; // "info", "warn", "error", "debug"
  string message = 3;
  string component = 4; // "puller", "extractor", "builder"
  map<string, string> metadata = 5;
}

// Tenant usage statistics
message TenantUsageStats {
  int32 active_builds = 1;
  int32 daily_builds_used = 2;
  int64 storage_bytes_used = 3;
  int64 compute_minutes_used = 4;
  int32 builds_queued = 5;
  int32 builds_completed_today = 6;
  int32 builds_failed_today = 7;
}

message QuotaViolation {
  string quota_type = 1; // "concurrent_builds", "daily_builds", etc.
  int64 current_value = 2;
  int64 limit_value = 3;
  string message = 4;
}

// Request/Response messages
message CreateBuildRequest { BuildConfig config = 1; }

message CreateBuildResponse {
  string build_id = 1;
  BuildState state = 2;
  google.protobuf.Timestamp created_at = 3;
  string rootfs_path = 4; // Path to the generated rootfs for VM creation
}

message GetBuildRequest {
  string build_id = 1;
  string tenant_id = 2; // For authorization
}

message GetBuildResponse { BuildJob build = 1; }

message ListBuildsRequest {
  string tenant_id = 1; // Required for filtering
  repeated BuildState state_filter = 2;
  int32 page_size = 3;
  string page_token = 4;
}

message ListBuildsResponse {
  repeated BuildJob builds = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message CancelBuildRequest {
  string build_id = 1;
  string tenant_id = 2; // For authorization
}

message CancelBuildResponse {
  bool success = 1;
  BuildState state = 2;
}

message DeleteBuildRequest {
  string build_id = 1;
  string tenant_id = 2; // For authorization
  bool force = 3;       // Delete even if running
}

message DeleteBuildResponse { bool success = 1; }

message StreamBuildLogsRequest {
  string build_id = 1;
  string tenant_id = 2; // For authorization
  bool follow = 3;      // Continue streaming new logs
}

message GetTenantQuotasRequest { string tenant_id = 1; }

message GetTenantQuotasResponse {
  TenantResourceLimits current_limits = 1;
  TenantUsageStats current_usage = 2;
  repeated QuotaViolation violations = 3;
}

message GetBuildStatsRequest {
  string tenant_id = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
}

message GetBuildStatsResponse {
  int32 total_builds = 1;
  int32 successful_builds = 2;
  int32 failed_builds = 3;
  int64 avg_build_time_ms = 4;
  int64 total_storage_bytes = 5;
  int64 total_compute_minutes = 6;
  repeated BuildJob recent_builds = 7;
}
