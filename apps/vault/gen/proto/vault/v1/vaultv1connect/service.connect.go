// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/vault/v1/service.proto

package vaultv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/unkeyed/unkey/apps/vault/gen/proto/vault/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VaultServiceName is the fully-qualified name of the VaultService service.
	VaultServiceName = "vault.v1.VaultService"
)

// VaultServiceClient is a client for the vault.v1.VaultService service.
type VaultServiceClient interface {
	Liveness(context.Context, *connect_go.Request[v1.LivenessRequest]) (*connect_go.Response[v1.LivenessResponse], error)
	CreateDEK(context.Context, *connect_go.Request[v1.CreateDEKRequest]) (*connect_go.Response[v1.CreateDEKResponse], error)
	Encrypt(context.Context, *connect_go.Request[v1.EncryptRequest]) (*connect_go.Response[v1.EncryptResponse], error)
	Decrypt(context.Context, *connect_go.Request[v1.DecryptRequest]) (*connect_go.Response[v1.DecryptResponse], error)
	// ReEncrypt rec
	ReEncrypt(context.Context, *connect_go.Request[v1.ReEncryptRequest]) (*connect_go.Response[v1.ReEncryptResponse], error)
	ReEncryptDEKs(context.Context, *connect_go.Request[v1.ReEncryptDEKsRequest]) (*connect_go.Response[v1.ReEncryptDEKsResponse], error)
}

// NewVaultServiceClient constructs a client for the vault.v1.VaultService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVaultServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VaultServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vaultServiceClient{
		liveness: connect_go.NewClient[v1.LivenessRequest, v1.LivenessResponse](
			httpClient,
			baseURL+"/vault.v1.VaultService/Liveness",
			opts...,
		),
		createDEK: connect_go.NewClient[v1.CreateDEKRequest, v1.CreateDEKResponse](
			httpClient,
			baseURL+"/vault.v1.VaultService/CreateDEK",
			opts...,
		),
		encrypt: connect_go.NewClient[v1.EncryptRequest, v1.EncryptResponse](
			httpClient,
			baseURL+"/vault.v1.VaultService/Encrypt",
			opts...,
		),
		decrypt: connect_go.NewClient[v1.DecryptRequest, v1.DecryptResponse](
			httpClient,
			baseURL+"/vault.v1.VaultService/Decrypt",
			opts...,
		),
		reEncrypt: connect_go.NewClient[v1.ReEncryptRequest, v1.ReEncryptResponse](
			httpClient,
			baseURL+"/vault.v1.VaultService/ReEncrypt",
			opts...,
		),
		reEncryptDEKs: connect_go.NewClient[v1.ReEncryptDEKsRequest, v1.ReEncryptDEKsResponse](
			httpClient,
			baseURL+"/vault.v1.VaultService/ReEncryptDEKs",
			opts...,
		),
	}
}

// vaultServiceClient implements VaultServiceClient.
type vaultServiceClient struct {
	liveness      *connect_go.Client[v1.LivenessRequest, v1.LivenessResponse]
	createDEK     *connect_go.Client[v1.CreateDEKRequest, v1.CreateDEKResponse]
	encrypt       *connect_go.Client[v1.EncryptRequest, v1.EncryptResponse]
	decrypt       *connect_go.Client[v1.DecryptRequest, v1.DecryptResponse]
	reEncrypt     *connect_go.Client[v1.ReEncryptRequest, v1.ReEncryptResponse]
	reEncryptDEKs *connect_go.Client[v1.ReEncryptDEKsRequest, v1.ReEncryptDEKsResponse]
}

// Liveness calls vault.v1.VaultService.Liveness.
func (c *vaultServiceClient) Liveness(ctx context.Context, req *connect_go.Request[v1.LivenessRequest]) (*connect_go.Response[v1.LivenessResponse], error) {
	return c.liveness.CallUnary(ctx, req)
}

// CreateDEK calls vault.v1.VaultService.CreateDEK.
func (c *vaultServiceClient) CreateDEK(ctx context.Context, req *connect_go.Request[v1.CreateDEKRequest]) (*connect_go.Response[v1.CreateDEKResponse], error) {
	return c.createDEK.CallUnary(ctx, req)
}

// Encrypt calls vault.v1.VaultService.Encrypt.
func (c *vaultServiceClient) Encrypt(ctx context.Context, req *connect_go.Request[v1.EncryptRequest]) (*connect_go.Response[v1.EncryptResponse], error) {
	return c.encrypt.CallUnary(ctx, req)
}

// Decrypt calls vault.v1.VaultService.Decrypt.
func (c *vaultServiceClient) Decrypt(ctx context.Context, req *connect_go.Request[v1.DecryptRequest]) (*connect_go.Response[v1.DecryptResponse], error) {
	return c.decrypt.CallUnary(ctx, req)
}

// ReEncrypt calls vault.v1.VaultService.ReEncrypt.
func (c *vaultServiceClient) ReEncrypt(ctx context.Context, req *connect_go.Request[v1.ReEncryptRequest]) (*connect_go.Response[v1.ReEncryptResponse], error) {
	return c.reEncrypt.CallUnary(ctx, req)
}

// ReEncryptDEKs calls vault.v1.VaultService.ReEncryptDEKs.
func (c *vaultServiceClient) ReEncryptDEKs(ctx context.Context, req *connect_go.Request[v1.ReEncryptDEKsRequest]) (*connect_go.Response[v1.ReEncryptDEKsResponse], error) {
	return c.reEncryptDEKs.CallUnary(ctx, req)
}

// VaultServiceHandler is an implementation of the vault.v1.VaultService service.
type VaultServiceHandler interface {
	Liveness(context.Context, *connect_go.Request[v1.LivenessRequest]) (*connect_go.Response[v1.LivenessResponse], error)
	CreateDEK(context.Context, *connect_go.Request[v1.CreateDEKRequest]) (*connect_go.Response[v1.CreateDEKResponse], error)
	Encrypt(context.Context, *connect_go.Request[v1.EncryptRequest]) (*connect_go.Response[v1.EncryptResponse], error)
	Decrypt(context.Context, *connect_go.Request[v1.DecryptRequest]) (*connect_go.Response[v1.DecryptResponse], error)
	// ReEncrypt rec
	ReEncrypt(context.Context, *connect_go.Request[v1.ReEncryptRequest]) (*connect_go.Response[v1.ReEncryptResponse], error)
	ReEncryptDEKs(context.Context, *connect_go.Request[v1.ReEncryptDEKsRequest]) (*connect_go.Response[v1.ReEncryptDEKsResponse], error)
}

// NewVaultServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVaultServiceHandler(svc VaultServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/vault.v1.VaultService/Liveness", connect_go.NewUnaryHandler(
		"/vault.v1.VaultService/Liveness",
		svc.Liveness,
		opts...,
	))
	mux.Handle("/vault.v1.VaultService/CreateDEK", connect_go.NewUnaryHandler(
		"/vault.v1.VaultService/CreateDEK",
		svc.CreateDEK,
		opts...,
	))
	mux.Handle("/vault.v1.VaultService/Encrypt", connect_go.NewUnaryHandler(
		"/vault.v1.VaultService/Encrypt",
		svc.Encrypt,
		opts...,
	))
	mux.Handle("/vault.v1.VaultService/Decrypt", connect_go.NewUnaryHandler(
		"/vault.v1.VaultService/Decrypt",
		svc.Decrypt,
		opts...,
	))
	mux.Handle("/vault.v1.VaultService/ReEncrypt", connect_go.NewUnaryHandler(
		"/vault.v1.VaultService/ReEncrypt",
		svc.ReEncrypt,
		opts...,
	))
	mux.Handle("/vault.v1.VaultService/ReEncryptDEKs", connect_go.NewUnaryHandler(
		"/vault.v1.VaultService/ReEncryptDEKs",
		svc.ReEncryptDEKs,
		opts...,
	))
	return "/vault.v1.VaultService/", mux
}

// UnimplementedVaultServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVaultServiceHandler struct{}

func (UnimplementedVaultServiceHandler) Liveness(context.Context, *connect_go.Request[v1.LivenessRequest]) (*connect_go.Response[v1.LivenessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vault.v1.VaultService.Liveness is not implemented"))
}

func (UnimplementedVaultServiceHandler) CreateDEK(context.Context, *connect_go.Request[v1.CreateDEKRequest]) (*connect_go.Response[v1.CreateDEKResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vault.v1.VaultService.CreateDEK is not implemented"))
}

func (UnimplementedVaultServiceHandler) Encrypt(context.Context, *connect_go.Request[v1.EncryptRequest]) (*connect_go.Response[v1.EncryptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vault.v1.VaultService.Encrypt is not implemented"))
}

func (UnimplementedVaultServiceHandler) Decrypt(context.Context, *connect_go.Request[v1.DecryptRequest]) (*connect_go.Response[v1.DecryptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vault.v1.VaultService.Decrypt is not implemented"))
}

func (UnimplementedVaultServiceHandler) ReEncrypt(context.Context, *connect_go.Request[v1.ReEncryptRequest]) (*connect_go.Response[v1.ReEncryptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vault.v1.VaultService.ReEncrypt is not implemented"))
}

func (UnimplementedVaultServiceHandler) ReEncryptDEKs(context.Context, *connect_go.Request[v1.ReEncryptDEKsRequest]) (*connect_go.Response[v1.ReEncryptDEKsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vault.v1.VaultService.ReEncryptDEKs is not implemented"))
}
