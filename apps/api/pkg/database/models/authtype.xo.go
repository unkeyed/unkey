package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// AuthType is the 'auth_type' enum type from schema 'unkey'.
type AuthType uint16

// AuthType values.
const (
	// AuthTypeKey is the 'key' auth_type.
	AuthTypeKey AuthType = 1
	// AuthTypeJwt is the 'jwt' auth_type.
	AuthTypeJwt AuthType = 2
)

// String satisfies the [fmt.Stringer] interface.
func (at AuthType) String() string {
	switch at {
	case AuthTypeKey:
		return "key"
	case AuthTypeJwt:
		return "jwt"
	}
	return fmt.Sprintf("AuthType(%d)", at)
}

// MarshalText marshals [AuthType] into text.
func (at AuthType) MarshalText() ([]byte, error) {
	return []byte(at.String()), nil
}

// UnmarshalText unmarshals [AuthType] from text.
func (at *AuthType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "key":
		*at = AuthTypeKey
	case "jwt":
		*at = AuthTypeJwt
	default:
		return ErrInvalidAuthType(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (at AuthType) Value() (driver.Value, error) {
	return at.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (at *AuthType) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return at.UnmarshalText(x)
	case string:
		return at.UnmarshalText([]byte(x))
	}
	return ErrInvalidAuthType(fmt.Sprintf("%T", v))
}

// NullAuthType represents a null 'auth_type' enum for schema 'unkey'.
type NullAuthType struct {
	AuthType AuthType
	// Valid is true if [AuthType] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nat NullAuthType) Value() (driver.Value, error) {
	if !nat.Valid {
		return nil, nil
	}
	return nat.AuthType.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nat *NullAuthType) Scan(v interface{}) error {
	if v == nil {
		nat.AuthType, nat.Valid = 0, false
		return nil
	}
	err := nat.AuthType.Scan(v)
	nat.Valid = err == nil
	return err
}

// ErrInvalidAuthType is the invalid [AuthType] error.
type ErrInvalidAuthType string

// Error satisfies the error interface.
func (err ErrInvalidAuthType) Error() string {
	return fmt.Sprintf("invalid AuthType(%s)", string(err))
}
