package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// KeysToPolicy represents a row from 'unkey.keys_to_policies'.
type KeysToPolicy struct {
	KeyID    string `json:"key_id"`    // key_id
	PolicyID string `json:"policy_id"` // policy_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [KeysToPolicy] exists in the database.
func (ktp *KeysToPolicy) Exists() bool {
	return ktp._exists
}

// Deleted returns true when the [KeysToPolicy] has been marked for deletion
// from the database.
func (ktp *KeysToPolicy) Deleted() bool {
	return ktp._deleted
}

// Insert inserts the [KeysToPolicy] to the database.
func (ktp *KeysToPolicy) Insert(ctx context.Context, db DB) error {
	switch {
	case ktp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ktp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO unkey.keys_to_policies (` +
		`key_id, policy_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, ktp.KeyID, ktp.PolicyID)
	if _, err := db.ExecContext(ctx, sqlstr, ktp.KeyID, ktp.PolicyID); err != nil {
		return logerror(err)
	}
	// set exists
	ktp._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [KeysToPolicy] from the database.
func (ktp *KeysToPolicy) Delete(ctx context.Context, db DB) error {
	switch {
	case !ktp._exists: // doesn't exist
		return nil
	case ktp._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM unkey.keys_to_policies ` +
		`WHERE key_id = ? AND policy_id = ?`
	// run
	logf(sqlstr, ktp.KeyID, ktp.PolicyID)
	if _, err := db.ExecContext(ctx, sqlstr, ktp.KeyID, ktp.PolicyID); err != nil {
		return logerror(err)
	}
	// set deleted
	ktp._deleted = true
	return nil
}

// KeysToPolicyByKeyIDPolicyID retrieves a row from 'unkey.keys_to_policies' as a [KeysToPolicy].
//
// Generated from index 'keys_to_policies_key_id_policy_id_pkey'.
func KeysToPolicyByKeyIDPolicyID(ctx context.Context, db DB, keyID, policyID string) (*KeysToPolicy, error) {
	// query
	const sqlstr = `SELECT ` +
		`key_id, policy_id ` +
		`FROM unkey.keys_to_policies ` +
		`WHERE key_id = ? AND policy_id = ?`
	// run
	logf(sqlstr, keyID, policyID)
	ktp := KeysToPolicy{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, keyID, policyID).Scan(&ktp.KeyID, &ktp.PolicyID); err != nil {
		return nil, logerror(err)
	}
	return &ktp, nil
}
