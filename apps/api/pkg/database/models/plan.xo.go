package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Plan is the 'plan' enum type from schema 'unkey'.
type Plan uint16

// Plan values.
const (
	// PlanFree is the 'free' plan.
	PlanFree Plan = 1
	// PlanPro is the 'pro' plan.
	PlanPro Plan = 2
	// PlanEnterprise is the 'enterprise' plan.
	PlanEnterprise Plan = 3
)

// String satisfies the [fmt.Stringer] interface.
func (p Plan) String() string {
	switch p {
	case PlanFree:
		return "free"
	case PlanPro:
		return "pro"
	case PlanEnterprise:
		return "enterprise"
	}
	return fmt.Sprintf("Plan(%d)", p)
}

// MarshalText marshals [Plan] into text.
func (p Plan) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalText unmarshals [Plan] from text.
func (p *Plan) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "free":
		*p = PlanFree
	case "pro":
		*p = PlanPro
	case "enterprise":
		*p = PlanEnterprise
	default:
		return ErrInvalidPlan(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (p Plan) Value() (driver.Value, error) {
	return p.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (p *Plan) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return p.UnmarshalText(x)
	case string:
		return p.UnmarshalText([]byte(x))
	}
	return ErrInvalidPlan(fmt.Sprintf("%T", v))
}

// NullPlan represents a null 'plan' enum for schema 'unkey'.
type NullPlan struct {
	Plan Plan
	// Valid is true if [Plan] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (np NullPlan) Value() (driver.Value, error) {
	if !np.Valid {
		return nil, nil
	}
	return np.Plan.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (np *NullPlan) Scan(v interface{}) error {
	if v == nil {
		np.Plan, np.Valid = 0, false
		return nil
	}
	err := np.Plan.Scan(v)
	np.Valid = err == nil
	return err
}

// ErrInvalidPlan is the invalid [Plan] error.
type ErrInvalidPlan string

// Error satisfies the error interface.
func (err ErrInvalidPlan) Error() string {
	return fmt.Sprintf("invalid Plan(%s)", string(err))
}
