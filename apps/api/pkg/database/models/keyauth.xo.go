package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// KeyAuth represents a row from 'unkey.key_auth'.
type KeyAuth struct {
	ID          string `json:"id"`           // id
	WorkspaceID string `json:"workspace_id"` // workspace_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [KeyAuth] exists in the database.
func (ka *KeyAuth) Exists() bool {
	return ka._exists
}

// Deleted returns true when the [KeyAuth] has been marked for deletion
// from the database.
func (ka *KeyAuth) Deleted() bool {
	return ka._deleted
}

// Insert inserts the [KeyAuth] to the database.
func (ka *KeyAuth) Insert(ctx context.Context, db DB) error {
	switch {
	case ka._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ka._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO unkey.key_auth (` +
		`id, workspace_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, ka.ID, ka.WorkspaceID)
	if _, err := db.ExecContext(ctx, sqlstr, ka.ID, ka.WorkspaceID); err != nil {
		return logerror(err)
	}
	// set exists
	ka._exists = true
	return nil
}

// Update updates a [KeyAuth] in the database.
func (ka *KeyAuth) Update(ctx context.Context, db DB) error {
	switch {
	case !ka._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ka._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE unkey.key_auth SET ` +
		`workspace_id = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ka.WorkspaceID, ka.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ka.WorkspaceID, ka.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [KeyAuth] to the database.
func (ka *KeyAuth) Save(ctx context.Context, db DB) error {
	if ka.Exists() {
		return ka.Update(ctx, db)
	}
	return ka.Insert(ctx, db)
}

// Upsert performs an upsert for [KeyAuth].
func (ka *KeyAuth) Upsert(ctx context.Context, db DB) error {
	switch {
	case ka._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO unkey.key_auth (` +
		`id, workspace_id` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), workspace_id = VALUES(workspace_id)`
	// run
	logf(sqlstr, ka.ID, ka.WorkspaceID)
	if _, err := db.ExecContext(ctx, sqlstr, ka.ID, ka.WorkspaceID); err != nil {
		return logerror(err)
	}
	// set exists
	ka._exists = true
	return nil
}

// Delete deletes the [KeyAuth] from the database.
func (ka *KeyAuth) Delete(ctx context.Context, db DB) error {
	switch {
	case !ka._exists: // doesn't exist
		return nil
	case ka._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM unkey.key_auth ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ka.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ka.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ka._deleted = true
	return nil
}

// KeyAuthByID retrieves a row from 'unkey.key_auth' as a [KeyAuth].
//
// Generated from index 'key_auth_id_pkey'.
func KeyAuthByID(ctx context.Context, db DB, id string) (*KeyAuth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, workspace_id ` +
		`FROM unkey.key_auth ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	ka := KeyAuth{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ka.ID, &ka.WorkspaceID); err != nil {
		return nil, logerror(err)
	}
	return &ka, nil
}
