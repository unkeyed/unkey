"var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),v=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},a=(r,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!f.call(r,o)&&o!==t&&i(r,o,{get:()=>e[o],enumerable:!(s=u(e,o))||s.enumerable});return r};var w=(r,e,t)=>(t=r!=null?p(y(r)):{},a(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),k=r=>a(i({},\"__esModule\",{value:!0}),r);var d=g((b,c)=>{c.exports=_jsx_runtime});var x={};v(x,{default:()=>h});var n=w(d());function l(r){let e={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components},{Image:t}=e;return t||I(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"We all know API endpoints aren't created equal; some are more expensive than others. They can be more expensive due to compute cycles, or they could be financially more expensive because you are using a different AI model. When selling access to an API based upon usage with endpoints that could be very expensive, you need to be able to charge credits based on what endpoint a user is requesting data from. Below is an example of two routes: a cheap route and a more expensive one.\"}),`\n`,(0,n.jsx)(t,{src:\"/images/blog-images/api-costs/routes-cost.png\",alt:\"Overrides example\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsx)(e.h2,{id:\"how-to-implement-cost-based-api-usage\",children:\"How to implement cost based API usage\"}),`\n`,(0,n.jsx)(e.p,{children:\"Below is an oversimplified version of tracking usage based upon an API key this doesn't include:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"API key creation\"}),`\n`,(0,n.jsx)(e.li,{children:\"Setting the credit amount for a user\"}),`\n`,(0,n.jsx)(e.li,{children:\"Safe way to look up an API key to get the usage base.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"However, the idea is the following:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"User requests one of the endpoints\"}),`\n`,(0,n.jsx)(e.li,{children:\"We retrieve the key from the header\"}),`\n`,(0,n.jsx)(e.li,{children:\"We get their remaining credits. If they have zero, we return an error\"}),`\n`,(0,n.jsx)(e.li,{children:\"We reduce the credit amount based on the endpoint used\"}),`\n`,(0,n.jsx)(e.li,{children:\"We update our Redis storage with the new value\"}),`\n`,(0,n.jsx)(e.li,{children:\"We finally return the data from our endpoint\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\nimport { createClient } from 'redis'\nimport { createMiddleware } from 'hono/factory'\n\nconst app = new Hono()\n\n\nconst client = createClient();\n\nconst verifyKeyWithCost = (cost: number) => createMiddleware(async (c, next) => {\n  const key = c.req.header('X-API-Key');\n  if (!key) {\n    return c.json({ error: \"No API key provided\" }, 401);\n  }\n\n  const credits = await client.get(key);\n  if (credits === null) {\n    c.json({ error: \"Internal server error\" }, 500);\n  }\n\n  const remainingCredits = parseInt(credits) - cost;\n  if (remainingCredits < 0) {\n    c.json({ error: \"API key usage exceeded\" }, 429);\n  }\n\n  await client.set(key, remainingCredits.toString());\n  await next();\n});\n\n// Cheap endpoint (costs 1 credit)\napp.get('/cheap-endpoint', verifyKeyWithCost(1), (c) => {\n  return c.json({\n    message: \"Accessed cheap endpoint\",\n    cost: 1,\n  });\n});\n\n// Expensive endpoint (costs 5 credits)\napp.get('/expensive-endpoint', verifyKeyWithCost(5), (c) => {\n  return c.json({\n    message: \"Accessed expensive endpoint\",\n    cost: 5,\n  });\n});\n\nserve(app)\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"There are a lot of issues we need to consider with the implementation above:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"What happens if a user makes multiple requests? How can we ensure accuracy and speed?\"}),`\n`,(0,n.jsx)(e.li,{children:\"We don't have rate-limiting requests, so we need to implement them to ensure there isn't an abuse vector.\"}),`\n`,(0,n.jsx)(e.li,{children:\"What happens if a user gets a new key? How do we ensure everything is accurate?\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"how-to-simplify-your-implementation-using-unkey\",children:\"How to simplify your implementation using Unkey\"}),`\n`,(0,n.jsx)(e.p,{children:\"Unkey is an open-source API developer platform that allows developers to simplify the implementation of scalable and secure APIs.\"}),`\n`,(0,n.jsx)(e.p,{children:\"With Unkey, with just a few lines of code, you can protect your API; the key holds all the information, so there isn't a requirement to look at another system to find this information. API keys can be created programmatically or through our dashboard.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const { result, error } = await verifyKey({\n  key,\n  remaining: {\n    cost,\n  },\n  apiId: \"API_ID_FROM_UNKEY\",\n});\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Below, we took the above implementation and removed the need for:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Implementing API key creation (Our example doesn't show this)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Setting the credit amount for a user (Our example doesn't show this)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Safe way to look up an API key to get the usage base\"}),`\n`,(0,n.jsx)(e.li,{children:\"Redis\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { Hono } from \"hono\";\nimport { serve } from '@hono/node-server'\nimport { createMiddleware } from \"hono/factory\";\nimport { verifyKey } from \"@unkey/api\";\n\nconst app = new Hono();\n\ntype UnkeyResult = Awaited<ReturnType<typeof verifyKey>>[\"result\"];\n\ndeclare module \"hono\" {\n  interface ContextVariableMap {\n    unkey: UnkeyResult;\n  }\n}\n\n// Middleware to verify API key with specified cost\nconst verifyKeyWithCost = (cost: number) => createMiddleware(async (c, next) => {\n  const key = c.req.header(\"X-API-Key\");\n  if (!key) {\n    return c.json({ error: \"No API key provided\" }, 401);\n  }\n\n  const { result, error } = await verifyKey({\n    key,\n    remaining: {\n      cost,\n    },\n    apiId: \"API_ID_FROM_UNKEY\",\n  });\n\n  /**\n  * Handle Unkey Errors\n  * We have others but not important for this example\n  */\n  if (error) {\n    switch (error.code) {\n      case \"TOO_MANY_REQUESTS\":\n        return c.json({ error: \"Rate limit exceeded\" }, 429);\n      case \"BAD_REQUEST\":\n        return c.json({ error: \"Bad request\" }, 400);\n      case \"INTERNAL_SERVER_ERROR\":\n        return c.json({ error: \"Internal server error\" }, 500);\n      default:\n        return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n  /** Handle Unkey Result if it's not valid such as\n  * Ratelimited, disabled, expired or no remaining credits\n  * There are other errors but they're not needed for this example\n  **/\n  if (!result.valid) {\n    switch (result.code) {\n      case \"DISABLED\":\n        return c.json({ error: \"API key is disabled\" }, 401);\n      case \"USAGE_EXCEEDED\":\n        return c.json({ error: \"API key usage exceeded\" }, 429);\n      case \"NOT_FOUND\":\n        return c.json({ error: \"API key not found\" }, 404);\n      default:\n        return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n  /** Add verification result to context for this example to show how Unkey works\n  * This can also be used in a route handler for additional business logic\n  **/\n  c.set(\"unkey\", result);\n  await next();\n});\n\n// Cheap endpoint - costs 1 credit\napp.get(\"/cheap-endpoint\", verifyKeyWithCost(1), (c) => {\n  return c.json({\n    message: \"Accessed cheap endpoint\",\n    cost: 1,\n    verificationResult: c.get(\"unkey\")\n  });\n});\n\n// Expensive endpoint - costs 5 credits\napp.get(\"/expensive-endpoint\", verifyKeyWithCost(5), (c) => {\n  return c.json({\n    message: \"Accessed expensive endpoint\",\n    cost: 5,\n    verificationResult: c.get(\"unkey\")\n  });\n});\n\nserve(app)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see we really simplified the code and removed additional lookups via databases, allowing your API to be performant and scalable. You can get started for \",(0,n.jsx)(e.a,{href:\"https://app.unkey.com\",children:\"free today\"}),\"!\"]})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(l,{...r})}):l(r)}function I(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(x);})();\n;return Component;"