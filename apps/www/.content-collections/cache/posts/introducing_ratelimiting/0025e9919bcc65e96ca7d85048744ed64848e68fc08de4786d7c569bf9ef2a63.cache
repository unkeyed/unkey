"var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var t in e)a(n,t,{get:e[t],enumerable:!0})},s=(n,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!y.call(n,r)&&r!==t&&a(n,r,{get:()=>e[r],enumerable:!(o=g(e,r))||o.enumerable});return n};var b=(n,e,t)=>(t=n!=null?h(p(n)):{},s(e||!n||!n.__esModule?a(t,\"default\",{value:n,enumerable:!0}):t,n)),k=n=>s(a({},\"__esModule\",{value:!0}),n);var c=f((I,l)=>{l.exports=_jsx_runtime});var x={};w(x,{default:()=>u});var i=b(c());function d(n){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",strong:\"strong\",...n.components},{Image:t}=e;return t||v(\"Image\",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:\"Today, we are introducing standalone ratelimiting. With this feature, you can rate limit anything while still leveraging the power of Unkey. Our ratelimiting feature works similarly to our keys, providing low global latency and detailed analytics. Moreover, you can configure overrides for specific identifiers, giving you more flexibility.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"You can \",(0,i.jsx)(e.a,{href:\"https://unkey.com/ratelimit\",children:\"check out a demo\"}),\" that shows our synchronous and asynchronous implementation versus a Redis-based ratelimiter.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"using-our-ratelimiter\",children:\"Using our ratelimiter\"}),`\n`,(0,i.jsx)(e.p,{children:\"To use our rate limit feature, you can use our API directly, an existing package like @unkey/api, or our new package @unkey/ratelimit, which is completely standalone from the other features in our API. The examples below will use the new package to keep things simple.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"configure-your-ratelimiter\",children:\"Configure your ratelimiter\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Firstly, you will want to configure the ratelimiter. Unkey uses namespaces to allow you to separate different parts of your application and have isolated limits for them. If the namespace doesn't exist, we will create it with the first request. For example, each of your tRPC routes could be a namespace. In this example, we use our \",(0,i.jsx)(e.code,{children:\"ai.generate\"}),\" route.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-typescript\",children:`import { Ratelimit }\\xA0from \"@unkey/ratelimit\"\n\nconst unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n  namespace: \"ai.generate\",\n  limit: 10,\n  duration: \"30s\",\n});\n`})}),`\n`,(0,i.jsx)(e.h3,{id:\"using-the-ratelimiter\",children:\"Using the ratelimiter\"}),`\n`,(0,i.jsx)(e.p,{children:\"With the ratelimiter now configured, we can use it in a route to decide whether to proceed with handling the request or reject it with a 429 response. You will need to pass an identifier for the request; this could be anything, but commonly, it is a userId or an IP address.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-typescript\",children:`async function handler(request) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier);\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"advanced-usage\",children:\"Advanced usage\"}),`\n`,(0,i.jsx)(e.p,{children:\"Ratelimting offers additional options to provide more advanced configurations, including cost, async requests, and resource audit logging. We also provide configurable overrides in the dashboard so specific resources with an identifier can have limits without adding additional code.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"overrides\",children:\"Overrides\"}),`\n`,(0,i.jsx)(e.p,{children:\"Configurable overrides allow you to tell Unkey how to handle specific identifiers. For example, you may have a user or an IP that requires higher limits than your normal flows. Instead of having to write logic into your application, you can set the identifier in the dashboard, and we will handle it for you.\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/overrides.png\",alt:\"Overrides example\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsx)(e.h3,{id:\"async-requests\",children:\"async requests\"}),`\n`,(0,i.jsx)(e.p,{children:\"You can enable async requests, which will sacrifice minimal accuracy and improve the latency even further. Our accuracy when using async requests is around 97%, but we can reduce the latency over a synchronous request by 30ms. You can enable this in the configuration or for specific usage of the rate limiter.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"Ratelimit configuriation\"})}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-typescript\",children:`const unkey = new Ratelimit({\n  // ...\n  async: true,\n});\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"Using the ratelimiter\"})}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-typescript\",children:`async function handler(request: NextApiRequest) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier, {\n    async: true,\n  });\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n`})}),`\n`,(0,i.jsx)(e.h3,{id:\"cost-configuration\",children:\"Cost configuration\"}),`\n`,(0,i.jsx)(e.p,{children:\"Sometimes, you may have an expensive resource. We allow you to set a cost for the request, and we will deduct that cost from the current window and reject a request if it exceeds the allowed amount. For example:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-typescript\",children:`async function handler(request: NextApiRequest) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier, {\n    cost: 4,\n  });\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"This request would now cost 4 tokens versus 1, allowing you to be flexible about handling the expensive resources in your application.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"resource-audit-logging\",children:\"Resource Audit logging\"}),`\n`,(0,i.jsx)(e.p,{children:\"Unkey provides audit logging out of the box at no additional cost to you. In cases where you want to create a paper trail, you can do by providing the ratelimit request with resource details, for example:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-typescript\",children:`async function handler(request: NextApiRequest) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier, {\n    resources: [\n      {\n        id: \"id_123\",\n        name: \"unkey\",\n        type: \"ai.generate\",\n      },\n    ],\n  });\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"Sending a request with a resource will provide an audit log in our dashboard that you can use; below is how it looks:\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/audit.png\",alt:\"Audit Log example\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsx)(e.h2,{id:\"onboarding-flow\",children:\"Onboarding flow\"}),`\n`,(0,i.jsx)(e.p,{children:\"If you are new to Unkey, we have a new onboarding flow for ratelimiting that will get you up and running in seconds. After you create your workspace, you will be asked if you want to use API keys or ratelimiting.\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/onboarding-1.png\",alt:\"Options of keys or ratelimiting\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsx)(e.p,{children:\"Once you select ratelimiting, we will give you a cURL command to test. This command will create your first namespace by requesting our ratelimit endpoint.\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/onboarding-2.png\",alt:\"Example of cURL command\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsx)(e.p,{children:\"Now, you are ready to go and can start looking at our rich analytics or exploring the rest of Unkey.\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/onboarding-3.png\",alt:\"Explore Unkey\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsx)(e.h2,{id:\"analytics\",children:\"Analytics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Speaking of rich analytics, we provide rich analytical data that can filter around identifiers. These analytics can help you understand what parts of your application are used most and by whom.\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/analytics.png\",alt:\"Analytic example\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsx)(t,{src:\"/images/blog-images/ratelimiting/top-analytics.png\",alt:\"Top identifiers\",width:\"1920\",height:\"1080\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"If you are ready to start with our ratelimiter built for the modern web, check out our \",(0,i.jsx)(e.a,{href:\"https://unkey.com/docs/ratelimiting/introduction\",children:\"documentation\"}),\" or our \",(0,i.jsx)(e.a,{href:\"https://unkey.com/templates/ratelimit-nextjs\",children:\"new template to get you started\"}),\". If you want to see how we implemented this, check out our \",(0,i.jsx)(e.a,{href:\"https://github.com/unkeyed/unkey\",children:\"GitHub repository\"}),\".\"]})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}function v(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(x);})();\n;return Component;"