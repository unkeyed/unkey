"var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},s=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of w(e))!y.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return t};var k=(t,e,r)=>(r=t!=null?u(m(t)):{},s(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),I=t=>s(a({},\"__esModule\",{value:!0}),t);var h=g((L,c)=>{c.exports=_jsx_runtime});var C={};f(C,{default:()=>d});var n=k(h());function l(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h4:\"h4\",p:\"p\",pre:\"pre\",...t.components},{Image:r}=e;return r||b(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Command Line Interfaces (CLI) have become integral tools for developers looking to streamline their workflow. Some of the biggest names in tech, including Vercel, GitHub, Netlify, and Planetscale, offer CLIs that provide a powerful way to interact with their services.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The question then comes up: How does CLI authentication work? How does a developer link this separate service with their authentication provider of choice? Let's delve into the world of CLI auth.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Suppose you are getting ready to authenticate with a CLI\\u2014you might use a command like \",(0,n.jsx)(e.code,{children:\"npx vercel login\"}),\". But what exactly happens under the hood?\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Check out the demo used in this blog post \",(0,n.jsx)(e.a,{href:\"https://unkey.com/templates/cli-auth\",children:\"here\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"cli-auth-overview\",children:\"CLI Auth Overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"Before we look at any code, let us look at a diagram that explains the process.\"}),`\n`,(0,n.jsx)(r,{src:\"/images/blog-images/cli-auth/cli-auth-overview.png\",alt:\"CLI AUTH\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The process begins when a user invokes the CLI, which starts a server on a free port that listens for an incoming request. This will also result in the user's web browser opening up to a specific URL for CLI authentication, let's say \",(0,n.jsx)(e.code,{children:\"unkey.com/cli-auth\"}),\", and it will include a unique code that the user will need to confirm the authentication process.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Once the web application has launched, the user is prompted to log in using their authentication method of choice. This could be a username, password, social login, or two-factor authentication (2FA) method. After the user has successfully authenticated, the web application will display a unique code that the CLI generated to the user. The user must then confirm the authentication process by entering the unique code into the web application.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The web application will then generate a new API key or token and return it to the CLI. The CLI will then store the token securely on the user's machine and use it for future requests to the service. The user will then be shown a message that the authentication process was successful, and they can return to the CLI.\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"User ---> CLI ---> Auth Web Page ---> Auth Confirmation ---> Token Generation ---> CLI token storage\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The token is now securely stored on the user's machine, and each future CLI request will use this token to authenticate with the service without the user needing to re-authenticate each time.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"from-terminal-to-api-key\",children:\"From Terminal to API Key\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To better understand the process, let's walk through a real-world example. We'll use the \",(0,n.jsx)(e.code,{children:\"@unkey/cli-demo\"}),\" package, a simple CLI demonstrating the authentication process. The package is available on npm, and you can use it by running the following command:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx @unkey/cli-demo login\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Executing the command will create the local server and open a browser window that asks you to log in using Clerk. At the same time, the CLI will display a unique code that you will need to enter into the web application. Once you have entered the code, the web application will generate a new API key and send it back to the CLI. The CLI will then store the token securely on your machine and use it for future requests for a service.\"}),`\n`,(0,n.jsx)(e.p,{children:\"To see the file that was created, you can run the following command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ls -a ~/\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You'll find \",(0,n.jsx)(e.code,{children:\".unkey\"}),\", which holds your API key.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"the-code-behind-the-demo\",children:\"The Code Behind the Demo\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can break down the code into the CLI and the web application. The CLI is a simple Node server that creates a file named \",(0,n.jsx)(e.code,{children:\".unkey\"}),\" and stores your freshly created API key. The web application is a simple Next app that interacts with Unkey to generate a new API key.\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"cli-code\",children:\"CLI Code\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The CLI code has some boilerplate code that sets up a server and has a command named \",(0,n.jsx)(e.code,{children:\"login\"}),\" that will start the server and open a browser window to the web application. The server will listen for a request from the web application and store the API key in a file.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Below is a promise waiting to be resolved when the server is started. The promise will resolve when the user has confirmed the authentication process and the API key has been generated and returned from the web, or the user cancels the request.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`// set up HTTP server that waits for a request containing an API key\n// as the only query parameter\nconst authPromise = new Promise<ParsedUrlQuery>((resolve, reject) => {\n  server.on(\"request\", (req, res) => {\n    // Set CORS headers for all responses\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, OPTIONS\");\n    res.setHeader(\n      \"Access-Control-Allow-Headers\",\n      \"Content-Type, Authorization\",\n    );\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(200);\n      res.end();\n    } else if (req.method === \"GET\") {\n      const parsedUrl = url.parse(req.url as string, true);\n      const queryParams = parsedUrl.query;\n      if (queryParams.cancelled) {\n        res.writeHead(200);\n        res.end();\n        reject(new UserCancellationError(\"Login process cancelled by user.\"));\n      } else {\n        res.writeHead(200);\n        res.end();\n        resolve(queryParams);\n      }\n    } else {\n      res.writeHead(405);\n      res.end();\n    }\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"web-application-code\",children:\"Web Application Code\"}),`\n`,(0,n.jsx)(e.p,{children:\"The web application code is a Next.js application that uses Clerk to authenticate the user, generate a new API key, and send it back to the CLI. When the user successfully confirms the code in the web application, it will make a request to Unkey to generate a new API key associated with the user's account and send it back to the CLI.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below is the verification function that is called when the user confirms the code in the web application. The function will request an endpoint called \",(0,n.jsx)(e.code,{children:\"/api/unkey\"}),\" to generate a new API key.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`async function verify(opts: { code: string | null; redirect: string | null }) {\n  setLoading(true);\n  try {\n    const req = await fetch(\"/api/unkey\", {\n      method: \"POST\",\n      body: JSON.stringify(opts),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!req.ok) {\n      throw new Error(\\`HTTP error! status: \\${req.status}\\`);\n    }\n\n    const res = await req.json();\n\n    try {\n      const redirectUrl = new URL(res.redirect);\n      redirectUrl.searchParams.append(\"code\", res.code);\n      redirectUrl.searchParams.append(\"key\", res.key);\n\n      await fetch(redirectUrl.toString());\n\n      setLoading(false);\n      setSuccess(true);\n    } catch (_error) {\n      console.error(_error);\n      setLoading(false);\n      toast.error(\"Error redirecting back to local CLI. Is your CLI running?\");\n    }\n  } catch (_error) {\n    setLoading(false);\n    toast.error(\"Error creating Unkey API key.\");\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"/api/unkey\"}),\" endpoint will generate a new API key, which is associated with the user's account. Below is the code for the endpoint.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { Unkey } from \"@unkey/api\";\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(request: Request) {\n  const { id, redirect, code } = await request.json();\n  if (!process.env.UNKEY_ROOT_KEY || !process.env.UNKEY_API_ID) {\n    return NextResponse.json({\n      statusCode: 500,\n      message: \"Unkey root key and API ID must be provided.\",\n    });\n  }\n  const unkey = new Unkey({ rootKey: process.env.UNKEY_ROOT_KEY });\n\n  const { result, error } = await unkey.keys.create({\n    apiId: process.env.UNKEY_API_ID,\n    prefix: \"cli_demo\",\n    ownerId: id,\n  });\n\n  if (error) {\n    return NextResponse.json({\n      statusCode: 500,\n      message: \"Error creating key \\u2013 please ensure apiId is valid.\",\n    });\n  }\n\n  return NextResponse.json({ ...result, code, redirect });\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"As you can see, we are using Unkey's owner to associate the end user with the new API key, which makes it easy to find and revoke the key if needed.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can dive deeper into the CLI demo code in our \",(0,n.jsx)(e.a,{href:\"https://github.com/unkeyed/examples/tree/main/unkey-cli\",children:\"GitHub repository\"}),\" and see how the CLI and web application work together to authenticate a user and generate a new API key. The CLI and web application are simple examples of how to authenticate a user and generate a new API key using Unkey. You can use the same principles to create your CLI with minimal effort.\"]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}function b(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return I(C);})();\n;return Component;"