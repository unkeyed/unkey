"var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!g.call(t,r)&&r!==i&&a(t,r,{get:()=>e[r],enumerable:!(o=m(e,r))||o.enumerable});return t};var P=(t,e,i)=>(i=t!=null?u(f(t)):{},s(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),v=t=>s(a({},\"__esModule\",{value:!0}),t);var c=y((x,l)=>{l.exports=_jsx_runtime});var k={};w(k,{default:()=>h});var n=P(c());function d(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components},{Image:i}=e;return i||b(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"understanding-otp\",children:\"Understanding OTP\"}),`\n`,(0,n.jsx)(e.p,{children:`A One-Time Password (OTP) is a unique code valid for only one login session or transaction. It adds an extra layer of security by preventing fraudulent access to your accounts, even if someone else knows your password.\nYou've likely encountered OTPs many times. For instance, when logging into your bank account from a new device, you may receive an OTP via SMS or email, which you must enter to verify your identity. Another typical example is the login flow, where instead of entering a password, an OTP is sent to your email.`}),`\n`,(0,n.jsx)(e.p,{children:\"Without ratelimiting, an attacker could try several OTPs in quick succession in a so-called 'brute force attack' to find the right one to gain access to an account.\"}),`\n`,(0,n.jsx)(e.p,{children:\"By limiting the number of OTP attempts within a specific timeframe, it becomes practically impossible for an attacker to guess the right OTP before it expires.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"implementing-ratelimiting\",children:\"Implementing ratelimiting\"}),`\n`,(0,n.jsx)(e.h3,{id:\"prerequisites\",children:\"Prerequisites\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://app.unkey.com\",children:\"Unkey account\"})}),`\n`,(0,n.jsxs)(e.li,{children:[\"Unkey root key with permissions \",(0,n.jsx)(e.code,{children:\"create_namespace\"}),\", \",(0,n.jsx)(e.code,{children:\"limit\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you prefer, you can use our example here and skip the entire tutorial below. Also, if you want to see it live, you can see an implementation below using Unkey and Resend \",(0,n.jsx)(e.a,{href:\"https://otp-example.vercel.app/\",children:\"here\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Before we begin with the tutorial, it should be stated that OTP implementations will have two separate requests: sending the OTP via email or SMS and verifying the request.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s start with the sending of an OTP. Below is an insecure OTP implementation with a fake email that sends a random 6-digit code to the user via a next.js server action.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`\"use server\";\nimport { randomInt } from \"crypto\";\n\nexport async function sendOTP(formData: FormData) {\n  try {\n    const email = formData.get(\"email\") as string | null;\n    if (!email) {\n      return {\n        success: false,\n        error: \"Email was not supplied, please try again\",\n        statusCode: 400,\n      };\n    }\n    const otp = randomInt(100000, 999999).toString();\n\n    const { data, error } = await emails.send({\n      from: \"james@unkey.com\",\n      to: email,\n      subject: \"OTP code\",\n      text: \\`Your OTP code is \\${otp}\\`\n    });\n    // handled error\n    if (error) {\n      console.error(error);\n      return { success: false, error: \"Failed to send email\", statusCode: 500 };\n    }\n    return {\n      success: true,\n      statusCode: 201,\n    };\n    //catch\n  } catch (e) {\n    return { success: false, error: \"Failed to send email\", statusCode: 500 };\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"adding-ratelimiting-to-sending-an-otp\",children:\"Adding ratelimiting to sending an OTP\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"First, you\\u2019ll need to install the \",(0,n.jsx)(e.code,{children:\"@unkey/ratelimit\"}),\" package to your project and then add the following imports.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { Ratelimit } from \"@unkey/ratelimit\";\nimport { headers } from \"next/headers\";\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"We will use the headers to retrieve the IP of the requester and use that as an identifier to limit against. Now we need to configure the ratelimiter\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n  namespace: \"otp-send\",\n  limit: 2,\n  duration: \"60s\",\n})\n\nexport async function sendOTP(formData: FormData) {\n  // sending OTP logic\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The above code will configure a new namespace named \",(0,n.jsx)(e.code,{children:\"otp-send\"}),\" if it doesn\\u2019t exist and limit the requests to two per minute. Of course, any number of attempts, but two emails per minute should suffice for the end user.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we have our ratelimiter configured, we can modify the request to first retrieve the IP address; this will check for both the forwarded IP address and the real IP from the headers. We will use the forwarded IP first and fall back to the real IP.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`export async function sendOTP(formData: FormData) {\n  try {\n    // check for forwarded\n    let forwardedIP = headers().get(\"x-forwarded-for\");\n    // check for real-ip\n    let realIP = headers().get(\"x-real-ip\");\n    if(forwardedIP){\n      forwardedIP = forwardedIP.split(/, /)[0]\n    }\n    if (realIP) realIP = realIP.trim();\n    // sending logic below\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Now we have access to an identifier, and we can run our rate limit against it. Add the following code before checking if the user has provided an email.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const { success, reset } = await unkey.limit(\n      forwardedIP || realIP || \"no-ip\",\n    );\n    const millis = reset - Date.now();\n    const timeToReset = Math.floor(millis / 1000);\n\t\t// if this is unsuccesful return a time to reset to the user so they know how long to wait\n    if (!success) {\n      return {\n        success: false,\n        error: \\`You can request a new code in \\${timeToReset} seconds\\`,\n        statusCode: 429,\n      };\n    }\n\n    const email = formData.get(\"email\") as string | null;\n    //shortened for tutorial.\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You\\u2019ll notice that we check for \",(0,n.jsx)(e.code,{children:\"forwardedIP\"}),\" and then the \",(0,n.jsx)(e.code,{children:\"realIP\"}),\", and finally, if nothing is available, we will use \",(0,n.jsx)(e.code,{children:\"no-ip\"}),\" for the fallback. This endpoint is now protected; a user can send two requests per minute. Below is a demo of how you could present this to the user:\"]}),`\n`,(0,n.jsx)(i,{unoptimize:\"true\",src:\"/images/blog-images/otp-ratelimit/15fps_1080.gif\",alt:\"Example of sending ratelimits\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsx)(e.h3,{id:\"ratelimiting-the-otp-verification\",children:\"Ratelimiting the OTP verification\"}),`\n`,(0,n.jsx)(e.p,{children:\"The endpoint that verifies an OTP has more potential for brute force attacks; sending codes down with no restriction will give a bad actor plenty of time to try numerous codes to get the right one.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is where the flexibility of ratelimiting for Unkey can come into play while it is similar to the above server action. For example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`export async function verifyOTP(prevState: any, formData: FormData) {\n  try {\n    // check for forwarded\n    let forwardedIP = headers().get(\"x-forwarded-for\");\n    // check for real-ip\n    let realIP = headers().get(\"x-real-ip\");\n    if (forwardedIP) {\n      forwardedIP.split(/, /)[0];\n    }\n    if (realIP) {\n      realIP = realIP.trim();\n    }\n\n    const code = formData.get(\"code\") as string | null;\n\n    if (!code) {\n      return {\n        success: false,\n        error: \"Code was not supplied, please try again\",\n        statusCode: 400,\n      };\n    }\n\n    const { success, reset } = await unkey.limit(\n      forwardedIP || realIP || \"no-ip\",\n    );\n    const millis = reset - Date.now();\n    const timeToReset = Math.floor(millis / 1000);\n\n    if (!success) {\n      return {\n        success: false,\n        error: \\`You have been rate limited, please wait \\${timeToReset} seconds and try entering a new code\\`,\n        statusCode: 429,\n      };\n    }\n    // Handle verification of your OTP\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can set the limits and namespace to be different, allowing you to be more restrictive and keep all your analytical data separated, for example.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY!,\n  namespace: \"otp-verify\",\n  limit: 2,\n  duration: \"30s\",\n});\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This operation will allow a user to try twice every 30 seconds before it ratelimits the operation for the IP. Below is an example of how this could look in your application from the example code.\"}),`\n`,(0,n.jsx)(i,{unoptimize:\"true\",src:\"/images/blog-images/otp-ratelimit/otp-verify-1080.gif\",alt:\"Example of verifying ratelimits\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsx)(e.h2,{id:\"best-practices-in-rate-limiting-otp\",children:\"Best Practices in Rate Limiting OTP\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implementing rate limiting is one thing, but ratelimiting effectively requires following best practices. Here are some tips:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Set reasonable limits\"}),\": Your users should have enough attempts to enter their OTP correctly, but not so many that an attacker could guess.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Educate your users\"}),\": Make sure your users understand why they're being blocked from logging in after too many attempts and how long they have to wait before they can try again.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Monitor and adjust\"}),\": Regularly review your system's performance and adapt your limits as needed.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"These practices enhance the security and efficiency of OTPs while maintaining a positive user experience.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can read more about Unkey\\u2019s Ratelimiting our \",(0,n.jsx)(e.a,{href:\"https://www.unkey.com/docs/ratelimiting/introduction\",children:\"documentation\"}),\", you can see the \",(0,n.jsx)(e.a,{href:\"https://otp-example.vercel.app/\",children:\"demo\"}),\" of this in action and test what happens when you go over limits.\"]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}function b(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return v(k);})();\n;return Component;"