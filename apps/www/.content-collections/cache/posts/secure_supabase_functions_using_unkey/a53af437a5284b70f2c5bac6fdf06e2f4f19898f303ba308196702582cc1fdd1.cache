"var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},a=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!m.call(r,s)&&s!==t&&o(r,s,{get:()=>e[s],enumerable:!(i=p(e,s))||i.enumerable});return r};var k=(r,e,t)=>(t=r!=null?u(y(r)):{},a(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),b=r=>a(o({},\"__esModule\",{value:!0}),r);var l=g((I,c)=>{c.exports=_jsx_runtime});var v={};w(v,{default:()=>h});var n=k(l());function d(r){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Supabase offers \",(0,n.jsx)(e.a,{href:\"https://supabase.com/docs/guides/functions\",children:\"edge functions\"}),\" built upon Deno. They have a variety of uses for applications like OpenAI or working with their storage product. In this post, we will show you how to use Unkey to secure your function in just a few lines of code.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"what-is-unkey\",children:\"What is Unkey?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Unkey is an open source API management platform that helps developers secure, manage, and scale their APIs. Unkey has built-in features that can make it easier than ever to provide an API to your end users, including:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Per key rate limiting\"}),`\n`,(0,n.jsx)(e.li,{children:\"Limited usage keys\"}),`\n`,(0,n.jsx)(e.li,{children:\"Time-based keys\"}),`\n`,(0,n.jsx)(e.li,{children:\"Per key analytics\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"prerequisites\",children:\"Prerequisites\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Create a \",(0,n.jsx)(e.a,{href:\"https://supabase.com\",children:\"Supabase account\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Create a \",(0,n.jsx)(e.a,{href:\"https://unkey.com\",children:\"Unkey account\"}),\" and follow our \",(0,n.jsx)(e.a,{href:\"https://unkey.com/docs/quickstart\",children:\"Quickstart guide\"}),\". So you have an API key to verify.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Setup \",(0,n.jsx)(e.a,{href:\"https://supabase.com/docs/guides/cli/local-development\",children:\"Supabase CLI\"}),\" for local development.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"create-our-project\",children:\"Create our project\"}),`\n`,(0,n.jsx)(e.h3,{id:\"create-a-project-folder\",children:\"Create a project folder\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"First, we need to create a folder. Let's call that \",(0,n.jsx)(e.code,{children:\"unkey-supabase\"}),\". This will be where our supabase functions exist going forward.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`mkdir unkey-supabase && cd unkey-supabase\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"start-supabase-services\",children:\"Start Supabase services\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now, we have a folder for our project. We can initialize and start Supabase for local development.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`supabase init\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Make sure Docker is running. The \",(0,n.jsx)(e.code,{children:\"start\"}),` command uses Docker to start the Supabase services.\nThis command may take a while to run if this is the first time using the CLI.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`supabase start\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"create-a-supabase-function\",children:\"Create a Supabase function\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now that Supabase is setup, we can create a Supabase function. This function will be where we secure it using Unkey.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`supabase functions new hello-world\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This command creates a function stub in your Supabase folder at \",(0,n.jsx)(e.code,{children:\"./functions/hello-world/index.ts\"}),\". This stub will have a function that returns the name passed in as data for the request.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconsole.log(\"Hello from Functions!\");\n\nserve(async (req) => {\n  const { name } = await req.json();\n  const data = {\n    message: \\`Hello \\${name}!\\`,\n  };\n\n  return new Response(JSON.stringify(data), {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"test-your-supabase-function\",children:\"Test your Supabase function\"}),`\n`,(0,n.jsx)(e.p,{children:\"Before making any changes, let's ensure your Supabase function runs. Inside the function, you should see a cURL command similar to the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`curl -i --location --request POST 'http://localhost:54321/functions/v1/' \\\\\n--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \\\\\n--header 'Content-Type: application/json' \\\\\n--data '{\"name\":\"hello-world\"}'\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"After invoking your Edge Function, you should see the response \",(0,n.jsx)(e.code,{children:'{ \"message\":\"Hello Functions!\" }'}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"If you receive an error Invalid JWT, find the \",(0,n.jsx)(e.code,{children:\"ANON_KEY\"}),\" of your project in the Dashboard under Settings > API.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"add-unkey-to-secure-our-supabase-function\",children:\"Add Unkey to secure our Supabase function\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"add-verifykey-to-our-function\",children:[\"Add \",(0,n.jsx)(e.code,{children:\"verifyKey\"}),\" to our function\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that we have a function, we must add Unkey to secure the endpoint. Supabase uses Deno, so instead of installing our npm package, we will use ESM CDN to provide the \",(0,n.jsx)(e.code,{children:\"verifyKey\"}),\" function we need.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { verifyKey } from \"https://esm.sh/@unkey/api\";\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-does-verifykey-do\",children:[\"What does \",(0,n.jsx)(e.code,{children:\"verifyKey\"}),\" do?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Unkey's \",(0,n.jsx)(e.code,{children:\"verifykey\"}),\" lets you verify a key from your end users. We will return a result and you can decide whether to give the user access to a resource or not based upon that result. For example, a response could be:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\n  \"result\": {\n    \"valid\": true,\n    \"ownerId\": \"james\",\n    \"meta\": {\n      \"hello\": \"world\"\n    }\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"updating-our-supabase-function\",children:\"Updating our Supabase function\"}),`\n`,(0,n.jsx)(e.p,{children:\"First, let's remove the boilerplate code from the function so we can work on adding Unkey.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { verifyKey } from \"https://esm.sh/@unkey/api\";\n\nserve(async (req) => {});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, we will wrap the \",(0,n.jsx)(e.code,{children:\"serve\"}),\" function inside a try-catch. Just in case something goes wrong, we can handle that.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { verifyKey } from \"https://esm.sh/@unkey/api\";\n\nserve(async (req) => {\n  try {\n    // handle our functions here.\n  } catch (error) {\n    // return a 500 error if there is an error with a message.\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n    });\n  }\n});\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"check-headers-for-api-key\",children:\"Check headers for API Key\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Inside our try, we can look for a header containing the user's API Key. In this example we will use \",(0,n.jsx)(e.code,{children:\"x-unkey-api-key\"}),\" but you could call the header whatever you want. If there is no header will immediately return 401.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { verifyKey } from \"https://esm.sh/@unkey/api\";\n\nserve(async (req) => {\n  try {\n    const token = req.headers.get(\"x-unkey-api-key\");\n    if (!token) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n  } catch (error) {\n    // return a 500 error if there is an error with a message.\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n    });\n  }\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"verifying-the-key\",children:\"Verifying the key\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"verifyKey\"}),\" function returns a \",(0,n.jsx)(e.code,{children:\"result\"}),\" and \",(0,n.jsx)(e.code,{children:\"error\"}),\", making the logic easy to handle. Below is a simplified example of the verification flow.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const { result, error } = await verifyKey(\"key_123\");\nif (error) {\n  // handle potential network or bad request error\n  // a link to our docs will be in the \\`error.docs\\` field\n  console.error(error.message);\n  return;\n}\nif (!result.valid) {\n  // do not grant access\n  return;\n}\n// process request\nconsole.log(result);\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Now you have a basic understanding of verification, let's add this to our Supabase function.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`serve(async (req) => {\n  try {\n    const token = req.headers.get(\"x-unkey-api-key\");\n    if (!token) {\n      return new Response(\"No API Key provided\", { status: 401 });\n    }\n    const { result, error } = await verifyKey(token);\n    if (error) {\n      // handle potential network or bad request error\n      // a link to our docs will be in the \\`error.docs\\` field\n      console.error(error.message);\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 400,\n      });\n    }\n    if (!result.valid) {\n      // do not grant access\n      return new Response(JSON.stringify({ error: \"API Key is not valid for this request\" }), {\n        status: 401,\n      });\n    }\n    return new Response(JSON.stringify({ result }), { status: 200 });\n  }\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"testing-our-supabase-function\",children:\"Testing our Supabase function\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can send a curl request to our endpoint to test this functionality. Below is an example of the curl to send. Remember, we now need to include our API key.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`curl -XPOST -H 'Authorization: Bearer <SUPBASE_BEARER_TOKEN>' \\\\\n-H 'x-unkey-api-key: <UNKEY_API_KEY>' \\\\\n-H \"Content-type: application/json\" 'http://localhost:54321/functions/v1/hello-world'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"adding-cors-for-added-security\",children:\"Adding CORS for added security\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Adding CORS allows us to call our function from the frontend and decide what headers can be passed to our function. Inside your \",(0,n.jsx)(e.code,{children:\"functions\"}),\" folder, add a file called \",(0,n.jsx)(e.code,{children:\"cors.ts\"}),\". Inside this cors file, we will tell the Supabase function which headers and origins are allowed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`export const corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, x-unkey-api-key, content-type\",\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this post, we have covered how to use Unkey with Supabase functions to secure them. You can check out the code for this project in our \",(0,n.jsx)(e.a,{href:\"https://github.com/unkeyed/examples/tree/main/supabase-functions\",children:\"Examples folder\"})]})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return b(v);})();\n;return Component;"