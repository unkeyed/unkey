"var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var a in e)o(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==a&&o(t,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return t};var w=(t,e,a)=>(a=t!=null?h(y(t)):{},s(e||!t||!t.__esModule?o(a,\"default\",{value:t,enumerable:!0}):a,t)),x=t=>s(o({},\"__esModule\",{value:!0}),t);var d=k((b,c)=>{c.exports=_jsx_runtime});var v={};g(v,{default:()=>u});var n=w(d());function l(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components},{Image:a}=e;return a||C(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"When working with your external facing API and having a client application, you need to identify which user owns an API Key. Having a way to identify the user allows you to understand their usage of your product better. This blog is going to cover how you can use your authentication provider to add a way to identify the user.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"what-is-unkey\",children:\"What is Unkey?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Unkey is an open source API management platform that helps developers secure, manage, and scale their APIs. Unkey has built-in features that can make it easier than ever to provide an API to your end users, including:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Per key rate limiting\"}),`\n`,(0,n.jsx)(e.li,{children:\"Limited usage keys\"}),`\n`,(0,n.jsx)(e.li,{children:\"Time-based keys\"}),`\n`,(0,n.jsx)(e.li,{children:\"Per key analytics\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"setting-up-our-project\",children:\"Setting up our project\"}),`\n`,(0,n.jsx)(e.p,{children:\"We will use my favorite authentication provider, Clerk, in this example. The concepts described below are agnostic, so feel free to use whatever provider works for you. We will also use Next.js for demo purposes, but it isn't a requirement.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"create-a-nextjs-application-and-install-dependencies\",children:\"Create a Next.js application and install dependencies.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The first thing we want to do is create our Next.js application and install our dependencies.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx create-next-app@latest unkey-with-auth\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"We need Unkey's typescript library and Clerk's next.js package for dependencies.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm install @unkey/api @clerk/nextjs\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Then, finally, we are going to use Shadcn to speed up the styling. If you copy the two commands below, it will install everything you need.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npx shadcn-ui@latest init\n\nnpx shadcn-ui@latest add button input label card\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Make sure you include your Clerk secret key and publishable key in your \",(0,n.jsx)(e.code,{children:\".env.local\"}),\" file. You can find these in your Clerk dashboard. You will also need an Unkey root key and API ID. You can find these in your Unkey dashboard.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxx\nCLERK_SECRET_KEY=sk_test_xxxxxxxxxxxxxx\nUNKEY_API_ID=api_xxxxxxxxxxxxxx\nUNKEY_ROOT_KEY=unkey_xxxxxxxxxxxxxx\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"clerk-setup-optional\",children:\"Clerk setup (optional)\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can skip this step if you aren't using Clerk as an auth provider. We only need to update our root layout file and add middleware.\"}),`\n`,(0,n.jsx)(e.h4,{id:\"root-layout\",children:\"Root layout\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </ClerkProvider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"middlewarets\",children:\"Middleware.ts\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Then, you need to add middleware.ts to the root of the project. This protects all pages and routes except \",(0,n.jsx)(e.code,{children:\"/api/secret\"}),\". More on that later.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { authMiddleware } from \"@clerk/nextjs\";\n\nexport default authMiddleware({\n  publicRoutes: \"/api/secret\",\n});\n\nexport const config = {\n  matcher: [\"/((?!.+\\\\\\\\.[\\\\\\\\w]+$|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"creating-a-key-associated-with-a-user\",children:\"Creating a key associated with a user.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Unkey accepts an owner_id when creating a key that we can use to associate our auth provider's unique identifier, such as \",(0,n.jsx)(e.code,{children:\"user_id\"}),\". In our example application, we are going to use a server action to create the key.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"create-our-unkey-client-component\",children:\"Create our Unkey client component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We will create a client component that takes a name for an API. This API key name can make it easier to identify the critical self and not the owner in our demo, but it gives you an idea of how the flow would work. Create a folder called \",(0,n.jsx)(e.code,{children:\"keys\"}),\" and a \",(0,n.jsx)(e.code,{children:\"client.tsx\"}),\" file. Inside that file, add the following imports from our components from shadcn.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now, we can create our component, which we will name \",(0,n.jsx)(e.code,{children:\"UnkeyElements\"}),\" and use the card component to create an easy-to-use form.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const UnkeyElements = () => {\n  return (\n    <div className=\"mt-8\">\n      <Card className=\"w-[350px]\">\n        <CardHeader>\n          <CardTitle>Create API Key</CardTitle>\n          <CardDescription>\n            Create your API key so you can interact with our API.\n          </CardDescription>\n        </CardHeader>\n\n        <form>\n          <CardContent>\n            <div className=\"grid w-full items-center gap-4\">\n              <div className=\"flex flex-col space-y-1.5\">\n                <Label htmlFor=\"name\">Give your key a name</Label>\n                <Input name=\"name\" placeholder=\"Key for next big thing\" />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"submit\">Create Key</Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n};\nexport { UnkeyElements };\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Make sure to import this into your \",(0,n.jsx)(e.code,{children:\"page.tsx\"}),\" file and add it to the page.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { UnkeyElements } from \"./keys/client\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <div className=\"flex flex-col items-center justify-center\">\n        <h1 className=\"text-4xl font-bold\">\n          Welcome to the Unkey + Auth Provider\n        </h1>\n        <p className=\"text-xl mt-4\">\n          This is a demo of how you can use Unkey to secure your API with an\n          Auth Provider.\n        </p>\n        <UnkeyElements />\n      </div>\n    </main>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"adding-a-server-action\",children:\"Adding a server action\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Our server action will allow us to create a key in our application in the \",(0,n.jsx)(e.code,{children:\"keys\"}),\" folder, add a \",(0,n.jsx)(e.code,{children:\"create.ts\"}),\" file. Then, in this file, we will use our auth provider and Unkey together.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`\"use server\";\nimport { auth } from \"@clerk/nextjs\";\nimport { Unkey } from \"@unkey/api\";\nexport async function create(formData: FormData) {\n  \"use server\";\n  const { userId } = auth();\n  if (!userId) {\n    return null;\n  }\n  const token = process.env.UNKEY_ROOT_KEY;\n  const apiId = process.env.UNKEY_API_ID;\n\n  if (!token || !apiId) {\n    return null;\n  }\n\n  const name = (formData.get(\"name\") as string) ?? \"My Awesome API\";\n  const unkey = new Unkey({ token });\n  const key = await unkey.keys.create({\n    name: name,\n    ownerId: userId,\n    apiId,\n  });\n  return { key: key.result };\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The key creation server action will check if the user is authenticated. If they are, it will create a key with the name provided and the user's ID. If the user isn't authenticated, it will return null. We now have a way to track which user owns which key.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"adding-our-creation-server-action-to-our-client-component\",children:\"Adding our creation server action to our client component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now, we have a way to create a key to add to our client component. In our \",(0,n.jsx)(e.code,{children:\"client.tsx\"}),\" file, we will add our server action import and \",(0,n.jsx)(e.code,{children:\"useState\"}),\" to handle the returned key.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { create } from \"./create\";\nimport { useState } from \"react\";\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now we have the imports, we can add an \",(0,n.jsx)(e.code,{children:\"onCreate\"}),\" function to our component that will call our server action. We can now call that function when the form is submitted.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const UnkeyElements = () => {\n    const [key, setKey] = useState<string>('')\n    async function onCreate(formData: FormData) {\n        const res = await create(formData)\n        if(res) setKey(res.key?.key);\n    }\n    ...\n    <form action={onCreate}>\n          <CardContent>\n            <div className=\"grid w-full items-center gap-4\">\n              <div className=\"flex flex-col space-y-1.5\">\n                <Label htmlFor=\"name\">Give your key a name</Label>\n                <Input name=\"name\" placeholder=\"Key for next big thing\" />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"submit\">Create Key</Button>\n          </CardFooter>\n        </form>\n    ...\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"When we submit the form, we will get a key back that we can use to make requests to our API. If you give this a test, you can log out the key in the console to see it.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"displaying-the-key-to-the-user\",children:\"Displaying the key to the user\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this demo, we can display the key to our user and then show a button to request our API. Let's update our component to do this. Underneath our original card, we will add a new card that will display the key to the user. So we can copy the card component and update the content.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`{key && key.length > 0 && (\n                <>\n                <Card className=\"w-[350px] mt-8\">\n                <CardHeader>\n                    <CardTitle>API Key</CardTitle>\n                    <CardDescription>Here is your API key. Keep it safe!</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"grid w-full items-center gap-4\">\n                        <div className=\"flex flex-col space-y-1.5\">\n                            <Label htmlFor=\"name\">API Key</Label>\n                            <Input name=\"name\" value={key} />\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"making-a-request-to-our-api\",children:\"Making a request to our API\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The final step is to request our API. We are going to use the key we created to request our API. We are going to use Next.js router handler to make the request. We will create a new folder called \",(0,n.jsx)(e.code,{children:\"api\"}),\" and inside that a folder called \",(0,n.jsx)(e.code,{children:\"secret\"}),\" and a file called \",(0,n.jsx)(e.code,{children:\"route.ts\"}),\". Inside this file, we are going to add the following code.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`import { verifyKey } from \"@unkey/api\";\nimport { NextResponse } from \"next/server\";\nexport async function GET(request: Request) {\n  const header = request.headers.get(\"Authorization\");\n  if (!header) {\n    return new Response(\"No Authorization header\", { status: 401 });\n  }\n  const token = header.replace(\"Bearer \", \"\");\n  const { result, error } = await verifyKey(token);\n\n  if (error) {\n    console.error(error.message);\n    return new Response(\"Internal Server Error\", { status: 500 });\n  }\n\n  if (!result.valid) {\n    // do not grant access\n    return new Response(\"Unauthorized\", { status: 401 });\n  }\n\n  // process request\n  return NextResponse.json({ result });\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Unkey makes it easy to make business decisions. We can verify the key and then return a response based on the result. In this example, we will return a 401 if the key is invalid. If the key is valid, we are going to return the results.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"updating-our-client-component\",children:\"Updating our client component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Technically speaking, you could make a request from your favorite API client using \",(0,n.jsx)(e.code,{children:\"http://localhost:3000/api/secret\"}),\" and add the Authorization header with the key. But we will add a button to our client component to make the request and display the response to keep everything in one place.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`<Card className=\"w-[350px] mt-8\">\n  <CardHeader>\n    <CardTitle>Get Secret Data </CardTitle>\n    <CardDescription>Retrieve secret data from API </CardDescription>\n  </CardHeader>\n  <CardContent>\n    <Button onClick={getData} variant=\"outline\">\n      Get Data\n    </Button>\n    <div className=\"grid w-full items-center gap-4\">\n      <div className=\"flex flex-col space-y-1.5\">\n        <Label htmlFor=\"name\">Secret Data</Label>\n        <Input name=\"name\" value={JSON.stringify(secret)} />\n      </div>\n    </div>\n  </CardContent>\n</Card>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"We need a function called \",(0,n.jsx)(e.code,{children:\"getData\"}),\" to request our API. We will use the fetch and add a state to hold the returned data.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`const [key, setKey] = useState<string>(\"\");\nconst [secret, setSecret] = useState<string>(\"\");\nasync function onCreate(formData: FormData) {\n  const res = await create(formData);\n  if (res) setKey(res.key?.key);\n}\nconst getData = async () => {\n  const res = await fetch(\\`/api/secret\\`, {\n    headers: {\n      Authorization: \\`Bearer \\${key}\\`,\n    },\n  });\n  const data = await res.json();\n  setSecret(data.result);\n};\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"When we click the button, we will request our API and display the response. The entire component file should look like this.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { create } from \"./create\";\nimport { useState } from \"react\";\n\nconst UnkeyElements = () => {\n  const [key, setKey] = useState<string>(\"\");\n  const [secret, setSecret] = useState<string>(\"\");\n  async function onCreate(formData: FormData) {\n    const res = await create(formData);\n    if (res) setKey(res.key?.key);\n  }\n  const getData = async () => {\n    const res = await fetch(\\`/api/secret\\`, {\n      headers: {\n        Authorization: \\`Bearer \\${key}\\`,\n      },\n    });\n    const data = await res.json();\n    setSecret(data.result);\n  };\n  return (\n    <div className=\"mt-8\">\n      <Card className=\"w-[350px]\">\n        <CardHeader>\n          <CardTitle>Create API Key</CardTitle>\n          <CardDescription>\n            Create your API key so you can interact with our API.\n          </CardDescription>\n        </CardHeader>\n        <form action={onCreate}>\n          <CardContent>\n            <div className=\"grid w-full items-center gap-4\">\n              <div className=\"flex flex-col space-y-1.5\">\n                <Label htmlFor=\"name\">API Key Name</Label>\n                <Input name=\"name\" placeholder=\"My Awesome API \" />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"submit\">Create Key</Button>\n          </CardFooter>\n        </form>\n      </Card>\n      {key && key.length > 0 && (\n        <>\n          <Card className=\"w-[350px] mt-8\">\n            <CardHeader>\n              <CardTitle>API Key</CardTitle>\n              <CardDescription>\n                Here is your API key. Keep it safe!\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid w-full items-center gap-4\">\n                <div className=\"flex flex-col space-y-1.5\">\n                  <Label htmlFor=\"name\">API Key</Label>\n                  <Input name=\"name\" value={key} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"w-[350px] mt-8\">\n            <CardHeader>\n              <CardTitle>Get Secret Data </CardTitle>\n              <CardDescription>Retrieve secret data from API </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button onClick={getData} variant=\"outline\">\n                Get Data\n              </Button>\n              <div className=\"grid w-full items-center gap-4\">\n                <div className=\"flex flex-col space-y-1.5\">\n                  <Label htmlFor=\"name\">Secret Data</Label>\n                  <Input name=\"name\" value={JSON.stringify(secret)} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport { UnkeyElements };\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The response from the API will look like this, and as you can see, we now associate the API key to a user.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\n  \"valid\": true,\n  \"ownerId\": \"user_2Vi5Z5c9tcZd6dfbgV6tEWDQYVf\"\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In the dashboard for Unkey, you can see the key and the owner ID and the name associated with it\"}),`\n`,(0,n.jsx)(a,{src:\"/images/blog-images/unkey-with-auth/dashboard-example.png\",alt:\"Unkey Dashboard\"}),`\n`,(0,n.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this post, we have covered how to use Unkey with an auth provider to secure your API. We have covered how to associate a user with a key and then use that key to request our API. You can check out the code for this project here: \",(0,n.jsx)(e.a,{href:\"https://github.com/unkeyed/examples/tree/main/unkey-clerk\",children:\"Example\"})]})]})}function u(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}function C(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(v);})();\n;return Component;"