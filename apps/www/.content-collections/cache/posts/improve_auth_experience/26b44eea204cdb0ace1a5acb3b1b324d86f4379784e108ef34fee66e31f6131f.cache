"var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},r=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!w.call(t,s)&&s!==i&&o(t,s,{get:()=>e[s],enumerable:!(a=g(e,s))||a.enumerable});return t};var x=(t,e,i)=>(i=t!=null?u(m(t)):{},r(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>r(o({},\"__esModule\",{value:!0}),t);var h=f((U,l)=>{l.exports=_jsx_runtime});var v={};y(v,{default:()=>d});var n=x(h());function c(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...t.components},{Image:i}=e;return i||b(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"The sign-in flow for your application is the gateway and sometimes the first impression; one of the biggest issues is the returning user. The return user often gets presented with a screen that looks similar to this:\"}),`\n`,(0,n.jsx)(i,{src:\"/images/blog-images/auth-experience/sign-in.png\",alt:\"sign in example\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsx)(e.p,{children:\"The problem is, what account did I use to sign up for this account? Was it Github? Was it Google? Or did I use my email? In great applications, Unkey included, account linking is used behind the scenes, which can help mitigate this issue.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"what-is-account-linking\",children:\"What is Account linking?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Account linking allows developers to use the email provided and match that to a previously signed-up account, for example:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A user signs up with a GitHub account, which has the email address \",(0,n.jsx)(e.a,{href:\"mailto:james@unkey.dev\",children:\"james@unkey.dev\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The same user returns to the sign-in page and doesn\\u2019t remember, so they select Google and \",(0,n.jsx)(e.a,{href:\"mailto:james@unkey.dev\",children:\"james@unkey.dev\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"During the flow, the developer identifies this user has signed up before and links the account together, placing the user on the correct dashboard.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The main issue with relying only on account linking is that users potentially use different emails for accounts. For example, my GitHub primary email is my personal email, and I use my work email as my Google account. So, if I accidentally select the wrong option, I will go through the onboarding experience, which is frustrating as a user.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"adding-indicator-to-improve-the-user-experience\",children:\"Adding indicator to improve the User Experience\"}),`\n`,(0,n.jsx)(e.p,{children:\"To improve the experience futher we can add an indicator to the sign-in page to show the user the last method they used to access our application.\"}),`\n`,(0,n.jsx)(i,{src:\"/images/blog-images/auth-experience/last-used.png\",alt:\"sign in example\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsx)(e.h3,{id:\"how-can-you-implement-this\",children:\"How can you implement this?\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"If you want to see an example that implements the code we without any auth provider check out this \",(0,n.jsx)(e.a,{href:\"https://codesandbox.io/p/devbox/jh34y6\",children:\"code sandbox\"}),\" out.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"First, we must add logic to the sign-in and sign-up flow to implement the \\u201CLast used\\u201D tag. The example below shows what a Clerk custom flow might look like and what we use at Unkey.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`const oauthSignIn = async (provider: OAuthStrategy) => {\n    if (!signInLoaded) {\n      return null;\n    }\n    try {\n      setIsLoading(provider);\n      await signIn.authenticateWithRedirect({\n        strategy: provider,\n        redirectUrl: \"/auth/sso-callback\",\n        redirectUrlComplete: \"/apis\",\n      });\n    } catch (err) {\n      console.error(err);\n      setIsLoading(null);\n      toast.error((err as Error).message);\n    }\n  };\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"As you can see from the example code above, we know what provider the end user is attempting to sign in with, so now we can store this and provide a UI update. The next step is implementing a hook to handle persisting and reading from local storage. We could write the hooks ourselves at Unkey. We opted to use usehook-ts, an excellent lightweight set of typesafe hooks with a small bundle size.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh\",children:`npm install usehook-ts\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Now, we can write our function.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`\"use client\";\nimport { useLocalStorage } from \"usehook-ts\";\n\nexport function useLastUsed() {\n  return useLocalStorage<\"github\" | \"google\" | \"email\" | undefined>(\"last_unkey_login\", undefined);\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This function allows us to read and write our sign-in options to local storage. I will show how it is used in a second, but first, we need a UI element to show to the user. We opted for a simple text span displaying the last used, but you could display an icon or any text you prefer.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`export const LastUsed: React.FC = () => {\n  return <span className=\"absolute right-4 text-xs text-content-subtle\">Last used</span>;\n};\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Now, we have all the elements to show our end users what sign-in method they used previously. To do this, we can update our sign-in code to include the hook similar to setState\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`const [lastUsed, setLastUsed] = useLastUsed();\n\nconst oauthSignIn = async (provider: OAuthStrategy) => {\n    if (!signInLoaded) {\n      return null;\n    }\n    try {\n      setIsLoading(provider);\n      await signIn.authenticateWithRedirect({\n        strategy: provider,\n        redirectUrl: \"/auth/sso-callback\",\n        redirectUrlComplete: \"/apis\",\n      });\n      setLastUsed(provider === \"oauth_google\" ? \"google\" : \"github\");\n    } catch (err) {\n      console.error(err);\n      setIsLoading(null);\n      toast.error((err as Error).message);\n    }\n\n  };\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The final step is to show the user that it was the \\u201Clast used.\\u201D Below is how we implemented it at Unkey: we placed it next to the button.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`<OAuthButton onClick={() => oauthSignIn(\"oauth_google\")}>\n  {isLoading === \"oauth_google\" ? (\n    <Loading className=\"w-6 h-6\" />\n    ) : (\n       <Google className=\"w-6 h-6\" />\n    )}\n  Google {lastUsed === \"google\" ? <LastUsed /> : null}\n</OAuthButton>\n`})}),`\n`,(0,n.jsx)(e.p,{children:'In conclusion, improving the authentication user experience is crucial for ensuring a smooth and hassle-free sign-in process for returning users. By implementing account linking and adding a \"last used\" feature, we can address the issue of users potentially using different emails for their accounts and minimize the frustration of going through the onboarding experience multiple times.'}),`\n`,(0,n.jsx)(i,{src:\"/images/blog-images/auth-experience/discord.png\",alt:\"sign in example\",width:\"1920\",height:\"1080\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"These improvements benefit the end users and contribute to the application's success by creating a positive first impression and increasing user satisfaction. If you'd like to check out the full implementation you can find it in the \",(0,n.jsx)(e.a,{href:\"https://github.com/unkeyed/unkey/\",children:\"Unkey repository\"}),\".\"]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}function b(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(v);})();\n;return Component;"