syntax = "proto3";

package ratelimit.v1;

option go_package = "github.com/unkeyed/unkey/apps/agent/gen/proto/ratelimit/v1;ratelimitv1";

message LivenessRequest {}
message LivenessResponse {
  string status = 1;
}

message LeaseRequest {
  int64 cost = 1;
  // milliseconds
  int64 timeout = 2;
}

message RatelimitRequest {
  string identifier = 1;
  int64 limit = 2;
  int64 duration = 3;
  int64 cost = 4;
  // A name for the ratelimit, used for debugging
  string name = 5;

  // Create a lease with this many tokens
  optional LeaseRequest lease = 6;

  optional int64 time = 7;
}
message RatelimitResponse {
  int64 limit = 1;
  int64 remaining = 2;
  int64 reset = 3;
  bool success = 4;
  int64 current = 5;

  optional Lease lease = 6;
}

message RatelimitMultiRequest {
  repeated RatelimitRequest ratelimits = 1;
}
message RatelimitMultiResponse {
  repeated RatelimitResponse ratelimits = 1;
}

message Window {
  int64 sequence = 1;
  int64 duration = 2;
  int64 counter = 3;
  // unix milli
  int64 start = 4;

  // An origin node can broadcast a mitigation to all nodes in the ring
  // Before the mitigation is broadcasted, the origin node must flip this to true
  // to avoid duplicate broadcasts
  bool mitigate_broadcasted = 5;

  // A map of leaseIDs to leases
  map<string, Lease> leases = 6;
}

message PushPullRequest {
  RatelimitRequest request = 1;

  // Whether the edge note let the request pass
  // If it did, we must increment the counter on the origin regardless of the result
  bool passed = 2;

  // The time the event happened, so we can replay it on the origin and record latency
  int64 time = 3;
}

message PushPullResponse {
  Window current = 1;
  Window previous = 2;

  RatelimitResponse response = 3;
}

// Lease contains everything from original ratelimit request that we need to find the origin server
message Lease {
  string identifier = 1;
  int64 limit = 2;
  int64 duration = 3;
}
message CommitLeaseRequest {
  Lease lease = 1;
  // The actual cost that should be commited
  int64 cost = 2;
}

message CommitLeaseResponse {}

message MitigateRequest {
string identifier = 1;
int64 limit = 2;
int64 duration = 3;
  Window window = 4;
  }

message MitigateResponse {}

service RatelimitService {
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {}

  rpc Ratelimit(RatelimitRequest) returns (RatelimitResponse) {}
  rpc MultiRatelimit(RatelimitMultiRequest) returns (RatelimitMultiResponse) {}

  // Internal
  //
  // PushPull syncs the ratelimit with the origin server
  // For each identifier there is an origin server, agred upon by every node in the ring via
  // consistent hashing
  //
  // PushPull notifies the origin of a ratelimit operation that happened and then pulls the latest
  // ratelimit information from the origin server to update its own local state
  rpc PushPull(PushPullRequest) returns (PushPullResponse) {}

  rpc CommitLease(CommitLeaseRequest) returns (CommitLeaseResponse) {}

  rpc Mitigate(MitigateRequest) returns (MitigateResponse) {}
}
