syntax = "proto3";

package ratelimit.v1;
option go_package = "github.com/unkeyed/unkey/apps/agent/gen/proto/ratelimit/v1;ratelimitv1";

message LivenessRequest {
}
message LivenessResponse {
  string status = 1;
}


message RatelimitRequest {
  string identifier = 1;
  int64 limit = 2;
  int64 duration = 3;
  int64 cost = 4;
}
message RatelimitResponse {
  int64 limit = 1;
  int64 remaining = 2;
  int64 reset = 3;
  bool success = 4;
  int64 current = 5;
}

message RatelimitMultiRequest {
  repeated RatelimitRequest ratelimits = 1;
}
message RatelimitMultiResponse {
  repeated RatelimitResponse ratelimits = 1;
}


message PushPullRequest {
  string identifier = 1;
  int64 limit = 2;
  int64 duration = 3;
  int64 cost = 4;
}

message PushPullResponse {
  string identifier = 1;
  int64 current = 2;
}

service RatelimitService {
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {  }
 
 rpc Ratelimit(RatelimitRequest) returns (RatelimitResponse) {  }
 rpc MultiRatelimit(RatelimitMultiRequest) returns (RatelimitMultiResponse) {  }

 // Internal
 //
 // PushPull syncs the ratelimit with the origin server
 // For each identifier there is an origin server, agred upon by every node in the ring via 
 // consistent hashing
 //
 // PushPull notifies the origin of a ratelimit operation that happened and then pulls the latest
 // ratelimit information from the origin server to update its own local state
 rpc PushPull(PushPullRequest) returns (PushPullResponse) {  }
}



