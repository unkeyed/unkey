// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ratelimit/v1/service.proto

package ratelimitv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/unkeyed/unkey/apps/agent/gen/proto/ratelimit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RatelimitServiceName is the fully-qualified name of the RatelimitService service.
	RatelimitServiceName = "ratelimit.v1.RatelimitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RatelimitServiceLivenessProcedure is the fully-qualified name of the RatelimitService's Liveness
	// RPC.
	RatelimitServiceLivenessProcedure = "/ratelimit.v1.RatelimitService/Liveness"
	// RatelimitServiceRatelimitProcedure is the fully-qualified name of the RatelimitService's
	// Ratelimit RPC.
	RatelimitServiceRatelimitProcedure = "/ratelimit.v1.RatelimitService/Ratelimit"
	// RatelimitServiceMultiRatelimitProcedure is the fully-qualified name of the RatelimitService's
	// MultiRatelimit RPC.
	RatelimitServiceMultiRatelimitProcedure = "/ratelimit.v1.RatelimitService/MultiRatelimit"
	// RatelimitServicePushPullProcedure is the fully-qualified name of the RatelimitService's PushPull
	// RPC.
	RatelimitServicePushPullProcedure = "/ratelimit.v1.RatelimitService/PushPull"
	// RatelimitServiceCommitLeaseProcedure is the fully-qualified name of the RatelimitService's
	// CommitLease RPC.
	RatelimitServiceCommitLeaseProcedure = "/ratelimit.v1.RatelimitService/CommitLease"
	// RatelimitServiceMitigateProcedure is the fully-qualified name of the RatelimitService's Mitigate
	// RPC.
	RatelimitServiceMitigateProcedure = "/ratelimit.v1.RatelimitService/Mitigate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ratelimitServiceServiceDescriptor              = v1.File_proto_ratelimit_v1_service_proto.Services().ByName("RatelimitService")
	ratelimitServiceLivenessMethodDescriptor       = ratelimitServiceServiceDescriptor.Methods().ByName("Liveness")
	ratelimitServiceRatelimitMethodDescriptor      = ratelimitServiceServiceDescriptor.Methods().ByName("Ratelimit")
	ratelimitServiceMultiRatelimitMethodDescriptor = ratelimitServiceServiceDescriptor.Methods().ByName("MultiRatelimit")
	ratelimitServicePushPullMethodDescriptor       = ratelimitServiceServiceDescriptor.Methods().ByName("PushPull")
	ratelimitServiceCommitLeaseMethodDescriptor    = ratelimitServiceServiceDescriptor.Methods().ByName("CommitLease")
	ratelimitServiceMitigateMethodDescriptor       = ratelimitServiceServiceDescriptor.Methods().ByName("Mitigate")
)

// RatelimitServiceClient is a client for the ratelimit.v1.RatelimitService service.
type RatelimitServiceClient interface {
	Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error)
	Ratelimit(context.Context, *connect.Request[v1.RatelimitRequest]) (*connect.Response[v1.RatelimitResponse], error)
	MultiRatelimit(context.Context, *connect.Request[v1.RatelimitMultiRequest]) (*connect.Response[v1.RatelimitMultiResponse], error)
	// Internal
	//
	// PushPull syncs the ratelimit with the origin server
	// For each identifier there is an origin server, agred upon by every node in the ring via
	// consistent hashing
	//
	// PushPull notifies the origin of a ratelimit operation that happened and then pulls the latest
	// ratelimit information from the origin server to update its own local state
	PushPull(context.Context, *connect.Request[v1.PushPullRequest]) (*connect.Response[v1.PushPullResponse], error)
	CommitLease(context.Context, *connect.Request[v1.CommitLeaseRequest]) (*connect.Response[v1.CommitLeaseResponse], error)
	Mitigate(context.Context, *connect.Request[v1.MitigateRequest]) (*connect.Response[v1.MitigateResponse], error)
}

// NewRatelimitServiceClient constructs a client for the ratelimit.v1.RatelimitService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRatelimitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RatelimitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ratelimitServiceClient{
		liveness: connect.NewClient[v1.LivenessRequest, v1.LivenessResponse](
			httpClient,
			baseURL+RatelimitServiceLivenessProcedure,
			connect.WithSchema(ratelimitServiceLivenessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ratelimit: connect.NewClient[v1.RatelimitRequest, v1.RatelimitResponse](
			httpClient,
			baseURL+RatelimitServiceRatelimitProcedure,
			connect.WithSchema(ratelimitServiceRatelimitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		multiRatelimit: connect.NewClient[v1.RatelimitMultiRequest, v1.RatelimitMultiResponse](
			httpClient,
			baseURL+RatelimitServiceMultiRatelimitProcedure,
			connect.WithSchema(ratelimitServiceMultiRatelimitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pushPull: connect.NewClient[v1.PushPullRequest, v1.PushPullResponse](
			httpClient,
			baseURL+RatelimitServicePushPullProcedure,
			connect.WithSchema(ratelimitServicePushPullMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		commitLease: connect.NewClient[v1.CommitLeaseRequest, v1.CommitLeaseResponse](
			httpClient,
			baseURL+RatelimitServiceCommitLeaseProcedure,
			connect.WithSchema(ratelimitServiceCommitLeaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		mitigate: connect.NewClient[v1.MitigateRequest, v1.MitigateResponse](
			httpClient,
			baseURL+RatelimitServiceMitigateProcedure,
			connect.WithSchema(ratelimitServiceMitigateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ratelimitServiceClient implements RatelimitServiceClient.
type ratelimitServiceClient struct {
	liveness       *connect.Client[v1.LivenessRequest, v1.LivenessResponse]
	ratelimit      *connect.Client[v1.RatelimitRequest, v1.RatelimitResponse]
	multiRatelimit *connect.Client[v1.RatelimitMultiRequest, v1.RatelimitMultiResponse]
	pushPull       *connect.Client[v1.PushPullRequest, v1.PushPullResponse]
	commitLease    *connect.Client[v1.CommitLeaseRequest, v1.CommitLeaseResponse]
	mitigate       *connect.Client[v1.MitigateRequest, v1.MitigateResponse]
}

// Liveness calls ratelimit.v1.RatelimitService.Liveness.
func (c *ratelimitServiceClient) Liveness(ctx context.Context, req *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error) {
	return c.liveness.CallUnary(ctx, req)
}

// Ratelimit calls ratelimit.v1.RatelimitService.Ratelimit.
func (c *ratelimitServiceClient) Ratelimit(ctx context.Context, req *connect.Request[v1.RatelimitRequest]) (*connect.Response[v1.RatelimitResponse], error) {
	return c.ratelimit.CallUnary(ctx, req)
}

// MultiRatelimit calls ratelimit.v1.RatelimitService.MultiRatelimit.
func (c *ratelimitServiceClient) MultiRatelimit(ctx context.Context, req *connect.Request[v1.RatelimitMultiRequest]) (*connect.Response[v1.RatelimitMultiResponse], error) {
	return c.multiRatelimit.CallUnary(ctx, req)
}

// PushPull calls ratelimit.v1.RatelimitService.PushPull.
func (c *ratelimitServiceClient) PushPull(ctx context.Context, req *connect.Request[v1.PushPullRequest]) (*connect.Response[v1.PushPullResponse], error) {
	return c.pushPull.CallUnary(ctx, req)
}

// CommitLease calls ratelimit.v1.RatelimitService.CommitLease.
func (c *ratelimitServiceClient) CommitLease(ctx context.Context, req *connect.Request[v1.CommitLeaseRequest]) (*connect.Response[v1.CommitLeaseResponse], error) {
	return c.commitLease.CallUnary(ctx, req)
}

// Mitigate calls ratelimit.v1.RatelimitService.Mitigate.
func (c *ratelimitServiceClient) Mitigate(ctx context.Context, req *connect.Request[v1.MitigateRequest]) (*connect.Response[v1.MitigateResponse], error) {
	return c.mitigate.CallUnary(ctx, req)
}

// RatelimitServiceHandler is an implementation of the ratelimit.v1.RatelimitService service.
type RatelimitServiceHandler interface {
	Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error)
	Ratelimit(context.Context, *connect.Request[v1.RatelimitRequest]) (*connect.Response[v1.RatelimitResponse], error)
	MultiRatelimit(context.Context, *connect.Request[v1.RatelimitMultiRequest]) (*connect.Response[v1.RatelimitMultiResponse], error)
	// Internal
	//
	// PushPull syncs the ratelimit with the origin server
	// For each identifier there is an origin server, agred upon by every node in the ring via
	// consistent hashing
	//
	// PushPull notifies the origin of a ratelimit operation that happened and then pulls the latest
	// ratelimit information from the origin server to update its own local state
	PushPull(context.Context, *connect.Request[v1.PushPullRequest]) (*connect.Response[v1.PushPullResponse], error)
	CommitLease(context.Context, *connect.Request[v1.CommitLeaseRequest]) (*connect.Response[v1.CommitLeaseResponse], error)
	Mitigate(context.Context, *connect.Request[v1.MitigateRequest]) (*connect.Response[v1.MitigateResponse], error)
}

// NewRatelimitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRatelimitServiceHandler(svc RatelimitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ratelimitServiceLivenessHandler := connect.NewUnaryHandler(
		RatelimitServiceLivenessProcedure,
		svc.Liveness,
		connect.WithSchema(ratelimitServiceLivenessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ratelimitServiceRatelimitHandler := connect.NewUnaryHandler(
		RatelimitServiceRatelimitProcedure,
		svc.Ratelimit,
		connect.WithSchema(ratelimitServiceRatelimitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ratelimitServiceMultiRatelimitHandler := connect.NewUnaryHandler(
		RatelimitServiceMultiRatelimitProcedure,
		svc.MultiRatelimit,
		connect.WithSchema(ratelimitServiceMultiRatelimitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ratelimitServicePushPullHandler := connect.NewUnaryHandler(
		RatelimitServicePushPullProcedure,
		svc.PushPull,
		connect.WithSchema(ratelimitServicePushPullMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ratelimitServiceCommitLeaseHandler := connect.NewUnaryHandler(
		RatelimitServiceCommitLeaseProcedure,
		svc.CommitLease,
		connect.WithSchema(ratelimitServiceCommitLeaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ratelimitServiceMitigateHandler := connect.NewUnaryHandler(
		RatelimitServiceMitigateProcedure,
		svc.Mitigate,
		connect.WithSchema(ratelimitServiceMitigateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ratelimit.v1.RatelimitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RatelimitServiceLivenessProcedure:
			ratelimitServiceLivenessHandler.ServeHTTP(w, r)
		case RatelimitServiceRatelimitProcedure:
			ratelimitServiceRatelimitHandler.ServeHTTP(w, r)
		case RatelimitServiceMultiRatelimitProcedure:
			ratelimitServiceMultiRatelimitHandler.ServeHTTP(w, r)
		case RatelimitServicePushPullProcedure:
			ratelimitServicePushPullHandler.ServeHTTP(w, r)
		case RatelimitServiceCommitLeaseProcedure:
			ratelimitServiceCommitLeaseHandler.ServeHTTP(w, r)
		case RatelimitServiceMitigateProcedure:
			ratelimitServiceMitigateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRatelimitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRatelimitServiceHandler struct{}

func (UnimplementedRatelimitServiceHandler) Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.Liveness is not implemented"))
}

func (UnimplementedRatelimitServiceHandler) Ratelimit(context.Context, *connect.Request[v1.RatelimitRequest]) (*connect.Response[v1.RatelimitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.Ratelimit is not implemented"))
}

func (UnimplementedRatelimitServiceHandler) MultiRatelimit(context.Context, *connect.Request[v1.RatelimitMultiRequest]) (*connect.Response[v1.RatelimitMultiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.MultiRatelimit is not implemented"))
}

func (UnimplementedRatelimitServiceHandler) PushPull(context.Context, *connect.Request[v1.PushPullRequest]) (*connect.Response[v1.PushPullResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.PushPull is not implemented"))
}

func (UnimplementedRatelimitServiceHandler) CommitLease(context.Context, *connect.Request[v1.CommitLeaseRequest]) (*connect.Response[v1.CommitLeaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.CommitLease is not implemented"))
}

func (UnimplementedRatelimitServiceHandler) Mitigate(context.Context, *connect.Request[v1.MitigateRequest]) (*connect.Response[v1.MitigateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ratelimit.v1.RatelimitService.Mitigate is not implemented"))
}
