openapi: 3.1.0
info:
  title: gossip.v1
paths:
  /gossip.v1.GossipService/Ping:
    post:
      tags:
        - gossip.v1.GossipService
      description: |-
        Ping asks for the state of a peer
         If the peer is healthy, it should respond with its state
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gossip.v1.PingRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gossip.v1.PingResponse'
  /gossip.v1.GossipService/IndirectPing:
    post:
      tags:
        - gossip.v1.GossipService
      description: |-
        IndirectPing asks a peer to ping another node because we can not reach it outselves
         the peer should respond with the state of the node
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gossip.v1.IndirectPingRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gossip.v1.IndirectPingResponse'
  /gossip.v1.GossipService/SyncMembers:
    post:
      tags:
        - gossip.v1.GossipService
      description: "Periodially we do a full sync of the members\n Both nodes tell each other about every member they know and then reconcile by taking the union \n of the two sets.\n Afterwards, both nodes should have the same view of the cluster and regular gossip will get rid\n of any dead nodes\n \n If they disagree on the state of a node, the most favourable state should be chosen\n ie: if one node thinks a peer is dead and the other thinks it is alive, the node should be \n marked as alive to prevent a split brain or unnecessary false positives"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gossip.v1.SyncMembersRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gossip.v1.SyncMembersResponse'
components:
  schemas:
    gossip.v1.State:
      type: string
      title: State
      enum:
        - State_UNSPECIFIED
        - State_ALIVE
        - State_DEAD
        - State_LEFT
        - State_SUSPECT
    gossip.v1.GossipRequest:
      type: object
      title: GossipRequest
      additionalProperties: false
      description: repeated Rumor rumors = 1;
    gossip.v1.GossipResponse:
      type: object
      title: GossipResponse
      additionalProperties: false
      description: repeated Rumor rumors = 1;
    gossip.v1.IndirectPingRequest:
      type: object
      properties:
        nodeId:
          type: string
          title: node_id
          additionalProperties: false
        rpcAddr:
          type: string
          title: rpc_addr
          additionalProperties: false
      title: IndirectPingRequest
      additionalProperties: false
    gossip.v1.IndirectPingResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/gossip.v1.State'
      title: IndirectPingResponse
      additionalProperties: false
    gossip.v1.Member:
      type: object
      properties:
        nodeId:
          type: string
          title: node_id
          additionalProperties: false
        rpcAddr:
          type: string
          title: rpc_addr
          additionalProperties: false
      title: Member
      additionalProperties: false
    gossip.v1.PingRequest:
      type: object
      title: PingRequest
      additionalProperties: false
    gossip.v1.PingResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/gossip.v1.State'
      title: PingResponse
      additionalProperties: false
    gossip.v1.Rumor:
      type: object
      properties:
        time:
          oneOf:
            - type: string
            - type: number
          title: time
          additionalProperties: false
      title: Rumor
      additionalProperties: false
    gossip.v1.SyncMembersRequest:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/gossip.v1.Member'
      title: SyncMembersRequest
      additionalProperties: false
    gossip.v1.SyncMembersResponse:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/gossip.v1.Member'
      title: SyncMembersResponse
      additionalProperties: false
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - CodeNotFound
          enum:
            - CodeCanceled
            - CodeUnknown
            - CodeInvalidArgument
            - CodeDeadlineExceeded
            - CodeNotFound
            - CodeAlreadyExists
            - CodePermissionDenied
            - CodeResourceExhausted
            - CodeFailedPrecondition
            - CodeAborted
            - CodeOutOfRange
            - CodeInternal
            - CodeUnavailable
            - CodeDataLoss
            - CodeUnauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        detail:
          $ref: '#/components/schemas/google.protobuf.Any'
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    google.protobuf.Any:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          format: binary
        debug:
          type: object
          additionalProperties: true
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
security: []
tags:
  - name: gossip.v1.GossipService
externalDocs: {}
