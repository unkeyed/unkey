// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: list_keys_by_key_auth_id_and_owner_id.sql

package database

import (
	"context"
	"database/sql"
)

const listKeysByKeyAuthIdAndOwnerId = `-- name: ListKeysByKeyAuthIdAndOwnerId :many
SELECT
    id, hash, start, owner_id, meta, created_at, expires, ratelimit_type, ratelimit_limit, ratelimit_refill_rate, ratelimit_refill_interval, workspace_id, for_workspace_id, name, remaining_requests, key_auth_id
FROM
    ` + "`" + `keys` + "`" + `
WHERE
    key_auth_id = ?
    AND owner_id = ?
ORDER BY
    created_at ASC
LIMIT
    ? OFFSET ?
`

type ListKeysByKeyAuthIdAndOwnerIdParams struct {
	KeyAuthID sql.NullString
	OwnerID   sql.NullString
	Limit     int32
	Offset    int32
}

func (q *Queries) ListKeysByKeyAuthIdAndOwnerId(ctx context.Context, arg ListKeysByKeyAuthIdAndOwnerIdParams) ([]Key, error) {
	rows, err := q.db.QueryContext(ctx, listKeysByKeyAuthIdAndOwnerId,
		arg.KeyAuthID,
		arg.OwnerID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.Hash,
			&i.Start,
			&i.OwnerID,
			&i.Meta,
			&i.CreatedAt,
			&i.Expires,
			&i.RatelimitType,
			&i.RatelimitLimit,
			&i.RatelimitRefillRate,
			&i.RatelimitRefillInterval,
			&i.WorkspaceID,
			&i.ForWorkspaceID,
			&i.Name,
			&i.RemainingRequests,
			&i.KeyAuthID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
