// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: find_key_and_api_by_hash.sql

package database

import (
	"context"
	"database/sql"
)

const findKeyAndApiByHash = `-- name: FindKeyAndApiByHash :one
select
    keys.id as keyId,
    keys.owner_id,
    keys.meta,
    keys.expires,
    keys.ratelimit_type,
    keys.ratelimit_limit,
    keys.ratelimit_refill_rate,
    keys.ratelimit_refill_interval,
    keys.workspace_id,
    keys.remaining_requests,
    apis.id as api_id,
    apis.ip_whitelist
from
    ` + "`" + `keys` + "`" + `
    INNER JOIN ` + "`" + `apis` + "`" + ` ON keys.key_auth_id = apis.key_auth_id
WHERE
    keys.hash = ?
`

type FindKeyAndApiByHashRow struct {
	Keyid                   string
	OwnerID                 sql.NullString
	Meta                    sql.NullString
	Expires                 sql.NullTime
	RatelimitType           sql.NullString
	RatelimitLimit          sql.NullInt32
	RatelimitRefillRate     sql.NullInt32
	RatelimitRefillInterval sql.NullInt32
	WorkspaceID             string
	RemainingRequests       sql.NullInt32
	ApiID                   string
	IpWhitelist             sql.NullString
}

func (q *Queries) FindKeyAndApiByHash(ctx context.Context, hash string) (FindKeyAndApiByHashRow, error) {
	row := q.db.QueryRowContext(ctx, findKeyAndApiByHash, hash)
	var i FindKeyAndApiByHashRow
	err := row.Scan(
		&i.Keyid,
		&i.OwnerID,
		&i.Meta,
		&i.Expires,
		&i.RatelimitType,
		&i.RatelimitLimit,
		&i.RatelimitRefillRate,
		&i.RatelimitRefillInterval,
		&i.WorkspaceID,
		&i.RemainingRequests,
		&i.ApiID,
		&i.IpWhitelist,
	)
	return i, err
}
