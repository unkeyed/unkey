// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

// BaseError defines model for BaseError.
type BaseError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance string `json:"instance"`

	// RequestId A unique id for this request. Please always provide this to support.
	RequestId string `json:"requestId"`

	// Status HTTP status code
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title string `json:"title"`

	// Type A URI reference to human-readable documentation for the error.
	Type string `json:"type"`
}

// Encrypted defines model for Encrypted.
type Encrypted struct {
	Encrypted string `json:"encrypted"`
	KeyId     string `json:"keyId"`
}

// Item defines model for Item.
type Item struct {
	// Cost The cost of the request.
	Cost *int64 `json:"cost,omitempty"`

	// Duration The duration in milliseconds for the rate limit window.
	Duration int64 `json:"duration"`

	// Identifier The identifier for the rate limit.
	Identifier string `json:"identifier"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`
}

// Lease defines model for Lease.
type Lease struct {
	// Cost How much to lease.
	Cost int64 `json:"cost"`

	// Timeout The time in milliseconds when the lease will expire. If you do not commit the lease by this time, it will be commited as is.
	Timeout int64 `json:"timeout"`
}

// SingleRatelimitResponse defines model for SingleRatelimitResponse.
type SingleRatelimitResponse struct {
	// Current The current number of requests made in the current window.
	Current int64 `json:"current"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`

	// Remaining The number of requests remaining in the current window.
	Remaining int64 `json:"remaining"`

	// Reset The time in milliseconds when the rate limit will reset.
	Reset int64 `json:"reset"`

	// Success Whether the request passed the ratelimit. If false, the request must be blocked.
	Success bool `json:"success"`
}

// V0EventsRequestBody NDJSON payload of events
type V0EventsRequestBody = string

// V0EventsResponseBody defines model for V0EventsResponseBody.
type V0EventsResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// QuarantinedRows The number of rows that were quarantined
	QuarantinedRows int `json:"quarantined_rows"`

	// SuccessfulRows The number of rows that were successfully processed
	SuccessfulRows int `json:"successful_rows"`
}

// V1DecryptRequestBody defines model for V1DecryptRequestBody.
type V1DecryptRequestBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Encrypted The encrypted base64 string.
	Encrypted string `json:"encrypted"`

	// Keyring The keyring to use for encryption.
	Keyring string `json:"keyring"`
}

// V1DecryptResponseBody defines model for V1DecryptResponseBody.
type V1DecryptResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Plaintext The plaintext value.
	Plaintext string `json:"plaintext"`
}

// V1EncryptBulkRequestBody defines model for V1EncryptBulkRequestBody.
type V1EncryptBulkRequestBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema  *string  `json:"$schema,omitempty"`
	Data    []string `json:"data"`
	Keyring string   `json:"keyring"`
}

// V1EncryptBulkResponseBody defines model for V1EncryptBulkResponseBody.
type V1EncryptBulkResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema    *string     `json:"$schema,omitempty"`
	Encrypted []Encrypted `json:"encrypted"`
}

// V1EncryptRequestBody defines model for V1EncryptRequestBody.
type V1EncryptRequestBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Data The data to encrypt.
	Data string `json:"data"`

	// Keyring The keyring to use for encryption.
	Keyring string `json:"keyring"`
}

// V1EncryptResponseBody defines model for V1EncryptResponseBody.
type V1EncryptResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Encrypted The encrypted data as base64 encoded string.
	Encrypted string `json:"encrypted"`

	// KeyId The ID of the key used for encryption.
	KeyId string `json:"keyId"`
}

// V1LivenessResponseBody defines model for V1LivenessResponseBody.
type V1LivenessResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Message Whether we're alive or not
	Message string `json:"message"`
}

// V1RatelimitCommitLeaseRequestBody defines model for V1RatelimitCommitLeaseRequestBody.
type V1RatelimitCommitLeaseRequestBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Cost The actual cost of the request.
	Cost int64 `json:"cost"`

	// Lease The lease you received from the ratelimit response.
	Lease string `json:"lease"`
}

// V1RatelimitMultiRatelimitRequestBody defines model for V1RatelimitMultiRatelimitRequestBody.
type V1RatelimitMultiRatelimitRequestBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Ratelimits The rate limits to check.
	Ratelimits []Item `json:"ratelimits"`
}

// V1RatelimitMultiRatelimitResponseBody defines model for V1RatelimitMultiRatelimitResponseBody.
type V1RatelimitMultiRatelimitResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Ratelimits The rate limits that were checked.
	Ratelimits []SingleRatelimitResponse `json:"ratelimits"`
}

// V1RatelimitRatelimitRequestBody defines model for V1RatelimitRatelimitRequestBody.
type V1RatelimitRatelimitRequestBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Cost The cost of the request. Defaults to 1 if not provided.
	Cost *int64 `json:"cost,omitempty"`

	// Duration The duration in milliseconds for the rate limit window.
	Duration int64 `json:"duration"`

	// Identifier The identifier for the rate limit.
	Identifier string `json:"identifier"`
	Lease      *Lease `json:"lease,omitempty"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`
}

// V1RatelimitRatelimitResponseBody defines model for V1RatelimitRatelimitResponseBody.
type V1RatelimitRatelimitResponseBody struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Current The current number of requests made in the current window.
	Current int64 `json:"current"`

	// Lease The lease to use when committing the request.
	Lease string `json:"lease"`

	// Limit The maximum number of requests allowed.
	Limit int64 `json:"limit"`

	// Remaining The number of requests remaining in the current window.
	Remaining int64 `json:"remaining"`

	// Reset The time in milliseconds when the rate limit will reset.
	Reset int64 `json:"reset"`

	// Success Whether the request passed the ratelimit. If false, the request must be blocked.
	Success bool `json:"success"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Errors Optional list of individual error details
	Errors []ValidationErrorDetail `json:"errors"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance string `json:"instance"`

	// RequestId A unique id for this request. Please always provide this to support.
	RequestId string `json:"requestId"`

	// Status HTTP status code
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title string `json:"title"`

	// Type A URI reference to human-readable documentation for the error.
	Type string `json:"type"`
}

// ValidationErrorDetail defines model for ValidationErrorDetail.
type ValidationErrorDetail struct {
	// Fix A human-readable message describing how to fix the error.
	Fix *string `json:"fix,omitempty"`

	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location string `json:"location"`

	// Message Error message text
	Message string `json:"message"`
}

// RatelimitV1MultiRatelimitJSONRequestBody defines body for RatelimitV1MultiRatelimit for application/json ContentType.
type RatelimitV1MultiRatelimitJSONRequestBody = V1RatelimitMultiRatelimitRequestBody

// RatelimitV1RatelimitJSONRequestBody defines body for RatelimitV1Ratelimit for application/json ContentType.
type RatelimitV1RatelimitJSONRequestBody = V1RatelimitRatelimitRequestBody

// V1RatelimitCommitLeaseJSONRequestBody defines body for V1RatelimitCommitLease for application/json ContentType.
type V1RatelimitCommitLeaseJSONRequestBody = V1RatelimitCommitLeaseRequestBody

// VaultV1DecryptJSONRequestBody defines body for VaultV1Decrypt for application/json ContentType.
type VaultV1DecryptJSONRequestBody = V1DecryptRequestBody

// VaultV1EncryptJSONRequestBody defines body for VaultV1Encrypt for application/json ContentType.
type VaultV1EncryptJSONRequestBody = V1EncryptRequestBody

// VaultV1EncryptBulkJSONRequestBody defines body for VaultV1EncryptBulk for application/json ContentType.
type VaultV1EncryptBulkJSONRequestBody = V1EncryptBulkRequestBody
