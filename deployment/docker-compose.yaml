name: unkey
services:
  mysql:
    networks:
      - default
    container_name: mysql
    build:
      context: ..
      dockerfile: deployment/Dockerfile.mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: unkey
      MYSQL_USER: unkey
      MYSQL_PASSWORD: password
    command: ["--max_connections=1000", "--skip-log-bin"]
    ports:
      - 3306:3306
    volumes:
      - mysql:/var/lib/mysql
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 10s

  planetscale:
    networks:
      - default
    container_name: planetscale
    image: ghcr.io/mattrobenolt/ps-http-sim:v0.0.12
    command:
      [
        "-listen-port=3900",
        "-mysql-dbname=unkey",
        "-mysql-addr=mysql",
        "-mysql-max-rows=100000",
        "-mysql-idle-timeout=1s",
      ]
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - 3900:3900

  apiv2_lb:
    networks:
      - default
    container_name: apiv2_lb
    image: nginx:1.29.0
    volumes:
      - ./nginx.apiv2.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - apiv2
    ports:
      - 2112:2112
      - 7070:7070

  apiv2:
    networks:
      - default
    deploy:
      replicas: 3
      endpoint_mode: vip
    command: ["run", "api"]
    build:
      context: ../go
      dockerfile: ./Dockerfile
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      UNKEY_HTTP_PORT: 7070
      UNKEY_REDIS_URL: "redis://redis:6379"
      UNKEY_DATABASE_PRIMARY: "unkey:password@tcp(mysql:3306)/unkey?parseTime=true"
      UNKEY_CLICKHOUSE_URL: "clickhouse://default:password@clickhouse:9000?secure=false&skip_verify=true"
      UNKEY_CHPROXY_AUTH_TOKEN: "chproxy-test-token-123"
      UNKEY_OTEL: false
      VAULT_S3_URL: "http://s3:3902"
      VAULT_S3_BUCKET: "vault"
      VAULT_S3_ACCESS_KEY_ID: "minio_root_user"
      VAULT_S3_ACCESS_KEY_SECRET: "minio_root_password"
      VAULT_MASTER_KEYS: "Ch9rZWtfMmdqMFBJdVhac1NSa0ZhNE5mOWlLSnBHenFPENTt7an5MRogENt9Si6wms4pQ2XIvqNSIgNpaBenJmXgcInhu6Nfv2U="

  redis:
    networks:
      - default
    container_name: redis
    image: redis:8.0
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
      start_period: 10s
      interval: 5s

  agent:
    networks:
      - default
    container_name: agent
    command: ["/usr/local/bin/unkey", "agent", "--config", "config.docker.json"]
    build:
      context: ../apps/agent
      dockerfile: ./Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - s3
      - clickhouse
    environment:
      PORT: 8080
      RPC_PORT: 9095
      AUTH_TOKEN: "agent-auth-secret"
      VAULT_S3_URL: "http://s3:3902"
      VAULT_S3_BUCKET: "vault"
      VAULT_S3_ACCESS_KEY_ID: "minio_root_user"
      VAULT_S3_ACCESS_KEY_SECRET: "minio_root_password"
      VAULT_MASTER_KEYS: "Ch9rZWtfMmdqMFBJdVhac1NSa0ZhNE5mOWlLSnBHenFPENTt7an5MRogENt9Si6wms4pQ2XIvqNSIgNpaBenJmXgcInhu6Nfv2U="
      CLICKHOUSE_URL: "clickhouse://default:password@clickhouse:9000"

  clickhouse:
    networks:
      - default
    build:
      context: ..
      dockerfile: deployment/Dockerfile.clickhouse
    container_name: clickhouse
    environment:
      CLICKHOUSE_ADMIN_USER: default
      CLICKHOUSE_ADMIN_PASSWORD: password
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse:/bitnami/clickhouse
    healthcheck:
      test:
        [
          "CMD",
          "clickhouse-client",
          "--host",
          "localhost",
          "--user",
          "default",
          "--password",
          "password",
          "--query",
          "SELECT 1",
        ]
      timeout: 10s
      retries: 10
      start_period: 30s
      interval: 5s

  s3:
    networks:
      - default
    container_name: s3
    image: bitnamilegacy/minio:2025.7.23-debian-12-r5
    ports:
      - 3902:3902
      - 2903:2903
    environment:
      MINIO_ROOT_USER: minio_root_user
      MINIO_ROOT_PASSWORD: minio_root_password
      MINIO_API_PORT_NUMBER: 3902
      MINIO_CONSOLE_PORT_NUMBER: 3903
    volumes:
      - s3:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3902/minio/health/live"]
      timeout: 5s
      retries: 10
      start_period: 15s
      interval: 5s

  api:
    networks:
      - default
    container_name: api
    build:
      context: ..
      dockerfile: ./apps/api/Dockerfile.dev
    ports:
      - 8787:8787
    command:
      [
        "pnpm",
        "wrangler",
        "dev",
        "--ip=0.0.0.0",
        "--var=VERSION:1",
        "--var=DATABASE_HOST:planetscale:3900",
        "--var=DATABASE_USERNAME:unkey",
        "--var=DATABASE_PASSWORD:password",
        "--var=AGENT_URL:http://agent:8080",
        "--var=AGENT_TOKEN:agent-auth-secret",
        "--var=EMIT_METRICS_LOGS:false",
        "--var=SYNC_RATELIMIT_ON_NO_DATA:1.0",
        "--var=CLICKHOUSE_URL:http://default:password@clickhouse:8123",
        "--var=CLICKHOUSE_INSERT_URL:http://apiv2:7070",
        "--var=CLICKHOUSE_PROXY_TOKEN:chproxy-test-token-123",
      ]
    depends_on:
      - planetscale
      - agent
      - clickhouse
      - apiv2

  gw:
    networks:
      - default
    build:
      context: ../go
      dockerfile: Dockerfile
      args:
        VERSION: "latest"
    container_name: gw
    command: ["run", "gw"]
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      mysql:
        condition: service_healthy
        required: true
      s3:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: true
      clickhouse:
        condition: service_healthy
        required: true
    volumes:
      - ./certs:/certs
    environment:
      UNKEY_HTTP_PORT: 80
      UNKEY_HTTPS_PORT: 443

      UNKEY_TLS_ENABLED: true
      UNKEY_DEFAULT_CERT_DOMAIN: "unkey.local"
      UNKEY_MAIN_DOMAIN: "unkey.local"
      UNKEY_CTRL_ADDR: "http://ctrl:7091"
      UNKEY_REQUIRE_LOCAL_CERT: true

      UNKEY_DATABASE_PRIMARY: "unkey:password@tcp(mysql:3306)/partition_001?parseTime=true&interpolateParams=true"
      UNKEY_KEYS_DATABASE_PRIMARY: "unkey:password@tcp(mysql:3306)/unkey?parseTime=true&interpolateParams=true"
      UNKEY_CLICKHOUSE_URL: "clickhouse://default:password@clickhouse:9000?secure=false&skip_verify=true"
      UNKEY_REDIS_URL: "redis://redis:6379"

      UNKEY_VAULT_S3_URL: "http://s3:3902"
      UNKEY_VAULT_S3_BUCKET: "acme-vault"
      UNKEY_VAULT_S3_ACCESS_KEY_ID: "minio_root_user"
      UNKEY_VAULT_S3_ACCESS_KEY_SECRET: "minio_root_password"
      UNKEY_VAULT_MASTER_KEYS: "Ch9rZWtfMmdqMFBJdVhac1NSa0ZhNE5mOWlLSnBHenFPENTt7an5MRogENt9Si6wms4pQ2XIvqNSIgNpaBenJmXgcInhu6Nfv2U="

  krane:
    build:
      context: ../go
      dockerfile: Dockerfile
      args:
        VERSION: "latest"
    container_name: krane
    command: ["run", "krane"]
    ports:
      - "8090:8080"
    volumes:
      # Mount Docker socket for Docker backend support
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Server configuration
      UNKEY_HTTP_PORT: "8080"

      # Backend configuration - use Docker backend for development
      UNKEY_KRANE_BACKEND: "docker"
      UNKEY_DOCKER_SOCKET: "/var/run/docker.sock"
      UNKEY_DEPLOYMENT_EVICTION_TTL: "10m"

  restate:
    networks:
      - default
    container_name: restate
    image: docker.io/restatedev/restate:1.5.3
    ports:
      - "8081:8080" # Ingress endpoint (host:container)
      - "9070:9070" # Admin endpoint and UI
    environment:
      RESTATE_TRACING_ENDPOINT: "http://otel:4317"
    depends_on:
      otel:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9070/health"]
      timeout: 5s
      retries: 10
      start_period: 10s
      interval: 5s

  ctrl:
    networks:
      - default
    build:
      context: ../go
      dockerfile: Dockerfile
      args:
        VERSION: "latest"
    container_name: ctrl
    command: ["run", "ctrl"]
    ports:
      - "7091:7091"
      - "9080:9080" # Restate workflow service port
    depends_on:
      mysql:
        condition: service_healthy
        required: true
      s3:
        condition: service_healthy
        required: true
      krane:
        condition: service_started
        required: true
      restate:
        condition: service_healthy
        required: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      UNKEY_DATABASE_PRIMARY: "unkey:password@tcp(mysql:3306)/unkey?parseTime=true&interpolateParams=true"
      UNKEY_DATABASE_PARTITION: "unkey:password@tcp(mysql:3306)/partition_001?parseTime=true&interpolateParams=true"

      # Control plane configuration
      UNKEY_HTTP_PORT: "7091"
      UNKEY_KRANE_ADDRESS: "http://krane:8080"
      UNKEY_DEFAULT_DOMAIN: "unkey.local"

      # Restate configuration
      UNKEY_RESTATE_INGRESS_URL: "http://restate:8080"
      UNKEY_RESTATE_ADMIN_URL: "http://restate:9070"
      UNKEY_RESTATE_HTTP_PORT: "9080"
      UNKEY_RESTATE_REGISTER_AS: "http://ctrl:9080"

      UNKEY_VAULT_S3_URL: "http://s3:3902"
      UNKEY_VAULT_S3_BUCKET: "acme-vault"
      UNKEY_VAULT_S3_ACCESS_KEY_ID: "minio_root_user"
      UNKEY_VAULT_S3_ACCESS_KEY_SECRET: "minio_root_password"
      UNKEY_VAULT_MASTER_KEYS: "Ch9rZWtfMmdqMFBJdVhac1NSa0ZhNE5mOWlLSnBHenFPENTt7an5MRogENt9Si6wms4pQ2XIvqNSIgNpaBenJmXgcInhu6Nfv2U="

      # API key for simple authentication (temporary, will be replaced with JWT)
      UNKEY_API_KEY: "your-local-dev-key"

  otel:
    networks:
      - default
    image: grafana/otel-lgtm:0.11.7
    container_name: otel
    hostname: otel
    ports:
      - 3001:3000
      - 4317:4317
      - 4318:4318

  prometheus:
    networks:
      - default
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - apiv2

  dashboard:
    networks:
      - default
    build:
      context: ..
      dockerfile: ./apps/dashboard/Dockerfile
    container_name: unkey-dashboard
    ports:
      - "3000:3000"
    depends_on:
      planetscale:
        condition: service_started
        required: true
      agent:
        condition: service_started
        required: true
    env_file:
      - ../apps/dashboard/.env
    environment:
      # Database configuration
      DATABASE_HOST: "planetscale:3900"
      # Auth configuration
      # Reading from env file, no override necessary
      # Agent configuration
      AGENT_URL: "http://agent:8080"
      AGENT_TOKEN: "agent-auth-secret"
      # Clickhouse configuration
      CLICKHOUSE_URL: "http://default:password@clickhouse:8123"
      # Environment
      NODE_ENV: "production"
      CTRL_URL: "http://ctrl:7091"
      CTRL_API_KEY: "your-local-dev-key"
      # Bootstrap workspace/API IDs
      # Reading from env file, no override necessary
volumes:
  mysql:
  clickhouse:
  clickhouse-keeper:
  s3:

networks:
  default:
