name: unkey

services:
  mysql:
    container_name: mysql
    build:
      context: ..
      dockerfile: deployment/Dockerfile.mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: unkey
      MYSQL_USER: unkey
      MYSQL_PASSWORD: password
    command: ["--max_connections=1000"]
    ports:
      - 3306:3306
    volumes:
      - mysql:/var/lib/mysql
  planetscale:
    container_name: planetscale
    build:
      context: https://github.com/mattrobenolt/ps-http-sim.git
      target: local
    command:
      [
        "-listen-port=3900",
        "-mysql-dbname=unkey",
        "-mysql-addr=mysql",
        "-mysql-max-rows=100000",
        "-mysql-idle-timeout=1s",
      ]
    depends_on:
      - mysql
    ports:
      - 3900:3900

  apiv2_lb:
    container_name: apiv2_lb
    image: nginx:latest
    volumes:
      - ./nginx.apiv2.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - apiv2
    ports:
      - 2112:2112
      - 7070:7070

  apiv2:
    deploy:
      replicas: 3
      endpoint_mode: vip
    command: ["run", "api"]
    build:
      context: ../go
      dockerfile: ./Dockerfile
    depends_on:
      - mysql
      - redis
      - clickhouse
      - otel
    environment:
      UNKEY_HTTP_PORT: 7070
      UNKEY_REDIS_URL: "redis://redis:6379"
      UNKEY_DATABASE_PRIMARY: "unkey:password@tcp(mysql:3306)/unkey?parseTime=true"
      UNKEY_CLICKHOUSE_URL: "clickhouse://default:password@clickhouse:9000?secure=false&skip_verify=true"
      UNKEY_CHPROXY_ENABLED: "true"
      UNKEY_CHPROXY_AUTH_TOKEN: "chproxy-test-token-123"
      UNKEY_OTEL: true
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4318"
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      # UNKEY_PROMETHEUS_PORT: 2112

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379

  agent:
    container_name: agent
    command: ["/usr/local/bin/unkey", "agent", "--config", "config.docker.json"]
    build:
      context: ../apps/agent
      dockerfile: ./Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - s3
      - clickhouse
    environment:
      PORT: 8080
      RPC_PORT: 9095
      AUTH_TOKEN: "agent-auth-secret"
      VAULT_S3_URL: "http://s3:3902"
      VAULT_S3_BUCKET: "vault"
      VAULT_S3_ACCESS_KEY_ID: "minio_root_user"
      VAULT_S3_ACCESS_KEY_SECRET: "minio_root_password"
      VAULT_MASTER_KEYS: "Ch9rZWtfMmdqMFBJdVhac1NSa0ZhNE5mOWlLSnBHenFPENTt7an5MRogENt9Si6wms4pQ2XIvqNSIgNpaBenJmXgcInhu6Nfv2U="
      CLICKHOUSE_URL: "clickhouse://default:password@clickhouse:9000"

  chproxy:
    container_name: chproxy
    build:
      context: ../apps/chproxy
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1024M
    depends_on:
      - clickhouse
    environment:
      PORT: 7123
      CLICKHOUSE_URL: http://default:password@clickhouse:8123
      BASIC_AUTH: proxy:password
    ports:
      - "7123:7123"
  clickhouse:
    image: bitnami/clickhouse:latest
    container_name: clickhouse
    environment:
      CLICKHOUSE_ADMIN_USER: default
      CLICKHOUSE_ADMIN_PASSWORD: password
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse:/bitnami/clickhouse

  clickhouse_migrator:
    container_name: clickhouse_migrator
    build:
      context: ../internal/clickhouse
      dockerfile: ./Dockerfile
    depends_on:
      - clickhouse

  s3:
    container_name: s3
    image: bitnami/minio:2025.4.3
    ports:
      - 3902:3902
      - 2903:2903
    environment:
      MINIO_ROOT_USER: minio_root_user
      MINIO_ROOT_PASSWORD: minio_root_password
      MINIO_API_PORT_NUMBER: 3902
      MINIO_CONSOLE_PORT_NUMBER: 3903
    volumes:
      - s3:/data

  api:
    container_name: api
    build:
      context: ..
      dockerfile: ./apps/api/Dockerfile.dev
    ports:
      - 8787:8787
    command:
      [
        "pnpm",
        "wrangler",
        "dev",
        "--ip=0.0.0.0",
        "--var=VERSION:1",
        "--var=DATABASE_HOST:planetscale:3900",
        "--var=DATABASE_USERNAME:unkey",
        "--var=DATABASE_PASSWORD:password",
        "--var=AGENT_URL:http://agent:8080",
        "--var=AGENT_TOKEN:agent-auth-secret",
        "--var=EMIT_METRICS_LOGS:false",
        "--var=SYNC_RATELIMIT_ON_NO_DATA:1.0",
        "--var=CLICKHOUSE_URL:http://default:password@clickhouse:8123",
        "--var=CLICKHOUSE_INSERT_URL:http://apiv2:7070",
        "--var=CLICKHOUSE_PROXY_TOKEN:chproxy-test-token-123",
      ]

    depends_on:
      - planetscale
      - agent
      - clickhouse
      - apiv2

  ctrl:
    build:
      context: ../go
      dockerfile: Dockerfile
      args:
        VERSION: "latest"
    container_name: ctrl
    command: ["run", "ctrl"]
    ports:
      - "7091:7091"
    depends_on:
      - mysql
      - metald-aio
      - otel
    environment:
      # Database configuration - use existing mysql service
      UNKEY_DATABASE_PRIMARY: "unkey:password@tcp(mysql:3306)/unkey?parseTime=true"
      UNKEY_DATABASE_HYDRA: "unkey:password@tcp(mysql:3306)/hydra?parseTime=true"

      # Control plane configuration
      UNKEY_HTTP_PORT: "7091"
      UNKEY_METALD_ADDRESS: "http://metald-aio:8080"

    # Override the entrypoint to run ctrl command

  otel:
    image: grafana/otel-lgtm:latest
    container_name: otel
    hostname: otel
    ports:
      - 3001:3000
      - 4317:4317
      - 4318:4318

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - apiv2

  dashboard:
    build:
      context: ..
      dockerfile: ./apps/dashboard/Dockerfile
    container_name: unkey-dashboard
    ports:
      - "3000:3000"
    depends_on:
      - planetscale
      - agent
    environment:
      # Database configuration
      DATABASE_HOST: "planetscale:3900"
      DATABASE_USERNAME: "unkey"
      DATABASE_PASSWORD: "password"

      # Auth configuration
      AUTH_PROVIDER: "local"

      # Agent configuration
      AGENT_URL: "http://agent:8080"
      AGENT_TOKEN: "agent-auth-secret"

      # Clickhouse configuration
      CLICKHOUSE_URL: "http://default:password@clickhouse:8123"

      # Environment
      NODE_ENV: "production"

      # Bootstrap workspace/API IDs
      UNKEY_WORKSPACE_ID: "ws_local_root"
      UNKEY_API_ID: "api_local_root_keys"

  # Unkey Deploy Services - All-in-one development container with all 4 services
  metald-aio:
    build:
      context: ../go
      dockerfile: deploy/Dockerfile.dev
    platform: linux/amd64
    container_name: metald-aio
    hostname: metald-aio
    privileged: true # Required for systemd
    volumes:
      # Mount Docker socket for metald Docker backend
      - /var/run/docker.sock:/var/run/docker.sock
      # Persistent storage for development
      - metald-aio-data:/opt
      # Systemd requires these mounts
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    ports:
      # Only expose metald port (agent already uses 8080)
      - "8090:8080" # metald
    depends_on:
      - otel
    environment:
      # Development environment
      - UNKEY_ENVIRONMENT=development
      - UNKEY_LOG_LEVEL=debug

      # Docker backend configuration
      - UNKEY_METALD_BACKEND=docker
      - UNKEY_METALD_DOCKER_HOST=unix:///var/run/docker.sock

      # Service discovery (internal container ports)
      - UNKEY_METALD_BILLING_ENDPOINT=http://localhost:8081
      - UNKEY_METALD_ASSETMANAGER_ENDPOINT=http://localhost:8083
      - UNKEY_ASSETMANAGERD_BUILDERD_ENDPOINT=http://localhost:8082
      - UNKEY_BUILDERD_ASSETMANAGER_ENDPOINT=http://localhost:8083

volumes:
  mysql:
  clickhouse:
  clickhouse-keeper:
  s3:
  metald-aio-data:
