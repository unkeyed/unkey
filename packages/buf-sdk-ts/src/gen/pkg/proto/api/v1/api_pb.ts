// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file pkg/proto/api/v1/api.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.Api
 */
export class Api extends Message<Api> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string workspace_id = 3;
   */
  workspaceId = "";

  /**
   * @generated from field: repeated string ip_whitelist = 4;
   */
  ipWhitelist: string[] = [];

  constructor(data?: PartialMessage<Api>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.Api";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ip_whitelist", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Api {
    return new Api().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Api {
    return new Api().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Api {
    return new Api().fromJsonString(jsonString, options);
  }

  static equals(a: Api | PlainMessage<Api> | undefined, b: Api | PlainMessage<Api> | undefined): boolean {
    return proto3.util.equals(Api, a, b);
  }
}

/**
 * @generated from message v1.CreateApiRequest
 */
export class CreateApiRequest extends Message<CreateApiRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<CreateApiRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateApiRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateApiRequest {
    return new CreateApiRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateApiRequest {
    return new CreateApiRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateApiRequest {
    return new CreateApiRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateApiRequest | PlainMessage<CreateApiRequest> | undefined, b: CreateApiRequest | PlainMessage<CreateApiRequest> | undefined): boolean {
    return proto3.util.equals(CreateApiRequest, a, b);
  }
}

/**
 * @generated from message v1.CreateApiResponse
 */
export class CreateApiResponse extends Message<CreateApiResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreateApiResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateApiResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateApiResponse {
    return new CreateApiResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateApiResponse {
    return new CreateApiResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateApiResponse {
    return new CreateApiResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateApiResponse | PlainMessage<CreateApiResponse> | undefined, b: CreateApiResponse | PlainMessage<CreateApiResponse> | undefined): boolean {
    return proto3.util.equals(CreateApiResponse, a, b);
  }
}

