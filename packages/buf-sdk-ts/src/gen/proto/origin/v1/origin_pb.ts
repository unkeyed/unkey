// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/origin/v1/origin.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.Origin
 */
export class Origin extends Message<Origin> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string protocol = 2;
   */
  protocol = "";

  /**
   * @generated from field: string host = 3;
   */
  host = "";

  /**
   * @generated from field: optional string name = 4;
   */
  name?: string;

  constructor(data?: PartialMessage<Origin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.Origin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Origin {
    return new Origin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Origin {
    return new Origin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Origin {
    return new Origin().fromJsonString(jsonString, options);
  }

  static equals(a: Origin | PlainMessage<Origin> | undefined, b: Origin | PlainMessage<Origin> | undefined): boolean {
    return proto3.util.equals(Origin, a, b);
  }
}

