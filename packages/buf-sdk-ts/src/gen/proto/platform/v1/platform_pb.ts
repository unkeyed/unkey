// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/platform/v1/platform.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.CreateAppRequest
 */
export class CreateAppRequest extends Message<CreateAppRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppRequest {
    return new CreateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined, b: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined): boolean {
    return proto3.util.equals(CreateAppRequest, a, b);
  }
}

/**
 * @generated from message v1.CreateAppResponse
 */
export class CreateAppResponse extends Message<CreateAppResponse> {
  /**
   * @generated from field: string app_id = 1;
   */
  appId = "";

  constructor(data?: PartialMessage<CreateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppResponse {
    return new CreateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined, b: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined): boolean {
    return proto3.util.equals(CreateAppResponse, a, b);
  }
}

/**
 * @generated from message v1.RemoveAppRequest
 */
export class RemoveAppRequest extends Message<RemoveAppRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional bool block_until_ready = 2;
   */
  blockUntilReady?: boolean;

  constructor(data?: PartialMessage<RemoveAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_until_ready", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveAppRequest {
    return new RemoveAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveAppRequest {
    return new RemoveAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveAppRequest {
    return new RemoveAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveAppRequest | PlainMessage<RemoveAppRequest> | undefined, b: RemoveAppRequest | PlainMessage<RemoveAppRequest> | undefined): boolean {
    return proto3.util.equals(RemoveAppRequest, a, b);
  }
}

/**
 * @generated from message v1.RemoveAppResponse
 */
export class RemoveAppResponse extends Message<RemoveAppResponse> {
  constructor(data?: PartialMessage<RemoveAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveAppResponse {
    return new RemoveAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveAppResponse {
    return new RemoveAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveAppResponse {
    return new RemoveAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveAppResponse | PlainMessage<RemoveAppResponse> | undefined, b: RemoveAppResponse | PlainMessage<RemoveAppResponse> | undefined): boolean {
    return proto3.util.equals(RemoveAppResponse, a, b);
  }
}

/**
 * @generated from message v1.DeployImageRequest
 */
export class DeployImageRequest extends Message<DeployImageRequest> {
  /**
   * @generated from field: string app_id = 1;
   */
  appId = "";

  /**
   * @generated from field: string docker_image = 2;
   */
  dockerImage = "";

  constructor(data?: PartialMessage<DeployImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeployImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "docker_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployImageRequest {
    return new DeployImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployImageRequest {
    return new DeployImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployImageRequest {
    return new DeployImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployImageRequest | PlainMessage<DeployImageRequest> | undefined, b: DeployImageRequest | PlainMessage<DeployImageRequest> | undefined): boolean {
    return proto3.util.equals(DeployImageRequest, a, b);
  }
}

/**
 * @generated from message v1.DeployImageResponse
 */
export class DeployImageResponse extends Message<DeployImageResponse> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  constructor(data?: PartialMessage<DeployImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeployImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployImageResponse {
    return new DeployImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployImageResponse {
    return new DeployImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployImageResponse {
    return new DeployImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployImageResponse | PlainMessage<DeployImageResponse> | undefined, b: DeployImageResponse | PlainMessage<DeployImageResponse> | undefined): boolean {
    return proto3.util.equals(DeployImageResponse, a, b);
  }
}

