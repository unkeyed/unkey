// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/gateway/v1/gateway.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Definition } from "./definition_pb.js";

/**
 * @generated from message v1.Gateway
 */
export class Gateway extends Message<Gateway> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string workspace_id = 3;
   */
  workspaceId = "";

  /**
   * @generated from field: repeated string ip_whitelits = 4;
   */
  ipWhitelits: string[] = [];

  /**
   * @generated from field: v1.Definition definition = 5;
   */
  definition?: Definition;

  constructor(data?: PartialMessage<Gateway>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.Gateway";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ip_whitelits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "definition", kind: "message", T: Definition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Gateway {
    return new Gateway().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Gateway {
    return new Gateway().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Gateway {
    return new Gateway().fromJsonString(jsonString, options);
  }

  static equals(a: Gateway | PlainMessage<Gateway> | undefined, b: Gateway | PlainMessage<Gateway> | undefined): boolean {
    return proto3.util.equals(Gateway, a, b);
  }
}

