// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/gateway/v1/authorizer.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.KeyAuth
 */
export class KeyAuth extends Message<KeyAuth> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string gateway_id = 2;
   */
  gatewayId = "";

  /**
   * @generated from field: string workspace_id = 3;
   */
  workspaceId = "";

  /**
   * @generated from field: string header_name = 4;
   */
  headerName = "";

  /**
   * @generated from field: string header_prefix = 5;
   */
  headerPrefix = "";

  constructor(data?: PartialMessage<KeyAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.KeyAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gateway_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "header_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyAuth {
    return new KeyAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyAuth {
    return new KeyAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyAuth {
    return new KeyAuth().fromJsonString(jsonString, options);
  }

  static equals(a: KeyAuth | PlainMessage<KeyAuth> | undefined, b: KeyAuth | PlainMessage<KeyAuth> | undefined): boolean {
    return proto3.util.equals(KeyAuth, a, b);
  }
}

