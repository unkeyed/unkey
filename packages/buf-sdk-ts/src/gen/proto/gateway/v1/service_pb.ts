// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/gateway/v1/service.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { OriginWeight } from "./definition_pb.js";

/**
 * @generated from message v1.CreateGatewayRequest
 */
export class CreateGatewayRequest extends Message<CreateGatewayRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string subdomain = 3;
   */
  subdomain = "";

  /**
   * @generated from field: optional bool block_until_ready = 4;
   */
  blockUntilReady?: boolean;

  constructor(data?: PartialMessage<CreateGatewayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateGatewayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subdomain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_until_ready", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGatewayRequest {
    return new CreateGatewayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGatewayRequest {
    return new CreateGatewayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGatewayRequest {
    return new CreateGatewayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGatewayRequest | PlainMessage<CreateGatewayRequest> | undefined, b: CreateGatewayRequest | PlainMessage<CreateGatewayRequest> | undefined): boolean {
    return proto3.util.equals(CreateGatewayRequest, a, b);
  }
}

/**
 * @generated from message v1.CreateGatewayResponse
 */
export class CreateGatewayResponse extends Message<CreateGatewayResponse> {
  /**
   * @generated from field: string gateway_id = 1;
   */
  gatewayId = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<CreateGatewayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateGatewayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gateway_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGatewayResponse {
    return new CreateGatewayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGatewayResponse {
    return new CreateGatewayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGatewayResponse {
    return new CreateGatewayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGatewayResponse | PlainMessage<CreateGatewayResponse> | undefined, b: CreateGatewayResponse | PlainMessage<CreateGatewayResponse> | undefined): boolean {
    return proto3.util.equals(CreateGatewayResponse, a, b);
  }
}

/**
 * @generated from message v1.RemoveGatewayRequest
 */
export class RemoveGatewayRequest extends Message<RemoveGatewayRequest> {
  /**
   * @generated from field: string gateway_id = 1;
   */
  gatewayId = "";

  /**
   * @generated from field: optional bool block_until_ready = 2;
   */
  blockUntilReady?: boolean;

  constructor(data?: PartialMessage<RemoveGatewayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveGatewayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gateway_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_until_ready", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveGatewayRequest {
    return new RemoveGatewayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveGatewayRequest {
    return new RemoveGatewayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveGatewayRequest {
    return new RemoveGatewayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveGatewayRequest | PlainMessage<RemoveGatewayRequest> | undefined, b: RemoveGatewayRequest | PlainMessage<RemoveGatewayRequest> | undefined): boolean {
    return proto3.util.equals(RemoveGatewayRequest, a, b);
  }
}

/**
 * @generated from message v1.RemoveGatewayResponse
 */
export class RemoveGatewayResponse extends Message<RemoveGatewayResponse> {
  constructor(data?: PartialMessage<RemoveGatewayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveGatewayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveGatewayResponse {
    return new RemoveGatewayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveGatewayResponse {
    return new RemoveGatewayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveGatewayResponse {
    return new RemoveGatewayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveGatewayResponse | PlainMessage<RemoveGatewayResponse> | undefined, b: RemoveGatewayResponse | PlainMessage<RemoveGatewayResponse> | undefined): boolean {
    return proto3.util.equals(RemoveGatewayResponse, a, b);
  }
}

/**
 * @generated from message v1.AddRouteRequest
 */
export class AddRouteRequest extends Message<AddRouteRequest> {
  /**
   * @generated from field: string gateway_id = 1;
   */
  gatewayId = "";

  /**
   * @generated from field: string method = 2;
   */
  method = "";

  /**
   * Path match in the shape of `/v1/*` or `/v*\/hello`
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: optional string authorizer_id = 4;
   */
  authorizerId?: string;

  /**
   * @generated from field: repeated v1.OriginWeight origins = 5;
   */
  origins: OriginWeight[] = [];

  constructor(data?: PartialMessage<AddRouteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddRouteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gateway_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "authorizer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "origins", kind: "message", T: OriginWeight, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddRouteRequest {
    return new AddRouteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddRouteRequest {
    return new AddRouteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddRouteRequest {
    return new AddRouteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddRouteRequest | PlainMessage<AddRouteRequest> | undefined, b: AddRouteRequest | PlainMessage<AddRouteRequest> | undefined): boolean {
    return proto3.util.equals(AddRouteRequest, a, b);
  }
}

/**
 * @generated from message v1.AddRouteResponse
 */
export class AddRouteResponse extends Message<AddRouteResponse> {
  /**
   * @generated from field: string route_id = 1;
   */
  routeId = "";

  constructor(data?: PartialMessage<AddRouteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddRouteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "route_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddRouteResponse {
    return new AddRouteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddRouteResponse {
    return new AddRouteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddRouteResponse {
    return new AddRouteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddRouteResponse | PlainMessage<AddRouteResponse> | undefined, b: AddRouteResponse | PlainMessage<AddRouteResponse> | undefined): boolean {
    return proto3.util.equals(AddRouteResponse, a, b);
  }
}

