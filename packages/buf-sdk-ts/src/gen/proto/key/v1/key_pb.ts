// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file proto/key/v1/key.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message v1.Key
 */
export class Key extends Message<Key> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Either api_id or gateway_id must be present
   *
   * @generated from oneof v1.Key.belongs
   */
  belongs: {
    /**
     * @generated from field: string api_id = 2;
     */
    value: string;
    case: "apiId";
  } | {
    /**
     * @generated from field: string key_auth_id = 3;
     */
    value: string;
    case: "keyAuthId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string workspace_id = 4;
   */
  workspaceId = "";

  /**
   * @generated from field: optional string name = 5;
   */
  name?: string;

  /**
   * @generated from field: string hash = 6;
   */
  hash = "";

  /**
   * @generated from field: string start = 7;
   */
  start = "";

  /**
   * @generated from field: optional string owner_id = 8;
   */
  ownerId?: string;

  /**
   * @generated from field: optional google.protobuf.Struct meta = 9;
   */
  meta?: Struct;

  /**
   * @generated from field: int64 created_at = 10;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: optional int64 expires = 11;
   */
  expires?: bigint;

  /**
   * @generated from field: optional v1.Ratelimit ratelimit = 12;
   */
  ratelimit?: Ratelimit;

  /**
   * @generated from field: optional string for_workspace_id = 13;
   */
  forWorkspaceId?: string;

  /**
   * @generated from field: optional int32 remaining = 14;
   */
  remaining?: number;

  constructor(data?: PartialMessage<Key>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.Key";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "belongs" },
    { no: 3, name: "key_auth_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "belongs" },
    { no: 4, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "meta", kind: "message", T: Struct, opt: true },
    { no: 10, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "expires", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 12, name: "ratelimit", kind: "message", T: Ratelimit, opt: true },
    { no: 13, name: "for_workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Key {
    return new Key().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJsonString(jsonString, options);
  }

  static equals(a: Key | PlainMessage<Key> | undefined, b: Key | PlainMessage<Key> | undefined): boolean {
    return proto3.util.equals(Key, a, b);
  }
}

/**
 * @generated from message v1.Ratelimit
 */
export class Ratelimit extends Message<Ratelimit> {
  /**
   * `fast` or `consistent`
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int32 refill_rate = 3;
   */
  refillRate = 0;

  /**
   * @generated from field: int32 refill_interval = 4;
   */
  refillInterval = 0;

  constructor(data?: PartialMessage<Ratelimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.Ratelimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "refill_rate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "refill_interval", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ratelimit {
    return new Ratelimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ratelimit {
    return new Ratelimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ratelimit {
    return new Ratelimit().fromJsonString(jsonString, options);
  }

  static equals(a: Ratelimit | PlainMessage<Ratelimit> | undefined, b: Ratelimit | PlainMessage<Ratelimit> | undefined): boolean {
    return proto3.util.equals(Ratelimit, a, b);
  }
}

