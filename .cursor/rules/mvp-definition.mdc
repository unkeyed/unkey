---
description: 
globs: 
alwaysApply: true
---
# MVP Definition Guidelines

## Core Principles

1. Every change, regardless of size, starts with an MVP definition
2. Keep scope minimal and focused - avoid feature creep
3. Prefer simple, working implementations over perfect solutions
4. Use test-driven development
5. Follow iterative approval process

## Required Sections

Every MVP definition must include:

```markdown
# MVP Definition: taskName v1

## Goal
Clear, single-sentence description of what this MVP aims to achieve.

## Input
```typescript
// Define exact input type using TypeScript/Zod
type Input = {
  // required fields
};
```

## Core Steps
1. Numbered list of key implementation steps
2. Include code snippets where helpful
3. Keep steps focused and minimal

## Output Schema
```typescript
// Define exact output type using Zod schemas
const OutputSchema = z.object({
  // schema definition
});
```

## Error Handling
- List specific error cases to handle
- Define which errors use AbortTaskRunError
- Specify retry strategies if applicable

## Testing (`_test-file.ts`)
1. Define key test cases:
   - Basic success case
   - Error cases
   - Edge cases
   - Validation checks

## Implementation Notes
- Technical considerations
- Dependencies
- Reference relevant .cursor/rules
- Architecture decisions

## âœ… Success Criteria
1. List of specific, testable criteria
2. Include both functional and non-functional requirements
3. Must be verifiable through tests

## Dependencies
- List required external services
- Environment variables
- Internal dependencies

## Next Steps
1. Create MVP implementation
2. Implement test suite
3. Iterate on implementation
4. Get user approval via commits
```

## Workflow

1. **Initial Discussion**
   - User starts new session
   - Discuss proposed changes
   - Gather requirements

2. **MVP Definition**
   - Create MVP .md file in appropriate location
   - Keep scope minimal
   - Include all required sections
   - Reference relevant .cursor/rules

3. **Approval Phase 1**
   - User reviews MVP definition
   - User commits MVP .md file
   - This marks the MVP spec as approved

4. **Implementation Phase**
   - Create test file first
   - Implement minimal version
   - Focus on making tests pass
   - Follow TDD principles

5. **Approval Phase 2**
   - User reviews implementation
   - User commits implementation
   - This marks the base implementation as approved

6. **Iteration Phase**
   - Run tests
   - Fix issues
   - Refine implementation
   - Keep scope contained to MVP

7. **Final Approval**
   - All tests pass
   - User reviews final implementation
   - User commits final version

## Best Practices

1. **Scope Control**
   - If new requirements emerge, create new MVP
   - Don't expand scope of current MVP
   - Create follow-up tasks for improvements

2. **Testing Focus**
   - Tests should verify MVP requirements
   - Include both happy and error paths
   - Keep tests focused on MVP scope

3. **References**
   - Reference relevant .cursor/rules. Always reference them so that cursor will use them when working on the implementation
   - Document key decisions
   - Keep implementation notes current

4. **Versioning**
   - Start with v1
   - Create new MVP for major changes
   - Use semantic versioning

5. **Challenge Requirements**
   - Challenge requirements to agree on the most barebones version of an MVP
   - We want to avoid scope creep at all costs and optimize for shipping things

## Example Structure

See examples in:
- `apps/billing/src/trigger/glossary/research/keywords/docs/mvp-serper-search.md`
- `apps/billing/src/trigger/glossary/research/keywords/docs/mvp-enrich-keywords.md`
- `apps/billing/src/trigger/glossary/research/keywords/docs/mvp-related-keywords.md`
- `apps/billing/src/trigger/glossary/research/keywords/docs/mvp-serper-autosuggest.md`