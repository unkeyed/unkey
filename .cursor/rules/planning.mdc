---
description: 
globs: todos/**/*.md
alwaysApply: false
---
 # Planning Documentation Guidelines

## Core Principles

1. **Avoid Nesting**: Follow @avoid-nesting.mdc guidelines
   - Use early returns
   - Avoid else statements
   - Use guard clauses
   - Extract complex logic into separate functions

2. **Error Handling**: Follow @try-catch-typescript.mdc guidelines
   - Use the `tryCatch` utility for async operations
   - Avoid nested try/catch blocks
   - Return Result types for error handling
   - Keep error handling flat and explicit

3. **Type Safety**
   - Let Trigger.dev infer types from task definitions
   - Avoid explicit schema definitions when Trigger.dev can infer them
   - Use Zod schemas only for input validation when necessary

## Implementation Guidelines

### Task Definitions
```typescript
// ✅ DO: Let Trigger infer return types
export const myTask = task({
  id: "my-task",
  run: async (payload) => {
    return {
      data: payload.data,
      processed: true
    };
  }
});

// ❌ DON'T: Define explicit return schemas
const resultSchema = z.object({ ... }); // Unnecessary
```

### Error Handling
```typescript
// ✅ DO: Use tryCatch utility
const { data, error } = await tryCatch(asyncOperation());
if (error) return handleError(error);

// ❌ DON'T: Use nested try/catch
try {
  const result = await asyncOperation();
  try {
    // More nested operations
  } catch (err) {
    // Nested error handling
  }
} catch (error) {
  // Error handling
}
```

### Testing
```typescript
// ✅ DO: Use flat validation
const validateResult = (result: TaskResult) => {
  if (!result.ok) return false;
  return checkConditions(result);
};

// ❌ DON'T: Nest validations
if (result.ok) {
  if (result.data) {
    if (result.data.valid) {
      // Nested validation
    }
  }
}
```

## Best Practices

1. **Planning Structure**
   - Break down tasks into clear, atomic steps
   - Define input/output types upfront
   - List dependencies and prerequisites
   - Include test cases and validation criteria

2. **Documentation**
   - Document expected behavior
   - Include example usage
   - List potential error cases
   - Provide troubleshooting steps

3. **Testing**
   - Define test cases before implementation
   - Include edge cases and error scenarios
   - Use consistent validation patterns
   - Keep test structure flat and readable