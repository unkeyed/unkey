---
description: Guidelines for avoiding excessive nesting in code
globs: *tsx,*ts
alwaysApply: false
---
# Avoid Excessive Nesting in Code

## Core Principles

1. **Early Returns**: Always use early returns to handle edge cases and avoid nesting.
2. **Avoid `else` Statements**: Prefer early returns over else blocks to improve readability and type inference.
3. **Guard Clauses**: Place validation at the beginning of functions to exit early.
4. **Extract Functions**: Break complex logic into smaller, focused functions.
5. **Flatten Conditionals**: Use logical operators and optional chaining to flatten nested conditions.

## TypeScript Benefits

Using early returns significantly improves TypeScript type inference:

```typescript
// ❌ Poor type inference with nesting
function processUser(user: User | null) {
  if (user) {
    // TypeScript knows user is User here
    doSomething(user.name);
  } else {
    // Have to handle the null case
    handleNullUser();
  }
}

// ✅ Better type inference with early return
function processUser(user: User | null) {
  if (!user) return handleNullUser();
  
  // TypeScript knows user is User in the entire rest of the function
  doSomething(user.name);
  updateUser(user);
  return user;
}
```

## Examples

### ❌ Avoid Deep Nesting

```typescript
function processData(data) {
  if (data) {
    if (data.items) {
      if (data.items.length > 0) {
        for (const item of data.items) {
          if (item.isValid) {
            // Process item
          }
        }
      }
    }
  }
}
```

### ✅ Use Early Returns

```typescript
function processData(data) {
  if (!data) return;
  if (!data.items) return;
  if (data.items.length === 0) return;
  
  for (const item of data.items) {
    if (!item.isValid) continue;
    // Process item
  }
}
```

### ❌ Avoid Nested Error Handling

```typescript
function fetchData() {
  try {
    const response = fetch('/api/data');
    try {
      const data = response.json();
      try {
        processData(data);
      } catch (processError) {
        handleProcessError(processError);
      }
    } catch (parseError) {
      handleParseError(parseError);
    }
  } catch (fetchError) {
    handleFetchError(fetchError);
  }
}
```

### ✅ Extract Functions for Error Handling

```typescript
async function fetchData() {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    return processData(data);
  } catch (error) {
    handleError(error);
  }
}

function handleError(error) {
  if (error instanceof FetchError) return handleFetchError(error);
  if (error instanceof ParseError) return handleParseError(error);
  return handleGenericError(error);
}
```

### ❌ Avoid Nested Conditionals with `else`

```typescript
function validateUser(user: User) {
  if (user.isActive) {
    if (user.hasPermission) {
      if (user.profile) {
        return true;
      } else {
        throw new Error("Missing profile");
      }
    } else {
      throw new Error("No permission");
    }
  } else {
    throw new Error("User not active");
  }
}
```

### ✅ Use Early Returns with Throws

```typescript
function validateUser(user: User) {
  if (!user.isActive) throw new Error("User not active");
  if (!user.hasPermission) throw new Error("No permission");
  if (!user.profile) throw new Error("Missing profile");
  
  return true;
}
```

## Benefits

1. **Readability**: Code is easier to read and understand at a glance.
2. **Maintainability**: Simpler code structure is easier to modify and debug.
3. **Reduced Cognitive Load**: Fewer levels of indentation mean less mental tracking.
4. **Better Error Handling**: Clearer error paths and more explicit handling.
5. **Improved Type Inference**: TypeScript can better infer types throughout the function body.

## When to Apply

Apply these principles when:
- A function has more than 1-2 levels of nesting
- You find yourself writing `else` statements
- Error handling creates multiple levels of try/catch
- Conditional logic becomes difficult to follow
- A function grows beyond 20-30 lines
- You need to maintain type safety throughout a function