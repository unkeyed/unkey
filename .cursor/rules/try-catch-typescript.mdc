---
description: Use a try/catch wrapper to avoid unnecessary indentations
globs: *.ts
alwaysApply: true
---
# TypeScript Async Try/Catch Wrapper

This utility provides a clean way to handle errors in asynchronous TypeScript code using a `Result` type. It wraps promises to return either a success value or an error.

## Implementation

```typescript
type Success<T> = {
  data: T;
  error: null;
};

type Failure<E> = {
  data: null;
  error: E;
};

type Result<T, E = Error> = Success<T> | Failure<E>;

export async function tryCatch<T, E = Error>(
  promise: Promise<T>
): Promise<Result<T, E>> {
  try {
    const data = await promise;
    return { data, error: null };
  } catch (error) {
    return { data: null, error: error as E };
  }
}

## How It Works
`Result<T, E>`: A union type where Success holds the resolved data and Failure holds the error. The default error type is Error.

`tryCatch`: Takes a promise, awaits it, and returns a Promise<Result> with either { data: T, error: null } or { data: null, error: E }.

Benefit: This keeps error handling concise and type-safe for async operations.

## Usage

Fetch Example

```typescript
const result = await tryCatch(fetch("https://api.example.com/data").then(res => res.json()));
if (result.error) {
console.error("Fetch failed:", result.error);
//                                       ^? type is inferred
return;
}
console.log("Data:", result.data);
//                            ^? type is inferred
```

Promise Rejection Example
```typescript

const riskyPromise = tryCatch(Promise.reject(new Error("Oops!")));
const result = await riskyPromise();
if (result.error) {
console.error("Error:", result.error.message); // "Oops!"
}
console.log("Success:", result.data);
```

## Benefits
- Type Safety: TypeScript narrows data or error based on if (result.error) checks.
- Simplicity: Replaces verbose try/catch blocks for promises.
- Flexibility: Customize the error type E (defaults to Error).

Notes
This version is async-only. For synchronous code, youâ€™d need a separate wrapper.

The error as E cast assumes the caught error fits the type E; refine it if you need stricter typing.

