---
description: 
globs: *tsx,*.ts
alwaysApply: false
---
# TypeScript Options Bags Pattern

## Core Principles
1. Always use options bags for functions with 2+ parameters
2. Always define explicit interfaces for options
3. Make options sequential and logical in their order
4. Consider optional vs required parameters carefully

## Implementation

```typescript
// ❌ Bad: Multiple parameters
function createUser(name: string, email: string, age?: number) {
  // ...
}

// ✅ Good: Options bag with interface
interface CreateUserOptions {
  name: string;
  email: string;
  age?: number;
}

function createUser(options: CreateUserOptions) {
  // ...
}
```

## Guidelines

### 1. Interface Naming
- Name interfaces as `[FunctionName]Options`
- Keep them close to the function they belong to
- Export them if the function is exported

```typescript
export interface FetchUsersOptions {
  limit: number;
  offset?: number;
  includeInactive?: boolean;
}

export async function fetchUsers(options: FetchUsersOptions) {
  // ...
}
```

### 2. Default Values
Use destructuring with defaults:

```typescript
interface SortOptions {
  direction?: 'asc' | 'desc';
  field?: string;
  nullsFirst?: boolean;
}

function sort({ 
  direction = 'asc',
  field = 'id',
  nullsFirst = false 
}: SortOptions) {
  // ...
}
```

### 3. Required vs Optional
- Make parameters required by default
- Only make them optional if there's a clear use case
- Document why a parameter is optional

```typescript
interface ValidationOptions {
  // Required: Core validation rules
  schema: Schema;
  data: unknown;
  
  // Optional: Configurable behavior
  strict?: boolean;  // Controls strict mode validation
  context?: Record<string, unknown>;  // Additional context
}
```

### 4. Nested Options
For complex APIs, nest related options:

```typescript
interface RequestOptions {
  url: string;
  method: 'GET' | 'POST' | 'PUT' | 'DELETE';
  
  // Nested related options
  auth?: {
    token: string;
    type: 'Bearer' | 'Basic';
  };
  
  cache?: {
    ttl: number;
    strategy: 'memory' | 'redis';
  };
}
```

### 5. Evolution & Backwards Compatibility
Options bags make it easier to evolve APIs:

```typescript
// Version 1
interface SearchOptions {
  query: string;
}

// Version 2 - backwards compatible
interface SearchOptions {
  query: string;
  filters?: {    // New optional parameter
    category?: string;
    price?: number;
  };
}
```

## Benefits
1. Self-documenting named parameters
2. Easy to add new parameters without breaking changes
3. Better IDE support with parameter hints
4. Clearer function signatures
5. Simplified optional parameters
6. Better maintainability

## When NOT to Use
1. Single parameter functions
2. Performance-critical code paths where object allocation overhead matters
3. Very simple utility functions

## Testing
Options bags make testing more explicit:

```typescript
// ✅ Clear what's being tested
test('search with filters', () => {
  const result = search({
    query: 'test',
    filters: {
      category: 'books'
    }
  });
});

// ❌ Less clear with positional args
test('search with filters', () => {
  const result = search('test', undefined, 'books');
});
```