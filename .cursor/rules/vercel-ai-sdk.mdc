---
description: This rule is helpful when we need to make LLM calls to OpenAI, Gemini, DeepSeek. or whatever. We're using The Vercel AI SDK as an abstraction layer.
globs: 
alwaysApply: false
---
# Vercel AI SDK Usage Guidelines

## Core Principles

1. Always use `generateObject` for structured outputs
2. Always specify output type when using array schemas
3. Always use proper type imports
4. Follow consistent error handling patterns

## Implementation

### Imports

```typescript
// AI SDK imports
import { generateObject } from "ai";
import { openai } from "@ai-sdk/openai";
// OR for Gemini
import { google } from "@lib/google";

// Schema validation
import { z } from "zod";
```

### Basic Usage Pattern

```typescript
const result = await generateObject({
  model: openai("gpt-4-turbo-preview"), // or google("gemini-pro")
  system: "System prompt here",
  prompt: "User prompt here",
  schema: MyZodSchema,
});

// Access result
const data = result.object;
```

### Array Output Pattern

When expecting an array output, ALWAYS:
1. Set `output: "array"` in options
2. Access first element of result.object

```typescript
// ✅ Correct array handling
const result = await generateObject({
  model: openai("gpt-4-turbo-preview"),
  system: "System prompt here",
  prompt: "User prompt here",
  schema: z.array(ItemSchema),
  output: "array" // Required for array schemas
});

// IMPORTANT: Always access [0] for array results
const items = result.object[0];

// ❌ Incorrect - missing output: "array"
const wrongResult = await generateObject({
  schema: z.array(ItemSchema),
  // ... missing output: "array"
});

// ❌ Incorrect - not accessing [0]
const wrongItems = wrongResult.object; // Will be nested array
```

### Error Handling

```typescript
try {
  const result = await generateObject({
    // ... config
  });
  
  if (!result.object) {
    throw new Error("Failed to generate object");
  }
  
  return result.object[0]; // For arrays
} catch (error) {
  throw new AbortTaskRunError(
    `LLM generation failed: ${error instanceof Error ? error.message : String(error)}`
  );
}
```

## Model Selection

### OpenAI Models
```typescript
model: openai("gpt-4-turbo-preview") // Latest GPT-4
model: openai("gpt-4-0125-preview")  // Specific version
model: openai("gpt-3.5-turbo")       // GPT-3.5
```

### Google Models
```typescript
model: google("gemini-pro")          // Standard Gemini
model: google("gemini-pro-vision")   // Vision model
```

## Best Practices

1. **Schema Definition**:
   ```typescript
   const MySchema = z.object({
     field1: z.string(),
     field2: z.number(),
     nested: z.array(z.string())
   });
   ```

2. **System Prompts**:
   - Keep them concise and role-focused
   - Include output format expectations
   - Specify any constraints

3. **User Prompts**:
   - Structure data clearly
   - Include relevant context
   - Be explicit about expected output format

4. **Type Safety**:
   ```typescript
   type MyType = z.infer<typeof MySchema>;
   const result: MyType = result.object[0]; // For arrays
   ```

## Common Gotchas

1. Missing `output: "array"` when using array schemas
2. Not accessing `result.object[0]` for array results
3. Forgetting to handle potential undefined results
4. Not properly typing the result based on schema

## Example Implementation

```typescript
const KeywordSchema = z.array(z.object({
  keyword: z.string(),
  confidence: z.number(),
  context: z.string()
}));

const result = await generateObject({
  model: openai("gpt-4-turbo-preview"),
  system: "You are a keyword analysis expert.",
  prompt: `Analyze these results: ${data}`,
  schema: KeywordSchema,
  output: "array" // Required for array schema
});

// Type-safe access to array result
const keywords = result.object[0];
``` 